
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e8  080089e8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f0  080089f0  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080089f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068b8  200000dc  08008ad4  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006994  08008ad4  00026994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba10  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef1  00000000  00000000  0003bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0003fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00041200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027847  00000000  00000000  00042860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b45  00000000  00000000  0006a0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55c0  00000000  00000000  00080bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001661ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e98  00000000  00000000  00166200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800865c 	.word	0x0800865c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	0800865c 	.word	0x0800865c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000f8 	.word	0x200000f8
 80005a8:	2000014c 	.word	0x2000014c

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e6:	e000      	b.n	80006ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LL_DMA_SetDataTransferDirection+0x44>)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800072c:	4908      	ldr	r1, [pc, #32]	; (8000750 <LL_DMA_SetDataTransferDirection+0x44>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	440b      	add	r3, r1
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	440b      	add	r3, r1
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4313      	orrs	r3, r2
 8000740:	600b      	str	r3, [r1, #0]
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	08008928 	.word	0x08008928

08000754 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LL_DMA_SetMode+0x44>)
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <LL_DMA_SetMode+0x44>)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	440b      	add	r3, r1
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	600b      	str	r3, [r1, #0]
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	08008928 	.word	0x08008928

0800079c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80007bc:	4908      	ldr	r1, [pc, #32]	; (80007e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	440b      	add	r3, r1
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	440b      	add	r3, r1
 80007ca:	4619      	mov	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	08008928 	.word	0x08008928

080007e4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LL_DMA_SetMemoryIncMode+0x44>)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000804:	4908      	ldr	r1, [pc, #32]	; (8000828 <LL_DMA_SetMemoryIncMode+0x44>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	440b      	add	r3, r1
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	440b      	add	r3, r1
 8000812:	4619      	mov	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	600b      	str	r3, [r1, #0]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	08008928 	.word	0x08008928

0800082c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <LL_DMA_SetPeriphSize+0x44>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800084c:	4908      	ldr	r1, [pc, #32]	; (8000870 <LL_DMA_SetPeriphSize+0x44>)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	440b      	add	r3, r1
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	440b      	add	r3, r1
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	600b      	str	r3, [r1, #0]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	08008928 	.word	0x08008928

08000874 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LL_DMA_SetMemorySize+0x44>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000894:	4908      	ldr	r1, [pc, #32]	; (80008b8 <LL_DMA_SetMemorySize+0x44>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	440b      	add	r3, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	440b      	add	r3, r1
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	600b      	str	r3, [r1, #0]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	08008928 	.word	0x08008928

080008bc <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	440b      	add	r3, r1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	440b      	add	r3, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08008928 	.word	0x08008928

08000904 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LL_DMA_SetChannelSelection+0x44>)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000924:	4908      	ldr	r1, [pc, #32]	; (8000948 <LL_DMA_SetChannelSelection+0x44>)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	440b      	add	r3, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	440b      	add	r3, r1
 8000932:	4619      	mov	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	600b      	str	r3, [r1, #0]
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	08008928 	.word	0x08008928

0800094c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <LL_DMA_DisableFifoMode+0x3c>)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <LL_DMA_DisableFifoMode+0x3c>)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	440a      	add	r2, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	4611      	mov	r1, r2
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	440a      	add	r2, r1
 8000974:	f023 0304 	bic.w	r3, r3, #4
 8000978:	6153      	str	r3, [r2, #20]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	08008928 	.word	0x08008928

0800098c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <LL_RCC_HSE_Enable+0x1c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <LL_RCC_HSE_Enable+0x1c>)
 8000996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <LL_RCC_HSE_IsReady+0x24>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <LL_RCC_SetSysClkSource+0x24>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f023 0203 	bic.w	r2, r3, #3
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <LL_RCC_SetSysClkSource+0x24>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	608b      	str	r3, [r1, #8]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40023800 	.word	0x40023800

080009fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LL_RCC_GetSysClkSource+0x18>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f003 030c 	and.w	r3, r3, #12
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a28:	4904      	ldr	r1, [pc, #16]	; (8000a3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	608b      	str	r3, [r1, #8]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40023800 	.word	0x40023800

08000a40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000a50:	4904      	ldr	r1, [pc, #16]	; (8000a64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800

08000a68 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800

08000a90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <LL_RCC_PLL_Enable+0x1c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <LL_RCC_PLL_Enable+0x1c>)
 8000a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <LL_RCC_PLL_IsReady+0x24>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	68f9      	ldr	r1, [r7, #12]
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	4311      	orrs	r1, r2
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	0192      	lsls	r2, r2, #6
 8000af8:	430a      	orrs	r2, r1
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	ffbf8000 	.word	0xffbf8000

08000b24 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40023800 	.word	0x40023800

08000b54 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40023800 	.word	0x40023800

08000b84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_FLASH_SetLatency+0x24>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f023 0207 	bic.w	r2, r3, #7
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_FLASH_SetLatency+0x24>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_FLASH_GetLatency+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0307 	and.w	r3, r3, #7
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40007000 	.word	0x40007000

08000c20 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f023 0210 	bic.w	r2, r3, #16
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	605a      	str	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c78:	f023 0307 	bic.w	r3, r3, #7
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60da      	str	r2, [r3, #12]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	615a      	str	r2, [r3, #20]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	619a      	str	r2, [r3, #24]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	4013      	ands	r3, r2
 8000d72:	041a      	lsls	r2, r3, #16
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	619a      	str	r2, [r3, #24]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc88 	bl	80006be <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf1      	blt.n	8000da0 <_write+0x12>
	}
	return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b0a0      	sub	sp, #128	; 0x80
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fc2f 	bl	8001630 <HAL_Init>

  /* USER CODE BEGIN Init */
  eStatusPlayMp3 = ON;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <main+0xe0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f87c 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f9de 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000de0:	f000 f9c4 	bl	800116c <MX_DMA_Init>
  MX_SPI3_Init();
 8000de4:	f000 f8c0 	bl	8000f68 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000de8:	f000 f940 	bl	800106c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000dec:	f000 f96e 	bl	80010cc <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <main+0xe4>)
 8000df2:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000df6:	461d      	mov	r5, r3
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 feaf 	bl	8002b6e <osThreadCreate>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <main+0xe8>)
 8000e14:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, StartTask02, osPriorityNormal, 0, 128);
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <main+0xec>)
 8000e18:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fe9c 	bl	8002b6e <osThreadCreate>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <main+0xf0>)
 8000e3a:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(blinkTaskHandle);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(sim7600Error, sim7600ErrorTask, osPriorityNormal, 0, 128);
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <main+0xf4>)
 8000e3e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000e42:	461d      	mov	r5, r3
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sim7600ErrorHandle = osThreadCreate(osThread(sim7600Error), NULL);
 8000e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fe89 	bl	8002b6e <osThreadCreate>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <main+0xf8>)
 8000e60:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(sim7600ErrorHandle);

  osMessageQDef(rxUASRTQueue, 20, uint8_t);
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <main+0xfc>)
 8000e64:	f107 041c 	add.w	r4, r7, #28
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart_rx_dma_queue_id = osMessageCreate(osMessageQ(rxUASRTQueue), NULL);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 ff9d 	bl	8002db4 <osMessageCreate>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <main+0x100>)
 8000e7e:	6013      	str	r3, [r2, #0]

  osThreadDef(usart_rx_dma, usart_rx_dmaTask, osPriorityHigh, 0, 128);
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <main+0x104>)
 8000e82:	463c      	mov	r4, r7
 8000e84:	461d      	mov	r5, r3
 8000e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_rx_dmaHandle = osThreadCreate(osThread(usart_rx_dma), NULL);
 8000e92:	463b      	mov	r3, r7
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fe69 	bl	8002b6e <osThreadCreate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <main+0x108>)
 8000ea0:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(usart_rx_dmaHandle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ea2:	f001 fe5d 	bl	8002b60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0xde>
 8000ea8:	2000410c 	.word	0x2000410c
 8000eac:	080086ac 	.word	0x080086ac
 8000eb0:	200040f4 	.word	0x200040f4
 8000eb4:	080086c8 	.word	0x080086c8
 8000eb8:	200040f8 	.word	0x200040f8
 8000ebc:	080086e4 	.word	0x080086e4
 8000ec0:	20004100 	.word	0x20004100
 8000ec4:	08008700 	.word	0x08008700
 8000ec8:	20004118 	.word	0x20004118
 8000ecc:	08008710 	.word	0x08008710
 8000ed0:	20004114 	.word	0x20004114

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f7ff fe6b 	bl	8000bb4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000ede:	bf00      	nop
 8000ee0:	f7ff fe7c 	bl	8000bdc <LL_FLASH_GetLatency>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d1fa      	bne.n	8000ee0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000eea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eee:	f7ff fe83 	bl	8000bf8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000ef2:	f7ff fd4b 	bl	800098c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff fd58 	bl	80009ac <LL_RCC_HSE_IsReady>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1fa      	bne.n	8000ef8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 144, LL_RCC_PLLP_DIV_2);
 8000f02:	2300      	movs	r3, #0
 8000f04:	2290      	movs	r2, #144	; 0x90
 8000f06:	2104      	movs	r1, #4
 8000f08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f0c:	f7ff fde4 	bl	8000ad8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f10:	f7ff fdbe 	bl	8000a90 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f14:	bf00      	nop
 8000f16:	f7ff fdcb 	bl	8000ab0 <LL_RCC_PLL_IsReady>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1fa      	bne.n	8000f16 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fd79 	bl	8000a18 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000f26:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f2a:	f7ff fd89 	bl	8000a40 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f32:	f7ff fd99 	bl	8000a68 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff fd4c 	bl	80009d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f3c:	bf00      	nop
 8000f3e:	f7ff fd5d 	bl	80009fc <LL_RCC_GetSysClkSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d1fa      	bne.n	8000f3e <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(144000000);
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <SystemClock_Config+0x90>)
 8000f4a:	f001 fdcf 	bl	8002aec <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fa28 	bl	80013a4 <HAL_InitTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f5a:	f000 f9f2 	bl	8001342 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08954400 	.word	0x08954400

08000f68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 f962 	bl	8007240 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000f8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f90:	f7ff fde0 	bl	8000b54 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f7ff fdc5 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000f9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4829      	ldr	r0, [pc, #164]	; (8001060 <MX_SPI3_Init+0xf8>)
 8000fba:	f001 f856 	bl	800206a <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	4828      	ldr	r0, [pc, #160]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000fc4:	f7ff fc9e 	bl	8000904 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	2105      	movs	r1, #5
 8000fcc:	4825      	ldr	r0, [pc, #148]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000fce:	f7ff fb9d 	bl	800070c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	4823      	ldr	r0, [pc, #140]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000fd8:	f7ff fc70 	bl	80008bc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000fe2:	f7ff fbb7 	bl	8000754 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	481e      	ldr	r0, [pc, #120]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000fec:	f7ff fbd6 	bl	800079c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8000ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <MX_SPI3_Init+0xfc>)
 8000ff8:	f7ff fbf4 	bl	80007e4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2105      	movs	r1, #5
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <MX_SPI3_Init+0xfc>)
 8001002:	f7ff fc13 	bl	800082c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001006:	2200      	movs	r2, #0
 8001008:	2105      	movs	r1, #5
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <MX_SPI3_Init+0xfc>)
 800100c:	f7ff fc32 	bl	8000874 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001010:	2105      	movs	r1, #5
 8001012:	4814      	ldr	r0, [pc, #80]	; (8001064 <MX_SPI3_Init+0xfc>)
 8001014:	f7ff fc9a 	bl	800094c <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800101c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001020:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001040:	230a      	movs	r3, #10
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4619      	mov	r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <MX_SPI3_Init+0x100>)
 800104c:	f001 f9dd 	bl	800240a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_SPI3_Init+0x100>)
 8001054:	f7ff fde4 	bl	8000c20 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3740      	adds	r7, #64	; 0x40
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020800 	.word	0x40020800
 8001064:	40026000 	.word	0x40026000
 8001068:	40003c00 	.word	0x40003c00

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff fd67 	bl	8000b54 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <MX_TIM3_Init+0x5c>)
 800109e:	f001 fa41 	bl	8002524 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_TIM3_Init+0x5c>)
 80010a4:	f7ff fdcf 	bl	8000c46 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80010a8:	2100      	movs	r1, #0
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM3_Init+0x5c>)
 80010ac:	f7ff fddb 	bl	8000c66 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_TIM3_Init+0x5c>)
 80010b4:	f7ff fdec 	bl	8000c90 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM3_Init+0x5c>)
 80010ba:	f7ff fdfc 	bl	8000cb6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80010f6:	2010      	movs	r0, #16
 80010f8:	f7ff fd44 	bl	8000b84 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fd11 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001118:	2307      	movs	r3, #7
 800111a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <MX_USART1_UART_Init+0x98>)
 8001122:	f000 ffa2 	bl	800206a <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001126:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800112a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001138:	230c      	movs	r3, #12
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 800114c:	f001 fc4e 	bl	80029ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001152:	f7ff fdd0 	bl	8000cf6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART1_UART_Init+0x9c>)
 8001158:	f7ff fdbd 	bl	8000cd6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020000 	.word	0x40020000
 8001168:	40011000 	.word	0x40011000

0800116c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001170:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001174:	f7ff fcd6 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001178:	f7ff fa18 	bl	80005ac <__NVIC_GetPriorityGrouping>
 800117c:	4603      	mov	r3, r0
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fa68 	bl	8000658 <NVIC_EncodePriority>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	2010      	movs	r0, #16
 800118e:	f7ff fa39 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001192:	2010      	movs	r0, #16
 8001194:	f7ff fa18 	bl	80005c8 <__NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011b2:	2080      	movs	r0, #128	; 0x80
 80011b4:	f7ff fcb6 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fcb3 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff fcb0 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011c4:	2004      	movs	r0, #4
 80011c6:	f7ff fcad 	bl	8000b24 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 80011ca:	21c0      	movs	r1, #192	; 0xc0
 80011cc:	4815      	ldr	r0, [pc, #84]	; (8001224 <MX_GPIO_Init+0x88>)
 80011ce:	f7ff fda8 	bl	8000d22 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_GPIO_Init+0x8c>)
 80011d8:	f7ff fdb1 	bl	8000d3e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e0:	2301      	movs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_GPIO_Init+0x88>)
 80011f6:	f000 ff38 	bl	800206a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_GPIO_Init+0x8c>)
 8001216:	f000 ff28 	bl	800206a <LL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400

0800122c <TIM8_TRG_COM_TIM14_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	//IRQ_Tim_LL_GetTick();
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
	sim7600_usart_IRQHandler();
 800123e:	f005 ff85 	bl	800714c <sim7600_usart_IRQHandler>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <sim7600ErrorTask>:

void sim7600ErrorTask(void const * argument)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    printf("%c", 'e');
 800124e:	2065      	movs	r0, #101	; 0x65
 8001250:	f006 f816 	bl	8007280 <putchar>
    osDelay(1000);
 8001254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001258:	f001 fce1 	bl	8002c1e <osDelay>
    sim7600_handle_error();
 800125c:	f005 fb4a 	bl	80068f4 <sim7600_handle_error>
    printf("%c", 'e');
 8001260:	e7f5      	b.n	800124e <sim7600ErrorTask+0x8>
	...

08001264 <usart_rx_dmaTask>:
  }
}

osEvent rx_dmaQueueEvent;
void usart_rx_dmaTask(void const * argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6178      	str	r0, [r7, #20]
    // }
    // else //in normal 
    // {
    //   osMessageGet(usart_rx_dma_queue_id, osWaitForever);
    // }
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <usart_rx_dmaTask+0x20>)
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	463b      	mov	r3, r7
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe04 	bl	8002e84 <osMessageGet>
    sim7600_usart_rx_check();
 800127c:	f005 fc92 	bl	8006ba4 <sim7600_usart_rx_check>
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 8001280:	e7f4      	b.n	800126c <usart_rx_dmaTask+0x8>
 8001282:	bf00      	nop
 8001284:	20004118 	.word	0x20004118

08001288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //osThreadSuspend(sim7600ErrorHandle); // suspend all other thread
  //Init_LL_GetTick();
  sim7600_init();
 8001290:	f005 f80e 	bl	80062b0 <sim7600_init>
  if(!sim7600_config()) sim7600_error = true;
 8001294:	f005 f8ec 	bl	8006470 <sim7600_config>
 8001298:	4603      	mov	r3, r0
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <StartDefaultTask+0x22>
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <StartDefaultTask+0x30>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
  //osThreadResumeAll();
  //osThreadResume(blinkTaskHandle);
  //osThreadResume(sim7600ErrorHandle);
  //osThreadResume(usart_rx_dmaHandle);
  
  osThreadTerminate(NULL);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f001 fcab 	bl	8002c06 <osThreadTerminate>

  //osThreadTerminate(defaultTaskHandle);
  /* USER CODE END 5 */
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200040ac 	.word	0x200040ac

080012bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  static int StartTask02_num = 0;
  for(;;)
  {
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	4813      	ldr	r0, [pc, #76]	; (8001314 <StartTask02+0x58>)
 80012c8:	f7ff fd48 	bl	8000d5c <LL_GPIO_TogglePin>
    osDelay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f001 fca5 	bl	8002c1e <osDelay>

    if(sim7600_udp_IsOpen)
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <StartTask02+0x5c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f3      	beq.n	80012c4 <StartTask02+0x8>
    {
    	StartTask02_num++;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <StartTask02+0x60>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <StartTask02+0x60>)
 80012e4:	6013      	str	r3, [r2, #0]
    	if(StartTask02_num % 10 == 0 || StartTask02_num < 10) sim7600_keepAlive_udp();
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <StartTask02+0x60>)
 80012e8:	6819      	ldr	r1, [r3, #0]
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <StartTask02+0x64>)
 80012ec:	fb83 2301 	smull	r2, r3, r3, r1
 80012f0:	109a      	asrs	r2, r3, #2
 80012f2:	17cb      	asrs	r3, r1, #31
 80012f4:	1ad2      	subs	r2, r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	1aca      	subs	r2, r1, r3
 8001300:	2a00      	cmp	r2, #0
 8001302:	d003      	beq.n	800130c <StartTask02+0x50>
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <StartTask02+0x60>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b09      	cmp	r3, #9
 800130a:	dcdb      	bgt.n	80012c4 <StartTask02+0x8>
 800130c:	f005 fac4 	bl	8006898 <sim7600_keepAlive_udp>
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 8001310:	e7d8      	b.n	80012c4 <StartTask02+0x8>
 8001312:	bf00      	nop
 8001314:	40020000 	.word	0x40020000
 8001318:	200040af 	.word	0x200040af
 800131c:	2000034c 	.word	0x2000034c
 8001320:	66666667 	.word	0x66666667

08001324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d101      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001336:	f000 f99d 	bl	8001674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001346:	b672      	cpsid	i
}
 8001348:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134a:	e7fe      	b.n	800134a <Error_Handler+0x8>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_MspInit+0x54>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_MspInit+0x54>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x54>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_MspInit+0x54>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_MspInit+0x54>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_MspInit+0x54>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	210f      	movs	r1, #15
 800138e:	f06f 0001 	mvn.w	r0, #1
 8001392:	f000 fa3b 	bl	800180c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 fa27 	bl	800180c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013be:	201c      	movs	r0, #28
 80013c0:	f000 fa40 	bl	8001844 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_InitTick+0xa8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_InitTick+0xa8>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_InitTick+0xa8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e0:	f107 0210 	add.w	r2, r7, #16
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fa58 	bl	80018a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013f0:	f000 fa42 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_InitTick+0xac>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	3b01      	subs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0xb0>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_InitTick+0xb0>)
 8001412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001416:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_InitTick+0xb0>)
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_InitTick+0xb0>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_InitTick+0xb0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_InitTick+0xb0>)
 800142c:	f000 fa6a 	bl	8001904 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <HAL_InitTick+0xb0>)
 8001438:	f000 fabe 	bl	80019b8 <HAL_TIM_Base_Start_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	e000      	b.n	8001442 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	431bde83 	.word	0x431bde83
 8001454:	20004134 	.word	0x20004134

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f000 fafd 	bl	8001a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20004134 	.word	0x20004134

080014a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
	}

return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f005 fe28 	bl	80071d0 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000350 	.word	0x20000350
 80015b4:	20006998 	.word	0x20006998

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001606:	f7ff ffd7 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f005 fde7 	bl	80071dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fbdb 	bl	8000dc8 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001620:	080089f8 	.word	0x080089f8
  ldr r2, =_sbss
 8001624:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001628:	20006994 	.word	0x20006994

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f8cc 	bl	80017f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fea0 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fe72 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000004 	.word	0x20000004
 8001698:	2000417c 	.word	0x2000417c

0800169c <__NVIC_SetPriorityGrouping>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff4c 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181e:	f7ff ff61 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	6978      	ldr	r0, [r7, #20]
 800182a:	f7ff ffb1 	bl	8001790 <NVIC_EncodePriority>
 800182e:	4602      	mov	r2, r0
 8001830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff80 	bl	800173c <__NVIC_SetPriority>
}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff54 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_GetHCLKFreq+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff0 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0a9b      	lsrs	r3, r3, #10
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	; (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	08008940 	.word	0x08008940

080018a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	220f      	movs	r2, #15
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_RCC_GetClockConfig+0x60>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e041      	b.n	800199a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f839 	bl	80019a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 f9d8 	bl	8001cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d001      	beq.n	80019d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e04e      	b.n	8001a6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_TIM_Base_Start_IT+0xc4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d022      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d01d      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d018      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00e      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x80>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d010      	beq.n	8001a6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	e007      	b.n	8001a6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40000800 	.word	0x40000800
 8001a88:	40000c00 	.word	0x40000c00
 8001a8c:	40010400 	.word	0x40010400
 8001a90:	40014000 	.word	0x40014000
 8001a94:	40001800 	.word	0x40001800

08001a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d122      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d11b      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 0202 	mvn.w	r2, #2
 8001ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8ee 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001ae0:	e005      	b.n	8001aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8e0 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8f1 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d122      	bne.n	8001b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d11b      	bne.n	8001b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0204 	mvn.w	r2, #4
 8001b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8c4 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8b6 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8c7 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d122      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d11b      	bne.n	8001b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0208 	mvn.w	r2, #8
 8001b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f89a 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001b88:	e005      	b.n	8001b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f88c 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f89d 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d122      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d11b      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0210 	mvn.w	r2, #16
 8001bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f870 	bl	8001cbc <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e005      	b.n	8001bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f862 	bl	8001ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f873 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0201 	mvn.w	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fb84 	bl	8001324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b80      	cmp	r3, #128	; 0x80
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c34:	2b80      	cmp	r3, #128	; 0x80
 8001c36:	d107      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f902 	bl	8001e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b40      	cmp	r3, #64	; 0x40
 8001c54:	d10e      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d107      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f838 	bl	8001ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0220 	mvn.w	r2, #32
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8cc 	bl	8001e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <TIM_Base_SetConfig+0x114>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d00f      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <TIM_Base_SetConfig+0x118>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00b      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3c      	ldr	r2, [pc, #240]	; (8001e14 <TIM_Base_SetConfig+0x11c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <TIM_Base_SetConfig+0x120>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d003      	beq.n	8001d38 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3a      	ldr	r2, [pc, #232]	; (8001e1c <TIM_Base_SetConfig+0x124>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d108      	bne.n	8001d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <TIM_Base_SetConfig+0x114>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d027      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <TIM_Base_SetConfig+0x118>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d023      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <TIM_Base_SetConfig+0x11c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <TIM_Base_SetConfig+0x120>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <TIM_Base_SetConfig+0x124>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d017      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <TIM_Base_SetConfig+0x128>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <TIM_Base_SetConfig+0x12c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00f      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <TIM_Base_SetConfig+0x130>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00b      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <TIM_Base_SetConfig+0x134>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <TIM_Base_SetConfig+0x138>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <TIM_Base_SetConfig+0x13c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <TIM_Base_SetConfig+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_Base_SetConfig+0xf8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <TIM_Base_SetConfig+0x124>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d103      	bne.n	8001df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	615a      	str	r2, [r3, #20]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40014400 	.word	0x40014400
 8001e28:	40014800 	.word	0x40014800
 8001e2c:	40001800 	.word	0x40001800
 8001e30:	40001c00 	.word	0x40001c00
 8001e34:	40002000 	.word	0x40002000

08001e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_GPIO_SetPinMode>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2103      	movs	r1, #3
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_GPIO_SetPinOutputType>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	605a      	str	r2, [r3, #4]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_GPIO_SetPinSpeed>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b089      	sub	sp, #36	; 0x24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	613b      	str	r3, [r7, #16]
  return result;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2103      	movs	r1, #3
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	61bb      	str	r3, [r7, #24]
  return result;
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]
}
 8001f40:	bf00      	nop
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_GPIO_SetPinPull>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	613b      	str	r3, [r7, #16]
  return result;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2103      	movs	r1, #3
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	61bb      	str	r3, [r7, #24]
  return result;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	60da      	str	r2, [r3, #12]
}
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_GPIO_SetAFPin_0_7>:
{
 8001faa:	b480      	push	{r7}
 8001fac:	b089      	sub	sp, #36	; 0x24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	613b      	str	r3, [r7, #16]
  return result;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	401a      	ands	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	61bb      	str	r3, [r7, #24]
  return result;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	621a      	str	r2, [r3, #32]
}
 8001ffc:	bf00      	nop
 8001ffe:	3724      	adds	r7, #36	; 0x24
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_GPIO_SetAFPin_8_15>:
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	613b      	str	r3, [r7, #16]
  return result;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	210f      	movs	r1, #15
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	401a      	ands	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	61bb      	str	r3, [r7, #24]
  return result;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	613b      	str	r3, [r7, #16]
  return result;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002094:	e050      	b.n	8002138 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d042      	beq.n	8002132 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d003      	beq.n	80020bc <LL_GPIO_Init+0x52>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d10d      	bne.n	80020d8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	461a      	mov	r2, r3
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff12 	bl	8001eee <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	461a      	mov	r2, r3
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fef3 	bl	8001ebe <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	461a      	mov	r2, r3
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff33 	bl	8001f4c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d11a      	bne.n	8002124 <LL_GPIO_Init+0xba>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	60bb      	str	r3, [r7, #8]
  return result;
 80020fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b07      	cmp	r3, #7
 8002104:	d807      	bhi.n	8002116 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	461a      	mov	r2, r3
 800210c:	69b9      	ldr	r1, [r7, #24]
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff4b 	bl	8001faa <LL_GPIO_SetAFPin_0_7>
 8002114:	e006      	b.n	8002124 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	461a      	mov	r2, r3
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff72 	bl	8002008 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	461a      	mov	r2, r3
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fe97 	bl	8001e60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1a7      	bne.n	8002096 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <LL_RCC_GetSysClkSource>:
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <LL_RCC_GetSysClkSource+0x18>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <LL_RCC_GetAHBPrescaler>:
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <LL_RCC_GetAHBPrescaler+0x18>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <LL_RCC_GetAPB1Prescaler>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <LL_RCC_GetAPB2Prescaler>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <LL_RCC_PLL_GetMainSource+0x18>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <LL_RCC_PLL_GetN+0x18>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40023800 	.word	0x40023800

080021f8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <LL_RCC_PLL_GetP+0x18>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800

08002214 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_RCC_PLL_GetDivider+0x18>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002238:	f000 f820 	bl	800227c <RCC_GetSystemClockFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f840 	bl	80022cc <RCC_GetHCLKClockFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f84e 	bl	80022f8 <RCC_GetPCLK1ClockFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f85a 	bl	8002320 <RCC_GetPCLK2ClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60da      	str	r2, [r3, #12]
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002286:	f7ff ff63 	bl	8002150 <LL_RCC_GetSysClkSource>
 800228a:	4603      	mov	r3, r0
 800228c:	2b08      	cmp	r3, #8
 800228e:	d00c      	beq.n	80022aa <RCC_GetSystemClockFreq+0x2e>
 8002290:	2b08      	cmp	r3, #8
 8002292:	d80f      	bhi.n	80022b4 <RCC_GetSystemClockFreq+0x38>
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <RCC_GetSystemClockFreq+0x22>
 8002298:	2b04      	cmp	r3, #4
 800229a:	d003      	beq.n	80022a4 <RCC_GetSystemClockFreq+0x28>
 800229c:	e00a      	b.n	80022b4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <RCC_GetSystemClockFreq+0x48>)
 80022a0:	607b      	str	r3, [r7, #4]
      break;
 80022a2:	e00a      	b.n	80022ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <RCC_GetSystemClockFreq+0x4c>)
 80022a6:	607b      	str	r3, [r7, #4]
      break;
 80022a8:	e007      	b.n	80022ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80022aa:	2008      	movs	r0, #8
 80022ac:	f000 f84c 	bl	8002348 <RCC_PLL_GetFreqDomain_SYS>
 80022b0:	6078      	str	r0, [r7, #4]
      break;
 80022b2:	e002      	b.n	80022ba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <RCC_GetSystemClockFreq+0x48>)
 80022b6:	607b      	str	r3, [r7, #4]
      break;
 80022b8:	bf00      	nop
  }

  return frequency;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200

080022cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80022d4:	f7ff ff4a 	bl	800216c <LL_RCC_GetAHBPrescaler>
 80022d8:	4603      	mov	r3, r0
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <RCC_GetHCLKClockFreq+0x28>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	40d3      	lsrs	r3, r2
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08008930 	.word	0x08008930

080022f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002300:	f7ff ff42 	bl	8002188 <LL_RCC_GetAPB1Prescaler>
 8002304:	4603      	mov	r3, r0
 8002306:	0a9b      	lsrs	r3, r3, #10
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <RCC_GetPCLK1ClockFreq+0x24>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	461a      	mov	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	40d3      	lsrs	r3, r2
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08008940 	.word	0x08008940

08002320 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002328:	f7ff ff3c 	bl	80021a4 <LL_RCC_GetAPB2Prescaler>
 800232c:	4603      	mov	r3, r0
 800232e:	0b5b      	lsrs	r3, r3, #13
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <RCC_GetPCLK2ClockFreq+0x24>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	461a      	mov	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	40d3      	lsrs	r3, r2
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	08008940 	.word	0x08008940

08002348 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800235c:	f7ff ff30 	bl	80021c0 <LL_RCC_PLL_GetMainSource>
 8002360:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236e:	d003      	beq.n	8002378 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002370:	e005      	b.n	800237e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002374:	617b      	str	r3, [r7, #20]
      break;
 8002376:	e005      	b.n	8002384 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800237a:	617b      	str	r3, [r7, #20]
      break;
 800237c:	e002      	b.n	8002384 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002380:	617b      	str	r3, [r7, #20]
      break;
 8002382:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d113      	bne.n	80023b2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800238a:	f7ff ff43 	bl	8002214 <LL_RCC_PLL_GetDivider>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fbb3 f4f2 	udiv	r4, r3, r2
 8002396:	f7ff ff21 	bl	80021dc <LL_RCC_PLL_GetN>
 800239a:	4603      	mov	r3, r0
 800239c:	fb03 f404 	mul.w	r4, r3, r4
 80023a0:	f7ff ff2a 	bl	80021f8 <LL_RCC_PLL_GetP>
 80023a4:	4603      	mov	r3, r0
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	3301      	adds	r3, #1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80023b0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80023b2:	693b      	ldr	r3, [r7, #16]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	007a1200 	.word	0x007a1200

080023c4 <LL_SPI_IsEnabled>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d101      	bne.n	80023dc <LL_SPI_IsEnabled+0x18>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <LL_SPI_IsEnabled+0x1a>
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffd3 	bl	80023c4 <LL_SPI_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d139      	bne.n	8002498 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6811      	ldr	r1, [r2, #0]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	4311      	orrs	r1, r2
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	4311      	orrs	r1, r2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	68d2      	ldr	r2, [r2, #12]
 8002444:	4311      	orrs	r1, r2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6912      	ldr	r2, [r2, #16]
 800244a:	4311      	orrs	r1, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6952      	ldr	r2, [r2, #20]
 8002450:	4311      	orrs	r1, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6992      	ldr	r2, [r2, #24]
 8002456:	4311      	orrs	r1, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	69d2      	ldr	r2, [r2, #28]
 800245c:	4311      	orrs	r1, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6a12      	ldr	r2, [r2, #32]
 8002462:	430a      	orrs	r2, r1
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f023 0204 	bic.w	r2, r3, #4
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d105      	bne.n	8002494 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffab 	bl	80023ea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	61da      	str	r2, [r3, #28]
  return status;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <LL_TIM_SetPrescaler>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_TIM_SetAutoReload>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_TIM_SetRepetitionCounter>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	615a      	str	r2, [r3, #20]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3d      	ldr	r2, [pc, #244]	; (800262c <LL_TIM_Init+0x108>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <LL_TIM_Init+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002542:	d00f      	beq.n	8002564 <LL_TIM_Init+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <LL_TIM_Init+0x10c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00b      	beq.n	8002564 <LL_TIM_Init+0x40>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a39      	ldr	r2, [pc, #228]	; (8002634 <LL_TIM_Init+0x110>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <LL_TIM_Init+0x40>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a38      	ldr	r2, [pc, #224]	; (8002638 <LL_TIM_Init+0x114>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <LL_TIM_Init+0x40>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a37      	ldr	r2, [pc, #220]	; (800263c <LL_TIM_Init+0x118>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d106      	bne.n	8002572 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2d      	ldr	r2, [pc, #180]	; (800262c <LL_TIM_Init+0x108>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <LL_TIM_Init+0xae>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d027      	beq.n	80025d2 <LL_TIM_Init+0xae>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <LL_TIM_Init+0x10c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <LL_TIM_Init+0xae>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a29      	ldr	r2, [pc, #164]	; (8002634 <LL_TIM_Init+0x110>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <LL_TIM_Init+0xae>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <LL_TIM_Init+0x114>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <LL_TIM_Init+0xae>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <LL_TIM_Init+0x118>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <LL_TIM_Init+0x11c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <LL_TIM_Init+0x120>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <LL_TIM_Init+0x124>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <LL_TIM_Init+0x128>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <LL_TIM_Init+0x12c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <LL_TIM_Init+0xae>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <LL_TIM_Init+0x130>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d106      	bne.n	80025e0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4619      	mov	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff6c 	bl	80024ca <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff58 	bl	80024ae <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LL_TIM_Init+0x108>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <LL_TIM_Init+0xea>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <LL_TIM_Init+0x118>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d105      	bne.n	800261a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff66 	bl	80024e6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff71 	bl	8002502 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800
 8002638:	40000c00 	.word	0x40000c00
 800263c:	40010400 	.word	0x40010400
 8002640:	40014000 	.word	0x40014000
 8002644:	40014400 	.word	0x40014400
 8002648:	40014800 	.word	0x40014800
 800264c:	40001800 	.word	0x40001800
 8002650:	40001c00 	.word	0x40001c00
 8002654:	40002000 	.word	0x40002000

08002658 <LL_USART_IsEnabled>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_USART_SetStopBitsLength>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_USART_SetHWFlowCtrl>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	615a      	str	r2, [r3, #20]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_USART_SetBaudRate>:
{
 80026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	b09f      	sub	sp, #124	; 0x7c
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6778      	str	r0, [r7, #116]	; 0x74
 80026d6:	6739      	str	r1, [r7, #112]	; 0x70
 80026d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	f040 80bc 	bne.w	800285e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80026e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e8:	461c      	mov	r4, r3
 80026ea:	f04f 0500 	mov.w	r5, #0
 80026ee:	4622      	mov	r2, r4
 80026f0:	462b      	mov	r3, r5
 80026f2:	eb12 0a02 	adds.w	sl, r2, r2
 80026f6:	eb43 0b03 	adc.w	fp, r3, r3
 80026fa:	4652      	mov	r2, sl
 80026fc:	465b      	mov	r3, fp
 80026fe:	1912      	adds	r2, r2, r4
 8002700:	eb45 0303 	adc.w	r3, r5, r3
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	00d9      	lsls	r1, r3, #3
 800270e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002712:	00d0      	lsls	r0, r2, #3
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	1911      	adds	r1, r2, r4
 800271a:	6639      	str	r1, [r7, #96]	; 0x60
 800271c:	416b      	adcs	r3, r5
 800271e:	667b      	str	r3, [r7, #100]	; 0x64
 8002720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002722:	461a      	mov	r2, r3
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	1891      	adds	r1, r2, r2
 800272a:	6339      	str	r1, [r7, #48]	; 0x30
 800272c:	415b      	adcs	r3, r3
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
 8002730:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002734:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002738:	f7fd fda2 	bl	8000280 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4ba9      	ldr	r3, [pc, #676]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 8002742:	fba3 2302 	umull	r2, r3, r3, r2
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b29b      	uxth	r3, r3
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	b29e      	uxth	r6, r3
 800274e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002750:	461c      	mov	r4, r3
 8002752:	f04f 0500 	mov.w	r5, #0
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	1891      	adds	r1, r2, r2
 800275c:	62b9      	str	r1, [r7, #40]	; 0x28
 800275e:	415b      	adcs	r3, r3
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002766:	1912      	adds	r2, r2, r4
 8002768:	eb45 0303 	adc.w	r3, r5, r3
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	00d9      	lsls	r1, r3, #3
 8002776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800277a:	00d0      	lsls	r0, r2, #3
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	1911      	adds	r1, r2, r4
 8002782:	65b9      	str	r1, [r7, #88]	; 0x58
 8002784:	416b      	adcs	r3, r5
 8002786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	461a      	mov	r2, r3
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	1891      	adds	r1, r2, r2
 8002792:	6239      	str	r1, [r7, #32]
 8002794:	415b      	adcs	r3, r3
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80027a0:	f7fd fd6e 	bl	8000280 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 80027aa:	fba3 1302 	umull	r1, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2164      	movs	r1, #100	; 0x64
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	3332      	adds	r3, #50	; 0x32
 80027bc:	4a8a      	ldr	r2, [pc, #552]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4433      	add	r3, r6
 80027d2:	b29e      	uxth	r6, r3
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d6:	4618      	mov	r0, r3
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	1894      	adds	r4, r2, r2
 80027e2:	61bc      	str	r4, [r7, #24]
 80027e4:	415b      	adcs	r3, r3
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ec:	1812      	adds	r2, r2, r0
 80027ee:	eb41 0303 	adc.w	r3, r1, r3
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	f04f 0500 	mov.w	r5, #0
 80027fa:	00dd      	lsls	r5, r3, #3
 80027fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002800:	00d4      	lsls	r4, r2, #3
 8002802:	4622      	mov	r2, r4
 8002804:	462b      	mov	r3, r5
 8002806:	1814      	adds	r4, r2, r0
 8002808:	653c      	str	r4, [r7, #80]	; 0x50
 800280a:	414b      	adcs	r3, r1
 800280c:	657b      	str	r3, [r7, #84]	; 0x54
 800280e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002810:	461a      	mov	r2, r3
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	1891      	adds	r1, r2, r2
 8002818:	6139      	str	r1, [r7, #16]
 800281a:	415b      	adcs	r3, r3
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002822:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002826:	f7fd fd2b 	bl	8000280 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3332      	adds	r3, #50	; 0x32
 8002842:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	b29b      	uxth	r3, r3
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	b29b      	uxth	r3, r3
 8002852:	4433      	add	r3, r6
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	e0be      	b.n	80029dc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800285e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002860:	461c      	mov	r4, r3
 8002862:	f04f 0500 	mov.w	r5, #0
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	eb12 0802 	adds.w	r8, r2, r2
 800286e:	eb43 0903 	adc.w	r9, r3, r3
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	1912      	adds	r2, r2, r4
 8002878:	eb45 0303 	adc.w	r3, r5, r3
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	00d9      	lsls	r1, r3, #3
 8002886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800288a:	00d0      	lsls	r0, r2, #3
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	1911      	adds	r1, r2, r4
 8002892:	64b9      	str	r1, [r7, #72]	; 0x48
 8002894:	416b      	adcs	r3, r5
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289a:	4618      	mov	r0, r3
 800289c:	f04f 0100 	mov.w	r1, #0
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	008b      	lsls	r3, r1, #2
 80028aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028ae:	0082      	lsls	r2, r0, #2
 80028b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028b4:	f7fd fce4 	bl	8000280 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	b29e      	uxth	r6, r3
 80028ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028cc:	4618      	mov	r0, r3
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	1894      	adds	r4, r2, r2
 80028d8:	60bc      	str	r4, [r7, #8]
 80028da:	415b      	adcs	r3, r3
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e2:	1812      	adds	r2, r2, r0
 80028e4:	eb41 0303 	adc.w	r3, r1, r3
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	f04f 0500 	mov.w	r5, #0
 80028f0:	00dd      	lsls	r5, r3, #3
 80028f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028f6:	00d4      	lsls	r4, r2, #3
 80028f8:	4622      	mov	r2, r4
 80028fa:	462b      	mov	r3, r5
 80028fc:	1814      	adds	r4, r2, r0
 80028fe:	643c      	str	r4, [r7, #64]	; 0x40
 8002900:	414b      	adcs	r3, r1
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
 8002904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002906:	4618      	mov	r0, r3
 8002908:	f04f 0100 	mov.w	r1, #0
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	008b      	lsls	r3, r1, #2
 8002916:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800291a:	0082      	lsls	r2, r0, #2
 800291c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002920:	f7fd fcae 	bl	8000280 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 800292a:	fba3 1302 	umull	r1, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2164      	movs	r1, #100	; 0x64
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	3332      	adds	r3, #50	; 0x32
 800293c:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	b29b      	uxth	r3, r3
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	b29b      	uxth	r3, r3
 800294c:	4433      	add	r3, r6
 800294e:	b29e      	uxth	r6, r3
 8002950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002952:	4618      	mov	r0, r3
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	1894      	adds	r4, r2, r2
 800295e:	603c      	str	r4, [r7, #0]
 8002960:	415b      	adcs	r3, r3
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002968:	1812      	adds	r2, r2, r0
 800296a:	eb41 0303 	adc.w	r3, r1, r3
 800296e:	f04f 0400 	mov.w	r4, #0
 8002972:	f04f 0500 	mov.w	r5, #0
 8002976:	00dd      	lsls	r5, r3, #3
 8002978:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800297c:	00d4      	lsls	r4, r2, #3
 800297e:	4622      	mov	r2, r4
 8002980:	462b      	mov	r3, r5
 8002982:	1814      	adds	r4, r2, r0
 8002984:	63bc      	str	r4, [r7, #56]	; 0x38
 8002986:	414b      	adcs	r3, r1
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298c:	4618      	mov	r0, r3
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	008b      	lsls	r3, r1, #2
 800299c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029a0:	0082      	lsls	r2, r0, #2
 80029a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029a6:	f7fd fc6b 	bl	8000280 <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 80029b0:	fba3 1302 	umull	r1, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2164      	movs	r1, #100	; 0x64
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <LL_USART_SetBaudRate+0x31c>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4433      	add	r3, r6
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	377c      	adds	r7, #124	; 0x7c
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e6:	bf00      	nop
 80029e8:	51eb851f 	.word	0x51eb851f

080029ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fe2a 	bl	8002658 <LL_USART_IsEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d15e      	bne.n	8002ac8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	6851      	ldr	r1, [r2, #4]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6912      	ldr	r2, [r2, #16]
 8002a24:	4311      	orrs	r1, r2
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	6992      	ldr	r2, [r2, #24]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fe21 	bl	8002680 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe2e 	bl	80026a6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fbee 	bl	8002230 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <LL_USART_Init+0xe8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d102      	bne.n	8002a62 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e021      	b.n	8002aa6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <LL_USART_Init+0xec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d102      	bne.n	8002a70 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e01a      	b.n	8002aa6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <LL_USART_Init+0xf0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e013      	b.n	8002aa6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <LL_USART_Init+0xf4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d102      	bne.n	8002a8c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e00c      	b.n	8002aa6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <LL_USART_Init+0xf8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	e005      	b.n	8002aa6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <LL_USART_Init+0xfc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fe02 	bl	80026cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	40004800 	.word	0x40004800
 8002ae0:	40011400 	.word	0x40011400
 8002ae4:	40004c00 	.word	0x40004c00
 8002ae8:	40005000 	.word	0x40005000

08002aec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <LL_SetSystemCoreClock+0x1c>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1e:	2b84      	cmp	r3, #132	; 0x84
 8002b20:	d005      	beq.n	8002b2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3303      	adds	r3, #3
 8002b2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b42:	f3ef 8305 	mrs	r3, IPSR
 8002b46:	607b      	str	r3, [r7, #4]
  return(result);
 8002b48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b64:	f001 fc02 	bl	800436c <vTaskStartScheduler>
  
  return osOK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b70:	b089      	sub	sp, #36	; 0x24
 8002b72:	af04      	add	r7, sp, #16
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <osThreadCreate+0x54>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685c      	ldr	r4, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681d      	ldr	r5, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691e      	ldr	r6, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ffb6 	bl	8002b0c <makeFreeRtosPriority>
 8002ba0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002baa:	9202      	str	r2, [sp, #8]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	9100      	str	r1, [sp, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f001 f980 	bl	8003ebc <xTaskCreateStatic>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e01c      	b.n	8002bfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685c      	ldr	r4, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bce:	b29e      	uxth	r6, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff98 	bl	8002b0c <makeFreeRtosPriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4632      	mov	r2, r6
 8002bea:	4629      	mov	r1, r5
 8002bec:	4620      	mov	r0, r4
 8002bee:	f001 f9c2 	bl	8003f76 <xTaskCreate>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d001      	beq.n	8002bfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c06 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f001 fae8 	bl	80041e4 <vTaskDelete>
  return osOK;
 8002c14:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <osDelay+0x16>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	e000      	b.n	8002c36 <osDelay+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fb64 	bl	8004304 <vTaskDelay>
  
  return osOK;
 8002c3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00f      	beq.n	8002c78 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10a      	bne.n	8002c74 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2203      	movs	r2, #3
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f000 fa9a 	bl	80031a4 <xQueueGenericCreateStatic>
 8002c70:	4603      	mov	r3, r0
 8002c72:	e016      	b.n	8002ca2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e014      	b.n	8002ca2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d110      	bne.n	8002ca0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002c7e:	2203      	movs	r2, #3
 8002c80:	2100      	movs	r1, #0
 8002c82:	2001      	movs	r0, #1
 8002c84:	f000 fb06 	bl	8003294 <xQueueGenericCreate>
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <osSemaphoreCreate+0x56>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb56 	bl	8003348 <xQueueGenericSend>
      return sema;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	e000      	b.n	8002ca2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002ca0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	e03a      	b.n	8002d3a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d103      	bne.n	8002cd8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e009      	b.n	8002cec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <osSemaphoreWait+0x40>
      ticks = 1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002cec:	f7ff ff26 	bl	8002b3c <inHandlerMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 ff34 	bl	8003b6c <xQueueReceiveFromISR>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <osSemaphoreWait+0x62>
      return osErrorOS;
 8002d0a:	23ff      	movs	r3, #255	; 0xff
 8002d0c:	e015      	b.n	8002d3a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d011      	beq.n	8002d38 <osSemaphoreWait+0x8c>
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <osSemaphoreWait+0x98>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	e008      	b.n	8002d38 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fe13 	bl	8003954 <xQueueSemaphoreTake>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d001      	beq.n	8002d38 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002d34:	23ff      	movs	r3, #255	; 0xff
 8002d36:	e000      	b.n	8002d3a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002d58:	f7ff fef0 	bl	8002b3c <inHandlerMode>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fc86 	bl	800367a <xQueueGiveFromISR>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d001      	beq.n	8002d78 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002d74:	23ff      	movs	r3, #255	; 0xff
 8002d76:	e017      	b.n	8002da8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d013      	beq.n	8002da6 <osSemaphoreRelease+0x5e>
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <osSemaphoreRelease+0x68>)
 8002d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	e00a      	b.n	8002da6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002d90:	2300      	movs	r3, #0
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fad6 	bl	8003348 <xQueueGenericSend>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002da2:	23ff      	movs	r3, #255	; 0xff
 8002da4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <osMessageCreate+0x36>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2400      	movs	r4, #0
 8002de0:	9400      	str	r4, [sp, #0]
 8002de2:	f000 f9df 	bl	80031a4 <xQueueGenericCreateStatic>
 8002de6:	4603      	mov	r3, r0
 8002de8:	e008      	b.n	8002dfc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f000 fa4d 	bl	8003294 <xQueueGenericCreate>
 8002dfa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}

08002e04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <osMessagePut+0x1e>
    ticks = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002e22:	f7ff fe8b 	bl	8002b3c <inHandlerMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d018      	beq.n	8002e5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002e2c:	f107 0210 	add.w	r2, r7, #16
 8002e30:	f107 0108 	add.w	r1, r7, #8
 8002e34:	2300      	movs	r3, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fb84 	bl	8003544 <xQueueGenericSendFromISR>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <osMessagePut+0x42>
      return osErrorOS;
 8002e42:	23ff      	movs	r3, #255	; 0xff
 8002e44:	e018      	b.n	8002e78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d014      	beq.n	8002e76 <osMessagePut+0x72>
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <osMessagePut+0x7c>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	e00b      	b.n	8002e76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002e5e:	f107 0108 	add.w	r1, r7, #8
 8002e62:	2300      	movs	r3, #0
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa6e 	bl	8003348 <xQueueGenericSend>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <osMessagePut+0x72>
      return osErrorOS;
 8002e72:	23ff      	movs	r3, #255	; 0xff
 8002e74:	e000      	b.n	8002e78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	617b      	str	r3, [r7, #20]
    return event;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eb2:	e054      	b.n	8002f5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d103      	bne.n	8002ecc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eca:	e009      	b.n	8002ee0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <osMessageGet+0x5c>
      ticks = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002ee0:	f7ff fe2c 	bl	8002b3c <inHandlerMode>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01c      	beq.n	8002f24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002eea:	f107 0220 	add.w	r2, r7, #32
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68b8      	ldr	r0, [r7, #8]
 8002ef8:	f000 fe38 	bl	8003b6c <xQueueReceiveFromISR>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d102      	bne.n	8002f08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002f02:	2310      	movs	r3, #16
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e001      	b.n	8002f0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <osMessageGet+0xca>
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <osMessageGet+0xe4>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e014      	b.n	8002f4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	3304      	adds	r3, #4
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	68b8      	ldr	r0, [r7, #8]
 8002f30:	f000 fc30 	bl	8003794 <xQueueReceive>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e006      	b.n	8002f4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <osMessageGet+0xc6>
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <osMessageGet+0xc8>
 8002f4a:	2340      	movs	r3, #64	; 0x40
 8002f4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	461c      	mov	r4, r3
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f103 0208 	add.w	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f103 0208 	add.w	r2, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f103 0208 	add.w	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d103      	bne.n	800302e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e00c      	b.n	8003048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3308      	adds	r3, #8
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e002      	b.n	800303c <vListInsert+0x2e>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d2f6      	bcs.n	8003036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6852      	ldr	r2, [r2, #4]
 80030a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030fe:	f002 f881 	bl	8005204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	441a      	add	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	3b01      	subs	r3, #1
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	441a      	add	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	22ff      	movs	r2, #255	; 0xff
 800314a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d114      	bne.n	800317e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fb45 	bl	80047f0 <xTaskRemoveFromEventList>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <xQueueGenericReset+0xcc>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	e009      	b.n	8003192 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fef2 	bl	8002f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3324      	adds	r3, #36	; 0x24
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff feed 	bl	8002f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003192:	f002 f867 	bl	8005264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	; 0x38
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <xQueueGenericCreateStatic+0x52>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <xQueueGenericCreateStatic+0x56>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueGenericCreateStatic+0x58>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	623b      	str	r3, [r7, #32]
}
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <xQueueGenericCreateStatic+0x7e>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xQueueGenericCreateStatic+0x82>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericCreateStatic+0x84>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61fb      	str	r3, [r7, #28]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003242:	2348      	movs	r3, #72	; 0x48
 8003244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b48      	cmp	r3, #72	; 0x48
 800324a:	d00a      	beq.n	8003262 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61bb      	str	r3, [r7, #24]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003262:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003276:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f83f 	bl	8003308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800328c:	4618      	mov	r0, r3
 800328e:	3730      	adds	r7, #48	; 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericCreate+0x2a>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	613b      	str	r3, [r7, #16]
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3348      	adds	r3, #72	; 0x48
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 f8bb 	bl	8005448 <pvPortMalloc>
 80032d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d011      	beq.n	80032fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3348      	adds	r3, #72	; 0x48
 80032e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f805 	bl	8003308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e002      	b.n	800332a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003336:	2101      	movs	r1, #1
 8003338:	69b8      	ldr	r0, [r7, #24]
 800333a:	f7ff fecb 	bl	80030d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003356:	2300      	movs	r3, #0
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xQueueGenericSend+0x32>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <xQueueGenericSend+0x40>
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <xQueueGenericSend+0x44>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <xQueueGenericSend+0x46>
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <xQueueGenericSend+0x60>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d103      	bne.n	80033b6 <xQueueGenericSend+0x6e>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <xQueueGenericSend+0x72>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueGenericSend+0x74>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	623b      	str	r3, [r7, #32]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d6:	f001 fbc7 	bl	8004b68 <xTaskGetSchedulerState>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <xQueueGenericSend+0x9e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xQueueGenericSend+0xa2>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueGenericSend+0xa4>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <xQueueGenericSend+0xbe>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	61fb      	str	r3, [r7, #28]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003406:	f001 fefd 	bl	8005204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <xQueueGenericSend+0xd4>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d129      	bne.n	8003470 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003422:	f000 fc3b 	bl	8003c9c <prvCopyDataToQueue>
 8003426:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	3324      	adds	r3, #36	; 0x24
 8003434:	4618      	mov	r0, r3
 8003436:	f001 f9db 	bl	80047f0 <xTaskRemoveFromEventList>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003440:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <xQueueGenericSend+0x1f8>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	e00a      	b.n	8003468 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <xQueueGenericSend+0x1f8>)
 800345a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003468:	f001 fefc 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	e063      	b.n	8003538 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003476:	f001 fef5 	bl	8005264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800347a:	2300      	movs	r3, #0
 800347c:	e05c      	b.n	8003538 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fa13 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800348e:	2301      	movs	r3, #1
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003492:	f001 fee7 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003496:	f000 ffc9 	bl	800442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349a:	f001 feb3 	bl	8005204 <vPortEnterCritical>
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d103      	bne.n	80034b4 <xQueueGenericSend+0x16c>
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d103      	bne.n	80034ca <xQueueGenericSend+0x182>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ca:	f001 fecb 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ce:	1d3a      	adds	r2, r7, #4
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fa02 	bl	80048e0 <xTaskCheckForTimeOut>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d124      	bne.n	800352c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e4:	f000 fcd2 	bl	8003e8c <prvIsQueueFull>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	3310      	adds	r3, #16
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f956 	bl	80047a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fe:	f000 fc5d 	bl	8003dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003502:	f000 ffa1 	bl	8004448 <xTaskResumeAll>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f af7c 	bne.w	8003406 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <xQueueGenericSend+0x1f8>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	e772      	b.n	8003406 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003522:	f000 fc4b 	bl	8003dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003526:	f000 ff8f 	bl	8004448 <xTaskResumeAll>
 800352a:	e76c      	b.n	8003406 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352e:	f000 fc45 	bl	8003dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003532:	f000 ff89 	bl	8004448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003538:	4618      	mov	r0, r3
 800353a:	3738      	adds	r7, #56	; 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	e000ed04 	.word	0xe000ed04

08003544 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b090      	sub	sp, #64	; 0x40
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <xQueueGenericSendFromISR+0x3c>
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <xQueueGenericSendFromISR+0x40>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <xQueueGenericSendFromISR+0x42>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d103      	bne.n	80035ae <xQueueGenericSendFromISR+0x6a>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <xQueueGenericSendFromISR+0x6e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xQueueGenericSendFromISR+0x70>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	623b      	str	r3, [r7, #32]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ce:	f001 fefb 	bl	80053c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035d2:	f3ef 8211 	mrs	r2, BASEPRI
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	61fa      	str	r2, [r7, #28]
 80035e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <xQueueGenericSendFromISR+0xbc>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d12f      	bne.n	8003660 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003616:	f000 fb41 	bl	8003c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800361a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d112      	bne.n	800364a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	4618      	mov	r0, r3
 8003632:	f001 f8dd 	bl	80047f0 <xTaskRemoveFromEventList>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e007      	b.n	800365a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800364a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800364e:	3301      	adds	r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b25a      	sxtb	r2, r3
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800365a:	2301      	movs	r3, #1
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800365e:	e001      	b.n	8003664 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003660:	2300      	movs	r3, #0
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800366e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003672:	4618      	mov	r0, r3
 8003674:	3740      	adds	r7, #64	; 0x40
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08e      	sub	sp, #56	; 0x38
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	623b      	str	r3, [r7, #32]
}
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	61fb      	str	r3, [r7, #28]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <xQueueGiveFromISR+0x58>
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <xQueueGiveFromISR+0x5c>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <xQueueGiveFromISR+0x5e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61bb      	str	r3, [r7, #24]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036f2:	f001 fe69 	bl	80053c8 <vPortValidateInterruptPriority>
	__asm volatile
 80036f6:	f3ef 8211 	mrs	r2, BASEPRI
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	617a      	str	r2, [r7, #20]
 800370c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800370e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371e:	429a      	cmp	r2, r3
 8003720:	d22b      	bcs.n	800377a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d112      	bne.n	8003764 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	3324      	adds	r3, #36	; 0x24
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f850 	bl	80047f0 <xTaskRemoveFromEventList>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00e      	beq.n	8003774 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003768:	3301      	adds	r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	b25a      	sxtb	r2, r3
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
 8003778:	e001      	b.n	800377e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f383 8811 	msr	BASEPRI, r3
}
 8003788:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800378c:	4618      	mov	r0, r3
 800378e:	3738      	adds	r7, #56	; 0x38
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <xQueueReceive+0x30>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	623b      	str	r3, [r7, #32]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <xQueueReceive+0x3e>
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueReceive+0x42>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueReceive+0x44>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xQueueReceive+0x5e>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037f2:	f001 f9b9 	bl	8004b68 <xTaskGetSchedulerState>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <xQueueReceive+0x6e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <xQueueReceive+0x72>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueReceive+0x74>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xQueueReceive+0x8e>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61bb      	str	r3, [r7, #24]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003822:	f001 fcef 	bl	8005204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01f      	beq.n	8003872 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003836:	f000 fa9b 	bl	8003d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00f      	beq.n	800386a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	3310      	adds	r3, #16
 800384e:	4618      	mov	r0, r3
 8003850:	f000 ffce 	bl	80047f0 <xTaskRemoveFromEventList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <xQueueReceive+0x1bc>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800386a:	f001 fcfb 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 800386e:	2301      	movs	r3, #1
 8003870:	e069      	b.n	8003946 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d103      	bne.n	8003880 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003878:	f001 fcf4 	bl	8005264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800387c:	2300      	movs	r3, #0
 800387e:	e062      	b.n	8003946 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f812 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003894:	f001 fce6 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003898:	f000 fdc8 	bl	800442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800389c:	f001 fcb2 	bl	8005204 <vPortEnterCritical>
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d103      	bne.n	80038b6 <xQueueReceive+0x122>
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038bc:	b25b      	sxtb	r3, r3
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d103      	bne.n	80038cc <xQueueReceive+0x138>
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038cc:	f001 fcca 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038d0:	1d3a      	adds	r2, r7, #4
 80038d2:	f107 0310 	add.w	r3, r7, #16
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f801 	bl	80048e0 <xTaskCheckForTimeOut>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d123      	bne.n	800392c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e6:	f000 fabb 	bl	8003e60 <prvIsQueueEmpty>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	3324      	adds	r3, #36	; 0x24
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 ff55 	bl	80047a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003900:	f000 fa5c 	bl	8003dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003904:	f000 fda0 	bl	8004448 <xTaskResumeAll>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d189      	bne.n	8003822 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <xQueueReceive+0x1bc>)
 8003910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	e780      	b.n	8003822 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003922:	f000 fa4b 	bl	8003dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003926:	f000 fd8f 	bl	8004448 <xTaskResumeAll>
 800392a:	e77a      	b.n	8003822 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800392c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392e:	f000 fa45 	bl	8003dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003932:	f000 fd89 	bl	8004448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003938:	f000 fa92 	bl	8003e60 <prvIsQueueEmpty>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	f43f af6f 	beq.w	8003822 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003946:	4618      	mov	r0, r3
 8003948:	3730      	adds	r7, #48	; 0x30
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	623b      	str	r3, [r7, #32]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	61fb      	str	r3, [r7, #28]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039a4:	f001 f8e0 	bl	8004b68 <xTaskGetSchedulerState>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <xQueueSemaphoreTake+0x60>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <xQueueSemaphoreTake+0x64>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <xQueueSemaphoreTake+0x66>
 80039b8:	2300      	movs	r3, #0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	61bb      	str	r3, [r7, #24]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039d4:	f001 fc16 	bl	8005204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d024      	beq.n	8003a2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d104      	bne.n	80039fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80039f4:	f001 fa60 	bl	8004eb8 <pvTaskIncrementMutexHeldCount>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00f      	beq.n	8003a26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	3310      	adds	r3, #16
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fef0 	bl	80047f0 <xTaskRemoveFromEventList>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a16:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <xQueueSemaphoreTake+0x214>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a26:	f001 fc1d 	bl	8005264 <vPortExitCritical>
				return pdPASS;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e097      	b.n	8003b5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d111      	bne.n	8003a58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	617b      	str	r3, [r7, #20]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a50:	f001 fc08 	bl	8005264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e082      	b.n	8003b5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ff26 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a6c:	f001 fbfa 	bl	8005264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a70:	f000 fcdc 	bl	800442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a74:	f001 fbc6 	bl	8005204 <vPortEnterCritical>
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d103      	bne.n	8003a8e <xQueueSemaphoreTake+0x13a>
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d103      	bne.n	8003aa4 <xQueueSemaphoreTake+0x150>
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa4:	f001 fbde 	bl	8005264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aa8:	463a      	mov	r2, r7
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 ff15 	bl	80048e0 <xTaskCheckForTimeOut>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d132      	bne.n	8003b22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003abe:	f000 f9cf 	bl	8003e60 <prvIsQueueEmpty>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d026      	beq.n	8003b16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ad0:	f001 fb98 	bl	8005204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f863 	bl	8004ba4 <xTaskPriorityInherit>
 8003ade:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ae0:	f001 fbc0 	bl	8005264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fe5b 	bl	80047a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003af4:	f000 f962 	bl	8003dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003af8:	f000 fca6 	bl	8004448 <xTaskResumeAll>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f47f af68 	bne.w	80039d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <xQueueSemaphoreTake+0x214>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	e75e      	b.n	80039d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b18:	f000 f950 	bl	8003dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b1c:	f000 fc94 	bl	8004448 <xTaskResumeAll>
 8003b20:	e758      	b.n	80039d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b24:	f000 f94a 	bl	8003dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b28:	f000 fc8e 	bl	8004448 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b2e:	f000 f997 	bl	8003e60 <prvIsQueueEmpty>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f43f af4d 	beq.w	80039d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003b40:	f001 fb60 	bl	8005204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b46:	f000 f891 	bl	8003c6c <prvGetDisinheritPriorityAfterTimeout>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f922 	bl	8004d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b58:	f001 fb84 	bl	8005264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3738      	adds	r7, #56	; 0x38
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	; 0x38
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	623b      	str	r3, [r7, #32]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueReceiveFromISR+0x3a>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueReceiveFromISR+0x3e>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueReceiveFromISR+0x40>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	61fb      	str	r3, [r7, #28]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bc6:	f001 fbff 	bl	80053c8 <vPortValidateInterruptPriority>
	__asm volatile
 8003bca:	f3ef 8211 	mrs	r2, BASEPRI
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	61ba      	str	r2, [r7, #24]
 8003be0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003be2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02f      	beq.n	8003c52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c00:	f000 f8b6 	bl	8003d70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	1e5a      	subs	r2, r3, #1
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d112      	bne.n	8003c3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3310      	adds	r3, #16
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fde4 	bl	80047f0 <xTaskRemoveFromEventList>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e007      	b.n	8003c4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c40:	3301      	adds	r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	b25a      	sxtb	r2, r3
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c50:	e001      	b.n	8003c56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f383 8811 	msr	BASEPRI, r3
}
 8003c60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3738      	adds	r7, #56	; 0x38
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1c3 0307 	rsb	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e001      	b.n	8003c8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
	}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d14d      	bne.n	8003d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ffe2 	bl	8004c90 <xTaskPriorityDisinherit>
 8003ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	e043      	b.n	8003d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d119      	bne.n	8003d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6858      	ldr	r0, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	f003 fa9c 	bl	8007224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d32b      	bcc.n	8003d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	e026      	b.n	8003d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68d8      	ldr	r0, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	f003 fa82 	bl	8007224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	425b      	negs	r3, r3
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d207      	bcs.n	8003d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	425b      	negs	r3, r3
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d105      	bne.n	8003d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d66:	697b      	ldr	r3, [r7, #20]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d303      	bcc.n	8003da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68d9      	ldr	r1, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	461a      	mov	r2, r3
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f003 fa38 	bl	8007224 <memcpy>
	}
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dc4:	f001 fa1e 	bl	8005204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dd0:	e011      	b.n	8003df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3324      	adds	r3, #36	; 0x24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fd06 	bl	80047f0 <xTaskRemoveFromEventList>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dea:	f000 fddb 	bl	80049a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	dce9      	bgt.n	8003dd2 <prvUnlockQueue+0x16>
 8003dfe:	e000      	b.n	8003e02 <prvUnlockQueue+0x46>
					break;
 8003e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e0a:	f001 fa2b 	bl	8005264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e0e:	f001 f9f9 	bl	8005204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e1a:	e011      	b.n	8003e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3310      	adds	r3, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fce1 	bl	80047f0 <xTaskRemoveFromEventList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e34:	f000 fdb6 	bl	80049a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e38:	7bbb      	ldrb	r3, [r7, #14]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dce9      	bgt.n	8003e1c <prvUnlockQueue+0x60>
 8003e48:	e000      	b.n	8003e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e54:	f001 fa06 	bl	8005264 <vPortExitCritical>
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e68:	f001 f9cc 	bl	8005204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e001      	b.n	8003e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e7e:	f001 f9f1 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e94:	f001 f9b6 	bl	8005204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d102      	bne.n	8003eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e001      	b.n	8003eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eae:	f001 f9d9 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08e      	sub	sp, #56	; 0x38
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xTaskCreateStatic+0x46>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61fb      	str	r3, [r7, #28]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f02:	2354      	movs	r3, #84	; 0x54
 8003f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b54      	cmp	r3, #84	; 0x54
 8003f0a:	d00a      	beq.n	8003f22 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61bb      	str	r3, [r7, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01e      	beq.n	8003f68 <xTaskCreateStatic+0xac>
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f42:	2300      	movs	r3, #0
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f850 	bl	8004000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f62:	f000 f8d5 	bl	8004110 <prvAddNewTaskToReadyList>
 8003f66:	e001      	b.n	8003f6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f6c:	697b      	ldr	r3, [r7, #20]
	}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b08c      	sub	sp, #48	; 0x30
 8003f7a:	af04      	add	r7, sp, #16
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fa5c 	bl	8005448 <pvPortMalloc>
 8003f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f98:	2054      	movs	r0, #84	; 0x54
 8003f9a:	f001 fa55 	bl	8005448 <pvPortMalloc>
 8003f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
 8003fac:	e005      	b.n	8003fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f001 fb16 	bl	80055e0 <vPortFree>
 8003fb4:	e001      	b.n	8003fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9303      	str	r3, [sp, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	9302      	str	r3, [sp, #8]
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f80e 	bl	8004000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fe4:	69f8      	ldr	r0, [r7, #28]
 8003fe6:	f000 f893 	bl	8004110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fea:	2301      	movs	r3, #1
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e002      	b.n	8003ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004018:	3b01      	subs	r3, #1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	617b      	str	r3, [r7, #20]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01f      	beq.n	800408e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e012      	b.n	800407a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	7819      	ldrb	r1, [r3, #0]
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	3334      	adds	r3, #52	; 0x34
 8004064:	460a      	mov	r2, r1
 8004066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	3301      	adds	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b0f      	cmp	r3, #15
 800407e:	d9e9      	bls.n	8004054 <prvInitialiseNewTask+0x54>
 8004080:	e000      	b.n	8004084 <prvInitialiseNewTask+0x84>
			{
				break;
 8004082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800408c:	e003      	b.n	8004096 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	2b06      	cmp	r3, #6
 800409a:	d901      	bls.n	80040a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800409c:	2306      	movs	r3, #6
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe ff78 	bl	8002fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	3318      	adds	r3, #24
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe ff73 	bl	8002fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	f1c3 0207 	rsb	r2, r3, #7
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	69b8      	ldr	r0, [r7, #24]
 80040f0:	f000 ff5c 	bl	8004fac <pxPortInitialiseStack>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004118:	f001 f874 	bl	8005204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <prvAddNewTaskToReadyList+0xb8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <prvAddNewTaskToReadyList+0xb8>)
 8004124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <prvAddNewTaskToReadyList+0xbc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800412e:	4a27      	ldr	r2, [pc, #156]	; (80041cc <prvAddNewTaskToReadyList+0xbc>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <prvAddNewTaskToReadyList+0xb8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d110      	bne.n	800415e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800413c:	f000 fc56 	bl	80049ec <prvInitialiseTaskLists>
 8004140:	e00d      	b.n	800415e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <prvAddNewTaskToReadyList+0xc0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <prvAddNewTaskToReadyList+0xbc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d802      	bhi.n	800415e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <prvAddNewTaskToReadyList+0xbc>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <prvAddNewTaskToReadyList+0xc4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <prvAddNewTaskToReadyList+0xc4>)
 8004166:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	2201      	movs	r2, #1
 800416e:	409a      	lsls	r2, r3
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <prvAddNewTaskToReadyList+0xc8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <prvAddNewTaskToReadyList+0xc8>)
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <prvAddNewTaskToReadyList+0xcc>)
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7fe ff18 	bl	8002fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004196:	f001 f865 	bl	8005264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <prvAddNewTaskToReadyList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <prvAddNewTaskToReadyList+0xbc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d207      	bcs.n	80041c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <prvAddNewTaskToReadyList+0xd0>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000454 	.word	0x20000454
 80041cc:	20000354 	.word	0x20000354
 80041d0:	20000460 	.word	0x20000460
 80041d4:	20000470 	.word	0x20000470
 80041d8:	2000045c 	.word	0x2000045c
 80041dc:	20000358 	.word	0x20000358
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80041ec:	f001 f80a 	bl	8005204 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <vTaskDelete+0x18>
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <vTaskDelete+0xf8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	e000      	b.n	80041fe <vTaskDelete+0x1a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3304      	adds	r3, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe ff3b 	bl	8003080 <uxListRemove>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d115      	bne.n	800423c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	4932      	ldr	r1, [pc, #200]	; (80042e0 <vTaskDelete+0xfc>)
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <vTaskDelete+0x58>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	2201      	movs	r2, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43da      	mvns	r2, r3
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <vTaskDelete+0x100>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4013      	ands	r3, r2
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <vTaskDelete+0x100>)
 800423a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3318      	adds	r3, #24
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe ff19 	bl	8003080 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800424e:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <vTaskDelete+0x104>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <vTaskDelete+0x104>)
 8004256:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <vTaskDelete+0xf8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10b      	bne.n	800427a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4820      	ldr	r0, [pc, #128]	; (80042ec <vTaskDelete+0x108>)
 800426a:	f7fe feac 	bl	8002fc6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <vTaskDelete+0x10c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <vTaskDelete+0x10c>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e009      	b.n	800428e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800427a:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <vTaskDelete+0x110>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <vTaskDelete+0x110>)
 8004282:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fc1f 	bl	8004ac8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800428a:	f000 fc4d 	bl	8004b28 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800428e:	f000 ffe9 	bl	8005264 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <vTaskDelete+0x114>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01b      	beq.n	80042d2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <vTaskDelete+0xf8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d116      	bne.n	80042d2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80042a4:	4b15      	ldr	r3, [pc, #84]	; (80042fc <vTaskDelete+0x118>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <vTaskDelete+0xde>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60bb      	str	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <vTaskDelete+0x11c>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000354 	.word	0x20000354
 80042e0:	20000358 	.word	0x20000358
 80042e4:	2000045c 	.word	0x2000045c
 80042e8:	20000470 	.word	0x20000470
 80042ec:	20000428 	.word	0x20000428
 80042f0:	2000043c 	.word	0x2000043c
 80042f4:	20000454 	.word	0x20000454
 80042f8:	20000460 	.word	0x20000460
 80042fc:	2000047c 	.word	0x2000047c
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d017      	beq.n	8004346 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004316:	4b13      	ldr	r3, [pc, #76]	; (8004364 <vTaskDelay+0x60>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <vTaskDelay+0x30>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60bb      	str	r3, [r7, #8]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004334:	f000 f87a 	bl	800442c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004338:	2100      	movs	r1, #0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fdd0 	bl	8004ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004340:	f000 f882 	bl	8004448 <xTaskResumeAll>
 8004344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <vTaskDelay+0x64>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000047c 	.word	0x2000047c
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800437a:	463a      	mov	r2, r7
 800437c:	1d39      	adds	r1, r7, #4
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc f8f8 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	9202      	str	r2, [sp, #8]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	2300      	movs	r3, #0
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	460a      	mov	r2, r1
 800439a:	491e      	ldr	r1, [pc, #120]	; (8004414 <vTaskStartScheduler+0xa8>)
 800439c:	481e      	ldr	r0, [pc, #120]	; (8004418 <vTaskStartScheduler+0xac>)
 800439e:	f7ff fd8d 	bl	8003ebc <xTaskCreateStatic>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <vTaskStartScheduler+0xb0>)
 80043a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <vTaskStartScheduler+0xb0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e001      	b.n	80043ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d116      	bne.n	80043ee <vTaskStartScheduler+0x82>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	613b      	str	r3, [r7, #16]
}
 80043d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <vTaskStartScheduler+0xb4>)
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
 80043da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <vTaskStartScheduler+0xb8>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <vTaskStartScheduler+0xbc>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043e8:	f000 fe6a 	bl	80050c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043ec:	e00e      	b.n	800440c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d10a      	bne.n	800440c <vTaskStartScheduler+0xa0>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60fb      	str	r3, [r7, #12]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <vTaskStartScheduler+0x9e>
}
 800440c:	bf00      	nop
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	0800872c 	.word	0x0800872c
 8004418:	080049bd 	.word	0x080049bd
 800441c:	20000478 	.word	0x20000478
 8004420:	20000474 	.word	0x20000474
 8004424:	20000460 	.word	0x20000460
 8004428:	20000458 	.word	0x20000458

0800442c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <vTaskSuspendAll+0x18>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	4a03      	ldr	r2, [pc, #12]	; (8004444 <vTaskSuspendAll+0x18>)
 8004438:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	2000047c 	.word	0x2000047c

08004448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <xTaskResumeAll+0x114>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <xTaskResumeAll+0x2c>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	603b      	str	r3, [r7, #0]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004474:	f000 fec6 	bl	8005204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004478:	4b38      	ldr	r3, [pc, #224]	; (800455c <xTaskResumeAll+0x114>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	4a37      	ldr	r2, [pc, #220]	; (800455c <xTaskResumeAll+0x114>)
 8004480:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004482:	4b36      	ldr	r3, [pc, #216]	; (800455c <xTaskResumeAll+0x114>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d161      	bne.n	800454e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <xTaskResumeAll+0x118>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d05d      	beq.n	800454e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004492:	e02e      	b.n	80044f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <xTaskResumeAll+0x11c>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3318      	adds	r3, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fded 	bl	8003080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fde8 	bl	8003080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <xTaskResumeAll+0x120>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <xTaskResumeAll+0x120>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <xTaskResumeAll+0x124>)
 80044d0:	441a      	add	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7fe fd74 	bl	8002fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <xTaskResumeAll+0x128>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044ec:	4b21      	ldr	r3, [pc, #132]	; (8004574 <xTaskResumeAll+0x12c>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <xTaskResumeAll+0x11c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1cc      	bne.n	8004494 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004500:	f000 fb12 	bl	8004b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004504:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <xTaskResumeAll+0x130>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004510:	f000 f836 	bl	8004580 <xTaskIncrementTick>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <xTaskResumeAll+0x12c>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f1      	bne.n	8004510 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <xTaskResumeAll+0x130>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <xTaskResumeAll+0x12c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <xTaskResumeAll+0x134>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800454e:	f000 fe89 	bl	8005264 <vPortExitCritical>

	return xAlreadyYielded;
 8004552:	68bb      	ldr	r3, [r7, #8]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2000047c 	.word	0x2000047c
 8004560:	20000454 	.word	0x20000454
 8004564:	20000414 	.word	0x20000414
 8004568:	2000045c 	.word	0x2000045c
 800456c:	20000358 	.word	0x20000358
 8004570:	20000354 	.word	0x20000354
 8004574:	20000468 	.word	0x20000468
 8004578:	20000464 	.word	0x20000464
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458a:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <xTaskIncrementTick+0x144>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 808e 	bne.w	80046b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004594:	4b4c      	ldr	r3, [pc, #304]	; (80046c8 <xTaskIncrementTick+0x148>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800459c:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <xTaskIncrementTick+0x148>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d120      	bne.n	80045ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045a8:	4b48      	ldr	r3, [pc, #288]	; (80046cc <xTaskIncrementTick+0x14c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xTaskIncrementTick+0x46>
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <xTaskIncrementTick+0x14c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <xTaskIncrementTick+0x150>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a3e      	ldr	r2, [pc, #248]	; (80046cc <xTaskIncrementTick+0x14c>)
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4a3e      	ldr	r2, [pc, #248]	; (80046d0 <xTaskIncrementTick+0x150>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <xTaskIncrementTick+0x154>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <xTaskIncrementTick+0x154>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	f000 fa9f 	bl	8004b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <xTaskIncrementTick+0x158>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d348      	bcc.n	8004686 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	4b35      	ldr	r3, [pc, #212]	; (80046cc <xTaskIncrementTick+0x14c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskIncrementTick+0x158>)
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	601a      	str	r2, [r3, #0]
					break;
 8004606:	e03e      	b.n	8004686 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004608:	4b30      	ldr	r3, [pc, #192]	; (80046cc <xTaskIncrementTick+0x14c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d203      	bcs.n	8004628 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <xTaskIncrementTick+0x158>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004626:	e02e      	b.n	8004686 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fd27 	bl	8003080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3318      	adds	r3, #24
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fd1e 	bl	8003080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <xTaskIncrementTick+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	4a22      	ldr	r2, [pc, #136]	; (80046dc <xTaskIncrementTick+0x15c>)
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <xTaskIncrementTick+0x160>)
 8004664:	441a      	add	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7fe fcaa 	bl	8002fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <xTaskIncrementTick+0x164>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d3b9      	bcc.n	80045f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004684:	e7b6      	b.n	80045f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004686:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <xTaskIncrementTick+0x164>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468c:	4914      	ldr	r1, [pc, #80]	; (80046e0 <xTaskIncrementTick+0x160>)
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d901      	bls.n	80046a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <xTaskIncrementTick+0x168>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e004      	b.n	80046ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <xTaskIncrementTick+0x16c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <xTaskIncrementTick+0x16c>)
 80046b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046ba:	697b      	ldr	r3, [r7, #20]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	2000047c 	.word	0x2000047c
 80046c8:	20000458 	.word	0x20000458
 80046cc:	2000040c 	.word	0x2000040c
 80046d0:	20000410 	.word	0x20000410
 80046d4:	2000046c 	.word	0x2000046c
 80046d8:	20000474 	.word	0x20000474
 80046dc:	2000045c 	.word	0x2000045c
 80046e0:	20000358 	.word	0x20000358
 80046e4:	20000354 	.word	0x20000354
 80046e8:	20000468 	.word	0x20000468
 80046ec:	20000464 	.word	0x20000464

080046f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <vTaskSwitchContext+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004704:	e03f      	b.n	8004786 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <vTaskSwitchContext+0xac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	f1c3 031f 	rsb	r3, r3, #31
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	491f      	ldr	r1, [pc, #124]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vTaskSwitchContext+0x5a>
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004758:	4413      	add	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3308      	adds	r3, #8
 800476e:	429a      	cmp	r2, r3
 8004770:	d104      	bne.n	800477c <vTaskSwitchContext+0x8c>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <vTaskSwitchContext+0xb4>)
 8004784:	6013      	str	r3, [r2, #0]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2000047c 	.word	0x2000047c
 8004798:	20000468 	.word	0x20000468
 800479c:	2000045c 	.word	0x2000045c
 80047a0:	20000358 	.word	0x20000358
 80047a4:	20000354 	.word	0x20000354

080047a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vTaskPlaceOnEventList+0x44>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fe fc19 	bl	800300e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047dc:	2101      	movs	r1, #1
 80047de:	6838      	ldr	r0, [r7, #0]
 80047e0:	f000 fb7e 	bl	8004ee0 <prvAddCurrentTaskToDelayedList>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000354 	.word	0x20000354

080047f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fc2d 	bl	8003080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <xTaskRemoveFromEventList+0xac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11c      	bne.n	8004868 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fc24 	bl	8003080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4313      	orrs	r3, r2
 8004846:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <xTaskRemoveFromEventList+0xb4>)
 8004858:	441a      	add	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe fbb0 	bl	8002fc6 <vListInsertEnd>
 8004866:	e005      	b.n	8004874 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3318      	adds	r3, #24
 800486c:	4619      	mov	r1, r3
 800486e:	480e      	ldr	r0, [pc, #56]	; (80048a8 <xTaskRemoveFromEventList+0xb8>)
 8004870:	f7fe fba9 	bl	8002fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <xTaskRemoveFromEventList+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	429a      	cmp	r2, r3
 8004880:	d905      	bls.n	800488e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <xTaskRemoveFromEventList+0xc0>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e001      	b.n	8004892 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2000047c 	.word	0x2000047c
 80048a0:	2000045c 	.word	0x2000045c
 80048a4:	20000358 	.word	0x20000358
 80048a8:	20000414 	.word	0x20000414
 80048ac:	20000354 	.word	0x20000354
 80048b0:	20000468 	.word	0x20000468

080048b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <vTaskInternalSetTimeOutState+0x24>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <vTaskInternalSetTimeOutState+0x28>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	2000046c 	.word	0x2000046c
 80048dc:	20000458 	.word	0x20000458

080048e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004922:	f000 fc6f 	bl	8005204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <xTaskCheckForTimeOut+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e023      	b.n	800498e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <xTaskCheckForTimeOut+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d007      	beq.n	8004962 <xTaskCheckForTimeOut+0x82>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e015      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d20b      	bcs.n	8004984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff9b 	bl	80048b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e004      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f000 fc69 	bl	8005264 <vPortExitCritical>

	return xReturn;
 8004992:	69fb      	ldr	r3, [r7, #28]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000458 	.word	0x20000458
 80049a0:	2000046c 	.word	0x2000046c

080049a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <vTaskMissedYield+0x14>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000468 	.word	0x20000468

080049bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c4:	f000 f852 	bl	8004a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <prvIdleTask+0x28>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d9f9      	bls.n	80049c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <prvIdleTask+0x2c>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049e0:	e7f0      	b.n	80049c4 <prvIdleTask+0x8>
 80049e2:	bf00      	nop
 80049e4:	20000358 	.word	0x20000358
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	e00c      	b.n	8004a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <prvInitialiseTaskLists+0x60>)
 8004a04:	4413      	add	r3, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fab0 	bl	8002f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d9ef      	bls.n	80049f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a18:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a1a:	f7fe faa7 	bl	8002f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a20:	f7fe faa4 	bl	8002f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a24:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x6c>)
 8004a26:	f7fe faa1 	bl	8002f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a2a:	480c      	ldr	r0, [pc, #48]	; (8004a5c <prvInitialiseTaskLists+0x70>)
 8004a2c:	f7fe fa9e 	bl	8002f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a30:	480b      	ldr	r0, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x74>)
 8004a32:	f7fe fa9b 	bl	8002f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <prvInitialiseTaskLists+0x78>)
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvInitialiseTaskLists+0x7c>)
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000358 	.word	0x20000358
 8004a50:	200003e4 	.word	0x200003e4
 8004a54:	200003f8 	.word	0x200003f8
 8004a58:	20000414 	.word	0x20000414
 8004a5c:	20000428 	.word	0x20000428
 8004a60:	20000440 	.word	0x20000440
 8004a64:	2000040c 	.word	0x2000040c
 8004a68:	20000410 	.word	0x20000410

08004a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a72:	e019      	b.n	8004aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a74:	f000 fbc6 	bl	8005204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <prvCheckTasksWaitingTermination+0x50>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fafb 	bl	8003080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9e:	f000 fbe1 	bl	8005264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f810 	bl	8004ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e1      	bne.n	8004a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000428 	.word	0x20000428
 8004ac0:	20000454 	.word	0x20000454
 8004ac4:	2000043c 	.word	0x2000043c

08004ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd7e 	bl	80055e0 <vPortFree>
				vPortFree( pxTCB );
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fd7b 	bl	80055e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aea:	e018      	b.n	8004b1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d103      	bne.n	8004afe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fd72 	bl	80055e0 <vPortFree>
	}
 8004afc:	e00f      	b.n	8004b1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d00a      	beq.n	8004b1e <prvDeleteTCB+0x56>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <prvDeleteTCB+0x54>
	}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <prvResetNextTaskUnblockTime+0x38>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <prvResetNextTaskUnblockTime+0x3c>)
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b40:	e008      	b.n	8004b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b42:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <prvResetNextTaskUnblockTime+0x38>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <prvResetNextTaskUnblockTime+0x3c>)
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	2000040c 	.word	0x2000040c
 8004b64:	20000474 	.word	0x20000474

08004b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <xTaskGetSchedulerState+0x34>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b76:	2301      	movs	r3, #1
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	e008      	b.n	8004b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7c:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <xTaskGetSchedulerState+0x38>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b84:	2302      	movs	r3, #2
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	e001      	b.n	8004b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b8e:	687b      	ldr	r3, [r7, #4]
	}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000460 	.word	0x20000460
 8004ba0:	2000047c 	.word	0x2000047c

08004ba4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d05e      	beq.n	8004c78 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <xTaskPriorityInherit+0xe0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d24e      	bcs.n	8004c66 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db06      	blt.n	8004bde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <xTaskPriorityInherit+0xe0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f1c3 0207 	rsb	r2, r3, #7
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6959      	ldr	r1, [r3, #20]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <xTaskPriorityInherit+0xe4>)
 8004bf0:	4413      	add	r3, r2
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d12f      	bne.n	8004c56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fa40 	bl	8003080 <uxListRemove>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43da      	mvns	r2, r3
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <xTaskPriorityInherit+0xe8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4013      	ands	r3, r2
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <xTaskPriorityInherit+0xe8>)
 8004c1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <xTaskPriorityInherit+0xe0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <xTaskPriorityInherit+0xe8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <xTaskPriorityInherit+0xe8>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <xTaskPriorityInherit+0xe4>)
 8004c46:	441a      	add	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe f9b9 	bl	8002fc6 <vListInsertEnd>
 8004c54:	e004      	b.n	8004c60 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <xTaskPriorityInherit+0xe0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e008      	b.n	8004c78 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <xTaskPriorityInherit+0xe0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d201      	bcs.n	8004c78 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c78:	68fb      	ldr	r3, [r7, #12]
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000354 	.word	0x20000354
 8004c88:	20000358 	.word	0x20000358
 8004c8c:	2000045c 	.word	0x2000045c

08004c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d06e      	beq.n	8004d84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ca6:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <xTaskPriorityDisinherit+0x100>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d00a      	beq.n	8004cc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	60fb      	str	r3, [r7, #12]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60bb      	str	r3, [r7, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d044      	beq.n	8004d84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d140      	bne.n	8004d84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe f9ba 	bl	8003080 <uxListRemove>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	491f      	ldr	r1, [pc, #124]	; (8004d94 <xTaskPriorityDisinherit+0x104>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xTaskPriorityDisinherit+0xae>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xTaskPriorityDisinherit+0x108>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <xTaskPriorityDisinherit+0x108>)
 8004d3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f1c3 0207 	rsb	r2, r3, #7
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	2201      	movs	r2, #1
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <xTaskPriorityDisinherit+0x108>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <xTaskPriorityDisinherit+0x108>)
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <xTaskPriorityDisinherit+0x104>)
 8004d72:	441a      	add	r2, r3
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fe f923 	bl	8002fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d84:	697b      	ldr	r3, [r7, #20]
	}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000354 	.word	0x20000354
 8004d94:	20000358 	.word	0x20000358
 8004d98:	2000045c 	.word	0x2000045c

08004d9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d077      	beq.n	8004ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d902      	bls.n	8004de2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	e002      	b.n	8004de8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d058      	beq.n	8004ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d153      	bne.n	8004ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10a      	bne.n	8004e1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60bb      	str	r3, [r7, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	db04      	blt.n	8004e3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0207 	rsb	r2, r3, #7
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d129      	bne.n	8004ea4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe f913 	bl	8003080 <uxListRemove>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004e96:	441a      	add	r2, r3
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe f891 	bl	8002fc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000354 	.word	0x20000354
 8004eb0:	20000358 	.word	0x20000358
 8004eb4:	2000045c 	.word	0x2000045c

08004eb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ebc:	4b07      	ldr	r3, [pc, #28]	; (8004edc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eca:	3201      	adds	r2, #1
 8004ecc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004ece:	4b03      	ldr	r3, [pc, #12]	; (8004edc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
	}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000354 	.word	0x20000354

08004ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004eea:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe f8c2 	bl	8003080 <uxListRemove>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4013      	ands	r3, r2
 8004f16:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d10a      	bne.n	8004f38 <prvAddCurrentTaskToDelayedList+0x58>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	481a      	ldr	r0, [pc, #104]	; (8004f9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f32:	f7fe f848 	bl	8002fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f36:	e026      	b.n	8004f86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d209      	bcs.n	8004f64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f7fe f856 	bl	800300e <vListInsert>
}
 8004f62:	e010      	b.n	8004f86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f7fe f84c 	bl	800300e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d202      	bcs.n	8004f86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000458 	.word	0x20000458
 8004f94:	20000354 	.word	0x20000354
 8004f98:	2000045c 	.word	0x2000045c
 8004f9c:	20000440 	.word	0x20000440
 8004fa0:	20000410 	.word	0x20000410
 8004fa4:	2000040c 	.word	0x2000040c
 8004fa8:	20000474 	.word	0x20000474

08004fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3b04      	subs	r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 0201 	bic.w	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <pxPortInitialiseStack+0x64>)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b14      	subs	r3, #20
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f06f 0202 	mvn.w	r2, #2
 8004ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3b20      	subs	r3, #32
 8005000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	08005015 	.word	0x08005015

08005014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvTaskExitError+0x54>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d00a      	beq.n	800503e <prvTaskExitError+0x2a>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
}
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <prvTaskExitError+0x28>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60bb      	str	r3, [r7, #8]
}
 8005050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005052:	bf00      	nop
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0fc      	beq.n	8005054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000008 	.word	0x20000008
 800506c:	00000000 	.word	0x00000000

08005070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <pxCurrentTCBConst2>)
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	f380 8809 	msr	PSP, r0
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8811 	msr	BASEPRI, r0
 800508a:	4770      	bx	lr
 800508c:	f3af 8000 	nop.w

08005090 <pxCurrentTCBConst2>:
 8005090:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop

08005098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <prvPortStartFirstTask+0x24>)
 800509a:	6800      	ldr	r0, [r0, #0]
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f380 8808 	msr	MSP, r0
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8814 	msr	CONTROL, r0
 80050aa:	b662      	cpsie	i
 80050ac:	b661      	cpsie	f
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	df00      	svc	0
 80050b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ba:	bf00      	nop
 80050bc:	e000ed08 	.word	0xe000ed08

080050c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050c6:	4b46      	ldr	r3, [pc, #280]	; (80051e0 <xPortStartScheduler+0x120>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <xPortStartScheduler+0x124>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10a      	bne.n	80050e6 <xPortStartScheduler+0x26>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	613b      	str	r3, [r7, #16]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <xPortStartScheduler+0x120>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3f      	ldr	r2, [pc, #252]	; (80051e8 <xPortStartScheduler+0x128>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10a      	bne.n	8005106 <xPortStartScheduler+0x46>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005106:	4b39      	ldr	r3, [pc, #228]	; (80051ec <xPortStartScheduler+0x12c>)
 8005108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <xPortStartScheduler+0x130>)
 800512c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <xPortStartScheduler+0x134>)
 8005130:	2207      	movs	r2, #7
 8005132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005134:	e009      	b.n	800514a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005136:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <xPortStartScheduler+0x134>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3b01      	subs	r3, #1
 800513c:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <xPortStartScheduler+0x134>)
 800513e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	b2db      	uxtb	r3, r3
 8005148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	d0ef      	beq.n	8005136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <xPortStartScheduler+0x134>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1c3 0307 	rsb	r3, r3, #7
 800515e:	2b04      	cmp	r3, #4
 8005160:	d00a      	beq.n	8005178 <xPortStartScheduler+0xb8>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60bb      	str	r3, [r7, #8]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <xPortStartScheduler+0x134>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <xPortStartScheduler+0x134>)
 8005180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <xPortStartScheduler+0x134>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800518a:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <xPortStartScheduler+0x134>)
 800518c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <xPortStartScheduler+0x138>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <xPortStartScheduler+0x138>)
 800519c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <xPortStartScheduler+0x138>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <xPortStartScheduler+0x138>)
 80051a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ae:	f000 f8dd 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <xPortStartScheduler+0x13c>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051b8:	f000 f8fc 	bl	80053b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051bc:	4b10      	ldr	r3, [pc, #64]	; (8005200 <xPortStartScheduler+0x140>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0f      	ldr	r2, [pc, #60]	; (8005200 <xPortStartScheduler+0x140>)
 80051c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051c8:	f7ff ff66 	bl	8005098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051cc:	f7ff fa90 	bl	80046f0 <vTaskSwitchContext>
	prvTaskExitError();
 80051d0:	f7ff ff20 	bl	8005014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	e000ed00 	.word	0xe000ed00
 80051e4:	410fc271 	.word	0x410fc271
 80051e8:	410fc270 	.word	0x410fc270
 80051ec:	e000e400 	.word	0xe000e400
 80051f0:	20000480 	.word	0x20000480
 80051f4:	20000484 	.word	0x20000484
 80051f8:	e000ed20 	.word	0xe000ed20
 80051fc:	20000008 	.word	0x20000008
 8005200:	e000ef34 	.word	0xe000ef34

08005204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
}
 800521c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <vPortEnterCritical+0x58>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	4a0d      	ldr	r2, [pc, #52]	; (800525c <vPortEnterCritical+0x58>)
 8005226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <vPortEnterCritical+0x58>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10f      	bne.n	8005250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <vPortEnterCritical+0x5c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <vPortEnterCritical+0x4c>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	603b      	str	r3, [r7, #0]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <vPortEnterCritical+0x4a>
	}
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000008 	.word	0x20000008
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <vPortExitCritical+0x50>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <vPortExitCritical+0x24>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	607b      	str	r3, [r7, #4]
}
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <vPortExitCritical+0x50>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3b01      	subs	r3, #1
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <vPortExitCritical+0x50>)
 8005290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <vPortExitCritical+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <vPortExitCritical+0x42>
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f383 8811 	msr	BASEPRI, r3
}
 80052a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000008 	.word	0x20000008
	...

080052c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052c0:	f3ef 8009 	mrs	r0, PSP
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <pxCurrentTCBConst>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f01e 0f10 	tst.w	lr, #16
 80052d0:	bf08      	it	eq
 80052d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052e4:	f380 8811 	msr	BASEPRI, r0
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f7ff f9fe 	bl	80046f0 <vTaskSwitchContext>
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f380 8811 	msr	BASEPRI, r0
 80052fc:	bc09      	pop	{r0, r3}
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	6808      	ldr	r0, [r1, #0]
 8005302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005306:	f01e 0f10 	tst.w	lr, #16
 800530a:	bf08      	it	eq
 800530c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005310:	f380 8809 	msr	PSP, r0
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w

08005320 <pxCurrentTCBConst>:
 8005320:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7ff f91d 	bl	8004580 <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <SysTick_Handler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <vPortSetupTimerInterrupt+0x38>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <vPortSetupTimerInterrupt+0x40>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <vPortSetupTimerInterrupt+0x44>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000e010 	.word	0xe000e010
 80053a4:	e000e018 	.word	0xe000e018
 80053a8:	20000000 	.word	0x20000000
 80053ac:	10624dd3 	.word	0x10624dd3
 80053b0:	e000e014 	.word	0xe000e014

080053b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053c4 <vPortEnableVFP+0x10>
 80053b8:	6801      	ldr	r1, [r0, #0]
 80053ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053be:	6001      	str	r1, [r0, #0]
 80053c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053c2:	bf00      	nop
 80053c4:	e000ed88 	.word	0xe000ed88

080053c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053ce:	f3ef 8305 	mrs	r3, IPSR
 80053d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d914      	bls.n	8005404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <vPortValidateInterruptPriority+0x70>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <vPortValidateInterruptPriority+0x74>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	7afa      	ldrb	r2, [r7, #11]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d20a      	bcs.n	8005404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <vPortValidateInterruptPriority+0x78>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <vPortValidateInterruptPriority+0x7c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d90a      	bls.n	800542a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	603b      	str	r3, [r7, #0]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <vPortValidateInterruptPriority+0x60>
	}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e3f0 	.word	0xe000e3f0
 800543c:	20000480 	.word	0x20000480
 8005440:	e000ed0c 	.word	0xe000ed0c
 8005444:	20000484 	.word	0x20000484

08005448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	; 0x28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005454:	f7fe ffea 	bl	800442c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005458:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <pvPortMalloc+0x180>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005460:	f000 f920 	bl	80056a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <pvPortMalloc+0x184>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8093 	bne.w	8005598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01d      	beq.n	80054b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005478:	2208      	movs	r2, #8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b00      	cmp	r3, #0
 8005488:	d014      	beq.n	80054b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f023 0307 	bic.w	r3, r3, #7
 8005490:	3308      	adds	r3, #8
 8005492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <pvPortMalloc+0x6c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	617b      	str	r3, [r7, #20]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d06e      	beq.n	8005598 <pvPortMalloc+0x150>
 80054ba:	4b45      	ldr	r3, [pc, #276]	; (80055d0 <pvPortMalloc+0x188>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d869      	bhi.n	8005598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054c4:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <pvPortMalloc+0x18c>)
 80054c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054c8:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <pvPortMalloc+0x18c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ce:	e004      	b.n	80054da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d903      	bls.n	80054ec <pvPortMalloc+0xa4>
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f1      	bne.n	80054d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <pvPortMalloc+0x180>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d050      	beq.n	8005598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2208      	movs	r2, #8
 80054fc:	4413      	add	r3, r2
 80054fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	2308      	movs	r3, #8
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	429a      	cmp	r2, r3
 8005516:	d91f      	bls.n	8005558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <pvPortMalloc+0xf8>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	613b      	str	r3, [r7, #16]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	1ad2      	subs	r2, r2, r3
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005552:	69b8      	ldr	r0, [r7, #24]
 8005554:	f000 f908 	bl	8005768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005558:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <pvPortMalloc+0x188>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <pvPortMalloc+0x188>)
 8005564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <pvPortMalloc+0x188>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <pvPortMalloc+0x190>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d203      	bcs.n	800557a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005572:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <pvPortMalloc+0x188>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <pvPortMalloc+0x190>)
 8005578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <pvPortMalloc+0x184>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	431a      	orrs	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <pvPortMalloc+0x194>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a11      	ldr	r2, [pc, #68]	; (80055dc <pvPortMalloc+0x194>)
 8005596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005598:	f7fe ff56 	bl	8004448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <pvPortMalloc+0x174>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60fb      	str	r3, [r7, #12]
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <pvPortMalloc+0x172>
	return pvReturn;
 80055bc:	69fb      	ldr	r3, [r7, #28]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3728      	adds	r7, #40	; 0x28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20004090 	.word	0x20004090
 80055cc:	200040a4 	.word	0x200040a4
 80055d0:	20004094 	.word	0x20004094
 80055d4:	20004088 	.word	0x20004088
 80055d8:	20004098 	.word	0x20004098
 80055dc:	2000409c 	.word	0x2000409c

080055e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04d      	beq.n	800568e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055f2:	2308      	movs	r3, #8
 80055f4:	425b      	negs	r3, r3
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4413      	add	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <vPortFree+0xb8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <vPortFree+0x44>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60fb      	str	r3, [r7, #12]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <vPortFree+0x62>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	60bb      	str	r3, [r7, #8]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <vPortFree+0xb8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01e      	beq.n	800568e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11a      	bne.n	800568e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <vPortFree+0xb8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	43db      	mvns	r3, r3
 8005662:	401a      	ands	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005668:	f7fe fee0 	bl	800442c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <vPortFree+0xbc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4413      	add	r3, r2
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <vPortFree+0xbc>)
 8005678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800567a:	6938      	ldr	r0, [r7, #16]
 800567c:	f000 f874 	bl	8005768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <vPortFree+0xc0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a06      	ldr	r2, [pc, #24]	; (80056a0 <vPortFree+0xc0>)
 8005688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800568a:	f7fe fedd 	bl	8004448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800568e:	bf00      	nop
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	200040a4 	.word	0x200040a4
 800569c:	20004094 	.word	0x20004094
 80056a0:	200040a0 	.word	0x200040a0

080056a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056b0:	4b27      	ldr	r3, [pc, #156]	; (8005750 <prvHeapInit+0xac>)
 80056b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3307      	adds	r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <prvHeapInit+0xac>)
 80056d4:	4413      	add	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056dc:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <prvHeapInit+0xb0>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <prvHeapInit+0xb0>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4413      	add	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056f0:	2208      	movs	r2, #8
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <prvHeapInit+0xb4>)
 8005704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005706:	4b14      	ldr	r3, [pc, #80]	; (8005758 <prvHeapInit+0xb4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <prvHeapInit+0xb4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <prvHeapInit+0xb4>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a0a      	ldr	r2, [pc, #40]	; (800575c <prvHeapInit+0xb8>)
 8005732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	4a09      	ldr	r2, [pc, #36]	; (8005760 <prvHeapInit+0xbc>)
 800573a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <prvHeapInit+0xc0>)
 800573e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005742:	601a      	str	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	20000488 	.word	0x20000488
 8005754:	20004088 	.word	0x20004088
 8005758:	20004090 	.word	0x20004090
 800575c:	20004098 	.word	0x20004098
 8005760:	20004094 	.word	0x20004094
 8005764:	200040a4 	.word	0x200040a4

08005768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <prvInsertBlockIntoFreeList+0xac>)
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e002      	b.n	800577c <prvInsertBlockIntoFreeList+0x14>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d8f7      	bhi.n	8005776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d108      	bne.n	80057aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	441a      	add	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	441a      	add	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d118      	bne.n	80057f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <prvInsertBlockIntoFreeList+0xb0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d00d      	beq.n	80057e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	441a      	add	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e008      	b.n	80057f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <prvInsertBlockIntoFreeList+0xb0>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e003      	b.n	80057f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d002      	beq.n	8005806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20004088 	.word	0x20004088
 8005818:	20004090 	.word	0x20004090

0800581c <__NVIC_GetPriorityGrouping>:
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <__NVIC_GetPriorityGrouping+0x18>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	f003 0307 	and.w	r3, r3, #7
}
 800582a:	4618      	mov	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <__NVIC_EnableIRQ>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	2b00      	cmp	r3, #0
 8005848:	db0b      	blt.n	8005862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	f003 021f 	and.w	r2, r3, #31
 8005850:	4907      	ldr	r1, [pc, #28]	; (8005870 <__NVIC_EnableIRQ+0x38>)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	2001      	movs	r0, #1
 800585a:	fa00 f202 	lsl.w	r2, r0, r2
 800585e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	e000e100 	.word	0xe000e100

08005874 <__NVIC_SetPriority>:
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	6039      	str	r1, [r7, #0]
 800587e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db0a      	blt.n	800589e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	490c      	ldr	r1, [pc, #48]	; (80058c0 <__NVIC_SetPriority+0x4c>)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	440b      	add	r3, r1
 8005898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800589c:	e00a      	b.n	80058b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4908      	ldr	r1, [pc, #32]	; (80058c4 <__NVIC_SetPriority+0x50>)
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	3b04      	subs	r3, #4
 80058ac:	0112      	lsls	r2, r2, #4
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	440b      	add	r3, r1
 80058b2:	761a      	strb	r2, [r3, #24]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	e000e100 	.word	0xe000e100
 80058c4:	e000ed00 	.word	0xe000ed00

080058c8 <NVIC_EncodePriority>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f1c3 0307 	rsb	r3, r3, #7
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	bf28      	it	cs
 80058e6:	2304      	movcs	r3, #4
 80058e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d902      	bls.n	80058f8 <NVIC_EncodePriority+0x30>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3b03      	subs	r3, #3
 80058f6:	e000      	b.n	80058fa <NVIC_EncodePriority+0x32>
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43da      	mvns	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	401a      	ands	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005910:	f04f 31ff 	mov.w	r1, #4294967295
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	43d9      	mvns	r1, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005920:	4313      	orrs	r3, r2
}
 8005922:	4618      	mov	r0, r3
 8005924:	3724      	adds	r7, #36	; 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <LL_DMA_EnableStream>:
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800593a:	4a0c      	ldr	r2, [pc, #48]	; (800596c <LL_DMA_EnableStream+0x3c>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4413      	add	r3, r2
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4908      	ldr	r1, [pc, #32]	; (800596c <LL_DMA_EnableStream+0x3c>)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	440a      	add	r2, r1
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	4611      	mov	r1, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	440a      	add	r2, r1
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6013      	str	r3, [r2, #0]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	08008948 	.word	0x08008948

08005970 <LL_DMA_SetDataTransferDirection>:
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <LL_DMA_SetDataTransferDirection+0x44>)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005990:	4908      	ldr	r1, [pc, #32]	; (80059b4 <LL_DMA_SetDataTransferDirection+0x44>)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	440b      	add	r3, r1
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	440b      	add	r3, r1
 800599e:	4619      	mov	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	08008948 	.word	0x08008948

080059b8 <LL_DMA_SetMode>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80059c4:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <LL_DMA_SetMode+0x44>)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4413      	add	r3, r2
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80059d8:	4908      	ldr	r1, [pc, #32]	; (80059fc <LL_DMA_SetMode+0x44>)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	440b      	add	r3, r1
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	440b      	add	r3, r1
 80059e6:	4619      	mov	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	08008948 	.word	0x08008948

08005a00 <LL_DMA_SetPeriphIncMode>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8005a0c:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <LL_DMA_SetPeriphIncMode+0x44>)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a20:	4908      	ldr	r1, [pc, #32]	; (8005a44 <LL_DMA_SetPeriphIncMode+0x44>)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	440b      	add	r3, r1
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	440b      	add	r3, r1
 8005a2e:	4619      	mov	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	08008948 	.word	0x08008948

08005a48 <LL_DMA_SetMemoryIncMode>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <LL_DMA_SetMemoryIncMode+0x44>)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a68:	4908      	ldr	r1, [pc, #32]	; (8005a8c <LL_DMA_SetMemoryIncMode+0x44>)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	440b      	add	r3, r1
 8005a76:	4619      	mov	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	08008948 	.word	0x08008948

08005a90 <LL_DMA_SetPeriphSize>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <LL_DMA_SetPeriphSize+0x44>)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005ab0:	4908      	ldr	r1, [pc, #32]	; (8005ad4 <LL_DMA_SetPeriphSize+0x44>)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	440b      	add	r3, r1
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	440b      	add	r3, r1
 8005abe:	4619      	mov	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	08008948 	.word	0x08008948

08005ad8 <LL_DMA_SetMemorySize>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <LL_DMA_SetMemorySize+0x44>)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8005af8:	4908      	ldr	r1, [pc, #32]	; (8005b1c <LL_DMA_SetMemorySize+0x44>)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	440b      	add	r3, r1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	440b      	add	r3, r1
 8005b06:	4619      	mov	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	08008948 	.word	0x08008948

08005b20 <LL_DMA_SetStreamPriorityLevel>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	; (8005b64 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b40:	4908      	ldr	r1, [pc, #32]	; (8005b64 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	440b      	add	r3, r1
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	4619      	mov	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	08008948 	.word	0x08008948

08005b68 <LL_DMA_SetDataLength>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8005b74:	4a0d      	ldr	r2, [pc, #52]	; (8005bac <LL_DMA_SetDataLength+0x44>)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	4908      	ldr	r1, [pc, #32]	; (8005bac <LL_DMA_SetDataLength+0x44>)
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	4611      	mov	r1, r2
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	08008948 	.word	0x08008948

08005bb0 <LL_DMA_GetDataLength>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <LL_DMA_GetDataLength+0x28>)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b29b      	uxth	r3, r3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	08008948 	.word	0x08008948

08005bdc <LL_DMA_SetChannelSelection>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8005be8:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <LL_DMA_SetChannelSelection+0x44>)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4413      	add	r3, r2
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005bfc:	4908      	ldr	r1, [pc, #32]	; (8005c20 <LL_DMA_SetChannelSelection+0x44>)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	440b      	add	r3, r1
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	440b      	add	r3, r1
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	08008948 	.word	0x08008948

08005c24 <LL_DMA_DisableFifoMode>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <LL_DMA_DisableFifoMode+0x3c>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4413      	add	r3, r2
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	4908      	ldr	r1, [pc, #32]	; (8005c60 <LL_DMA_DisableFifoMode+0x3c>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	440a      	add	r2, r1
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	4611      	mov	r1, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	6153      	str	r3, [r2, #20]
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	08008948 	.word	0x08008948

08005c64 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8005c70:	4a07      	ldr	r2, [pc, #28]	; (8005c90 <LL_DMA_SetMemoryAddress+0x2c>)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60d3      	str	r3, [r2, #12]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	08008948 	.word	0x08008948

08005c94 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8005ca0:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <LL_DMA_SetPeriphAddress+0x2c>)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	461a      	mov	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6093      	str	r3, [r2, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	08008948 	.word	0x08008948

08005cc4 <LL_AHB1_GRP1_EnableClock>:
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40023800 	.word	0x40023800

08005cf4 <LL_APB2_GRP1_EnableClock>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d00:	4907      	ldr	r1, [pc, #28]	; (8005d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d12:	68fb      	ldr	r3, [r7, #12]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40023800 	.word	0x40023800

08005d24 <LL_USART_Enable>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_USART_Disable>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <LL_USART_SetBaudRate>:
{
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	b09f      	sub	sp, #124	; 0x7c
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6778      	str	r0, [r7, #116]	; 0x74
 8005d6e:	6739      	str	r1, [r7, #112]	; 0x70
 8005d70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d72:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7a:	f040 80bc 	bne.w	8005ef6 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d80:	461c      	mov	r4, r3
 8005d82:	f04f 0500 	mov.w	r5, #0
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	eb12 0a02 	adds.w	sl, r2, r2
 8005d8e:	eb43 0b03 	adc.w	fp, r3, r3
 8005d92:	4652      	mov	r2, sl
 8005d94:	465b      	mov	r3, fp
 8005d96:	1912      	adds	r2, r2, r4
 8005d98:	eb45 0303 	adc.w	r3, r5, r3
 8005d9c:	f04f 0000 	mov.w	r0, #0
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	00d9      	lsls	r1, r3, #3
 8005da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005daa:	00d0      	lsls	r0, r2, #3
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	1911      	adds	r1, r2, r4
 8005db2:	6639      	str	r1, [r7, #96]	; 0x60
 8005db4:	416b      	adcs	r3, r5
 8005db6:	667b      	str	r3, [r7, #100]	; 0x64
 8005db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	1891      	adds	r1, r2, r2
 8005dc2:	6339      	str	r1, [r7, #48]	; 0x30
 8005dc4:	415b      	adcs	r3, r3
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dd0:	f7fa fa56 	bl	8000280 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4ba9      	ldr	r3, [pc, #676]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005dda:	fba3 2302 	umull	r2, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	b29e      	uxth	r6, r3
 8005de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de8:	461c      	mov	r4, r3
 8005dea:	f04f 0500 	mov.w	r5, #0
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	1891      	adds	r1, r2, r2
 8005df4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005df6:	415b      	adcs	r3, r3
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dfe:	1912      	adds	r2, r2, r4
 8005e00:	eb45 0303 	adc.w	r3, r5, r3
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	00d9      	lsls	r1, r3, #3
 8005e0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e12:	00d0      	lsls	r0, r2, #3
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	1911      	adds	r1, r2, r4
 8005e1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e1c:	416b      	adcs	r3, r5
 8005e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e22:	461a      	mov	r2, r3
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	6239      	str	r1, [r7, #32]
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e34:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e38:	f7fa fa22 	bl	8000280 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b8f      	ldr	r3, [pc, #572]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005e42:	fba3 1302 	umull	r1, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	2164      	movs	r1, #100	; 0x64
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	3332      	adds	r3, #50	; 0x32
 8005e54:	4a8a      	ldr	r2, [pc, #552]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4433      	add	r3, r6
 8005e6a:	b29e      	uxth	r6, r3
 8005e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	1894      	adds	r4, r2, r2
 8005e7a:	61bc      	str	r4, [r7, #24]
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e84:	1812      	adds	r2, r2, r0
 8005e86:	eb41 0303 	adc.w	r3, r1, r3
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	f04f 0500 	mov.w	r5, #0
 8005e92:	00dd      	lsls	r5, r3, #3
 8005e94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e98:	00d4      	lsls	r4, r2, #3
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	1814      	adds	r4, r2, r0
 8005ea0:	653c      	str	r4, [r7, #80]	; 0x50
 8005ea2:	414b      	adcs	r3, r1
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	1891      	adds	r1, r2, r2
 8005eb0:	6139      	str	r1, [r7, #16]
 8005eb2:	415b      	adcs	r3, r3
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ebe:	f7fa f9df 	bl	8000280 <__aeabi_uldivmod>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4b6e      	ldr	r3, [pc, #440]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	2164      	movs	r1, #100	; 0x64
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	3332      	adds	r3, #50	; 0x32
 8005eda:	4a69      	ldr	r2, [pc, #420]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4433      	add	r3, r6
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	e0be      	b.n	8006074 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ef8:	461c      	mov	r4, r3
 8005efa:	f04f 0500 	mov.w	r5, #0
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	eb12 0802 	adds.w	r8, r2, r2
 8005f06:	eb43 0903 	adc.w	r9, r3, r3
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	1912      	adds	r2, r2, r4
 8005f10:	eb45 0303 	adc.w	r3, r5, r3
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f04f 0100 	mov.w	r1, #0
 8005f1c:	00d9      	lsls	r1, r3, #3
 8005f1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f22:	00d0      	lsls	r0, r2, #3
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	1911      	adds	r1, r2, r4
 8005f2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f2c:	416b      	adcs	r3, r5
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f32:	4618      	mov	r0, r3
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	008b      	lsls	r3, r1, #2
 8005f42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f46:	0082      	lsls	r2, r0, #2
 8005f48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f4c:	f7fa f998 	bl	8000280 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4b4a      	ldr	r3, [pc, #296]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005f56:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	b29e      	uxth	r6, r3
 8005f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f64:	4618      	mov	r0, r3
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	1894      	adds	r4, r2, r2
 8005f70:	60bc      	str	r4, [r7, #8]
 8005f72:	415b      	adcs	r3, r3
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f7a:	1812      	adds	r2, r2, r0
 8005f7c:	eb41 0303 	adc.w	r3, r1, r3
 8005f80:	f04f 0400 	mov.w	r4, #0
 8005f84:	f04f 0500 	mov.w	r5, #0
 8005f88:	00dd      	lsls	r5, r3, #3
 8005f8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f8e:	00d4      	lsls	r4, r2, #3
 8005f90:	4622      	mov	r2, r4
 8005f92:	462b      	mov	r3, r5
 8005f94:	1814      	adds	r4, r2, r0
 8005f96:	643c      	str	r4, [r7, #64]	; 0x40
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	008b      	lsls	r3, r1, #2
 8005fae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fb2:	0082      	lsls	r2, r0, #2
 8005fb4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005fb8:	f7fa f962 	bl	8000280 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	2164      	movs	r1, #100	; 0x64
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	3332      	adds	r3, #50	; 0x32
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4433      	add	r3, r6
 8005fe6:	b29e      	uxth	r6, r3
 8005fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fea:	4618      	mov	r0, r3
 8005fec:	f04f 0100 	mov.w	r1, #0
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	1894      	adds	r4, r2, r2
 8005ff6:	603c      	str	r4, [r7, #0]
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006000:	1812      	adds	r2, r2, r0
 8006002:	eb41 0303 	adc.w	r3, r1, r3
 8006006:	f04f 0400 	mov.w	r4, #0
 800600a:	f04f 0500 	mov.w	r5, #0
 800600e:	00dd      	lsls	r5, r3, #3
 8006010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006014:	00d4      	lsls	r4, r2, #3
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	1814      	adds	r4, r2, r0
 800601c:	63bc      	str	r4, [r7, #56]	; 0x38
 800601e:	414b      	adcs	r3, r1
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006024:	4618      	mov	r0, r3
 8006026:	f04f 0100 	mov.w	r1, #0
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006038:	0082      	lsls	r2, r0, #2
 800603a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800603e:	f7fa f91f 	bl	8000280 <__aeabi_uldivmod>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 8006048:	fba3 1302 	umull	r1, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	2164      	movs	r1, #100	; 0x64
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	3332      	adds	r3, #50	; 0x32
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <LL_USART_SetBaudRate+0x31c>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	b29b      	uxth	r3, r3
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	b29b      	uxth	r3, r3
 800606a:	4433      	add	r3, r6
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	377c      	adds	r7, #124	; 0x7c
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607e:	bf00      	nop
 8006080:	51eb851f 	.word	0x51eb851f

08006084 <LL_USART_ConfigAsyncMode>:
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	615a      	str	r2, [r3, #20]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e6:	2b80      	cmp	r3, #128	; 0x80
 80060e8:	bf0c      	ite	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	2300      	movne	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f043 0210 	orr.w	r2, r3, #16
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	615a      	str	r2, [r3, #20]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	605a      	str	r2, [r3, #4]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_GPIO_SetOutputPin>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_GPIO_ResetOutputPin>:
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	041a      	lsls	r2, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <sim7600_delay_ms>:
const char* res2; int res2Length;
uint32_t playTime; //in ms
int offsetTimer;

__STATIC_INLINE void sim7600_delay_ms(int _ms)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	osDelay(_ms);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc fd3d 	bl	8002c1e <osDelay>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <sim7600_powerON>:
bool HaveCall = false;

//init gpio, uart, dma(no fifo, byte->byte)

void sim7600_powerON()
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 80061b0:	2101      	movs	r1, #1
 80061b2:	480c      	ldr	r0, [pc, #48]	; (80061e4 <sim7600_powerON+0x38>)
 80061b4:	f7ff ffd1 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 80061b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061bc:	f7ff ffea 	bl	8006194 <sim7600_delay_ms>

  Sim_PWR(0);
 80061c0:	2101      	movs	r1, #1
 80061c2:	4808      	ldr	r0, [pc, #32]	; (80061e4 <sim7600_powerON+0x38>)
 80061c4:	f7ff ffd7 	bl	8006176 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(500);
 80061c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061cc:	f7ff ffe2 	bl	8006194 <sim7600_delay_ms>

  Sim_PWR(1);
 80061d0:	2101      	movs	r1, #1
 80061d2:	4804      	ldr	r0, [pc, #16]	; (80061e4 <sim7600_powerON+0x38>)
 80061d4:	f7ff ffc1 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(16000);
 80061d8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80061dc:	f7ff ffda 	bl	8006194 <sim7600_delay_ms>
}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000

080061e8 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 80061ec:	2101      	movs	r1, #1
 80061ee:	480c      	ldr	r0, [pc, #48]	; (8006220 <sim7600_powerOFF+0x38>)
 80061f0:	f7ff ffb3 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 80061f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061f8:	f7ff ffcc 	bl	8006194 <sim7600_delay_ms>

  Sim_PWR(0);
 80061fc:	2101      	movs	r1, #1
 80061fe:	4808      	ldr	r0, [pc, #32]	; (8006220 <sim7600_powerOFF+0x38>)
 8006200:	f7ff ffb9 	bl	8006176 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(4000);
 8006204:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006208:	f7ff ffc4 	bl	8006194 <sim7600_delay_ms>

  Sim_PWR(1);
 800620c:	2101      	movs	r1, #1
 800620e:	4804      	ldr	r0, [pc, #16]	; (8006220 <sim7600_powerOFF+0x38>)
 8006210:	f7ff ffa3 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(26000);
 8006214:	f246 5090 	movw	r0, #26000	; 0x6590
 8006218:	f7ff ffbc 	bl	8006194 <sim7600_delay_ms>
}
 800621c:	bf00      	nop
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40021000 	.word	0x40021000

08006224 <sim7600_reset>:

void sim7600_reset()
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  Sim_RST(1);
 8006228:	2102      	movs	r1, #2
 800622a:	480c      	ldr	r0, [pc, #48]	; (800625c <sim7600_reset+0x38>)
 800622c:	f7ff ff95 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8006230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006234:	f7ff ffae 	bl	8006194 <sim7600_delay_ms>

  Sim_RST(0);
 8006238:	2102      	movs	r1, #2
 800623a:	4808      	ldr	r0, [pc, #32]	; (800625c <sim7600_reset+0x38>)
 800623c:	f7ff ff9b 	bl	8006176 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(350);
 8006240:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006244:	f7ff ffa6 	bl	8006194 <sim7600_delay_ms>

  Sim_RST(1);
 8006248:	2102      	movs	r1, #2
 800624a:	4804      	ldr	r0, [pc, #16]	; (800625c <sim7600_reset+0x38>)
 800624c:	f7ff ff85 	bl	800615a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(2000);
 8006250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006254:	f7ff ff9e 	bl	8006194 <sim7600_delay_ms>
}
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006266:	463b      	mov	r3, r7
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
 8006274:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8006276:	2010      	movs	r0, #16
 8006278:	f7ff fd24 	bl	8005cc4 <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_SetOutputPin(GPIOE, pwrSIM_Pin | rstSIM_Pin);
 800627c:	2103      	movs	r1, #3
 800627e:	480b      	ldr	r0, [pc, #44]	; (80062ac <sim7600_gpio_init+0x4c>)
 8006280:	f7ff ff6b 	bl	800615a <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 8006284:	2303      	movs	r3, #3
 8006286:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006288:	2301      	movs	r3, #1
 800628a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006294:	2301      	movs	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006298:	463b      	mov	r3, r7
 800629a:	4619      	mov	r1, r3
 800629c:	4803      	ldr	r0, [pc, #12]	; (80062ac <sim7600_gpio_init+0x4c>)
 800629e:	f7fb fee4 	bl	800206a <LL_GPIO_Init>
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40021000 	.word	0x40021000

080062b0 <sim7600_init>:

void sim7600_init()
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b092      	sub	sp, #72	; 0x48
 80062b4:	af00      	add	r7, sp, #0
  sim_buff[sim_buff_size] = '\0'; //initialize last bytes to ensure end of string (with strstr at handle receive data)
 80062b6:	4b66      	ldr	r3, [pc, #408]	; (8006450 <sim7600_init+0x1a0>)
 80062b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80062bc:	3308      	adds	r3, #8
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]

  //init semaphore to be ensure tx uart (share resource) use properly (place at main.c)
  osSemaphoreDef(BinSemsim7600UartTx);
 80062c2:	2300      	movs	r3, #0
 80062c4:	643b      	str	r3, [r7, #64]	; 0x40
 80062c6:	2300      	movs	r3, #0
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
  BinSemsim7600UartTxHandle = osSemaphoreCreate(osSemaphore(BinSemsim7600UartTx), 1);
 80062ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062ce:	2101      	movs	r1, #1
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fc fcb8 	bl	8002c46 <osSemaphoreCreate>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4a5e      	ldr	r2, [pc, #376]	; (8006454 <sim7600_init+0x1a4>)
 80062da:	6013      	str	r3, [r2, #0]

  //semaphore to make sure that response is check properly
  osSemaphoreDef(BinSemPlayMp3);
 80062dc:	2300      	movs	r3, #0
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e0:	2300      	movs	r3, #0
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemPlayMp3Handle = osSemaphoreCreate(osSemaphore(BinSemPlayMp3), 1);
 80062e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fc fcab 	bl	8002c46 <osSemaphoreCreate>
 80062f0:	4603      	mov	r3, r0
 80062f2:	4a59      	ldr	r2, [pc, #356]	; (8006458 <sim7600_init+0x1a8>)
 80062f4:	6013      	str	r3, [r2, #0]

  sim7600_gpio_init();
 80062f6:	f7ff ffb3 	bl	8006260 <sim7600_gpio_init>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062fa:	f107 0320 	add.w	r3, r7, #32
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	60da      	str	r2, [r3, #12]
 8006308:	611a      	str	r2, [r3, #16]
 800630a:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	611a      	str	r2, [r3, #16]
 800631a:	615a      	str	r2, [r3, #20]
 800631c:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800631e:	2010      	movs	r0, #16
 8006320:	f7ff fce8 	bl	8005cf4 <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006324:	2001      	movs	r0, #1
 8006326:	f7ff fccd 	bl	8005cc4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800632a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800632e:	f7ff fcc9 	bl	8005cc4 <LL_AHB1_GRP1_EnableClock>
       * USART1 GPIO Configuration
       *
       * PA9   ------> USART1_TX
       * PA10   ------> USART1_RX
       */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8006332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006338:	2302      	movs	r3, #2
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800633c:	2303      	movs	r3, #3
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006344:	2301      	movs	r3, #1
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 8006348:	2307      	movs	r3, #7
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800634c:	f107 0320 	add.w	r3, r7, #32
 8006350:	4619      	mov	r1, r3
 8006352:	4842      	ldr	r0, [pc, #264]	; (800645c <sim7600_init+0x1ac>)
 8006354:	f7fb fe89 	bl	800206a <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8006358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800635c:	2102      	movs	r1, #2
 800635e:	4840      	ldr	r0, [pc, #256]	; (8006460 <sim7600_init+0x1b0>)
 8006360:	f7ff fc3c 	bl	8005bdc <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006364:	2200      	movs	r2, #0
 8006366:	2102      	movs	r1, #2
 8006368:	483d      	ldr	r0, [pc, #244]	; (8006460 <sim7600_init+0x1b0>)
 800636a:	f7ff fb01 	bl	8005970 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 800636e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006372:	2102      	movs	r1, #2
 8006374:	483a      	ldr	r0, [pc, #232]	; (8006460 <sim7600_init+0x1b0>)
 8006376:	f7ff fbd3 	bl	8005b20 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800637a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637e:	2102      	movs	r1, #2
 8006380:	4837      	ldr	r0, [pc, #220]	; (8006460 <sim7600_init+0x1b0>)
 8006382:	f7ff fb19 	bl	80059b8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8006386:	2200      	movs	r2, #0
 8006388:	2102      	movs	r1, #2
 800638a:	4835      	ldr	r0, [pc, #212]	; (8006460 <sim7600_init+0x1b0>)
 800638c:	f7ff fb38 	bl	8005a00 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8006390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006394:	2102      	movs	r1, #2
 8006396:	4832      	ldr	r0, [pc, #200]	; (8006460 <sim7600_init+0x1b0>)
 8006398:	f7ff fb56 	bl	8005a48 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800639c:	2200      	movs	r2, #0
 800639e:	2102      	movs	r1, #2
 80063a0:	482f      	ldr	r0, [pc, #188]	; (8006460 <sim7600_init+0x1b0>)
 80063a2:	f7ff fb75 	bl	8005a90 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80063a6:	2200      	movs	r2, #0
 80063a8:	2102      	movs	r1, #2
 80063aa:	482d      	ldr	r0, [pc, #180]	; (8006460 <sim7600_init+0x1b0>)
 80063ac:	f7ff fb94 	bl	8005ad8 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 80063b0:	2102      	movs	r1, #2
 80063b2:	482b      	ldr	r0, [pc, #172]	; (8006460 <sim7600_init+0x1b0>)
 80063b4:	f7ff fc36 	bl	8005c24 <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <sim7600_init+0x1b4>)
 80063ba:	2102      	movs	r1, #2
 80063bc:	4828      	ldr	r0, [pc, #160]	; (8006460 <sim7600_init+0x1b0>)
 80063be:	f7ff fc69 	bl	8005c94 <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buffer);
 80063c2:	4b29      	ldr	r3, [pc, #164]	; (8006468 <sim7600_init+0x1b8>)
 80063c4:	461a      	mov	r2, r3
 80063c6:	2102      	movs	r1, #2
 80063c8:	4825      	ldr	r0, [pc, #148]	; (8006460 <sim7600_init+0x1b0>)
 80063ca:	f7ff fc4b 	bl	8005c64 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buffer_size);
 80063ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80063d2:	461a      	mov	r2, r3
 80063d4:	2102      	movs	r1, #2
 80063d6:	4822      	ldr	r0, [pc, #136]	; (8006460 <sim7600_init+0x1b0>)
 80063d8:	f7ff fbc6 	bl	8005b68 <LL_DMA_SetDataLength>
  /* DMA interrupt init */
  //NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 6, 0));
  //NVIC_EnableIRQ(DMA2_Stream2_IRQn);

  /* USART configuration */
  USART_InitStruct.BaudRate = Sim7600BaudDefaul;
 80063dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80063e0:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80063ee:	230c      	movs	r3, #12
 80063f0:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	481b      	ldr	r0, [pc, #108]	; (800646c <sim7600_init+0x1bc>)
 8006400:	f7fc faf4 	bl	80029ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8006404:	4819      	ldr	r0, [pc, #100]	; (800646c <sim7600_init+0x1bc>)
 8006406:	f7ff fe3d 	bl	8006084 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 800640a:	4818      	ldr	r0, [pc, #96]	; (800646c <sim7600_init+0x1bc>)
 800640c:	f7ff fe86 	bl	800611c <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8006410:	4816      	ldr	r0, [pc, #88]	; (800646c <sim7600_init+0x1bc>)
 8006412:	f7ff fe73 	bl	80060fc <LL_USART_EnableIT_IDLE>

  /* USART interrupt */
  //priority high (6) after spi and dma for vs1003
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8006416:	f7ff fa01 	bl	800581c <__NVIC_GetPriorityGrouping>
 800641a:	4603      	mov	r3, r0
 800641c:	2200      	movs	r2, #0
 800641e:	210f      	movs	r1, #15
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fa51 	bl	80058c8 <NVIC_EncodePriority>
 8006426:	4603      	mov	r3, r0
 8006428:	4619      	mov	r1, r3
 800642a:	2025      	movs	r0, #37	; 0x25
 800642c:	f7ff fa22 	bl	8005874 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8006430:	2025      	movs	r0, #37	; 0x25
 8006432:	f7ff fa01 	bl	8005838 <__NVIC_EnableIRQ>

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8006436:	2102      	movs	r1, #2
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <sim7600_init+0x1b0>)
 800643a:	f7ff fa79 	bl	8005930 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 800643e:	480b      	ldr	r0, [pc, #44]	; (800646c <sim7600_init+0x1bc>)
 8006440:	f7ff fc70 	bl	8005d24 <LL_USART_Enable>

  //power on sim7600
  sim7600_powerON();
 8006444:	f7ff feb2 	bl	80061ac <sim7600_powerON>
  // {
	//  while(!LL_USART_IsActiveFlag_RXNE(usartSim7600));
  //    LL_USART_ReceiveData8(usartSim7600);
  // }
  //sim7600_usart_send_string("ATE0\r\n");
}
 8006448:	bf00      	nop
 800644a:	3748      	adds	r7, #72	; 0x48
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200055fc 	.word	0x200055fc
 8006454:	200055f4 	.word	0x200055f4
 8006458:	200055dc 	.word	0x200055dc
 800645c:	40020000 	.word	0x40020000
 8006460:	40026400 	.word	0x40026400
 8006464:	40011004 	.word	0x40011004
 8006468:	2000424c 	.word	0x2000424c
 800646c:	40011000 	.word	0x40011000

08006470 <sim7600_config>:

bool Sim7600BasicConfigSuccess = false;

bool sim7600_config()
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  Sim7600BasicConfigSuccess = false;
 8006474:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <sim7600_config+0x144>)
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
  //config until success (connect to server)

  //echo cmd off
  if (!sim7600_send_cmd("ATE0\r\n", "OK", "", 500))
 800647a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800647e:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <sim7600_config+0x148>)
 8006480:	494e      	ldr	r1, [pc, #312]	; (80065bc <sim7600_config+0x14c>)
 8006482:	484f      	ldr	r0, [pc, #316]	; (80065c0 <sim7600_config+0x150>)
 8006484:	f000 fa96 	bl	80069b4 <sim7600_send_cmd>
 8006488:	4603      	mov	r3, r0
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <sim7600_config+0x28>
    return false;
 8006494:	2300      	movs	r3, #0
 8006496:	e08b      	b.n	80065b0 <sim7600_config+0x140>
  restartSimstatus = 0; //reset
 8006498:	4b4a      	ldr	r3, [pc, #296]	; (80065c4 <sim7600_config+0x154>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

  //change to main baudrate
  sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", Sim7600BaudMain);
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <sim7600_config+0x158>)
 80064a0:	494a      	ldr	r1, [pc, #296]	; (80065cc <sim7600_config+0x15c>)
 80064a2:	484b      	ldr	r0, [pc, #300]	; (80065d0 <sim7600_config+0x160>)
 80064a4:	f000 ff78 	bl	8007398 <siprintf>
  if (!sim7600_send_cmd(sim7600_cmd_buff, "OK", "", 500))
 80064a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064ac:	4a42      	ldr	r2, [pc, #264]	; (80065b8 <sim7600_config+0x148>)
 80064ae:	4943      	ldr	r1, [pc, #268]	; (80065bc <sim7600_config+0x14c>)
 80064b0:	4847      	ldr	r0, [pc, #284]	; (80065d0 <sim7600_config+0x160>)
 80064b2:	f000 fa7f 	bl	80069b4 <sim7600_send_cmd>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <sim7600_config+0x56>
    return false;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e074      	b.n	80065b0 <sim7600_config+0x140>
  sim7600_change_baud(Sim7600BaudMain);
 80064c6:	4840      	ldr	r0, [pc, #256]	; (80065c8 <sim7600_config+0x158>)
 80064c8:	f000 fe6a 	bl	80071a0 <sim7600_change_baud>

  //check sim
  if (!sim7600_send_cmd("at+ciccid\r\n", "+ICCID:", "", 500))
 80064cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064d0:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <sim7600_config+0x148>)
 80064d2:	4940      	ldr	r1, [pc, #256]	; (80065d4 <sim7600_config+0x164>)
 80064d4:	4840      	ldr	r0, [pc, #256]	; (80065d8 <sim7600_config+0x168>)
 80064d6:	f000 fa6d 	bl	80069b4 <sim7600_send_cmd>
 80064da:	4603      	mov	r3, r0
 80064dc:	f083 0301 	eor.w	r3, r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <sim7600_config+0x7a>
    return false;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e062      	b.n	80065b0 <sim7600_config+0x140>
  if (!sim7600_send_cmd("at+csq\r\n", "+CSQ: ", "", 500))
 80064ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064ee:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <sim7600_config+0x148>)
 80064f0:	493a      	ldr	r1, [pc, #232]	; (80065dc <sim7600_config+0x16c>)
 80064f2:	483b      	ldr	r0, [pc, #236]	; (80065e0 <sim7600_config+0x170>)
 80064f4:	f000 fa5e 	bl	80069b4 <sim7600_send_cmd>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <sim7600_config+0x98>
    return false;
 8006504:	2300      	movs	r3, #0
 8006506:	e053      	b.n	80065b0 <sim7600_config+0x140>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_send_cmd("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", "", 500))
 8006508:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800650c:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <sim7600_config+0x148>)
 800650e:	492b      	ldr	r1, [pc, #172]	; (80065bc <sim7600_config+0x14c>)
 8006510:	4834      	ldr	r0, [pc, #208]	; (80065e4 <sim7600_config+0x174>)
 8006512:	f000 fa4f 	bl	80069b4 <sim7600_send_cmd>
 8006516:	4603      	mov	r3, r0
 8006518:	f083 0301 	eor.w	r3, r3, #1
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <sim7600_config+0xb6>
    return false;
 8006522:	2300      	movs	r3, #0
 8006524:	e044      	b.n	80065b0 <sim7600_config+0x140>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 12000(max)
  if (!sim7600_send_cmd("AT+CIPCCFG=10,0,0,1,1,0,3000\r\n", "OK", "", 500))
 8006526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800652a:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <sim7600_config+0x148>)
 800652c:	4923      	ldr	r1, [pc, #140]	; (80065bc <sim7600_config+0x14c>)
 800652e:	482e      	ldr	r0, [pc, #184]	; (80065e8 <sim7600_config+0x178>)
 8006530:	f000 fa40 	bl	80069b4 <sim7600_send_cmd>
 8006534:	4603      	mov	r3, r0
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <sim7600_config+0xd4>
    return false;
 8006540:	2300      	movs	r3, #0
 8006542:	e035      	b.n	80065b0 <sim7600_config+0x140>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPHEAD=1\r\n", "OK", "", 500))
 8006544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <sim7600_config+0x148>)
 800654a:	491c      	ldr	r1, [pc, #112]	; (80065bc <sim7600_config+0x14c>)
 800654c:	4827      	ldr	r0, [pc, #156]	; (80065ec <sim7600_config+0x17c>)
 800654e:	f000 fa31 	bl	80069b4 <sim7600_send_cmd>
 8006552:	4603      	mov	r3, r0
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <sim7600_config+0xf2>
    return false;
 800655e:	2300      	movs	r3, #0
 8006560:	e026      	b.n	80065b0 <sim7600_config+0x140>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPSRIP=0\r\n", "OK", "", 500))
 8006562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <sim7600_config+0x148>)
 8006568:	4914      	ldr	r1, [pc, #80]	; (80065bc <sim7600_config+0x14c>)
 800656a:	4821      	ldr	r0, [pc, #132]	; (80065f0 <sim7600_config+0x180>)
 800656c:	f000 fa22 	bl	80069b4 <sim7600_send_cmd>
 8006570:	4603      	mov	r3, r0
 8006572:	f083 0301 	eor.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <sim7600_config+0x110>
    return false;
 800657c:	2300      	movs	r3, #0
 800657e:	e017      	b.n	80065b0 <sim7600_config+0x140>

  Sim7600BasicConfigSuccess = true;
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <sim7600_config+0x144>)
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]

  //open net
  if (!sim7600_open_network())
 8006586:	f000 f86b 	bl	8006660 <sim7600_open_network>
 800658a:	4603      	mov	r3, r0
 800658c:	f083 0301 	eor.w	r3, r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <sim7600_config+0x12a>
    return false;
 8006596:	2300      	movs	r3, #0
 8006598:	e00a      	b.n	80065b0 <sim7600_config+0x140>

  //open udp connect
  //create UDP connect socket at link 1, local port (mot important) 8080
  //AT+CIPOPEN=1,"UDP",,,8080 : \r\n+CIPOPEN: 1,0 or \r\n+CIPOPEN: 1,4
  if (!sim7600_open_udp_connect())
 800659a:	f000 f8b3 	bl	8006704 <sim7600_open_udp_connect>
 800659e:	4603      	mov	r3, r0
 80065a0:	f083 0301 	eor.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <sim7600_config+0x13e>
    return false;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e000      	b.n	80065b0 <sim7600_config+0x140>
  //open TCP socket with domain
  // if (!sim7600_open_tcp_connect())
  //   return false;

  //success config
  return true;
 80065ae:	2301      	movs	r3, #1
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	200040b1 	.word	0x200040b1
 80065b8:	08008734 	.word	0x08008734
 80065bc:	08008738 	.word	0x08008738
 80065c0:	0800873c 	.word	0x0800873c
 80065c4:	200040a8 	.word	0x200040a8
 80065c8:	002dc6c0 	.word	0x002dc6c0
 80065cc:	08008744 	.word	0x08008744
 80065d0:	20004184 	.word	0x20004184
 80065d4:	08008750 	.word	0x08008750
 80065d8:	08008758 	.word	0x08008758
 80065dc:	08008764 	.word	0x08008764
 80065e0:	0800876c 	.word	0x0800876c
 80065e4:	08008778 	.word	0x08008778
 80065e8:	0800879c 	.word	0x0800879c
 80065ec:	080087bc 	.word	0x080087bc
 80065f0:	080087cc 	.word	0x080087cc

080065f4 <sim7600_update_response>:
//param bool openWithIPv4
//return: 0-success, 1:TCP error(net is good but can't connect). 2:error need to start
//

void sim7600_update_response(const char* _res1, const char* _res2)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  res1Length = strlen(_res1);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7f9 fde6 	bl	80001d0 <strlen>
 8006604:	4603      	mov	r3, r0
 8006606:	461a      	mov	r2, r3
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <sim7600_update_response+0x5c>)
 800660a:	601a      	str	r2, [r3, #0]
  res2Length = strlen(_res2);
 800660c:	6838      	ldr	r0, [r7, #0]
 800660e:	f7f9 fddf 	bl	80001d0 <strlen>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <sim7600_update_response+0x60>)
 8006618:	601a      	str	r2, [r3, #0]
  if(res1Length > 0)  res1 = _res1;
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <sim7600_update_response+0x5c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	dd03      	ble.n	800662a <sim7600_update_response+0x36>
 8006622:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <sim7600_update_response+0x64>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e002      	b.n	8006630 <sim7600_update_response+0x3c>
  else res1 = NULL;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <sim7600_update_response+0x64>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
  if(res2Length > 0) res2 = _res2;
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <sim7600_update_response+0x60>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd03      	ble.n	8006640 <sim7600_update_response+0x4c>
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <sim7600_update_response+0x68>)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6013      	str	r3, [r2, #0]
  else res2 = NULL;
}
 800663e:	e002      	b.n	8006646 <sim7600_update_response+0x52>
  else res2 = NULL;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <sim7600_update_response+0x68>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20004110 	.word	0x20004110
 8006654:	2000411c 	.word	0x2000411c
 8006658:	20004108 	.word	0x20004108
 800665c:	20004104 	.word	0x20004104

08006660 <sim7600_open_network>:

int sim7600_open_netStatus = 0; // 0 : none, 1 : send cmd, 2 : success
bool sim7600_open_network()
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <sim7600_open_network+0x88>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2164      	movs	r1, #100	; 0x64
 800666c:	4618      	mov	r0, r3
 800666e:	f7fc fb1d 	bl	8002cac <osSemaphoreWait>

  sim7600_update_response("OK", "Network is already opened");
 8006672:	491e      	ldr	r1, [pc, #120]	; (80066ec <sim7600_open_network+0x8c>)
 8006674:	481e      	ldr	r0, [pc, #120]	; (80066f0 <sim7600_open_network+0x90>)
 8006676:	f7ff ffbd 	bl	80065f4 <sim7600_update_response>

  sim7600_usart_send_string("AT+NETOPEN\r\n");
 800667a:	481e      	ldr	r0, [pc, #120]	; (80066f4 <sim7600_open_network+0x94>)
 800667c:	f000 fa50 	bl	8006b20 <sim7600_usart_send_string>

  sim7600_open_netStatus = 1;
 8006680:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <sim7600_open_network+0x98>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
  int try = 24; // ~ 12s
 8006686:	2318      	movs	r3, #24
 8006688:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(100); 
 800668a:	2064      	movs	r0, #100	; 0x64
 800668c:	f7ff fd82 	bl	8006194 <sim7600_delay_ms>
    if (sim7600_open_netStatus == 2)
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <sim7600_open_network+0x98>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d103      	bne.n	80066a0 <sim7600_open_network+0x40>
    {
      //sim7600_open_netStatus = 0;
      sim7600_network_IsOpen = true;
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <sim7600_open_network+0x9c>)
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
      //return true;
      break;
 800669e:	e005      	b.n	80066ac <sim7600_open_network+0x4c>
    }
  } while (--try);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ee      	bne.n	800668a <sim7600_open_network+0x2a>

  sim7600_open_netStatus = 0;
 80066ac:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <sim7600_open_network+0x98>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

  // if(!sim7600_network_IsOpen)//can't open network
  //   sim7600_error = true;
  sim7600_error = !sim7600_network_IsOpen;
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <sim7600_open_network+0x9c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f083 0301 	eor.w	r3, r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <sim7600_open_network+0xa0>)
 80066ce:	701a      	strb	r2, [r3, #0]
  
  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <sim7600_open_network+0x88>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fc fb37 	bl	8002d48 <osSemaphoreRelease>

  return sim7600_network_IsOpen;
 80066da:	4b08      	ldr	r3, [pc, #32]	; (80066fc <sim7600_open_network+0x9c>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200055f4 	.word	0x200055f4
 80066ec:	080087dc 	.word	0x080087dc
 80066f0:	08008738 	.word	0x08008738
 80066f4:	080087f8 	.word	0x080087f8
 80066f8:	200040b8 	.word	0x200040b8
 80066fc:	200040ad 	.word	0x200040ad
 8006700:	200040ac 	.word	0x200040ac

08006704 <sim7600_open_udp_connect>:

int sim7600_open_udp_connectStatus = 0; // 0 : none, 1 : send cmd, 2 : success
bool sim7600_open_udp_connect()
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <sim7600_open_udp_connect+0x84>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2164      	movs	r1, #100	; 0x64
 8006710:	4618      	mov	r0, r3
 8006712:	f7fc facb 	bl	8002cac <osSemaphoreWait>

  sim7600_update_response("+CIPOPEN: 1,0", "+CIPOPEN: 1,4");
 8006716:	491d      	ldr	r1, [pc, #116]	; (800678c <sim7600_open_udp_connect+0x88>)
 8006718:	481d      	ldr	r0, [pc, #116]	; (8006790 <sim7600_open_udp_connect+0x8c>)
 800671a:	f7ff ff6b 	bl	80065f4 <sim7600_update_response>

  sim7600_usart_send_string("AT+CIPOPEN=1,\"UDP\",,,8080\r\n");
 800671e:	481d      	ldr	r0, [pc, #116]	; (8006794 <sim7600_open_udp_connect+0x90>)
 8006720:	f000 f9fe 	bl	8006b20 <sim7600_usart_send_string>

  sim7600_open_udp_connectStatus = 1;
 8006724:	4b1c      	ldr	r3, [pc, #112]	; (8006798 <sim7600_open_udp_connect+0x94>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
  int try = 24; // ~ 12s
 800672a:	2318      	movs	r3, #24
 800672c:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(100); 
 800672e:	2064      	movs	r0, #100	; 0x64
 8006730:	f7ff fd30 	bl	8006194 <sim7600_delay_ms>
    if (sim7600_open_udp_connectStatus == 2)
 8006734:	4b18      	ldr	r3, [pc, #96]	; (8006798 <sim7600_open_udp_connect+0x94>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d102      	bne.n	8006742 <sim7600_open_udp_connect+0x3e>
    {
      //sim7600_open_udp_connectStatus = 0;
      sim7600_udp_IsOpen = true;
 800673c:	4b17      	ldr	r3, [pc, #92]	; (800679c <sim7600_open_udp_connect+0x98>)
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
      //return true;
    }
  } while (--try);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ef      	bne.n	800672e <sim7600_open_udp_connect+0x2a>

  sim7600_open_udp_connectStatus = 0;
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <sim7600_open_udp_connect+0x94>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

  // if(!sim7600_udp_IsOpen)//can't open udp connect
  //   sim7600_error = true;
  sim7600_error = !sim7600_udp_IsOpen;
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <sim7600_open_udp_connect+0x98>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f083 0301 	eor.w	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <sim7600_open_udp_connect+0x9c>)
 8006770:	701a      	strb	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <sim7600_open_udp_connect+0x84>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fc fae6 	bl	8002d48 <osSemaphoreRelease>

  return sim7600_udp_IsOpen;
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <sim7600_open_udp_connect+0x98>)
 800677e:	781b      	ldrb	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	200055f4 	.word	0x200055f4
 800678c:	08008808 	.word	0x08008808
 8006790:	08008818 	.word	0x08008818
 8006794:	08008828 	.word	0x08008828
 8006798:	200040bc 	.word	0x200040bc
 800679c:	200040af 	.word	0x200040af
 80067a0:	200040ac 	.word	0x200040ac

080067a4 <sim7600_send_packet_ip>:
AT+CIPSEND=0,5<CR> //5:size of data in bytes
>hello : \r\nOK */

//send packet, type:1 - UDP , type:0 - TCP
bool sim7600_send_packet_ip(int type, uint8_t* data, int data_length)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 80067b0:	4b2e      	ldr	r3, [pc, #184]	; (800686c <sim7600_send_packet_ip+0xc8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f04f 31ff 	mov.w	r1, #4294967295
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fc fa77 	bl	8002cac <osSemaphoreWait>

  sim7600_update_response(">", "");
 80067be:	492c      	ldr	r1, [pc, #176]	; (8006870 <sim7600_send_packet_ip+0xcc>)
 80067c0:	482c      	ldr	r0, [pc, #176]	; (8006874 <sim7600_send_packet_ip+0xd0>)
 80067c2:	f7ff ff17 	bl	80065f4 <sim7600_update_response>
  if(type == 1) // udp
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d109      	bne.n	80067e0 <sim7600_send_packet_ip+0x3c>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 80067cc:	4b2a      	ldr	r3, [pc, #168]	; (8006878 <sim7600_send_packet_ip+0xd4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4b2a      	ldr	r3, [pc, #168]	; (800687c <sim7600_send_packet_ip+0xd8>)
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	492a      	ldr	r1, [pc, #168]	; (8006880 <sim7600_send_packet_ip+0xdc>)
 80067d8:	482a      	ldr	r0, [pc, #168]	; (8006884 <sim7600_send_packet_ip+0xe0>)
 80067da:	f000 fddd 	bl	8007398 <siprintf>
 80067de:	e00d      	b.n	80067fc <sim7600_send_packet_ip+0x58>
  }
  else if(type == 0) //tcp
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <sim7600_send_packet_ip+0x4e>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4927      	ldr	r1, [pc, #156]	; (8006888 <sim7600_send_packet_ip+0xe4>)
 80067ea:	4826      	ldr	r0, [pc, #152]	; (8006884 <sim7600_send_packet_ip+0xe0>)
 80067ec:	f000 fdd4 	bl	8007398 <siprintf>
 80067f0:	e004      	b.n	80067fc <sim7600_send_packet_ip+0x58>
  }
  else //ssl AT+CCHSEND=0,2
  {
	  sprintf(sim7600_cmd_buff, "AT+CCHSEND=0,%d\r", data_length);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4925      	ldr	r1, [pc, #148]	; (800688c <sim7600_send_packet_ip+0xe8>)
 80067f6:	4823      	ldr	r0, [pc, #140]	; (8006884 <sim7600_send_packet_ip+0xe0>)
 80067f8:	f000 fdce 	bl	8007398 <siprintf>
  }

  sim7600_usart_send_string(sim7600_cmd_buff);
 80067fc:	4821      	ldr	r0, [pc, #132]	; (8006884 <sim7600_send_packet_ip+0xe0>)
 80067fe:	f000 f98f 	bl	8006b20 <sim7600_usart_send_string>
  sim7600_send_packetStatus = 1;
 8006802:	4b23      	ldr	r3, [pc, #140]	; (8006890 <sim7600_send_packet_ip+0xec>)
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]

  bool send_ip_packet_success = false;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
  int try = 60; // ~ 6s, since timeout set up for AT+CIPSEND is 5s
 800680c:	233c      	movs	r3, #60	; 0x3c
 800680e:	613b      	str	r3, [r7, #16]
  do
  {
    sim7600_delay_ms(100); 
 8006810:	2064      	movs	r0, #100	; 0x64
 8006812:	f7ff fcbf 	bl	8006194 <sim7600_delay_ms>
    if (sim7600_send_packetStatus == 2)
 8006816:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <sim7600_send_packet_ip+0xec>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d10b      	bne.n	8006836 <sim7600_send_packet_ip+0x92>
    {
      //send data
      sim7600_update_response("OK", "");
 800681e:	4914      	ldr	r1, [pc, #80]	; (8006870 <sim7600_send_packet_ip+0xcc>)
 8006820:	481c      	ldr	r0, [pc, #112]	; (8006894 <sim7600_send_packet_ip+0xf0>)
 8006822:	f7ff fee7 	bl	80065f4 <sim7600_update_response>
      sim7600_usart_send_byte(data, data_length);
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	68b8      	ldr	r0, [r7, #8]
 800682a:	f000 f989 	bl	8006b40 <sim7600_usart_send_byte>
      sim7600_send_packetStatus = 3;
 800682e:	4b18      	ldr	r3, [pc, #96]	; (8006890 <sim7600_send_packet_ip+0xec>)
 8006830:	2203      	movs	r2, #3
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e006      	b.n	8006844 <sim7600_send_packet_ip+0xa0>
    }
    else if(sim7600_send_packetStatus == 4) //success
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <sim7600_send_packet_ip+0xec>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d102      	bne.n	8006844 <sim7600_send_packet_ip+0xa0>
    {
      //sim7600_send_packetStatus = 0;
      //release semaphore
      //osSemaphoreRelease(BinSemsim7600UartTxHandle);
      //return true;
      send_ip_packet_success = true;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
      break;
 8006842:	e005      	b.n	8006850 <sim7600_send_packet_ip+0xac>
    }
  } while (--try);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1df      	bne.n	8006810 <sim7600_send_packet_ip+0x6c>

  sim7600_send_packetStatus = 0;
 8006850:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <sim7600_send_packet_ip+0xec>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]

  //if(!send_ip_packet_success)//can't send
  // sim7600_error = true;

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <sim7600_send_packet_ip+0xc8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fc fa74 	bl	8002d48 <osSemaphoreRelease>

  return send_ip_packet_success;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200055f4 	.word	0x200055f4
 8006870:	08008734 	.word	0x08008734
 8006874:	08008844 	.word	0x08008844
 8006878:	20000074 	.word	0x20000074
 800687c:	20000010 	.word	0x20000010
 8006880:	08008848 	.word	0x08008848
 8006884:	20004184 	.word	0x20004184
 8006888:	08008864 	.word	0x08008864
 800688c:	08008878 	.word	0x08008878
 8006890:	200040c0 	.word	0x200040c0
 8006894:	08008738 	.word	0x08008738

08006898 <sim7600_keepAlive_udp>:

void sim7600_keepAlive_udp()
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  static int keep_alive_udp_error = 0;
  //static firstSendNum = 10;
  
  //send udp, tcp keep alive every 30s
  if(sim7600_udp_IsOpen)
 800689c:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <sim7600_keepAlive_udp+0x4c>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00f      	beq.n	80068c4 <sim7600_keepAlive_udp+0x2c>
  {
    if(!sim7600_send_packet_ip(1, "00000002", 8)) keep_alive_udp_error++;
 80068a4:	2208      	movs	r2, #8
 80068a6:	4910      	ldr	r1, [pc, #64]	; (80068e8 <sim7600_keepAlive_udp+0x50>)
 80068a8:	2001      	movs	r0, #1
 80068aa:	f7ff ff7b 	bl	80067a4 <sim7600_send_packet_ip>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f083 0301 	eor.w	r3, r3, #1
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <sim7600_keepAlive_udp+0x2c>
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <sim7600_keepAlive_udp+0x54>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <sim7600_keepAlive_udp+0x54>)
 80068c2:	6013      	str	r3, [r2, #0]
  }
  //after 2 time
  if(keep_alive_udp_error >= 2) 
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <sim7600_keepAlive_udp+0x54>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	dd08      	ble.n	80068de <sim7600_keepAlive_udp+0x46>
  {
    keep_alive_udp_error = 0; // reset
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <sim7600_keepAlive_udp+0x54>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
    sim7600_udp_IsOpen = false;
 80068d2:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <sim7600_keepAlive_udp+0x4c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
    sim7600_error= true;
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <sim7600_keepAlive_udp+0x58>)
 80068da:	2201      	movs	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
  // {
  //   //reset
  //   firstSendNum = 10;
  //   osThreadSuspend(NULL); //self suspend
  // }
}
 80068de:	bf00      	nop
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200040af 	.word	0x200040af
 80068e8:	0800888c 	.word	0x0800888c
 80068ec:	200040e8 	.word	0x200040e8
 80068f0:	200040ac 	.word	0x200040ac

080068f4 <sim7600_handle_error>:
}

//this function run in seperate task have highest priority
//error occur when network or tcp connect is close
void sim7600_handle_error()
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  if(HaveCall)
 80068f8:	4b26      	ldr	r3, [pc, #152]	; (8006994 <sim7600_handle_error+0xa0>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <sim7600_handle_error+0x30>
  {
    HaveCall = false;
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <sim7600_handle_error+0xa0>)
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]

    //wait to aquire to send, wait until 
    osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreCallHangUp_wait_ms);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <sim7600_handle_error+0xa4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800690e:	4618      	mov	r0, r3
 8006910:	f7fc f9cc 	bl	8002cac <osSemaphoreWait>
    sim7600_usart_send_string("AT+CHUP\r\n");
 8006914:	4821      	ldr	r0, [pc, #132]	; (800699c <sim7600_handle_error+0xa8>)
 8006916:	f000 f903 	bl	8006b20 <sim7600_usart_send_string>
    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 800691a:	4b1f      	ldr	r3, [pc, #124]	; (8006998 <sim7600_handle_error+0xa4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fc fa12 	bl	8002d48 <osSemaphoreRelease>
  }
  if (sim7600_error)
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <sim7600_handle_error+0xac>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d031      	beq.n	8006990 <sim7600_handle_error+0x9c>
  {
    //turn of led
    sim7600_tcp_led_status(0);
 800692c:	2140      	movs	r1, #64	; 0x40
 800692e:	481d      	ldr	r0, [pc, #116]	; (80069a4 <sim7600_handle_error+0xb0>)
 8006930:	f7ff fc13 	bl	800615a <LL_GPIO_SetOutputPin>
    //check whether basic config is success?
    //if success, check network again, if network false, restart, if still work, open tcp and udp again (then return -> don not restart)
    if (Sim7600BasicConfigSuccess)
 8006934:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <sim7600_handle_error+0xb4>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01d      	beq.n	8006978 <sim7600_handle_error+0x84>
    {
      //check network is open or closed(open again)
      if(!sim7600_network_IsOpen) sim7600_open_network();
 800693c:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <sim7600_handle_error+0xb8>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f083 0301 	eor.w	r3, r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <sim7600_handle_error+0x5a>
 800694a:	f7ff fe89 	bl	8006660 <sim7600_open_network>

      //after above step if network open success, continue open tcp
      if (sim7600_network_IsOpen)
 800694e:	4b17      	ldr	r3, [pc, #92]	; (80069ac <sim7600_handle_error+0xb8>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <sim7600_handle_error+0x84>
      {
        //network still open, check udp, tcp connect
        if(!sim7600_udp_IsOpen) sim7600_open_udp_connect();
 8006956:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <sim7600_handle_error+0xbc>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <sim7600_handle_error+0x74>
 8006964:	f7ff fece 	bl	8006704 <sim7600_open_udp_connect>
        //if(!sim7600_tcp_IsOpen) sim7600_open_tcp_connect();
        if(sim7600_udp_IsOpen) sim7600_error = false;
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <sim7600_handle_error+0xbc>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <sim7600_handle_error+0x9a>
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <sim7600_handle_error+0xac>)
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
        return;
 8006976:	e00a      	b.n	800698e <sim7600_handle_error+0x9a>
      }
    }

    //if basic config is not success or network false -> restart and config again
    //turn status (play->stop) and disable uart before restart
    sim7600_restart();
 8006978:	f000 f860 	bl	8006a3c <sim7600_restart>
    if (sim7600_config())
 800697c:	f7ff fd78 	bl	8006470 <sim7600_config>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <sim7600_handle_error+0x9c>
      sim7600_error = false;
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <sim7600_handle_error+0xac>)
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e000      	b.n	8006990 <sim7600_handle_error+0x9c>
        return;
 800698e:	bf00      	nop
  }

  //update led error
  //if sim7600_error == true, turn on and vice versa
}
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	200040b0 	.word	0x200040b0
 8006998:	200055f4 	.word	0x200055f4
 800699c:	080088d8 	.word	0x080088d8
 80069a0:	200040ac 	.word	0x200040ac
 80069a4:	40020000 	.word	0x40020000
 80069a8:	200040b1 	.word	0x200040b1
 80069ac:	200040ad 	.word	0x200040ad
 80069b0:	200040af 	.word	0x200040af

080069b4 <sim7600_send_cmd>:

//send command (auto add "\r\n"), with timeout, if > timeout -> reset by
int cmdSendStatus = 0; // 0: none, 1: sended, 2: ok
bool sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 80069c2:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <sim7600_send_cmd+0x7c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2164      	movs	r1, #100	; 0x64
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fc f96f 	bl	8002cac <osSemaphoreWait>

  sim7600_update_response(response1, response2);
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	68b8      	ldr	r0, [r7, #8]
 80069d2:	f7ff fe0f 	bl	80065f4 <sim7600_update_response>
  int try = timeout / 50;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <sim7600_send_cmd+0x80>)
 80069da:	fb82 1203 	smull	r1, r2, r2, r3
 80069de:	1112      	asrs	r2, r2, #4
 80069e0:	17db      	asrs	r3, r3, #31
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]
  bool send_cmd_success = false;
 80069e6:	2300      	movs	r3, #0
 80069e8:	74fb      	strb	r3, [r7, #19]
  do
  {
    sim7600_usart_send_string(cmd);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f898 	bl	8006b20 <sim7600_usart_send_string>

    cmdSendStatus = 1;
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <sim7600_send_cmd+0x84>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
    sim7600_delay_ms(50); //10ms receive max 100 bytes with baud = 115200
 80069f6:	2032      	movs	r0, #50	; 0x32
 80069f8:	f7ff fbcc 	bl	8006194 <sim7600_delay_ms>
    if (cmdSendStatus == 2)
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <sim7600_send_cmd+0x84>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d102      	bne.n	8006a0a <sim7600_send_cmd+0x56>
    {
    	//cmdSendStatus = 0; // reset
      //return true;
      send_cmd_success = true;
 8006a04:	2301      	movs	r3, #1
 8006a06:	74fb      	strb	r3, [r7, #19]
      break;
 8006a08:	e005      	b.n	8006a16 <sim7600_send_cmd+0x62>
    }
  } while (--try);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e9      	bne.n	80069ea <sim7600_send_cmd+0x36>

  cmdSendStatus = 0; // reset
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <sim7600_send_cmd+0x84>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <sim7600_send_cmd+0x7c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fc f991 	bl	8002d48 <osSemaphoreRelease>

  return send_cmd_success;
 8006a26:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200055f4 	.word	0x200055f4
 8006a34:	51eb851f 	.word	0x51eb851f
 8006a38:	200040c8 	.word	0x200040c8

08006a3c <sim7600_restart>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_restart()
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  LL_USART_Disable(USART1);
 8006a40:	4828      	ldr	r0, [pc, #160]	; (8006ae4 <sim7600_restart+0xa8>)
 8006a42:	f7ff f97f 	bl	8005d44 <LL_USART_Disable>
  printf("%s", "rst\n");
 8006a46:	4828      	ldr	r0, [pc, #160]	; (8006ae8 <sim7600_restart+0xac>)
 8006a48:	f000 fc9e 	bl	8007388 <puts>
  // reset all var status
  UDPsendStatus = 0;
 8006a4c:	4b27      	ldr	r3, [pc, #156]	; (8006aec <sim7600_restart+0xb0>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
  cmdSendStatus = 0;
 8006a52:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <sim7600_restart+0xb4>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
  sim7600_open_tcp_connectStatus = 0;
 8006a58:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <sim7600_restart+0xb8>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
  sim7600_open_udp_connectStatus = 0;
 8006a5e:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <sim7600_restart+0xbc>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
  sim7600_open_netStatus = 0;
 8006a64:	4b25      	ldr	r3, [pc, #148]	; (8006afc <sim7600_restart+0xc0>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
  Sim7600BasicConfigSuccess = false;
 8006a6a:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <sim7600_restart+0xc4>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
  sim7600_error = false;
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <sim7600_restart+0xc8>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
  sim7600_network_IsOpen = false;
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <sim7600_restart+0xcc>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
  sim7600_tcp_IsOpen = false;
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <sim7600_restart+0xd0>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
  sim7600_udp_IsOpen = false;
 8006a82:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <sim7600_restart+0xd4>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
  sim7600_send_packetStatus = 0;
 8006a88:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <sim7600_restart+0xd8>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]


  if (restartSimstatus < max_num_restart_sim7600) //0-19
 8006a8e:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <sim7600_restart+0xdc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b13      	cmp	r3, #19
 8006a94:	dc07      	bgt.n	8006aa6 <sim7600_restart+0x6a>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 8006a96:	f7ff fba7 	bl	80061e8 <sim7600_powerOFF>
    restartSimstatus++;
 8006a9a:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <sim7600_restart+0xdc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <sim7600_restart+0xdc>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	e013      	b.n	8006ace <sim7600_restart+0x92>
  }
  else if (restartSimstatus < (max_num_restart_sim7600 + max_num_reset_sim7600)) // 20-21
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <sim7600_restart+0xdc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b15      	cmp	r3, #21
 8006aac:	dc09      	bgt.n	8006ac2 <sim7600_restart+0x86>
  {
    sim7600_reset();
 8006aae:	f7ff fbb9 	bl	8006224 <sim7600_reset>
    sim7600_powerOFF();
 8006ab2:	f7ff fb99 	bl	80061e8 <sim7600_powerOFF>
    restartSimstatus++;
 8006ab6:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <sim7600_restart+0xdc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <sim7600_restart+0xdc>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e005      	b.n	8006ace <sim7600_restart+0x92>
  }
  else // >=22
  {
    //delay to wait
    sim7600_delay_ms(sleep_minutes_sim7600 * 60 * 1000); // sleep_minutes_sim7600 minutes
 8006ac2:	4816      	ldr	r0, [pc, #88]	; (8006b1c <sim7600_restart+0xe0>)
 8006ac4:	f7ff fb66 	bl	8006194 <sim7600_delay_ms>
    restartSimstatus = 0;
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <sim7600_restart+0xdc>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
  }

  //power on again
  sim7600_powerON();
 8006ace:	f7ff fb6d 	bl	80061ac <sim7600_powerON>
  //change baud rate to default
  sim7600_change_baud(Sim7600BaudDefaul); // in this function usart is enable again
 8006ad2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8006ad6:	f000 fb63 	bl	80071a0 <sim7600_change_baud>

  LL_USART_Enable(USART1);
 8006ada:	4802      	ldr	r0, [pc, #8]	; (8006ae4 <sim7600_restart+0xa8>)
 8006adc:	f7ff f922 	bl	8005d24 <LL_USART_Enable>
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	080088e4 	.word	0x080088e4
 8006aec:	200040b4 	.word	0x200040b4
 8006af0:	200040c8 	.word	0x200040c8
 8006af4:	200040c4 	.word	0x200040c4
 8006af8:	200040bc 	.word	0x200040bc
 8006afc:	200040b8 	.word	0x200040b8
 8006b00:	200040b1 	.word	0x200040b1
 8006b04:	200040ac 	.word	0x200040ac
 8006b08:	200040ad 	.word	0x200040ad
 8006b0c:	200040ae 	.word	0x200040ae
 8006b10:	200040af 	.word	0x200040af
 8006b14:	200040c0 	.word	0x200040c0
 8006b18:	200040a8 	.word	0x200040a8
 8006b1c:	02932e00 	.word	0x02932e00

08006b20 <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  sim7600_usart_send_byte(str, strlen(str));
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7f9 fb51 	bl	80001d0 <strlen>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f804 	bl	8006b40 <sim7600_usart_send_byte>
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  const uint8_t *d = data;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 8006b4e:	e016      	b.n	8006b7e <sim7600_usart_send_byte+0x3e>
  {
    LL_USART_TransmitData8(usartSim7600, *d);
 8006b50:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <sim7600_usart_send_byte+0x60>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7ff faee 	bl	800613c <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(usartSim7600));
 8006b60:	bf00      	nop
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <sim7600_usart_send_byte+0x60>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fab5 	bl	80060d6 <LL_USART_IsActiveFlag_TXE>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f7      	beq.n	8006b62 <sim7600_usart_send_byte+0x22>
  for (; len > 0; --len, ++d)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dce5      	bgt.n	8006b50 <sim7600_usart_send_byte+0x10>
  }
  while (!LL_USART_IsActiveFlag_TC(usartSim7600));
 8006b84:	bf00      	nop
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <sim7600_usart_send_byte+0x60>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fa90 	bl	80060b0 <LL_USART_IsActiveFlag_TC>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f7      	beq.n	8006b86 <sim7600_usart_send_byte+0x46>
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	2000000c 	.word	0x2000000c

08006ba4 <sim7600_usart_rx_check>:
// }
//0 1 2 3 4
static volatile int old_pos = 0;
volatile int pos = 0;
void sim7600_usart_rx_check()
{
 8006ba4:	b598      	push	{r3, r4, r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Calculate current position in buffer */
  pos = sim_dma_buffer_size - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8006ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bac:	461c      	mov	r4, r3
 8006bae:	2102      	movs	r1, #2
 8006bb0:	4832      	ldr	r0, [pc, #200]	; (8006c7c <sim7600_usart_rx_check+0xd8>)
 8006bb2:	f7fe fffd 	bl	8005bb0 <LL_DMA_GetDataLength>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	1ae3      	subs	r3, r4, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006bbe:	601a      	str	r2, [r3, #0]
  //pos = sim_dma_buffer_size - dma_NDTR;
  if (pos != old_pos)
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d055      	beq.n	8006c78 <sim7600_usart_rx_check+0xd4>
  { /* Check change in received data */
    if (pos > old_pos)
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	dd12      	ble.n	8006bfe <sim7600_usart_rx_check+0x5a>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos);
      sim_buff_length = pos - old_pos;
 8006bd8:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006be4:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8006be6:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	4b27      	ldr	r3, [pc, #156]	; (8006c8c <sim7600_usart_rx_check+0xe8>)
 8006bee:	4413      	add	r3, r2
 8006bf0:	4a25      	ldr	r2, [pc, #148]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4826      	ldr	r0, [pc, #152]	; (8006c90 <sim7600_usart_rx_check+0xec>)
 8006bf8:	f000 fb14 	bl	8007224 <memcpy>
 8006bfc:	e027      	b.n	8006c4e <sim7600_usart_rx_check+0xaa>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buffer_size - old_pos;
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006c0a:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <sim7600_usart_rx_check+0xe8>)
 8006c14:	4413      	add	r3, r2
 8006c16:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	481c      	ldr	r0, [pc, #112]	; (8006c90 <sim7600_usart_rx_check+0xec>)
 8006c1e:	f000 fb01 	bl	8007224 <memcpy>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dd11      	ble.n	8006c4e <sim7600_usart_rx_check+0xaa>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], pos);
        memcpy(sim_buff + sim_buff_length, sim_dma_buffer, pos);
 8006c2a:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <sim7600_usart_rx_check+0xec>)
 8006c32:	4413      	add	r3, r2
 8006c34:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	4914      	ldr	r1, [pc, #80]	; (8006c8c <sim7600_usart_rx_check+0xe8>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 faf2 	bl	8007224 <memcpy>
        sim_buff_length += pos;
 8006c40:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <sim7600_usart_rx_check+0xdc>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4413      	add	r3, r2
 8006c4a:	4a0f      	ldr	r2, [pc, #60]	; (8006c88 <sim7600_usart_rx_check+0xe4>)
 8006c4c:	6013      	str	r3, [r2, #0]
      }
    }
    //old_pos = pos; /* Save current position as old */
    old_pos += sim7600_handle_received_data();
 8006c4e:	f000 f86b 	bl	8006d28 <sim7600_handle_received_data>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4413      	add	r3, r2
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c5c:	6013      	str	r3, [r2, #0]
    if(old_pos > sim_dma_buffer_size_minus_1) old_pos -= sim_dma_buffer_size; // ~ if(old_pos >= sim_dma_buffer_size) old_pos -= sim_dma_buffer_size;
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f241 3287 	movw	r2, #4999	; 0x1387
 8006c66:	4293      	cmp	r3, r2
 8006c68:	dd06      	ble.n	8006c78 <sim7600_usart_rx_check+0xd4>
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	4a03      	ldr	r2, [pc, #12]	; (8006c84 <sim7600_usart_rx_check+0xe0>)
 8006c76:	6013      	str	r3, [r2, #0]
  }
}
 8006c78:	bf00      	nop
 8006c7a:	bd98      	pop	{r3, r4, r7, pc}
 8006c7c:	40026400 	.word	0x40026400
 8006c80:	200040d0 	.word	0x200040d0
 8006c84:	200040cc 	.word	0x200040cc
 8006c88:	200055d4 	.word	0x200055d4
 8006c8c:	2000424c 	.word	0x2000424c
 8006c90:	200055fc 	.word	0x200055fc

08006c94 <check_normal_response>:
int errorSizeFrameNum = 0, errorSizeFrameNum2 = 0;
int errorSizeFrame;

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index, 3~not sastify response
__STATIC_INLINE int check_normal_response(const char* response, int* sim_buff_index ) //macro
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint8_t* posOfSubStr = strstr(sim_buff + (*sim_buff_index), response);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <check_normal_response+0x88>)
 8006ca6:	4413      	add	r3, r2
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fb94 	bl	80073d8 <strstr>
 8006cb0:	60f8      	str	r0, [r7, #12]
  if(posOfSubStr != NULL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02b      	beq.n	8006d10 <check_normal_response+0x7c>
  {
    //check whether have \r\n at the end of this response
    posOfSubStr += strlen(response); //point to position right after the last character of response on sim_buff
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7f9 fa89 	bl	80001d0 <strlen>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
    //in the worst case the last character of response is last character of sim_buff
    // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
    uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 8006cc6:	4916      	ldr	r1, [pc, #88]	; (8006d20 <check_normal_response+0x8c>)
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fb85 	bl	80073d8 <strstr>
 8006cce:	60b8      	str	r0, [r7, #8]
    if(pointerTo_r_n != NULL)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <check_normal_response+0x52>
    {
      //perfect sastified 
      //change sim_buff_index
      *sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <check_normal_response+0x88>)
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	1c9a      	adds	r2, r3, #2
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	601a      	str	r2, [r3, #0]
      return 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e015      	b.n	8006d12 <check_normal_response+0x7e>
    }
    else if(posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case, have enough bytes but can't sastified
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006cec:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <check_normal_response+0x90>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <check_normal_response+0x88>)
 8006cf4:	440b      	add	r3, r1
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d208      	bcs.n	8006d0c <check_normal_response+0x78>
    {
      //data may be error-bit 
      *sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a07      	ldr	r2, [pc, #28]	; (8006d1c <check_normal_response+0x88>)
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	601a      	str	r2, [r3, #0]
      return 1;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e002      	b.n	8006d12 <check_normal_response+0x7e>
    }
    else
      //return sim_buff_index; don't have enough data
      return 2;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e000      	b.n	8006d12 <check_normal_response+0x7e>
  }
  return 3; 
 8006d10:	2303      	movs	r3, #3
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200055fc 	.word	0x200055fc
 8006d20:	080088e8 	.word	0x080088e8
 8006d24:	200055d4 	.word	0x200055d4

08006d28 <sim7600_handle_received_data>:

//return num of bytes handled
int sim7600_handle_received_data()
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
  //handle received data

  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 8006d2e:	4b91      	ldr	r3, [pc, #580]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a91      	ldr	r2, [pc, #580]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006d34:	2100      	movs	r1, #0
 8006d36:	54d1      	strb	r1, [r2, r3]
  uint8_t *posOfSubStr;
  int sim_buff_index = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	603b      	str	r3, [r7, #0]

  memcpy(printf_buff, sim_buff, 19);
 8006d3c:	2213      	movs	r2, #19
 8006d3e:	498e      	ldr	r1, [pc, #568]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006d40:	488e      	ldr	r0, [pc, #568]	; (8006f7c <sim7600_handle_received_data+0x254>)
 8006d42:	f000 fa6f 	bl	8007224 <memcpy>
  printf("%s : %d", sim_buff, sim_buff_length);
 8006d46:	4b8b      	ldr	r3, [pc, #556]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	498a      	ldr	r1, [pc, #552]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006d4e:	488c      	ldr	r0, [pc, #560]	; (8006f80 <sim7600_handle_received_data+0x258>)
 8006d50:	f000 fa7e 	bl	8007250 <iprintf>

  while (true)
  {
    posOfSubStr = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
    if(sim_buff_index >= sim_buff_length) return sim_buff_length;
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4b86      	ldr	r3, [pc, #536]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	db02      	blt.n	8006d68 <sim7600_handle_received_data+0x40>
 8006d62:	4b84      	ldr	r3, [pc, #528]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	e149      	b.n	8006ffc <sim7600_handle_received_data+0x2d4>

    //check cmd response
    if (cmdSendStatus || sim7600_open_tcp_connectStatus || sim7600_open_udp_connectStatus || sim7600_open_netStatus 
 8006d68:	4b86      	ldr	r3, [pc, #536]	; (8006f84 <sim7600_handle_received_data+0x25c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d110      	bne.n	8006d92 <sim7600_handle_received_data+0x6a>
 8006d70:	4b85      	ldr	r3, [pc, #532]	; (8006f88 <sim7600_handle_received_data+0x260>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10c      	bne.n	8006d92 <sim7600_handle_received_data+0x6a>
 8006d78:	4b84      	ldr	r3, [pc, #528]	; (8006f8c <sim7600_handle_received_data+0x264>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <sim7600_handle_received_data+0x6a>
 8006d80:	4b83      	ldr	r3, [pc, #524]	; (8006f90 <sim7600_handle_received_data+0x268>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <sim7600_handle_received_data+0x6a>
      || sim7600_send_packetStatus)
 8006d88:	4b82      	ldr	r3, [pc, #520]	; (8006f94 <sim7600_handle_received_data+0x26c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8084 	beq.w	8006e9a <sim7600_handle_received_data+0x172>
    {
      int resLengthTmp;
      if(res1 != NULL)
 8006d92:	4b81      	ldr	r3, [pc, #516]	; (8006f98 <sim7600_handle_received_data+0x270>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <sim7600_handle_received_data+0x8e>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4b76      	ldr	r3, [pc, #472]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006da0:	4413      	add	r3, r2
 8006da2:	4a7d      	ldr	r2, [pc, #500]	; (8006f98 <sim7600_handle_received_data+0x270>)
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fb15 	bl	80073d8 <strstr>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24
        resLengthTmp = res1Length;
 8006db0:	4b7a      	ldr	r3, [pc, #488]	; (8006f9c <sim7600_handle_received_data+0x274>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	623b      	str	r3, [r7, #32]
      }
      if (posOfSubStr == NULL && res2 != NULL)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d111      	bne.n	8006de0 <sim7600_handle_received_data+0xb8>
 8006dbc:	4b78      	ldr	r3, [pc, #480]	; (8006fa0 <sim7600_handle_received_data+0x278>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00d      	beq.n	8006de0 <sim7600_handle_received_data+0xb8>
      {
          posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b6b      	ldr	r3, [pc, #428]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006dca:	4413      	add	r3, r2
 8006dcc:	4a74      	ldr	r2, [pc, #464]	; (8006fa0 <sim7600_handle_received_data+0x278>)
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fb00 	bl	80073d8 <strstr>
 8006dd8:	6278      	str	r0, [r7, #36]	; 0x24
          resLengthTmp = res2Length;
 8006dda:	4b72      	ldr	r3, [pc, #456]	; (8006fa4 <sim7600_handle_received_data+0x27c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	623b      	str	r3, [r7, #32]
      }
      if (posOfSubStr != NULL)
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d059      	beq.n	8006e9a <sim7600_handle_received_data+0x172>
      {
        //check whether have \r\n at the end of this response
        posOfSubStr += resLengthTmp - 1; //point to the last charater of respose
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dec:	4413      	add	r3, r2
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 8006df0:	496d      	ldr	r1, [pc, #436]	; (8006fa8 <sim7600_handle_received_data+0x280>)
 8006df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df4:	f000 faf0 	bl	80073d8 <strstr>
 8006df8:	61b8      	str	r0, [r7, #24]
        if(pointerTo_r_n != NULL)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d03a      	beq.n	8006e76 <sim7600_handle_received_data+0x14e>
        {
          if (cmdSendStatus == 1)
 8006e00:	4b60      	ldr	r3, [pc, #384]	; (8006f84 <sim7600_handle_received_data+0x25c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d103      	bne.n	8006e10 <sim7600_handle_received_data+0xe8>
            cmdSendStatus = 2;
 8006e08:	4b5e      	ldr	r3, [pc, #376]	; (8006f84 <sim7600_handle_received_data+0x25c>)
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e026      	b.n	8006e5e <sim7600_handle_received_data+0x136>
          else if (sim7600_open_tcp_connectStatus == 1)
 8006e10:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <sim7600_handle_received_data+0x260>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d103      	bne.n	8006e20 <sim7600_handle_received_data+0xf8>
            sim7600_open_tcp_connectStatus = 2;
 8006e18:	4b5b      	ldr	r3, [pc, #364]	; (8006f88 <sim7600_handle_received_data+0x260>)
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e01e      	b.n	8006e5e <sim7600_handle_received_data+0x136>
          else if (sim7600_open_udp_connectStatus == 1)
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <sim7600_handle_received_data+0x264>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d103      	bne.n	8006e30 <sim7600_handle_received_data+0x108>
            sim7600_open_udp_connectStatus = 2;
 8006e28:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <sim7600_handle_received_data+0x264>)
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e016      	b.n	8006e5e <sim7600_handle_received_data+0x136>
          else if (sim7600_open_netStatus == 1)
 8006e30:	4b57      	ldr	r3, [pc, #348]	; (8006f90 <sim7600_handle_received_data+0x268>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d103      	bne.n	8006e40 <sim7600_handle_received_data+0x118>
            sim7600_open_netStatus = 2;
 8006e38:	4b55      	ldr	r3, [pc, #340]	; (8006f90 <sim7600_handle_received_data+0x268>)
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e00e      	b.n	8006e5e <sim7600_handle_received_data+0x136>
          else if (sim7600_send_packetStatus == 1)
 8006e40:	4b54      	ldr	r3, [pc, #336]	; (8006f94 <sim7600_handle_received_data+0x26c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d103      	bne.n	8006e50 <sim7600_handle_received_data+0x128>
            sim7600_send_packetStatus = 2;
 8006e48:	4b52      	ldr	r3, [pc, #328]	; (8006f94 <sim7600_handle_received_data+0x26c>)
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e006      	b.n	8006e5e <sim7600_handle_received_data+0x136>
          else if (sim7600_send_packetStatus == 3)
 8006e50:	4b50      	ldr	r3, [pc, #320]	; (8006f94 <sim7600_handle_received_data+0x26c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d102      	bne.n	8006e5e <sim7600_handle_received_data+0x136>
            sim7600_send_packetStatus = 4;
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <sim7600_handle_received_data+0x26c>)
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	601a      	str	r2, [r3, #0]
          res1 = NULL;
 8006e5e:	4b4e      	ldr	r3, [pc, #312]	; (8006f98 <sim7600_handle_received_data+0x270>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
          res2 = NULL;
 8006e64:	4b4e      	ldr	r3, [pc, #312]	; (8006fa0 <sim7600_handle_received_data+0x278>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
          //change sim_buff_index
          sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	4a42      	ldr	r2, [pc, #264]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	3302      	adds	r3, #2
 8006e72:	603b      	str	r3, [r7, #0]
          continue;
 8006e74:	e0c0      	b.n	8006ff8 <sim7600_handle_received_data+0x2d0>
        }
        else if(posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006e7c:	4b3d      	ldr	r3, [pc, #244]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006e84:	440b      	add	r3, r1
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d205      	bcs.n	8006e96 <sim7600_handle_received_data+0x16e>
        {
          //data may be error-bit 
          sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	3364      	adds	r3, #100	; 0x64
 8006e92:	603b      	str	r3, [r7, #0]
          continue;
 8006e94:	e0b0      	b.n	8006ff8 <sim7600_handle_received_data+0x2d0>
        }
        else //don't have enough data
          return sim_buff_index;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	e0b0      	b.n	8006ffc <sim7600_handle_received_data+0x2d4>
    //sms (reserved)

    //call (reserved)

    /// new receive UDP///////
    const char *receiveUdpRes = "+RECEIVE,1,";
 8006e9a:	4b44      	ldr	r3, [pc, #272]	; (8006fac <sim7600_handle_received_data+0x284>)
 8006e9c:	617b      	str	r3, [r7, #20]
    posOfSubStr = strstr(sim_buff + sim_buff_index, receiveUdpRes);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fa95 	bl	80073d8 <strstr>
 8006eae:	6278      	str	r0, [r7, #36]	; 0x24
    if (posOfSubStr != NULL) //receive something from UDP port
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d07c      	beq.n	8006fb0 <sim7600_handle_received_data+0x288>
    {
      //check whether have \r\n at buffer
      posOfSubStr += strlen(receiveUdpRes); //point to lenght of udp packet (right after ",1,")
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7f9 f98a 	bl	80001d0 <strlen>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	4413      	add	r3, r2
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n"); //point to '\r'
 8006ec4:	4938      	ldr	r1, [pc, #224]	; (8006fa8 <sim7600_handle_received_data+0x280>)
 8006ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ec8:	f000 fa86 	bl	80073d8 <strstr>
 8006ecc:	60b8      	str	r0, [r7, #8]
      //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
      // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
      if (pointerTo_r_n != NULL)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03d      	beq.n	8006f50 <sim7600_handle_received_data+0x228>
      {
        int lengthOfUdpPacket = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61fb      	str	r3, [r7, #28]
        while (posOfSubStr != pointerTo_r_n) //make sure break when meet '\r'
 8006ed8:	e01c      	b.n	8006f14 <sim7600_handle_received_data+0x1ec>
        {
          char numberTmp = (*posOfSubStr);
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
          if (numberTmp >= '0' && numberTmp <= '9')
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ee4:	d910      	bls.n	8006f08 <sim7600_handle_received_data+0x1e0>
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	2b39      	cmp	r3, #57	; 0x39
 8006eea:	d80d      	bhi.n	8006f08 <sim7600_handle_received_data+0x1e0>
          {
            lengthOfUdpPacket = lengthOfUdpPacket * 10 + numberTmp - '0';
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	4413      	add	r3, r2
 8006efc:	3b30      	subs	r3, #48	; 0x30
 8006efe:	61fb      	str	r3, [r7, #28]
          else //data maybe bit-error
          {
            sim_buff_index = pointerTo_r_n - sim_buff + 2;// +2 since "\r\n"
            continue;
          }
          posOfSubStr++;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	3301      	adds	r3, #1
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e005      	b.n	8006f14 <sim7600_handle_received_data+0x1ec>
            sim_buff_index = pointerTo_r_n - sim_buff + 2;// +2 since "\r\n"
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4a1b      	ldr	r2, [pc, #108]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	3302      	adds	r3, #2
 8006f10:	603b      	str	r3, [r7, #0]
            continue;
 8006f12:	bf00      	nop
        while (posOfSubStr != pointerTo_r_n) //make sure break when meet '\r'
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d1de      	bne.n	8006eda <sim7600_handle_received_data+0x1b2>
        }
        posOfSubStr += 2; //point to data
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	3302      	adds	r3, #2
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
        if(posOfSubStr + lengthOfUdpPacket > sim_buff + sim_buff_length) // don't have enough data
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f26:	441a      	add	r2, r3
 8006f28:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006f30:	440b      	add	r3, r1
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d901      	bls.n	8006f3a <sim7600_handle_received_data+0x212>
          return sim_buff_index;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	e060      	b.n	8006ffc <sim7600_handle_received_data+0x2d4>
        //else data is sastified
        sim7600_handle_udp_packet(posOfSubStr, lengthOfUdpPacket);
 8006f3a:	69f9      	ldr	r1, [r7, #28]
 8006f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f3e:	f000 f86b 	bl	8007018 <sim7600_handle_udp_packet>
        sim_buff_index = posOfSubStr - sim_buff + lengthOfUdpPacket;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	4a0c      	ldr	r2, [pc, #48]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006f46:	1a9a      	subs	r2, r3, r2
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	603b      	str	r3, [r7, #0]
        continue;
 8006f4e:	e053      	b.n	8006ff8 <sim7600_handle_received_data+0x2d0>
      }
      else if(posOfSubStr + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,9999\r\n
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1d9a      	adds	r2, r3, #6
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <sim7600_handle_received_data+0x24c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006f5c:	440b      	add	r3, r1
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d205      	bcs.n	8006f6e <sim7600_handle_received_data+0x246>
      {
        //data may be error-bit 
        sim_buff_index = posOfSubStr - sim_buff + 6;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <sim7600_handle_received_data+0x250>)
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	3306      	adds	r3, #6
 8006f6a:	603b      	str	r3, [r7, #0]
        continue;
 8006f6c:	e044      	b.n	8006ff8 <sim7600_handle_received_data+0x2d0>
      }
      else 
        return sim_buff_index;  //dont have enough data
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	e044      	b.n	8006ffc <sim7600_handle_received_data+0x2d4>
 8006f72:	bf00      	nop
 8006f74:	200055d4 	.word	0x200055d4
 8006f78:	200055fc 	.word	0x200055fc
 8006f7c:	200055e0 	.word	0x200055e0
 8006f80:	080088ec 	.word	0x080088ec
 8006f84:	200040c8 	.word	0x200040c8
 8006f88:	200040c4 	.word	0x200040c4
 8006f8c:	200040bc 	.word	0x200040bc
 8006f90:	200040b8 	.word	0x200040b8
 8006f94:	200040c0 	.word	0x200040c0
 8006f98:	20004108 	.word	0x20004108
 8006f9c:	20004110 	.word	0x20004110
 8006fa0:	20004104 	.word	0x20004104
 8006fa4:	2000411c 	.word	0x2000411c
 8006fa8:	080088e8 	.word	0x080088e8
 8006fac:	080088f4 	.word	0x080088f4
    int resultTmp;

    //received error
    //when network error (many reason, one of those is "sim not found") : \r\n+CIPEVENT: NETWORK CLOSED UNEXPECTEDLY
    //then restart module with pwr or rst pin
    const char* netErrorRes = "+CIPEVENT: NETWORK CLOSED UNEXPECTEDLY";
 8006fb0:	4b14      	ldr	r3, [pc, #80]	; (8007004 <sim7600_handle_received_data+0x2dc>)
 8006fb2:	613b      	str	r3, [r7, #16]
    resultTmp = check_normal_response(netErrorRes, &sim_buff_index);
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6938      	ldr	r0, [r7, #16]
 8006fba:	f7ff fe6b 	bl	8006c94 <check_normal_response>
 8006fbe:	60f8      	str	r0, [r7, #12]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d019      	beq.n	8006ffa <sim7600_handle_received_data+0x2d2>
    else if(resultTmp == 0) // success find
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10c      	bne.n	8006fe6 <sim7600_handle_received_data+0x2be>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_network_IsOpen = false;
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <sim7600_handle_received_data+0x2e0>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
      sim7600_udp_IsOpen = false;
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	; (800700c <sim7600_handle_received_data+0x2e4>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
      sim7600_tcp_IsOpen = false;
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <sim7600_handle_received_data+0x2e8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]

      sim7600_error = true;
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <sim7600_handle_received_data+0x2ec>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
      continue;
 8006fe4:	e008      	b.n	8006ff8 <sim7600_handle_received_data+0x2d0>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d004      	beq.n	8006ff6 <sim7600_handle_received_data+0x2ce>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d103      	bne.n	8006ffa <sim7600_handle_received_data+0x2d2>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	e002      	b.n	8006ffc <sim7600_handle_received_data+0x2d4>
    else if(resultTmp == 1) continue;
 8006ff6:	bf00      	nop
  {
 8006ff8:	e6ac      	b.n	8006d54 <sim7600_handle_received_data+0x2c>
    //   memset(sim_buff, 0, sim_buff_length);
    //   //sim7600 error, handle in a task sim7600 config task
    //   HaveCall = true;
    //   return;
    // }
    break;
 8006ffa:	bf00      	nop
  }
  
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	08008900 	.word	0x08008900
 8007008:	200040ad 	.word	0x200040ad
 800700c:	200040af 	.word	0x200040af
 8007010:	200040ae 	.word	0x200040ae
 8007014:	200040ac 	.word	0x200040ac

08007018 <sim7600_handle_udp_packet>:
int error_frame = 0;
int miss_frame = 0;
int late_frame = 0;
int old_ID_frame = 0;
void sim7600_handle_udp_packet(uint8_t* udpPacket, int length)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  eStatusPlayMp3 = ON;
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <sim7600_handle_udp_packet+0xa4>)
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
  //wait to aquire to update res
  osSemaphoreWait(BinSemPlayMp3Handle, semaphorePlayMp3_wait_ms);
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <sim7600_handle_udp_packet+0xa8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	210a      	movs	r1, #10
 800702e:	4618      	mov	r0, r3
 8007030:	f7fb fe3c 	bl	8002cac <osSemaphoreWait>

  packetMP3HeaderStruct *packetMP3Header = (packetMP3HeaderStruct*)udpPacket;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]
  //check sum to confirm it is head of a packet
  if (packetMP3Header->checkSumHeader == sim7600_check_sum_data(udpPacket + 2, length - 2))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29c      	uxth	r4, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	1c9a      	adds	r2, r3, #2
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	3b02      	subs	r3, #2
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f000 f845 	bl	80070d8 <sim7600_check_sum_data>
 800704e:	4603      	mov	r3, r0
 8007050:	429c      	cmp	r4, r3
 8007052:	d124      	bne.n	800709e <sim7600_handle_udp_packet+0x86>
  {
    numOfPacketUDPReceived++;
 8007054:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <sim7600_handle_udp_packet+0xac>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <sim7600_handle_udp_packet+0xac>)
 800705c:	6013      	str	r3, [r2, #0]
    uint32_t IDtmp = packetMP3Header->IDframe;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007064:	60bb      	str	r3, [r7, #8]
    if(IDtmp > old_ID_frame)
 8007066:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <sim7600_handle_udp_packet+0xb0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4293      	cmp	r3, r2
 8007070:	d90f      	bls.n	8007092 <sim7600_handle_udp_packet+0x7a>
    {
      miss_frame += IDtmp - old_ID_frame - 1;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <sim7600_handle_udp_packet+0xb0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	4a13      	ldr	r2, [pc, #76]	; (80070cc <sim7600_handle_udp_packet+0xb4>)
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	4413      	add	r3, r2
 8007082:	3b01      	subs	r3, #1
 8007084:	461a      	mov	r2, r3
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <sim7600_handle_udp_packet+0xb4>)
 8007088:	601a      	str	r2, [r3, #0]
      old_ID_frame = IDtmp;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <sim7600_handle_udp_packet+0xb0>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e00a      	b.n	80070a8 <sim7600_handle_udp_packet+0x90>
    }
    else
    {
      late_frame++;
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <sim7600_handle_udp_packet+0xb8>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3301      	adds	r3, #1
 8007098:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <sim7600_handle_udp_packet+0xb8>)
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	e004      	b.n	80070a8 <sim7600_handle_udp_packet+0x90>
    //   }
    // }
  }
  else
  {
	  error_frame++;
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <sim7600_handle_udp_packet+0xbc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	4a0b      	ldr	r2, [pc, #44]	; (80070d4 <sim7600_handle_udp_packet+0xbc>)
 80070a6:	6013      	str	r3, [r2, #0]
  }

  //release semaphore
  osSemaphoreRelease(BinSemPlayMp3Handle);
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <sim7600_handle_udp_packet+0xa8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fb fe4b 	bl	8002d48 <osSemaphoreRelease>
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd90      	pop	{r4, r7, pc}
 80070ba:	bf00      	nop
 80070bc:	2000410c 	.word	0x2000410c
 80070c0:	200055dc 	.word	0x200055dc
 80070c4:	200040d4 	.word	0x200040d4
 80070c8:	200040e4 	.word	0x200040e4
 80070cc:	200040dc 	.word	0x200040dc
 80070d0:	200040e0 	.word	0x200040e0
 80070d4:	200040d8 	.word	0x200040d8

080070d8 <sim7600_check_sum_data>:

uint16_t sim7600_check_sum_data(uint8_t *ptr, int length)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]

	while (length > 1) //cong het cac byte16 lai
 80070e6:	e00f      	b.n	8007108 <sim7600_check_sum_data+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	3201      	adds	r2, #1
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3302      	adds	r3, #2
 8007100:	607b      	str	r3, [r7, #4]
		length -= 2;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	3b02      	subs	r3, #2
 8007106:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b01      	cmp	r3, #1
 800710c:	dcec      	bgt.n	80070e8 <sim7600_check_sum_data+0x10>
	}
	if (length)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <sim7600_check_sum_data+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8007120:	e005      	b.n	800712e <sim7600_check_sum_data+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	4413      	add	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f5      	bne.n	8007122 <sim7600_check_sum_data+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	43db      	mvns	r3, r3
 800713a:	60fb      	str	r3, [r7, #12]
	//hoan vi byte thap byte cao
	return (uint16_t)checksum;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	b29b      	uxth	r3, r3
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <sim7600_usart_IRQHandler>:

/**
 * \brief           usartSim7600 global interrupt handler
 */
void sim7600_usart_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  //if (LL_USART_IsEnabledIT_IDLE(usartSim7600) && LL_USART_IsActiveFlag_IDLE(usartSim7600)) {
  //    LL_USART_ClearFlag_IDLE(usartSim7600);        /* Clear IDLE line flag */
  //   sim7600_usart_rx_check();                       /* Check for data to process */
  //}

  if ((usartSim7600->CR1 & USART_CR1_IDLEIE) == USART_CR1_IDLEIE && (usartSim7600->SR & USART_SR_IDLE) == (USART_SR_IDLE))
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <sim7600_usart_IRQHandler+0x4c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b10      	cmp	r3, #16
 800715e:	d117      	bne.n	8007190 <sim7600_usart_IRQHandler+0x44>
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <sim7600_usart_IRQHandler+0x4c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b10      	cmp	r3, #16
 800716c:	d110      	bne.n	8007190 <sim7600_usart_IRQHandler+0x44>
  {
    // Clear IDLE line flag
    volatile uint32_t tmpreg;
    tmpreg = usartSim7600->SR;
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <sim7600_usart_IRQHandler+0x4c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8007176:	687b      	ldr	r3, [r7, #4]
    tmpreg = usartSim7600->DR;
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <sim7600_usart_IRQHandler+0x4c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8007180:	687b      	ldr	r3, [r7, #4]

    //sim7600_usart_rx_check(); // Check for data to process
    //put data to queue to invoke task handle rx data
    osMessagePut(usart_rx_dma_queue_id, 1, 0);
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <sim7600_usart_IRQHandler+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	2101      	movs	r1, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb fe3a 	bl	8002e04 <osMessagePut>
  }
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	2000000c 	.word	0x2000000c
 800719c:	20004118 	.word	0x20004118

080071a0 <sim7600_change_baud>:

void sim7600_change_baud(uint32_t baudrate)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  LL_USART_Disable(USART1);
 80071a8:	4807      	ldr	r0, [pc, #28]	; (80071c8 <sim7600_change_baud+0x28>)
 80071aa:	f7fe fdcb 	bl	8005d44 <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	4906      	ldr	r1, [pc, #24]	; (80071cc <sim7600_change_baud+0x2c>)
 80071b4:	4804      	ldr	r0, [pc, #16]	; (80071c8 <sim7600_change_baud+0x28>)
 80071b6:	f7fe fdd5 	bl	8005d64 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 80071ba:	4803      	ldr	r0, [pc, #12]	; (80071c8 <sim7600_change_baud+0x28>)
 80071bc:	f7fe fdb2 	bl	8005d24 <LL_USART_Enable>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40011000 	.word	0x40011000
 80071cc:	044aa200 	.word	0x044aa200

080071d0 <__errno>:
 80071d0:	4b01      	ldr	r3, [pc, #4]	; (80071d8 <__errno+0x8>)
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000078 	.word	0x20000078

080071dc <__libc_init_array>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4d0d      	ldr	r5, [pc, #52]	; (8007214 <__libc_init_array+0x38>)
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <__libc_init_array+0x3c>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	2600      	movs	r6, #0
 80071e8:	42a6      	cmp	r6, r4
 80071ea:	d109      	bne.n	8007200 <__libc_init_array+0x24>
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <__libc_init_array+0x40>)
 80071ee:	4c0c      	ldr	r4, [pc, #48]	; (8007220 <__libc_init_array+0x44>)
 80071f0:	f001 fa34 	bl	800865c <_init>
 80071f4:	1b64      	subs	r4, r4, r5
 80071f6:	10a4      	asrs	r4, r4, #2
 80071f8:	2600      	movs	r6, #0
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	d105      	bne.n	800720a <__libc_init_array+0x2e>
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	f855 3b04 	ldr.w	r3, [r5], #4
 8007204:	4798      	blx	r3
 8007206:	3601      	adds	r6, #1
 8007208:	e7ee      	b.n	80071e8 <__libc_init_array+0xc>
 800720a:	f855 3b04 	ldr.w	r3, [r5], #4
 800720e:	4798      	blx	r3
 8007210:	3601      	adds	r6, #1
 8007212:	e7f2      	b.n	80071fa <__libc_init_array+0x1e>
 8007214:	080089f0 	.word	0x080089f0
 8007218:	080089f0 	.word	0x080089f0
 800721c:	080089f0 	.word	0x080089f0
 8007220:	080089f4 	.word	0x080089f4

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <memset>:
 8007240:	4402      	add	r2, r0
 8007242:	4603      	mov	r3, r0
 8007244:	4293      	cmp	r3, r2
 8007246:	d100      	bne.n	800724a <memset+0xa>
 8007248:	4770      	bx	lr
 800724a:	f803 1b01 	strb.w	r1, [r3], #1
 800724e:	e7f9      	b.n	8007244 <memset+0x4>

08007250 <iprintf>:
 8007250:	b40f      	push	{r0, r1, r2, r3}
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <iprintf+0x2c>)
 8007254:	b513      	push	{r0, r1, r4, lr}
 8007256:	681c      	ldr	r4, [r3, #0]
 8007258:	b124      	cbz	r4, 8007264 <iprintf+0x14>
 800725a:	69a3      	ldr	r3, [r4, #24]
 800725c:	b913      	cbnz	r3, 8007264 <iprintf+0x14>
 800725e:	4620      	mov	r0, r4
 8007260:	f000 faac 	bl	80077bc <__sinit>
 8007264:	ab05      	add	r3, sp, #20
 8007266:	9a04      	ldr	r2, [sp, #16]
 8007268:	68a1      	ldr	r1, [r4, #8]
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	4620      	mov	r0, r4
 800726e:	f000 fdd9 	bl	8007e24 <_vfiprintf_r>
 8007272:	b002      	add	sp, #8
 8007274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007278:	b004      	add	sp, #16
 800727a:	4770      	bx	lr
 800727c:	20000078 	.word	0x20000078

08007280 <putchar>:
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <putchar+0x28>)
 8007282:	b513      	push	{r0, r1, r4, lr}
 8007284:	681c      	ldr	r4, [r3, #0]
 8007286:	4601      	mov	r1, r0
 8007288:	b134      	cbz	r4, 8007298 <putchar+0x18>
 800728a:	69a3      	ldr	r3, [r4, #24]
 800728c:	b923      	cbnz	r3, 8007298 <putchar+0x18>
 800728e:	9001      	str	r0, [sp, #4]
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fa93 	bl	80077bc <__sinit>
 8007296:	9901      	ldr	r1, [sp, #4]
 8007298:	68a2      	ldr	r2, [r4, #8]
 800729a:	4620      	mov	r0, r4
 800729c:	b002      	add	sp, #8
 800729e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a2:	f001 b883 	b.w	80083ac <_putc_r>
 80072a6:	bf00      	nop
 80072a8:	20000078 	.word	0x20000078

080072ac <_puts_r>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	4605      	mov	r5, r0
 80072b2:	b118      	cbz	r0, 80072bc <_puts_r+0x10>
 80072b4:	6983      	ldr	r3, [r0, #24]
 80072b6:	b90b      	cbnz	r3, 80072bc <_puts_r+0x10>
 80072b8:	f000 fa80 	bl	80077bc <__sinit>
 80072bc:	69ab      	ldr	r3, [r5, #24]
 80072be:	68ac      	ldr	r4, [r5, #8]
 80072c0:	b913      	cbnz	r3, 80072c8 <_puts_r+0x1c>
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fa7a 	bl	80077bc <__sinit>
 80072c8:	4b2c      	ldr	r3, [pc, #176]	; (800737c <_puts_r+0xd0>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	d120      	bne.n	8007310 <_puts_r+0x64>
 80072ce:	686c      	ldr	r4, [r5, #4]
 80072d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d2:	07db      	lsls	r3, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_puts_r+0x36>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	0598      	lsls	r0, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_puts_r+0x36>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f000 fb0b 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	0719      	lsls	r1, r3, #28
 80072e6:	d51d      	bpl.n	8007324 <_puts_r+0x78>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	b1db      	cbz	r3, 8007324 <_puts_r+0x78>
 80072ec:	3e01      	subs	r6, #1
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072f4:	3b01      	subs	r3, #1
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	bb39      	cbnz	r1, 800734a <_puts_r+0x9e>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da38      	bge.n	8007370 <_puts_r+0xc4>
 80072fe:	4622      	mov	r2, r4
 8007300:	210a      	movs	r1, #10
 8007302:	4628      	mov	r0, r5
 8007304:	f000 f880 	bl	8007408 <__swbuf_r>
 8007308:	3001      	adds	r0, #1
 800730a:	d011      	beq.n	8007330 <_puts_r+0x84>
 800730c:	250a      	movs	r5, #10
 800730e:	e011      	b.n	8007334 <_puts_r+0x88>
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <_puts_r+0xd4>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <_puts_r+0x6e>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7da      	b.n	80072d0 <_puts_r+0x24>
 800731a:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <_puts_r+0xd8>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7d5      	b.n	80072d0 <_puts_r+0x24>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f8c0 	bl	80074ac <__swsetup_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	d0dd      	beq.n	80072ec <_puts_r+0x40>
 8007330:	f04f 35ff 	mov.w	r5, #4294967295
 8007334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007336:	07da      	lsls	r2, r3, #31
 8007338:	d405      	bmi.n	8007346 <_puts_r+0x9a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d402      	bmi.n	8007346 <_puts_r+0x9a>
 8007340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007342:	f000 fada 	bl	80078fa <__retarget_lock_release_recursive>
 8007346:	4628      	mov	r0, r5
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	2b00      	cmp	r3, #0
 800734c:	da04      	bge.n	8007358 <_puts_r+0xac>
 800734e:	69a2      	ldr	r2, [r4, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	dc06      	bgt.n	8007362 <_puts_r+0xb6>
 8007354:	290a      	cmp	r1, #10
 8007356:	d004      	beq.n	8007362 <_puts_r+0xb6>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	7019      	strb	r1, [r3, #0]
 8007360:	e7c5      	b.n	80072ee <_puts_r+0x42>
 8007362:	4622      	mov	r2, r4
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f84f 	bl	8007408 <__swbuf_r>
 800736a:	3001      	adds	r0, #1
 800736c:	d1bf      	bne.n	80072ee <_puts_r+0x42>
 800736e:	e7df      	b.n	8007330 <_puts_r+0x84>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	250a      	movs	r5, #10
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	701d      	strb	r5, [r3, #0]
 800737a:	e7db      	b.n	8007334 <_puts_r+0x88>
 800737c:	08008974 	.word	0x08008974
 8007380:	08008994 	.word	0x08008994
 8007384:	08008954 	.word	0x08008954

08007388 <puts>:
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <puts+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f7ff bf8d 	b.w	80072ac <_puts_r>
 8007392:	bf00      	nop
 8007394:	20000078 	.word	0x20000078

08007398 <siprintf>:
 8007398:	b40e      	push	{r1, r2, r3}
 800739a:	b500      	push	{lr}
 800739c:	b09c      	sub	sp, #112	; 0x70
 800739e:	ab1d      	add	r3, sp, #116	; 0x74
 80073a0:	9002      	str	r0, [sp, #8]
 80073a2:	9006      	str	r0, [sp, #24]
 80073a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a8:	4809      	ldr	r0, [pc, #36]	; (80073d0 <siprintf+0x38>)
 80073aa:	9107      	str	r1, [sp, #28]
 80073ac:	9104      	str	r1, [sp, #16]
 80073ae:	4909      	ldr	r1, [pc, #36]	; (80073d4 <siprintf+0x3c>)
 80073b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	a902      	add	r1, sp, #8
 80073bc:	f000 fc08 	bl	8007bd0 <_svfiprintf_r>
 80073c0:	9b02      	ldr	r3, [sp, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	b01c      	add	sp, #112	; 0x70
 80073c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073cc:	b003      	add	sp, #12
 80073ce:	4770      	bx	lr
 80073d0:	20000078 	.word	0x20000078
 80073d4:	ffff0208 	.word	0xffff0208

080073d8 <strstr>:
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073da:	780c      	ldrb	r4, [r1, #0]
 80073dc:	b164      	cbz	r4, 80073f8 <strstr+0x20>
 80073de:	4603      	mov	r3, r0
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	1c5e      	adds	r6, r3, #1
 80073e6:	b90a      	cbnz	r2, 80073ec <strstr+0x14>
 80073e8:	4610      	mov	r0, r2
 80073ea:	e005      	b.n	80073f8 <strstr+0x20>
 80073ec:	4294      	cmp	r4, r2
 80073ee:	d108      	bne.n	8007402 <strstr+0x2a>
 80073f0:	460d      	mov	r5, r1
 80073f2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80073f6:	b902      	cbnz	r2, 80073fa <strstr+0x22>
 80073f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80073fe:	4297      	cmp	r7, r2
 8007400:	d0f7      	beq.n	80073f2 <strstr+0x1a>
 8007402:	4633      	mov	r3, r6
 8007404:	e7ec      	b.n	80073e0 <strstr+0x8>
	...

08007408 <__swbuf_r>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	460e      	mov	r6, r1
 800740c:	4614      	mov	r4, r2
 800740e:	4605      	mov	r5, r0
 8007410:	b118      	cbz	r0, 800741a <__swbuf_r+0x12>
 8007412:	6983      	ldr	r3, [r0, #24]
 8007414:	b90b      	cbnz	r3, 800741a <__swbuf_r+0x12>
 8007416:	f000 f9d1 	bl	80077bc <__sinit>
 800741a:	4b21      	ldr	r3, [pc, #132]	; (80074a0 <__swbuf_r+0x98>)
 800741c:	429c      	cmp	r4, r3
 800741e:	d12b      	bne.n	8007478 <__swbuf_r+0x70>
 8007420:	686c      	ldr	r4, [r5, #4]
 8007422:	69a3      	ldr	r3, [r4, #24]
 8007424:	60a3      	str	r3, [r4, #8]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	071a      	lsls	r2, r3, #28
 800742a:	d52f      	bpl.n	800748c <__swbuf_r+0x84>
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	b36b      	cbz	r3, 800748c <__swbuf_r+0x84>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	1ac0      	subs	r0, r0, r3
 8007436:	6963      	ldr	r3, [r4, #20]
 8007438:	b2f6      	uxtb	r6, r6
 800743a:	4283      	cmp	r3, r0
 800743c:	4637      	mov	r7, r6
 800743e:	dc04      	bgt.n	800744a <__swbuf_r+0x42>
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f926 	bl	8007694 <_fflush_r>
 8007448:	bb30      	cbnz	r0, 8007498 <__swbuf_r+0x90>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	3b01      	subs	r3, #1
 800744e:	60a3      	str	r3, [r4, #8]
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	701e      	strb	r6, [r3, #0]
 8007458:	6963      	ldr	r3, [r4, #20]
 800745a:	3001      	adds	r0, #1
 800745c:	4283      	cmp	r3, r0
 800745e:	d004      	beq.n	800746a <__swbuf_r+0x62>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d506      	bpl.n	8007474 <__swbuf_r+0x6c>
 8007466:	2e0a      	cmp	r6, #10
 8007468:	d104      	bne.n	8007474 <__swbuf_r+0x6c>
 800746a:	4621      	mov	r1, r4
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f911 	bl	8007694 <_fflush_r>
 8007472:	b988      	cbnz	r0, 8007498 <__swbuf_r+0x90>
 8007474:	4638      	mov	r0, r7
 8007476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <__swbuf_r+0x9c>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <__swbuf_r+0x7a>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7cf      	b.n	8007422 <__swbuf_r+0x1a>
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <__swbuf_r+0xa0>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7ca      	b.n	8007422 <__swbuf_r+0x1a>
 800748c:	4621      	mov	r1, r4
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f80c 	bl	80074ac <__swsetup_r>
 8007494:	2800      	cmp	r0, #0
 8007496:	d0cb      	beq.n	8007430 <__swbuf_r+0x28>
 8007498:	f04f 37ff 	mov.w	r7, #4294967295
 800749c:	e7ea      	b.n	8007474 <__swbuf_r+0x6c>
 800749e:	bf00      	nop
 80074a0:	08008974 	.word	0x08008974
 80074a4:	08008994 	.word	0x08008994
 80074a8:	08008954 	.word	0x08008954

080074ac <__swsetup_r>:
 80074ac:	4b32      	ldr	r3, [pc, #200]	; (8007578 <__swsetup_r+0xcc>)
 80074ae:	b570      	push	{r4, r5, r6, lr}
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	4606      	mov	r6, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	b125      	cbz	r5, 80074c2 <__swsetup_r+0x16>
 80074b8:	69ab      	ldr	r3, [r5, #24]
 80074ba:	b913      	cbnz	r3, 80074c2 <__swsetup_r+0x16>
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f97d 	bl	80077bc <__sinit>
 80074c2:	4b2e      	ldr	r3, [pc, #184]	; (800757c <__swsetup_r+0xd0>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	d10f      	bne.n	80074e8 <__swsetup_r+0x3c>
 80074c8:	686c      	ldr	r4, [r5, #4]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d0:	0719      	lsls	r1, r3, #28
 80074d2:	d42c      	bmi.n	800752e <__swsetup_r+0x82>
 80074d4:	06dd      	lsls	r5, r3, #27
 80074d6:	d411      	bmi.n	80074fc <__swsetup_r+0x50>
 80074d8:	2309      	movs	r3, #9
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	e03e      	b.n	8007566 <__swsetup_r+0xba>
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <__swsetup_r+0xd4>)
 80074ea:	429c      	cmp	r4, r3
 80074ec:	d101      	bne.n	80074f2 <__swsetup_r+0x46>
 80074ee:	68ac      	ldr	r4, [r5, #8]
 80074f0:	e7eb      	b.n	80074ca <__swsetup_r+0x1e>
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <__swsetup_r+0xd8>)
 80074f4:	429c      	cmp	r4, r3
 80074f6:	bf08      	it	eq
 80074f8:	68ec      	ldreq	r4, [r5, #12]
 80074fa:	e7e6      	b.n	80074ca <__swsetup_r+0x1e>
 80074fc:	0758      	lsls	r0, r3, #29
 80074fe:	d512      	bpl.n	8007526 <__swsetup_r+0x7a>
 8007500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007502:	b141      	cbz	r1, 8007516 <__swsetup_r+0x6a>
 8007504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <__swsetup_r+0x66>
 800750c:	4630      	mov	r0, r6
 800750e:	f000 fa59 	bl	80079c4 <_free_r>
 8007512:	2300      	movs	r3, #0
 8007514:	6363      	str	r3, [r4, #52]	; 0x34
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f043 0308 	orr.w	r3, r3, #8
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	b94b      	cbnz	r3, 8007546 <__swsetup_r+0x9a>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753c:	d003      	beq.n	8007546 <__swsetup_r+0x9a>
 800753e:	4621      	mov	r1, r4
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f9ff 	bl	8007944 <__smakebuf_r>
 8007546:	89a0      	ldrh	r0, [r4, #12]
 8007548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800754c:	f010 0301 	ands.w	r3, r0, #1
 8007550:	d00a      	beq.n	8007568 <__swsetup_r+0xbc>
 8007552:	2300      	movs	r3, #0
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	425b      	negs	r3, r3
 800755a:	61a3      	str	r3, [r4, #24]
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b943      	cbnz	r3, 8007572 <__swsetup_r+0xc6>
 8007560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007564:	d1ba      	bne.n	80074dc <__swsetup_r+0x30>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	0781      	lsls	r1, r0, #30
 800756a:	bf58      	it	pl
 800756c:	6963      	ldrpl	r3, [r4, #20]
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	e7f4      	b.n	800755c <__swsetup_r+0xb0>
 8007572:	2000      	movs	r0, #0
 8007574:	e7f7      	b.n	8007566 <__swsetup_r+0xba>
 8007576:	bf00      	nop
 8007578:	20000078 	.word	0x20000078
 800757c:	08008974 	.word	0x08008974
 8007580:	08008994 	.word	0x08008994
 8007584:	08008954 	.word	0x08008954

08007588 <__sflush_r>:
 8007588:	898a      	ldrh	r2, [r1, #12]
 800758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	4605      	mov	r5, r0
 8007590:	0710      	lsls	r0, r2, #28
 8007592:	460c      	mov	r4, r1
 8007594:	d458      	bmi.n	8007648 <__sflush_r+0xc0>
 8007596:	684b      	ldr	r3, [r1, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc05      	bgt.n	80075a8 <__sflush_r+0x20>
 800759c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dc02      	bgt.n	80075a8 <__sflush_r+0x20>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d0f9      	beq.n	80075a2 <__sflush_r+0x1a>
 80075ae:	2300      	movs	r3, #0
 80075b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b4:	682f      	ldr	r7, [r5, #0]
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	d032      	beq.n	8007620 <__sflush_r+0x98>
 80075ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	075a      	lsls	r2, r3, #29
 80075c0:	d505      	bpl.n	80075ce <__sflush_r+0x46>
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	1ac0      	subs	r0, r0, r3
 80075c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c8:	b10b      	cbz	r3, 80075ce <__sflush_r+0x46>
 80075ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	4602      	mov	r2, r0
 80075d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b0      	blx	r6
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	d106      	bne.n	80075ee <__sflush_r+0x66>
 80075e0:	6829      	ldr	r1, [r5, #0]
 80075e2:	291d      	cmp	r1, #29
 80075e4:	d82c      	bhi.n	8007640 <__sflush_r+0xb8>
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <__sflush_r+0x108>)
 80075e8:	40ca      	lsrs	r2, r1
 80075ea:	07d6      	lsls	r6, r2, #31
 80075ec:	d528      	bpl.n	8007640 <__sflush_r+0xb8>
 80075ee:	2200      	movs	r2, #0
 80075f0:	6062      	str	r2, [r4, #4]
 80075f2:	04d9      	lsls	r1, r3, #19
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	d504      	bpl.n	8007604 <__sflush_r+0x7c>
 80075fa:	1c42      	adds	r2, r0, #1
 80075fc:	d101      	bne.n	8007602 <__sflush_r+0x7a>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b903      	cbnz	r3, 8007604 <__sflush_r+0x7c>
 8007602:	6560      	str	r0, [r4, #84]	; 0x54
 8007604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007606:	602f      	str	r7, [r5, #0]
 8007608:	2900      	cmp	r1, #0
 800760a:	d0ca      	beq.n	80075a2 <__sflush_r+0x1a>
 800760c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007610:	4299      	cmp	r1, r3
 8007612:	d002      	beq.n	800761a <__sflush_r+0x92>
 8007614:	4628      	mov	r0, r5
 8007616:	f000 f9d5 	bl	80079c4 <_free_r>
 800761a:	2000      	movs	r0, #0
 800761c:	6360      	str	r0, [r4, #52]	; 0x34
 800761e:	e7c1      	b.n	80075a4 <__sflush_r+0x1c>
 8007620:	6a21      	ldr	r1, [r4, #32]
 8007622:	2301      	movs	r3, #1
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	1c41      	adds	r1, r0, #1
 800762a:	d1c7      	bne.n	80075bc <__sflush_r+0x34>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0c4      	beq.n	80075bc <__sflush_r+0x34>
 8007632:	2b1d      	cmp	r3, #29
 8007634:	d001      	beq.n	800763a <__sflush_r+0xb2>
 8007636:	2b16      	cmp	r3, #22
 8007638:	d101      	bne.n	800763e <__sflush_r+0xb6>
 800763a:	602f      	str	r7, [r5, #0]
 800763c:	e7b1      	b.n	80075a2 <__sflush_r+0x1a>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7ad      	b.n	80075a4 <__sflush_r+0x1c>
 8007648:	690f      	ldr	r7, [r1, #16]
 800764a:	2f00      	cmp	r7, #0
 800764c:	d0a9      	beq.n	80075a2 <__sflush_r+0x1a>
 800764e:	0793      	lsls	r3, r2, #30
 8007650:	680e      	ldr	r6, [r1, #0]
 8007652:	bf08      	it	eq
 8007654:	694b      	ldreq	r3, [r1, #20]
 8007656:	600f      	str	r7, [r1, #0]
 8007658:	bf18      	it	ne
 800765a:	2300      	movne	r3, #0
 800765c:	eba6 0807 	sub.w	r8, r6, r7
 8007660:	608b      	str	r3, [r1, #8]
 8007662:	f1b8 0f00 	cmp.w	r8, #0
 8007666:	dd9c      	ble.n	80075a2 <__sflush_r+0x1a>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800766c:	4643      	mov	r3, r8
 800766e:	463a      	mov	r2, r7
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	2800      	cmp	r0, #0
 8007676:	dc06      	bgt.n	8007686 <__sflush_r+0xfe>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	e78e      	b.n	80075a4 <__sflush_r+0x1c>
 8007686:	4407      	add	r7, r0
 8007688:	eba8 0800 	sub.w	r8, r8, r0
 800768c:	e7e9      	b.n	8007662 <__sflush_r+0xda>
 800768e:	bf00      	nop
 8007690:	20400001 	.word	0x20400001

08007694 <_fflush_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	690b      	ldr	r3, [r1, #16]
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b913      	cbnz	r3, 80076a4 <_fflush_r+0x10>
 800769e:	2500      	movs	r5, #0
 80076a0:	4628      	mov	r0, r5
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	b118      	cbz	r0, 80076ae <_fflush_r+0x1a>
 80076a6:	6983      	ldr	r3, [r0, #24]
 80076a8:	b90b      	cbnz	r3, 80076ae <_fflush_r+0x1a>
 80076aa:	f000 f887 	bl	80077bc <__sinit>
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <_fflush_r+0x6c>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d11b      	bne.n	80076ec <_fflush_r+0x58>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ef      	beq.n	800769e <_fflush_r+0xa>
 80076be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c0:	07d0      	lsls	r0, r2, #31
 80076c2:	d404      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c4:	0599      	lsls	r1, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_fflush_r+0x3a>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f000 f915 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7ff ff59 	bl	8007588 <__sflush_r>
 80076d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d8:	07da      	lsls	r2, r3, #31
 80076da:	4605      	mov	r5, r0
 80076dc:	d4e0      	bmi.n	80076a0 <_fflush_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d4dd      	bmi.n	80076a0 <_fflush_r+0xc>
 80076e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e6:	f000 f908 	bl	80078fa <__retarget_lock_release_recursive>
 80076ea:	e7d9      	b.n	80076a0 <_fflush_r+0xc>
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_fflush_r+0x70>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d101      	bne.n	80076f6 <_fflush_r+0x62>
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	e7df      	b.n	80076b6 <_fflush_r+0x22>
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <_fflush_r+0x74>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	bf08      	it	eq
 80076fc:	68ec      	ldreq	r4, [r5, #12]
 80076fe:	e7da      	b.n	80076b6 <_fflush_r+0x22>
 8007700:	08008974 	.word	0x08008974
 8007704:	08008994 	.word	0x08008994
 8007708:	08008954 	.word	0x08008954

0800770c <std>:
 800770c:	2300      	movs	r3, #0
 800770e:	b510      	push	{r4, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	e9c0 3300 	strd	r3, r3, [r0]
 8007716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771a:	6083      	str	r3, [r0, #8]
 800771c:	8181      	strh	r1, [r0, #12]
 800771e:	6643      	str	r3, [r0, #100]	; 0x64
 8007720:	81c2      	strh	r2, [r0, #14]
 8007722:	6183      	str	r3, [r0, #24]
 8007724:	4619      	mov	r1, r3
 8007726:	2208      	movs	r2, #8
 8007728:	305c      	adds	r0, #92	; 0x5c
 800772a:	f7ff fd89 	bl	8007240 <memset>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x38>)
 8007730:	6263      	str	r3, [r4, #36]	; 0x24
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x3c>)
 8007734:	62a3      	str	r3, [r4, #40]	; 0x28
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x40>)
 8007738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x44>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	0800845d 	.word	0x0800845d
 8007748:	0800847f 	.word	0x0800847f
 800774c:	080084b7 	.word	0x080084b7
 8007750:	080084db 	.word	0x080084db

08007754 <_cleanup_r>:
 8007754:	4901      	ldr	r1, [pc, #4]	; (800775c <_cleanup_r+0x8>)
 8007756:	f000 b8af 	b.w	80078b8 <_fwalk_reent>
 800775a:	bf00      	nop
 800775c:	08007695 	.word	0x08007695

08007760 <__sfmoreglue>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	1e4a      	subs	r2, r1, #1
 8007764:	2568      	movs	r5, #104	; 0x68
 8007766:	4355      	muls	r5, r2
 8007768:	460e      	mov	r6, r1
 800776a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776e:	f000 f979 	bl	8007a64 <_malloc_r>
 8007772:	4604      	mov	r4, r0
 8007774:	b140      	cbz	r0, 8007788 <__sfmoreglue+0x28>
 8007776:	2100      	movs	r1, #0
 8007778:	e9c0 1600 	strd	r1, r6, [r0]
 800777c:	300c      	adds	r0, #12
 800777e:	60a0      	str	r0, [r4, #8]
 8007780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007784:	f7ff fd5c 	bl	8007240 <memset>
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b8b3 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	2000698d 	.word	0x2000698d

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8ae 	b.w	80078fa <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	2000698d 	.word	0x2000698d

080077a4 <__sinit_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__sinit_lock_acquire+0x8>)
 80077a6:	f000 b8a7 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	20006988 	.word	0x20006988

080077b0 <__sinit_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sinit_lock_release+0x8>)
 80077b2:	f000 b8a2 	b.w	80078fa <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	20006988 	.word	0x20006988

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sinit_lock_acquire>
 80077c4:	69a3      	ldr	r3, [r4, #24]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sinit_lock_release>
 80077d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077d4:	6523      	str	r3, [r4, #80]	; 0x50
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <__sinit+0x68>)
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <__sinit+0x6c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80077de:	42a3      	cmp	r3, r4
 80077e0:	bf04      	itt	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	61a3      	streq	r3, [r4, #24]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f820 	bl	800782c <__sfp>
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f81c 	bl	800782c <__sfp>
 80077f4:	60a0      	str	r0, [r4, #8]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f818 	bl	800782c <__sfp>
 80077fc:	2200      	movs	r2, #0
 80077fe:	60e0      	str	r0, [r4, #12]
 8007800:	2104      	movs	r1, #4
 8007802:	6860      	ldr	r0, [r4, #4]
 8007804:	f7ff ff82 	bl	800770c <std>
 8007808:	68a0      	ldr	r0, [r4, #8]
 800780a:	2201      	movs	r2, #1
 800780c:	2109      	movs	r1, #9
 800780e:	f7ff ff7d 	bl	800770c <std>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	2112      	movs	r1, #18
 8007818:	f7ff ff78 	bl	800770c <std>
 800781c:	2301      	movs	r3, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	e7d2      	b.n	80077c8 <__sinit+0xc>
 8007822:	bf00      	nop
 8007824:	08008950 	.word	0x08008950
 8007828:	08007755 	.word	0x08007755

0800782c <__sfp>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	4607      	mov	r7, r0
 8007830:	f7ff ffac 	bl	800778c <__sfp_lock_acquire>
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <__sfp+0x84>)
 8007836:	681e      	ldr	r6, [r3, #0]
 8007838:	69b3      	ldr	r3, [r6, #24]
 800783a:	b913      	cbnz	r3, 8007842 <__sfp+0x16>
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff ffbd 	bl	80077bc <__sinit>
 8007842:	3648      	adds	r6, #72	; 0x48
 8007844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	d503      	bpl.n	8007854 <__sfp+0x28>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	b30b      	cbz	r3, 8007894 <__sfp+0x68>
 8007850:	6836      	ldr	r6, [r6, #0]
 8007852:	e7f7      	b.n	8007844 <__sfp+0x18>
 8007854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007858:	b9d5      	cbnz	r5, 8007890 <__sfp+0x64>
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <__sfp+0x88>)
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007862:	6665      	str	r5, [r4, #100]	; 0x64
 8007864:	f000 f847 	bl	80078f6 <__retarget_lock_init_recursive>
 8007868:	f7ff ff96 	bl	8007798 <__sfp_lock_release>
 800786c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	61a5      	str	r5, [r4, #24]
 8007878:	2208      	movs	r2, #8
 800787a:	4629      	mov	r1, r5
 800787c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007880:	f7ff fcde 	bl	8007240 <memset>
 8007884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800788c:	4620      	mov	r0, r4
 800788e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007890:	3468      	adds	r4, #104	; 0x68
 8007892:	e7d9      	b.n	8007848 <__sfp+0x1c>
 8007894:	2104      	movs	r1, #4
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ff62 	bl	8007760 <__sfmoreglue>
 800789c:	4604      	mov	r4, r0
 800789e:	6030      	str	r0, [r6, #0]
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1d5      	bne.n	8007850 <__sfp+0x24>
 80078a4:	f7ff ff78 	bl	8007798 <__sfp_lock_release>
 80078a8:	230c      	movs	r3, #12
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	e7ee      	b.n	800788c <__sfp+0x60>
 80078ae:	bf00      	nop
 80078b0:	08008950 	.word	0x08008950
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	4688      	mov	r8, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2700      	movs	r7, #0
 80078c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ca:	f1b9 0901 	subs.w	r9, r9, #1
 80078ce:	d505      	bpl.n	80078dc <_fwalk_reent+0x24>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	2c00      	cmp	r4, #0
 80078d4:	d1f7      	bne.n	80078c6 <_fwalk_reent+0xe>
 80078d6:	4638      	mov	r0, r7
 80078d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d907      	bls.n	80078f2 <_fwalk_reent+0x3a>
 80078e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e6:	3301      	adds	r3, #1
 80078e8:	d003      	beq.n	80078f2 <_fwalk_reent+0x3a>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	47c0      	blx	r8
 80078f0:	4307      	orrs	r7, r0
 80078f2:	3568      	adds	r5, #104	; 0x68
 80078f4:	e7e9      	b.n	80078ca <_fwalk_reent+0x12>

080078f6 <__retarget_lock_init_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <__retarget_lock_acquire_recursive>:
 80078f8:	4770      	bx	lr

080078fa <__retarget_lock_release_recursive>:
 80078fa:	4770      	bx	lr

080078fc <__swhatbuf_r>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007904:	2900      	cmp	r1, #0
 8007906:	b096      	sub	sp, #88	; 0x58
 8007908:	4614      	mov	r4, r2
 800790a:	461d      	mov	r5, r3
 800790c:	da07      	bge.n	800791e <__swhatbuf_r+0x22>
 800790e:	2300      	movs	r3, #0
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	89b3      	ldrh	r3, [r6, #12]
 8007914:	061a      	lsls	r2, r3, #24
 8007916:	d410      	bmi.n	800793a <__swhatbuf_r+0x3e>
 8007918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791c:	e00e      	b.n	800793c <__swhatbuf_r+0x40>
 800791e:	466a      	mov	r2, sp
 8007920:	f000 fe02 	bl	8008528 <_fstat_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	dbf2      	blt.n	800790e <__swhatbuf_r+0x12>
 8007928:	9a01      	ldr	r2, [sp, #4]
 800792a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800792e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007932:	425a      	negs	r2, r3
 8007934:	415a      	adcs	r2, r3
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	e7ee      	b.n	8007918 <__swhatbuf_r+0x1c>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	2000      	movs	r0, #0
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	b016      	add	sp, #88	; 0x58
 8007942:	bd70      	pop	{r4, r5, r6, pc}

08007944 <__smakebuf_r>:
 8007944:	898b      	ldrh	r3, [r1, #12]
 8007946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007948:	079d      	lsls	r5, r3, #30
 800794a:	4606      	mov	r6, r0
 800794c:	460c      	mov	r4, r1
 800794e:	d507      	bpl.n	8007960 <__smakebuf_r+0x1c>
 8007950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	2301      	movs	r3, #1
 800795a:	6163      	str	r3, [r4, #20]
 800795c:	b002      	add	sp, #8
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	ab01      	add	r3, sp, #4
 8007962:	466a      	mov	r2, sp
 8007964:	f7ff ffca 	bl	80078fc <__swhatbuf_r>
 8007968:	9900      	ldr	r1, [sp, #0]
 800796a:	4605      	mov	r5, r0
 800796c:	4630      	mov	r0, r6
 800796e:	f000 f879 	bl	8007a64 <_malloc_r>
 8007972:	b948      	cbnz	r0, 8007988 <__smakebuf_r+0x44>
 8007974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007978:	059a      	lsls	r2, r3, #22
 800797a:	d4ef      	bmi.n	800795c <__smakebuf_r+0x18>
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	e7e3      	b.n	8007950 <__smakebuf_r+0xc>
 8007988:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <__smakebuf_r+0x7c>)
 800798a:	62b3      	str	r3, [r6, #40]	; 0x28
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	9b00      	ldr	r3, [sp, #0]
 8007998:	6163      	str	r3, [r4, #20]
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	6120      	str	r0, [r4, #16]
 800799e:	b15b      	cbz	r3, 80079b8 <__smakebuf_r+0x74>
 80079a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a4:	4630      	mov	r0, r6
 80079a6:	f000 fdd1 	bl	800854c <_isatty_r>
 80079aa:	b128      	cbz	r0, 80079b8 <__smakebuf_r+0x74>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f023 0303 	bic.w	r3, r3, #3
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	89a0      	ldrh	r0, [r4, #12]
 80079ba:	4305      	orrs	r5, r0
 80079bc:	81a5      	strh	r5, [r4, #12]
 80079be:	e7cd      	b.n	800795c <__smakebuf_r+0x18>
 80079c0:	08007755 	.word	0x08007755

080079c4 <_free_r>:
 80079c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079c6:	2900      	cmp	r1, #0
 80079c8:	d048      	beq.n	8007a5c <_free_r+0x98>
 80079ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ce:	9001      	str	r0, [sp, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f1a1 0404 	sub.w	r4, r1, #4
 80079d6:	bfb8      	it	lt
 80079d8:	18e4      	addlt	r4, r4, r3
 80079da:	f000 fdf3 	bl	80085c4 <__malloc_lock>
 80079de:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <_free_r+0x9c>)
 80079e0:	9801      	ldr	r0, [sp, #4]
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	4615      	mov	r5, r2
 80079e6:	b933      	cbnz	r3, 80079f6 <_free_r+0x32>
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	6014      	str	r4, [r2, #0]
 80079ec:	b003      	add	sp, #12
 80079ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079f2:	f000 bded 	b.w	80085d0 <__malloc_unlock>
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	d90b      	bls.n	8007a12 <_free_r+0x4e>
 80079fa:	6821      	ldr	r1, [r4, #0]
 80079fc:	1862      	adds	r2, r4, r1
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bf04      	itt	eq
 8007a02:	681a      	ldreq	r2, [r3, #0]
 8007a04:	685b      	ldreq	r3, [r3, #4]
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	bf04      	itt	eq
 8007a0a:	1852      	addeq	r2, r2, r1
 8007a0c:	6022      	streq	r2, [r4, #0]
 8007a0e:	602c      	str	r4, [r5, #0]
 8007a10:	e7ec      	b.n	80079ec <_free_r+0x28>
 8007a12:	461a      	mov	r2, r3
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	b10b      	cbz	r3, 8007a1c <_free_r+0x58>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d9fa      	bls.n	8007a12 <_free_r+0x4e>
 8007a1c:	6811      	ldr	r1, [r2, #0]
 8007a1e:	1855      	adds	r5, r2, r1
 8007a20:	42a5      	cmp	r5, r4
 8007a22:	d10b      	bne.n	8007a3c <_free_r+0x78>
 8007a24:	6824      	ldr	r4, [r4, #0]
 8007a26:	4421      	add	r1, r4
 8007a28:	1854      	adds	r4, r2, r1
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	6011      	str	r1, [r2, #0]
 8007a2e:	d1dd      	bne.n	80079ec <_free_r+0x28>
 8007a30:	681c      	ldr	r4, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	6053      	str	r3, [r2, #4]
 8007a36:	4421      	add	r1, r4
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	e7d7      	b.n	80079ec <_free_r+0x28>
 8007a3c:	d902      	bls.n	8007a44 <_free_r+0x80>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	e7d3      	b.n	80079ec <_free_r+0x28>
 8007a44:	6825      	ldr	r5, [r4, #0]
 8007a46:	1961      	adds	r1, r4, r5
 8007a48:	428b      	cmp	r3, r1
 8007a4a:	bf04      	itt	eq
 8007a4c:	6819      	ldreq	r1, [r3, #0]
 8007a4e:	685b      	ldreq	r3, [r3, #4]
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	bf04      	itt	eq
 8007a54:	1949      	addeq	r1, r1, r5
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	6054      	str	r4, [r2, #4]
 8007a5a:	e7c7      	b.n	80079ec <_free_r+0x28>
 8007a5c:	b003      	add	sp, #12
 8007a5e:	bd30      	pop	{r4, r5, pc}
 8007a60:	200040ec 	.word	0x200040ec

08007a64 <_malloc_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	1ccd      	adds	r5, r1, #3
 8007a68:	f025 0503 	bic.w	r5, r5, #3
 8007a6c:	3508      	adds	r5, #8
 8007a6e:	2d0c      	cmp	r5, #12
 8007a70:	bf38      	it	cc
 8007a72:	250c      	movcc	r5, #12
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	4606      	mov	r6, r0
 8007a78:	db01      	blt.n	8007a7e <_malloc_r+0x1a>
 8007a7a:	42a9      	cmp	r1, r5
 8007a7c:	d903      	bls.n	8007a86 <_malloc_r+0x22>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	2000      	movs	r0, #0
 8007a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a86:	f000 fd9d 	bl	80085c4 <__malloc_lock>
 8007a8a:	4921      	ldr	r1, [pc, #132]	; (8007b10 <_malloc_r+0xac>)
 8007a8c:	680a      	ldr	r2, [r1, #0]
 8007a8e:	4614      	mov	r4, r2
 8007a90:	b99c      	cbnz	r4, 8007aba <_malloc_r+0x56>
 8007a92:	4f20      	ldr	r7, [pc, #128]	; (8007b14 <_malloc_r+0xb0>)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b923      	cbnz	r3, 8007aa2 <_malloc_r+0x3e>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f000 fcce 	bl	800843c <_sbrk_r>
 8007aa0:	6038      	str	r0, [r7, #0]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 fcc9 	bl	800843c <_sbrk_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d123      	bne.n	8007af6 <_malloc_r+0x92>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 fd8c 	bl	80085d0 <__malloc_unlock>
 8007ab8:	e7e3      	b.n	8007a82 <_malloc_r+0x1e>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	1b5b      	subs	r3, r3, r5
 8007abe:	d417      	bmi.n	8007af0 <_malloc_r+0x8c>
 8007ac0:	2b0b      	cmp	r3, #11
 8007ac2:	d903      	bls.n	8007acc <_malloc_r+0x68>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	441c      	add	r4, r3
 8007ac8:	6025      	str	r5, [r4, #0]
 8007aca:	e004      	b.n	8007ad6 <_malloc_r+0x72>
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	42a2      	cmp	r2, r4
 8007ad0:	bf0c      	ite	eq
 8007ad2:	600b      	streq	r3, [r1, #0]
 8007ad4:	6053      	strne	r3, [r2, #4]
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f000 fd7a 	bl	80085d0 <__malloc_unlock>
 8007adc:	f104 000b 	add.w	r0, r4, #11
 8007ae0:	1d23      	adds	r3, r4, #4
 8007ae2:	f020 0007 	bic.w	r0, r0, #7
 8007ae6:	1ac2      	subs	r2, r0, r3
 8007ae8:	d0cc      	beq.n	8007a84 <_malloc_r+0x20>
 8007aea:	1a1b      	subs	r3, r3, r0
 8007aec:	50a3      	str	r3, [r4, r2]
 8007aee:	e7c9      	b.n	8007a84 <_malloc_r+0x20>
 8007af0:	4622      	mov	r2, r4
 8007af2:	6864      	ldr	r4, [r4, #4]
 8007af4:	e7cc      	b.n	8007a90 <_malloc_r+0x2c>
 8007af6:	1cc4      	adds	r4, r0, #3
 8007af8:	f024 0403 	bic.w	r4, r4, #3
 8007afc:	42a0      	cmp	r0, r4
 8007afe:	d0e3      	beq.n	8007ac8 <_malloc_r+0x64>
 8007b00:	1a21      	subs	r1, r4, r0
 8007b02:	4630      	mov	r0, r6
 8007b04:	f000 fc9a 	bl	800843c <_sbrk_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d1dd      	bne.n	8007ac8 <_malloc_r+0x64>
 8007b0c:	e7cf      	b.n	8007aae <_malloc_r+0x4a>
 8007b0e:	bf00      	nop
 8007b10:	200040ec 	.word	0x200040ec
 8007b14:	200040f0 	.word	0x200040f0

08007b18 <__ssputs_r>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	688e      	ldr	r6, [r1, #8]
 8007b1e:	429e      	cmp	r6, r3
 8007b20:	4682      	mov	sl, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	4690      	mov	r8, r2
 8007b26:	461f      	mov	r7, r3
 8007b28:	d838      	bhi.n	8007b9c <__ssputs_r+0x84>
 8007b2a:	898a      	ldrh	r2, [r1, #12]
 8007b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b30:	d032      	beq.n	8007b98 <__ssputs_r+0x80>
 8007b32:	6825      	ldr	r5, [r4, #0]
 8007b34:	6909      	ldr	r1, [r1, #16]
 8007b36:	eba5 0901 	sub.w	r9, r5, r1
 8007b3a:	6965      	ldr	r5, [r4, #20]
 8007b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b44:	3301      	adds	r3, #1
 8007b46:	444b      	add	r3, r9
 8007b48:	106d      	asrs	r5, r5, #1
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	bf38      	it	cc
 8007b4e:	461d      	movcc	r5, r3
 8007b50:	0553      	lsls	r3, r2, #21
 8007b52:	d531      	bpl.n	8007bb8 <__ssputs_r+0xa0>
 8007b54:	4629      	mov	r1, r5
 8007b56:	f7ff ff85 	bl	8007a64 <_malloc_r>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	b950      	cbnz	r0, 8007b74 <__ssputs_r+0x5c>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	f8ca 3000 	str.w	r3, [sl]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	464a      	mov	r2, r9
 8007b78:	f7ff fb54 	bl	8007224 <memcpy>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	6126      	str	r6, [r4, #16]
 8007b8a:	6165      	str	r5, [r4, #20]
 8007b8c:	444e      	add	r6, r9
 8007b8e:	eba5 0509 	sub.w	r5, r5, r9
 8007b92:	6026      	str	r6, [r4, #0]
 8007b94:	60a5      	str	r5, [r4, #8]
 8007b96:	463e      	mov	r6, r7
 8007b98:	42be      	cmp	r6, r7
 8007b9a:	d900      	bls.n	8007b9e <__ssputs_r+0x86>
 8007b9c:	463e      	mov	r6, r7
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	f000 fcf4 	bl	8008590 <memmove>
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	1b9b      	subs	r3, r3, r6
 8007bae:	4432      	add	r2, r6
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	6022      	str	r2, [r4, #0]
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7db      	b.n	8007b70 <__ssputs_r+0x58>
 8007bb8:	462a      	mov	r2, r5
 8007bba:	f000 fd0f 	bl	80085dc <_realloc_r>
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1e1      	bne.n	8007b88 <__ssputs_r+0x70>
 8007bc4:	6921      	ldr	r1, [r4, #16]
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	f7ff fefc 	bl	80079c4 <_free_r>
 8007bcc:	e7c7      	b.n	8007b5e <__ssputs_r+0x46>
	...

08007bd0 <_svfiprintf_r>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	4698      	mov	r8, r3
 8007bd6:	898b      	ldrh	r3, [r1, #12]
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	b09d      	sub	sp, #116	; 0x74
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	d50e      	bpl.n	8007c02 <_svfiprintf_r+0x32>
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	b963      	cbnz	r3, 8007c02 <_svfiprintf_r+0x32>
 8007be8:	2140      	movs	r1, #64	; 0x40
 8007bea:	f7ff ff3b 	bl	8007a64 <_malloc_r>
 8007bee:	6028      	str	r0, [r5, #0]
 8007bf0:	6128      	str	r0, [r5, #16]
 8007bf2:	b920      	cbnz	r0, 8007bfe <_svfiprintf_r+0x2e>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e0d1      	b.n	8007da2 <_svfiprintf_r+0x1d2>
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	616b      	str	r3, [r5, #20]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9309      	str	r3, [sp, #36]	; 0x24
 8007c06:	2320      	movs	r3, #32
 8007c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c10:	2330      	movs	r3, #48	; 0x30
 8007c12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dbc <_svfiprintf_r+0x1ec>
 8007c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c1a:	f04f 0901 	mov.w	r9, #1
 8007c1e:	4623      	mov	r3, r4
 8007c20:	469a      	mov	sl, r3
 8007c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c26:	b10a      	cbz	r2, 8007c2c <_svfiprintf_r+0x5c>
 8007c28:	2a25      	cmp	r2, #37	; 0x25
 8007c2a:	d1f9      	bne.n	8007c20 <_svfiprintf_r+0x50>
 8007c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c30:	d00b      	beq.n	8007c4a <_svfiprintf_r+0x7a>
 8007c32:	465b      	mov	r3, fp
 8007c34:	4622      	mov	r2, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff ff6d 	bl	8007b18 <__ssputs_r>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f000 80aa 	beq.w	8007d98 <_svfiprintf_r+0x1c8>
 8007c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c46:	445a      	add	r2, fp
 8007c48:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80a2 	beq.w	8007d98 <_svfiprintf_r+0x1c8>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5e:	f10a 0a01 	add.w	sl, sl, #1
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	9307      	str	r3, [sp, #28]
 8007c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c6c:	4654      	mov	r4, sl
 8007c6e:	2205      	movs	r2, #5
 8007c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c74:	4851      	ldr	r0, [pc, #324]	; (8007dbc <_svfiprintf_r+0x1ec>)
 8007c76:	f7f8 fab3 	bl	80001e0 <memchr>
 8007c7a:	9a04      	ldr	r2, [sp, #16]
 8007c7c:	b9d8      	cbnz	r0, 8007cb6 <_svfiprintf_r+0xe6>
 8007c7e:	06d0      	lsls	r0, r2, #27
 8007c80:	bf44      	itt	mi
 8007c82:	2320      	movmi	r3, #32
 8007c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c88:	0711      	lsls	r1, r2, #28
 8007c8a:	bf44      	itt	mi
 8007c8c:	232b      	movmi	r3, #43	; 0x2b
 8007c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c92:	f89a 3000 	ldrb.w	r3, [sl]
 8007c96:	2b2a      	cmp	r3, #42	; 0x2a
 8007c98:	d015      	beq.n	8007cc6 <_svfiprintf_r+0xf6>
 8007c9a:	9a07      	ldr	r2, [sp, #28]
 8007c9c:	4654      	mov	r4, sl
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f04f 0c0a 	mov.w	ip, #10
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007caa:	3b30      	subs	r3, #48	; 0x30
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d94e      	bls.n	8007d4e <_svfiprintf_r+0x17e>
 8007cb0:	b1b0      	cbz	r0, 8007ce0 <_svfiprintf_r+0x110>
 8007cb2:	9207      	str	r2, [sp, #28]
 8007cb4:	e014      	b.n	8007ce0 <_svfiprintf_r+0x110>
 8007cb6:	eba0 0308 	sub.w	r3, r0, r8
 8007cba:	fa09 f303 	lsl.w	r3, r9, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	46a2      	mov	sl, r4
 8007cc4:	e7d2      	b.n	8007c6c <_svfiprintf_r+0x9c>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	1d19      	adds	r1, r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	9103      	str	r1, [sp, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bfbb      	ittet	lt
 8007cd2:	425b      	neglt	r3, r3
 8007cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd8:	9307      	strge	r3, [sp, #28]
 8007cda:	9307      	strlt	r3, [sp, #28]
 8007cdc:	bfb8      	it	lt
 8007cde:	9204      	strlt	r2, [sp, #16]
 8007ce0:	7823      	ldrb	r3, [r4, #0]
 8007ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce4:	d10c      	bne.n	8007d00 <_svfiprintf_r+0x130>
 8007ce6:	7863      	ldrb	r3, [r4, #1]
 8007ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cea:	d135      	bne.n	8007d58 <_svfiprintf_r+0x188>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	1d1a      	adds	r2, r3, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	9203      	str	r2, [sp, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfb8      	it	lt
 8007cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cfc:	3402      	adds	r4, #2
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dcc <_svfiprintf_r+0x1fc>
 8007d04:	7821      	ldrb	r1, [r4, #0]
 8007d06:	2203      	movs	r2, #3
 8007d08:	4650      	mov	r0, sl
 8007d0a:	f7f8 fa69 	bl	80001e0 <memchr>
 8007d0e:	b140      	cbz	r0, 8007d22 <_svfiprintf_r+0x152>
 8007d10:	2340      	movs	r3, #64	; 0x40
 8007d12:	eba0 000a 	sub.w	r0, r0, sl
 8007d16:	fa03 f000 	lsl.w	r0, r3, r0
 8007d1a:	9b04      	ldr	r3, [sp, #16]
 8007d1c:	4303      	orrs	r3, r0
 8007d1e:	3401      	adds	r4, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d26:	4826      	ldr	r0, [pc, #152]	; (8007dc0 <_svfiprintf_r+0x1f0>)
 8007d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d2c:	2206      	movs	r2, #6
 8007d2e:	f7f8 fa57 	bl	80001e0 <memchr>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d038      	beq.n	8007da8 <_svfiprintf_r+0x1d8>
 8007d36:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <_svfiprintf_r+0x1f4>)
 8007d38:	bb1b      	cbnz	r3, 8007d82 <_svfiprintf_r+0x1b2>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	3307      	adds	r3, #7
 8007d3e:	f023 0307 	bic.w	r3, r3, #7
 8007d42:	3308      	adds	r3, #8
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d48:	4433      	add	r3, r6
 8007d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4c:	e767      	b.n	8007c1e <_svfiprintf_r+0x4e>
 8007d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d52:	460c      	mov	r4, r1
 8007d54:	2001      	movs	r0, #1
 8007d56:	e7a5      	b.n	8007ca4 <_svfiprintf_r+0xd4>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	3401      	adds	r4, #1
 8007d5c:	9305      	str	r3, [sp, #20]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 0c0a 	mov.w	ip, #10
 8007d64:	4620      	mov	r0, r4
 8007d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6a:	3a30      	subs	r2, #48	; 0x30
 8007d6c:	2a09      	cmp	r2, #9
 8007d6e:	d903      	bls.n	8007d78 <_svfiprintf_r+0x1a8>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0c5      	beq.n	8007d00 <_svfiprintf_r+0x130>
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	e7c3      	b.n	8007d00 <_svfiprintf_r+0x130>
 8007d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e7f0      	b.n	8007d64 <_svfiprintf_r+0x194>
 8007d82:	ab03      	add	r3, sp, #12
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	462a      	mov	r2, r5
 8007d88:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <_svfiprintf_r+0x1f8>)
 8007d8a:	a904      	add	r1, sp, #16
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f3af 8000 	nop.w
 8007d92:	1c42      	adds	r2, r0, #1
 8007d94:	4606      	mov	r6, r0
 8007d96:	d1d6      	bne.n	8007d46 <_svfiprintf_r+0x176>
 8007d98:	89ab      	ldrh	r3, [r5, #12]
 8007d9a:	065b      	lsls	r3, r3, #25
 8007d9c:	f53f af2c 	bmi.w	8007bf8 <_svfiprintf_r+0x28>
 8007da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007da2:	b01d      	add	sp, #116	; 0x74
 8007da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da8:	ab03      	add	r3, sp, #12
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	462a      	mov	r2, r5
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <_svfiprintf_r+0x1f8>)
 8007db0:	a904      	add	r1, sp, #16
 8007db2:	4638      	mov	r0, r7
 8007db4:	f000 f9d4 	bl	8008160 <_printf_i>
 8007db8:	e7eb      	b.n	8007d92 <_svfiprintf_r+0x1c2>
 8007dba:	bf00      	nop
 8007dbc:	080089b4 	.word	0x080089b4
 8007dc0:	080089be 	.word	0x080089be
 8007dc4:	00000000 	.word	0x00000000
 8007dc8:	08007b19 	.word	0x08007b19
 8007dcc:	080089ba 	.word	0x080089ba

08007dd0 <__sfputc_r>:
 8007dd0:	6893      	ldr	r3, [r2, #8]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	b410      	push	{r4}
 8007dd8:	6093      	str	r3, [r2, #8]
 8007dda:	da08      	bge.n	8007dee <__sfputc_r+0x1e>
 8007ddc:	6994      	ldr	r4, [r2, #24]
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	db01      	blt.n	8007de6 <__sfputc_r+0x16>
 8007de2:	290a      	cmp	r1, #10
 8007de4:	d103      	bne.n	8007dee <__sfputc_r+0x1e>
 8007de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dea:	f7ff bb0d 	b.w	8007408 <__swbuf_r>
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	1c58      	adds	r0, r3, #1
 8007df2:	6010      	str	r0, [r2, #0]
 8007df4:	7019      	strb	r1, [r3, #0]
 8007df6:	4608      	mov	r0, r1
 8007df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <__sfputs_r>:
 8007dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e00:	4606      	mov	r6, r0
 8007e02:	460f      	mov	r7, r1
 8007e04:	4614      	mov	r4, r2
 8007e06:	18d5      	adds	r5, r2, r3
 8007e08:	42ac      	cmp	r4, r5
 8007e0a:	d101      	bne.n	8007e10 <__sfputs_r+0x12>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e007      	b.n	8007e20 <__sfputs_r+0x22>
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	463a      	mov	r2, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff ffda 	bl	8007dd0 <__sfputc_r>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d1f3      	bne.n	8007e08 <__sfputs_r+0xa>
 8007e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e24 <_vfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4698      	mov	r8, r3
 8007e30:	4606      	mov	r6, r0
 8007e32:	b118      	cbz	r0, 8007e3c <_vfiprintf_r+0x18>
 8007e34:	6983      	ldr	r3, [r0, #24]
 8007e36:	b90b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x18>
 8007e38:	f7ff fcc0 	bl	80077bc <__sinit>
 8007e3c:	4b89      	ldr	r3, [pc, #548]	; (8008064 <_vfiprintf_r+0x240>)
 8007e3e:	429d      	cmp	r5, r3
 8007e40:	d11b      	bne.n	8007e7a <_vfiprintf_r+0x56>
 8007e42:	6875      	ldr	r5, [r6, #4]
 8007e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e46:	07d9      	lsls	r1, r3, #31
 8007e48:	d405      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	059a      	lsls	r2, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_vfiprintf_r+0x32>
 8007e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e52:	f7ff fd51 	bl	80078f8 <__retarget_lock_acquire_recursive>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	071b      	lsls	r3, r3, #28
 8007e5a:	d501      	bpl.n	8007e60 <_vfiprintf_r+0x3c>
 8007e5c:	692b      	ldr	r3, [r5, #16]
 8007e5e:	b9eb      	cbnz	r3, 8007e9c <_vfiprintf_r+0x78>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff fb22 	bl	80074ac <__swsetup_r>
 8007e68:	b1c0      	cbz	r0, 8007e9c <_vfiprintf_r+0x78>
 8007e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6c:	07dc      	lsls	r4, r3, #31
 8007e6e:	d50e      	bpl.n	8007e8e <_vfiprintf_r+0x6a>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	b01d      	add	sp, #116	; 0x74
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	4b7b      	ldr	r3, [pc, #492]	; (8008068 <_vfiprintf_r+0x244>)
 8007e7c:	429d      	cmp	r5, r3
 8007e7e:	d101      	bne.n	8007e84 <_vfiprintf_r+0x60>
 8007e80:	68b5      	ldr	r5, [r6, #8]
 8007e82:	e7df      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e84:	4b79      	ldr	r3, [pc, #484]	; (800806c <_vfiprintf_r+0x248>)
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf08      	it	eq
 8007e8a:	68f5      	ldreq	r5, [r6, #12]
 8007e8c:	e7da      	b.n	8007e44 <_vfiprintf_r+0x20>
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4ed      	bmi.n	8007e70 <_vfiprintf_r+0x4c>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f7ff fd30 	bl	80078fa <__retarget_lock_release_recursive>
 8007e9a:	e7e9      	b.n	8007e70 <_vfiprintf_r+0x4c>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eaa:	2330      	movs	r3, #48	; 0x30
 8007eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008070 <_vfiprintf_r+0x24c>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb4:	f04f 0901 	mov.w	r9, #1
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0xa2>
 8007ec2:	2a25      	cmp	r2, #37	; 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x96>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xc0>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ff93 	bl	8007dfe <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80aa 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a2 	beq.w	8008032 <_vfiprintf_r+0x20e>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4858      	ldr	r0, [pc, #352]	; (8008070 <_vfiprintf_r+0x24c>)
 8007f10:	f7f8 f966 	bl	80001e0 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x12c>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	; 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	; 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x13c>
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4654      	mov	r4, sl
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	; 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94e      	bls.n	8007fe8 <_vfiprintf_r+0x1c4>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x156>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x156>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	46a2      	mov	sl, r4
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xe2>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7e:	d10c      	bne.n	8007f9a <_vfiprintf_r+0x176>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d135      	bne.n	8007ff2 <_vfiprintf_r+0x1ce>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfb8      	it	lt
 8007f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f96:	3402      	adds	r4, #2
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008080 <_vfiprintf_r+0x25c>
 8007f9e:	7821      	ldrb	r1, [r4, #0]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f7f8 f91c 	bl	80001e0 <memchr>
 8007fa8:	b140      	cbz	r0, 8007fbc <_vfiprintf_r+0x198>
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	eba0 000a 	sub.w	r0, r0, sl
 8007fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	4303      	orrs	r3, r0
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc0:	482c      	ldr	r0, [pc, #176]	; (8008074 <_vfiprintf_r+0x250>)
 8007fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	f7f8 f90a 	bl	80001e0 <memchr>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d03f      	beq.n	8008050 <_vfiprintf_r+0x22c>
 8007fd0:	4b29      	ldr	r3, [pc, #164]	; (8008078 <_vfiprintf_r+0x254>)
 8007fd2:	bb1b      	cbnz	r3, 800801c <_vfiprintf_r+0x1f8>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	3308      	adds	r3, #8
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	443b      	add	r3, r7
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	e767      	b.n	8007eb8 <_vfiprintf_r+0x94>
 8007fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fec:	460c      	mov	r4, r1
 8007fee:	2001      	movs	r0, #1
 8007ff0:	e7a5      	b.n	8007f3e <_vfiprintf_r+0x11a>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	3401      	adds	r4, #1
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f04f 0c0a 	mov.w	ip, #10
 8007ffe:	4620      	mov	r0, r4
 8008000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008004:	3a30      	subs	r2, #48	; 0x30
 8008006:	2a09      	cmp	r2, #9
 8008008:	d903      	bls.n	8008012 <_vfiprintf_r+0x1ee>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0c5      	beq.n	8007f9a <_vfiprintf_r+0x176>
 800800e:	9105      	str	r1, [sp, #20]
 8008010:	e7c3      	b.n	8007f9a <_vfiprintf_r+0x176>
 8008012:	fb0c 2101 	mla	r1, ip, r1, r2
 8008016:	4604      	mov	r4, r0
 8008018:	2301      	movs	r3, #1
 800801a:	e7f0      	b.n	8007ffe <_vfiprintf_r+0x1da>
 800801c:	ab03      	add	r3, sp, #12
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	462a      	mov	r2, r5
 8008022:	4b16      	ldr	r3, [pc, #88]	; (800807c <_vfiprintf_r+0x258>)
 8008024:	a904      	add	r1, sp, #16
 8008026:	4630      	mov	r0, r6
 8008028:	f3af 8000 	nop.w
 800802c:	4607      	mov	r7, r0
 800802e:	1c78      	adds	r0, r7, #1
 8008030:	d1d6      	bne.n	8007fe0 <_vfiprintf_r+0x1bc>
 8008032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008034:	07d9      	lsls	r1, r3, #31
 8008036:	d405      	bmi.n	8008044 <_vfiprintf_r+0x220>
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	059a      	lsls	r2, r3, #22
 800803c:	d402      	bmi.n	8008044 <_vfiprintf_r+0x220>
 800803e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008040:	f7ff fc5b 	bl	80078fa <__retarget_lock_release_recursive>
 8008044:	89ab      	ldrh	r3, [r5, #12]
 8008046:	065b      	lsls	r3, r3, #25
 8008048:	f53f af12 	bmi.w	8007e70 <_vfiprintf_r+0x4c>
 800804c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804e:	e711      	b.n	8007e74 <_vfiprintf_r+0x50>
 8008050:	ab03      	add	r3, sp, #12
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	462a      	mov	r2, r5
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <_vfiprintf_r+0x258>)
 8008058:	a904      	add	r1, sp, #16
 800805a:	4630      	mov	r0, r6
 800805c:	f000 f880 	bl	8008160 <_printf_i>
 8008060:	e7e4      	b.n	800802c <_vfiprintf_r+0x208>
 8008062:	bf00      	nop
 8008064:	08008974 	.word	0x08008974
 8008068:	08008994 	.word	0x08008994
 800806c:	08008954 	.word	0x08008954
 8008070:	080089b4 	.word	0x080089b4
 8008074:	080089be 	.word	0x080089be
 8008078:	00000000 	.word	0x00000000
 800807c:	08007dff 	.word	0x08007dff
 8008080:	080089ba 	.word	0x080089ba

08008084 <_printf_common>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	4616      	mov	r6, r2
 800808a:	4699      	mov	r9, r3
 800808c:	688a      	ldr	r2, [r1, #8]
 800808e:	690b      	ldr	r3, [r1, #16]
 8008090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008094:	4293      	cmp	r3, r2
 8008096:	bfb8      	it	lt
 8008098:	4613      	movlt	r3, r2
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a0:	4607      	mov	r7, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	b10a      	cbz	r2, 80080aa <_printf_common+0x26>
 80080a6:	3301      	adds	r3, #1
 80080a8:	6033      	str	r3, [r6, #0]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	0699      	lsls	r1, r3, #26
 80080ae:	bf42      	ittt	mi
 80080b0:	6833      	ldrmi	r3, [r6, #0]
 80080b2:	3302      	addmi	r3, #2
 80080b4:	6033      	strmi	r3, [r6, #0]
 80080b6:	6825      	ldr	r5, [r4, #0]
 80080b8:	f015 0506 	ands.w	r5, r5, #6
 80080bc:	d106      	bne.n	80080cc <_printf_common+0x48>
 80080be:	f104 0a19 	add.w	sl, r4, #25
 80080c2:	68e3      	ldr	r3, [r4, #12]
 80080c4:	6832      	ldr	r2, [r6, #0]
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	dc26      	bgt.n	800811a <_printf_common+0x96>
 80080cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d0:	1e13      	subs	r3, r2, #0
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	bf18      	it	ne
 80080d6:	2301      	movne	r3, #1
 80080d8:	0692      	lsls	r2, r2, #26
 80080da:	d42b      	bmi.n	8008134 <_printf_common+0xb0>
 80080dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e0:	4649      	mov	r1, r9
 80080e2:	4638      	mov	r0, r7
 80080e4:	47c0      	blx	r8
 80080e6:	3001      	adds	r0, #1
 80080e8:	d01e      	beq.n	8008128 <_printf_common+0xa4>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	68e5      	ldr	r5, [r4, #12]
 80080ee:	6832      	ldr	r2, [r6, #0]
 80080f0:	f003 0306 	and.w	r3, r3, #6
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	bf08      	it	eq
 80080f8:	1aad      	subeq	r5, r5, r2
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	6922      	ldr	r2, [r4, #16]
 80080fe:	bf0c      	ite	eq
 8008100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008104:	2500      	movne	r5, #0
 8008106:	4293      	cmp	r3, r2
 8008108:	bfc4      	itt	gt
 800810a:	1a9b      	subgt	r3, r3, r2
 800810c:	18ed      	addgt	r5, r5, r3
 800810e:	2600      	movs	r6, #0
 8008110:	341a      	adds	r4, #26
 8008112:	42b5      	cmp	r5, r6
 8008114:	d11a      	bne.n	800814c <_printf_common+0xc8>
 8008116:	2000      	movs	r0, #0
 8008118:	e008      	b.n	800812c <_printf_common+0xa8>
 800811a:	2301      	movs	r3, #1
 800811c:	4652      	mov	r2, sl
 800811e:	4649      	mov	r1, r9
 8008120:	4638      	mov	r0, r7
 8008122:	47c0      	blx	r8
 8008124:	3001      	adds	r0, #1
 8008126:	d103      	bne.n	8008130 <_printf_common+0xac>
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008130:	3501      	adds	r5, #1
 8008132:	e7c6      	b.n	80080c2 <_printf_common+0x3e>
 8008134:	18e1      	adds	r1, r4, r3
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	2030      	movs	r0, #48	; 0x30
 800813a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800813e:	4422      	add	r2, r4
 8008140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008148:	3302      	adds	r3, #2
 800814a:	e7c7      	b.n	80080dc <_printf_common+0x58>
 800814c:	2301      	movs	r3, #1
 800814e:	4622      	mov	r2, r4
 8008150:	4649      	mov	r1, r9
 8008152:	4638      	mov	r0, r7
 8008154:	47c0      	blx	r8
 8008156:	3001      	adds	r0, #1
 8008158:	d0e6      	beq.n	8008128 <_printf_common+0xa4>
 800815a:	3601      	adds	r6, #1
 800815c:	e7d9      	b.n	8008112 <_printf_common+0x8e>
	...

08008160 <_printf_i>:
 8008160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	4691      	mov	r9, r2
 8008168:	7e27      	ldrb	r7, [r4, #24]
 800816a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800816c:	2f78      	cmp	r7, #120	; 0x78
 800816e:	4680      	mov	r8, r0
 8008170:	469a      	mov	sl, r3
 8008172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008176:	d807      	bhi.n	8008188 <_printf_i+0x28>
 8008178:	2f62      	cmp	r7, #98	; 0x62
 800817a:	d80a      	bhi.n	8008192 <_printf_i+0x32>
 800817c:	2f00      	cmp	r7, #0
 800817e:	f000 80d8 	beq.w	8008332 <_printf_i+0x1d2>
 8008182:	2f58      	cmp	r7, #88	; 0x58
 8008184:	f000 80a3 	beq.w	80082ce <_printf_i+0x16e>
 8008188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800818c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008190:	e03a      	b.n	8008208 <_printf_i+0xa8>
 8008192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008196:	2b15      	cmp	r3, #21
 8008198:	d8f6      	bhi.n	8008188 <_printf_i+0x28>
 800819a:	a001      	add	r0, pc, #4	; (adr r0, 80081a0 <_printf_i+0x40>)
 800819c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081a0:	080081f9 	.word	0x080081f9
 80081a4:	0800820d 	.word	0x0800820d
 80081a8:	08008189 	.word	0x08008189
 80081ac:	08008189 	.word	0x08008189
 80081b0:	08008189 	.word	0x08008189
 80081b4:	08008189 	.word	0x08008189
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	08008189 	.word	0x08008189
 80081c0:	08008189 	.word	0x08008189
 80081c4:	08008189 	.word	0x08008189
 80081c8:	08008189 	.word	0x08008189
 80081cc:	08008319 	.word	0x08008319
 80081d0:	0800823d 	.word	0x0800823d
 80081d4:	080082fb 	.word	0x080082fb
 80081d8:	08008189 	.word	0x08008189
 80081dc:	08008189 	.word	0x08008189
 80081e0:	0800833b 	.word	0x0800833b
 80081e4:	08008189 	.word	0x08008189
 80081e8:	0800823d 	.word	0x0800823d
 80081ec:	08008189 	.word	0x08008189
 80081f0:	08008189 	.word	0x08008189
 80081f4:	08008303 	.word	0x08008303
 80081f8:	680b      	ldr	r3, [r1, #0]
 80081fa:	1d1a      	adds	r2, r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008208:	2301      	movs	r3, #1
 800820a:	e0a3      	b.n	8008354 <_printf_i+0x1f4>
 800820c:	6825      	ldr	r5, [r4, #0]
 800820e:	6808      	ldr	r0, [r1, #0]
 8008210:	062e      	lsls	r6, r5, #24
 8008212:	f100 0304 	add.w	r3, r0, #4
 8008216:	d50a      	bpl.n	800822e <_printf_i+0xce>
 8008218:	6805      	ldr	r5, [r0, #0]
 800821a:	600b      	str	r3, [r1, #0]
 800821c:	2d00      	cmp	r5, #0
 800821e:	da03      	bge.n	8008228 <_printf_i+0xc8>
 8008220:	232d      	movs	r3, #45	; 0x2d
 8008222:	426d      	negs	r5, r5
 8008224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008228:	485e      	ldr	r0, [pc, #376]	; (80083a4 <_printf_i+0x244>)
 800822a:	230a      	movs	r3, #10
 800822c:	e019      	b.n	8008262 <_printf_i+0x102>
 800822e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008232:	6805      	ldr	r5, [r0, #0]
 8008234:	600b      	str	r3, [r1, #0]
 8008236:	bf18      	it	ne
 8008238:	b22d      	sxthne	r5, r5
 800823a:	e7ef      	b.n	800821c <_printf_i+0xbc>
 800823c:	680b      	ldr	r3, [r1, #0]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	1d18      	adds	r0, r3, #4
 8008242:	6008      	str	r0, [r1, #0]
 8008244:	0628      	lsls	r0, r5, #24
 8008246:	d501      	bpl.n	800824c <_printf_i+0xec>
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0xf2>
 800824c:	0669      	lsls	r1, r5, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0xe8>
 8008250:	881d      	ldrh	r5, [r3, #0]
 8008252:	4854      	ldr	r0, [pc, #336]	; (80083a4 <_printf_i+0x244>)
 8008254:	2f6f      	cmp	r7, #111	; 0x6f
 8008256:	bf0c      	ite	eq
 8008258:	2308      	moveq	r3, #8
 800825a:	230a      	movne	r3, #10
 800825c:	2100      	movs	r1, #0
 800825e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008262:	6866      	ldr	r6, [r4, #4]
 8008264:	60a6      	str	r6, [r4, #8]
 8008266:	2e00      	cmp	r6, #0
 8008268:	bfa2      	ittt	ge
 800826a:	6821      	ldrge	r1, [r4, #0]
 800826c:	f021 0104 	bicge.w	r1, r1, #4
 8008270:	6021      	strge	r1, [r4, #0]
 8008272:	b90d      	cbnz	r5, 8008278 <_printf_i+0x118>
 8008274:	2e00      	cmp	r6, #0
 8008276:	d04d      	beq.n	8008314 <_printf_i+0x1b4>
 8008278:	4616      	mov	r6, r2
 800827a:	fbb5 f1f3 	udiv	r1, r5, r3
 800827e:	fb03 5711 	mls	r7, r3, r1, r5
 8008282:	5dc7      	ldrb	r7, [r0, r7]
 8008284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008288:	462f      	mov	r7, r5
 800828a:	42bb      	cmp	r3, r7
 800828c:	460d      	mov	r5, r1
 800828e:	d9f4      	bls.n	800827a <_printf_i+0x11a>
 8008290:	2b08      	cmp	r3, #8
 8008292:	d10b      	bne.n	80082ac <_printf_i+0x14c>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	07df      	lsls	r7, r3, #31
 8008298:	d508      	bpl.n	80082ac <_printf_i+0x14c>
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	6861      	ldr	r1, [r4, #4]
 800829e:	4299      	cmp	r1, r3
 80082a0:	bfde      	ittt	le
 80082a2:	2330      	movle	r3, #48	; 0x30
 80082a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082ac:	1b92      	subs	r2, r2, r6
 80082ae:	6122      	str	r2, [r4, #16]
 80082b0:	f8cd a000 	str.w	sl, [sp]
 80082b4:	464b      	mov	r3, r9
 80082b6:	aa03      	add	r2, sp, #12
 80082b8:	4621      	mov	r1, r4
 80082ba:	4640      	mov	r0, r8
 80082bc:	f7ff fee2 	bl	8008084 <_printf_common>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d14c      	bne.n	800835e <_printf_i+0x1fe>
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	b004      	add	sp, #16
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	4835      	ldr	r0, [pc, #212]	; (80083a4 <_printf_i+0x244>)
 80082d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	680e      	ldr	r6, [r1, #0]
 80082d8:	061f      	lsls	r7, r3, #24
 80082da:	f856 5b04 	ldr.w	r5, [r6], #4
 80082de:	600e      	str	r6, [r1, #0]
 80082e0:	d514      	bpl.n	800830c <_printf_i+0x1ac>
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	bf44      	itt	mi
 80082e6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ea:	6023      	strmi	r3, [r4, #0]
 80082ec:	b91d      	cbnz	r5, 80082f6 <_printf_i+0x196>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f023 0320 	bic.w	r3, r3, #32
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	2310      	movs	r3, #16
 80082f8:	e7b0      	b.n	800825c <_printf_i+0xfc>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f043 0320 	orr.w	r3, r3, #32
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	2378      	movs	r3, #120	; 0x78
 8008304:	4828      	ldr	r0, [pc, #160]	; (80083a8 <_printf_i+0x248>)
 8008306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800830a:	e7e3      	b.n	80082d4 <_printf_i+0x174>
 800830c:	065e      	lsls	r6, r3, #25
 800830e:	bf48      	it	mi
 8008310:	b2ad      	uxthmi	r5, r5
 8008312:	e7e6      	b.n	80082e2 <_printf_i+0x182>
 8008314:	4616      	mov	r6, r2
 8008316:	e7bb      	b.n	8008290 <_printf_i+0x130>
 8008318:	680b      	ldr	r3, [r1, #0]
 800831a:	6826      	ldr	r6, [r4, #0]
 800831c:	6960      	ldr	r0, [r4, #20]
 800831e:	1d1d      	adds	r5, r3, #4
 8008320:	600d      	str	r5, [r1, #0]
 8008322:	0635      	lsls	r5, r6, #24
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	d501      	bpl.n	800832c <_printf_i+0x1cc>
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	e002      	b.n	8008332 <_printf_i+0x1d2>
 800832c:	0671      	lsls	r1, r6, #25
 800832e:	d5fb      	bpl.n	8008328 <_printf_i+0x1c8>
 8008330:	8018      	strh	r0, [r3, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	4616      	mov	r6, r2
 8008338:	e7ba      	b.n	80082b0 <_printf_i+0x150>
 800833a:	680b      	ldr	r3, [r1, #0]
 800833c:	1d1a      	adds	r2, r3, #4
 800833e:	600a      	str	r2, [r1, #0]
 8008340:	681e      	ldr	r6, [r3, #0]
 8008342:	6862      	ldr	r2, [r4, #4]
 8008344:	2100      	movs	r1, #0
 8008346:	4630      	mov	r0, r6
 8008348:	f7f7 ff4a 	bl	80001e0 <memchr>
 800834c:	b108      	cbz	r0, 8008352 <_printf_i+0x1f2>
 800834e:	1b80      	subs	r0, r0, r6
 8008350:	6060      	str	r0, [r4, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	2300      	movs	r3, #0
 8008358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800835c:	e7a8      	b.n	80082b0 <_printf_i+0x150>
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	4632      	mov	r2, r6
 8008362:	4649      	mov	r1, r9
 8008364:	4640      	mov	r0, r8
 8008366:	47d0      	blx	sl
 8008368:	3001      	adds	r0, #1
 800836a:	d0ab      	beq.n	80082c4 <_printf_i+0x164>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	079b      	lsls	r3, r3, #30
 8008370:	d413      	bmi.n	800839a <_printf_i+0x23a>
 8008372:	68e0      	ldr	r0, [r4, #12]
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	4298      	cmp	r0, r3
 8008378:	bfb8      	it	lt
 800837a:	4618      	movlt	r0, r3
 800837c:	e7a4      	b.n	80082c8 <_printf_i+0x168>
 800837e:	2301      	movs	r3, #1
 8008380:	4632      	mov	r2, r6
 8008382:	4649      	mov	r1, r9
 8008384:	4640      	mov	r0, r8
 8008386:	47d0      	blx	sl
 8008388:	3001      	adds	r0, #1
 800838a:	d09b      	beq.n	80082c4 <_printf_i+0x164>
 800838c:	3501      	adds	r5, #1
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	9903      	ldr	r1, [sp, #12]
 8008392:	1a5b      	subs	r3, r3, r1
 8008394:	42ab      	cmp	r3, r5
 8008396:	dcf2      	bgt.n	800837e <_printf_i+0x21e>
 8008398:	e7eb      	b.n	8008372 <_printf_i+0x212>
 800839a:	2500      	movs	r5, #0
 800839c:	f104 0619 	add.w	r6, r4, #25
 80083a0:	e7f5      	b.n	800838e <_printf_i+0x22e>
 80083a2:	bf00      	nop
 80083a4:	080089c5 	.word	0x080089c5
 80083a8:	080089d6 	.word	0x080089d6

080083ac <_putc_r>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	460d      	mov	r5, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	4606      	mov	r6, r0
 80083b4:	b118      	cbz	r0, 80083be <_putc_r+0x12>
 80083b6:	6983      	ldr	r3, [r0, #24]
 80083b8:	b90b      	cbnz	r3, 80083be <_putc_r+0x12>
 80083ba:	f7ff f9ff 	bl	80077bc <__sinit>
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <_putc_r+0x84>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d124      	bne.n	800840e <_putc_r+0x62>
 80083c4:	6874      	ldr	r4, [r6, #4]
 80083c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c8:	07d8      	lsls	r0, r3, #31
 80083ca:	d405      	bmi.n	80083d8 <_putc_r+0x2c>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	0599      	lsls	r1, r3, #22
 80083d0:	d402      	bmi.n	80083d8 <_putc_r+0x2c>
 80083d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d4:	f7ff fa90 	bl	80078f8 <__retarget_lock_acquire_recursive>
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	3b01      	subs	r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	da05      	bge.n	80083ee <_putc_r+0x42>
 80083e2:	69a2      	ldr	r2, [r4, #24]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	db1c      	blt.n	8008422 <_putc_r+0x76>
 80083e8:	b2eb      	uxtb	r3, r5
 80083ea:	2b0a      	cmp	r3, #10
 80083ec:	d019      	beq.n	8008422 <_putc_r+0x76>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	701d      	strb	r5, [r3, #0]
 80083f6:	b2ed      	uxtb	r5, r5
 80083f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d405      	bmi.n	800840a <_putc_r+0x5e>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d402      	bmi.n	800840a <_putc_r+0x5e>
 8008404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008406:	f7ff fa78 	bl	80078fa <__retarget_lock_release_recursive>
 800840a:	4628      	mov	r0, r5
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <_putc_r+0x88>)
 8008410:	429c      	cmp	r4, r3
 8008412:	d101      	bne.n	8008418 <_putc_r+0x6c>
 8008414:	68b4      	ldr	r4, [r6, #8]
 8008416:	e7d6      	b.n	80083c6 <_putc_r+0x1a>
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <_putc_r+0x8c>)
 800841a:	429c      	cmp	r4, r3
 800841c:	bf08      	it	eq
 800841e:	68f4      	ldreq	r4, [r6, #12]
 8008420:	e7d1      	b.n	80083c6 <_putc_r+0x1a>
 8008422:	4629      	mov	r1, r5
 8008424:	4622      	mov	r2, r4
 8008426:	4630      	mov	r0, r6
 8008428:	f7fe ffee 	bl	8007408 <__swbuf_r>
 800842c:	4605      	mov	r5, r0
 800842e:	e7e3      	b.n	80083f8 <_putc_r+0x4c>
 8008430:	08008974 	.word	0x08008974
 8008434:	08008994 	.word	0x08008994
 8008438:	08008954 	.word	0x08008954

0800843c <_sbrk_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_sbrk_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7f9 f880 	bl	800154c <_sbrk>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_sbrk_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_sbrk_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20006990 	.word	0x20006990

0800845c <__sread>:
 800845c:	b510      	push	{r4, lr}
 800845e:	460c      	mov	r4, r1
 8008460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008464:	f000 f8e0 	bl	8008628 <_read_r>
 8008468:	2800      	cmp	r0, #0
 800846a:	bfab      	itete	ge
 800846c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800846e:	89a3      	ldrhlt	r3, [r4, #12]
 8008470:	181b      	addge	r3, r3, r0
 8008472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008476:	bfac      	ite	ge
 8008478:	6563      	strge	r3, [r4, #84]	; 0x54
 800847a:	81a3      	strhlt	r3, [r4, #12]
 800847c:	bd10      	pop	{r4, pc}

0800847e <__swrite>:
 800847e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	461f      	mov	r7, r3
 8008484:	898b      	ldrh	r3, [r1, #12]
 8008486:	05db      	lsls	r3, r3, #23
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	4616      	mov	r6, r2
 800848e:	d505      	bpl.n	800849c <__swrite+0x1e>
 8008490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008494:	2302      	movs	r3, #2
 8008496:	2200      	movs	r2, #0
 8008498:	f000 f868 	bl	800856c <_lseek_r>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	4632      	mov	r2, r6
 80084aa:	463b      	mov	r3, r7
 80084ac:	4628      	mov	r0, r5
 80084ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b2:	f000 b817 	b.w	80084e4 <_write_r>

080084b6 <__sseek>:
 80084b6:	b510      	push	{r4, lr}
 80084b8:	460c      	mov	r4, r1
 80084ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084be:	f000 f855 	bl	800856c <_lseek_r>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	bf15      	itete	ne
 80084c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084d2:	81a3      	strheq	r3, [r4, #12]
 80084d4:	bf18      	it	ne
 80084d6:	81a3      	strhne	r3, [r4, #12]
 80084d8:	bd10      	pop	{r4, pc}

080084da <__sclose>:
 80084da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084de:	f000 b813 	b.w	8008508 <_close_r>
	...

080084e4 <_write_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	; (8008504 <_write_r+0x20>)
 80084e8:	4604      	mov	r4, r0
 80084ea:	4608      	mov	r0, r1
 80084ec:	4611      	mov	r1, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f7f8 fc4b 	bl	8000d8e <_write>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_write_r+0x1e>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_write_r+0x1e>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20006990 	.word	0x20006990

08008508 <_close_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	; (8008524 <_close_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f8 ffe5 	bl	80014e2 <_close>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_close_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_close_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20006990 	.word	0x20006990

08008528 <_fstat_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d07      	ldr	r5, [pc, #28]	; (8008548 <_fstat_r+0x20>)
 800852c:	2300      	movs	r3, #0
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	4611      	mov	r1, r2
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	f7f8 ffe0 	bl	80014fa <_fstat>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d102      	bne.n	8008544 <_fstat_r+0x1c>
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	b103      	cbz	r3, 8008544 <_fstat_r+0x1c>
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	20006990 	.word	0x20006990

0800854c <_isatty_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	; (8008568 <_isatty_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f8 ffdf 	bl	800151a <_isatty>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_isatty_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_isatty_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20006990 	.word	0x20006990

0800856c <_lseek_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d07      	ldr	r5, [pc, #28]	; (800858c <_lseek_r+0x20>)
 8008570:	4604      	mov	r4, r0
 8008572:	4608      	mov	r0, r1
 8008574:	4611      	mov	r1, r2
 8008576:	2200      	movs	r2, #0
 8008578:	602a      	str	r2, [r5, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	f7f8 ffd8 	bl	8001530 <_lseek>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_lseek_r+0x1e>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_lseek_r+0x1e>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	20006990 	.word	0x20006990

08008590 <memmove>:
 8008590:	4288      	cmp	r0, r1
 8008592:	b510      	push	{r4, lr}
 8008594:	eb01 0402 	add.w	r4, r1, r2
 8008598:	d902      	bls.n	80085a0 <memmove+0x10>
 800859a:	4284      	cmp	r4, r0
 800859c:	4623      	mov	r3, r4
 800859e:	d807      	bhi.n	80085b0 <memmove+0x20>
 80085a0:	1e43      	subs	r3, r0, #1
 80085a2:	42a1      	cmp	r1, r4
 80085a4:	d008      	beq.n	80085b8 <memmove+0x28>
 80085a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ae:	e7f8      	b.n	80085a2 <memmove+0x12>
 80085b0:	4402      	add	r2, r0
 80085b2:	4601      	mov	r1, r0
 80085b4:	428a      	cmp	r2, r1
 80085b6:	d100      	bne.n	80085ba <memmove+0x2a>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085c2:	e7f7      	b.n	80085b4 <memmove+0x24>

080085c4 <__malloc_lock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_lock+0x8>)
 80085c6:	f7ff b997 	b.w	80078f8 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	20006989 	.word	0x20006989

080085d0 <__malloc_unlock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__malloc_unlock+0x8>)
 80085d2:	f7ff b992 	b.w	80078fa <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	20006989 	.word	0x20006989

080085dc <_realloc_r>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	4607      	mov	r7, r0
 80085e0:	4614      	mov	r4, r2
 80085e2:	460e      	mov	r6, r1
 80085e4:	b921      	cbnz	r1, 80085f0 <_realloc_r+0x14>
 80085e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ea:	4611      	mov	r1, r2
 80085ec:	f7ff ba3a 	b.w	8007a64 <_malloc_r>
 80085f0:	b922      	cbnz	r2, 80085fc <_realloc_r+0x20>
 80085f2:	f7ff f9e7 	bl	80079c4 <_free_r>
 80085f6:	4625      	mov	r5, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fc:	f000 f826 	bl	800864c <_malloc_usable_size_r>
 8008600:	42a0      	cmp	r0, r4
 8008602:	d20f      	bcs.n	8008624 <_realloc_r+0x48>
 8008604:	4621      	mov	r1, r4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff fa2c 	bl	8007a64 <_malloc_r>
 800860c:	4605      	mov	r5, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d0f2      	beq.n	80085f8 <_realloc_r+0x1c>
 8008612:	4631      	mov	r1, r6
 8008614:	4622      	mov	r2, r4
 8008616:	f7fe fe05 	bl	8007224 <memcpy>
 800861a:	4631      	mov	r1, r6
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff f9d1 	bl	80079c4 <_free_r>
 8008622:	e7e9      	b.n	80085f8 <_realloc_r+0x1c>
 8008624:	4635      	mov	r5, r6
 8008626:	e7e7      	b.n	80085f8 <_realloc_r+0x1c>

08008628 <_read_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	; (8008648 <_read_r+0x20>)
 800862c:	4604      	mov	r4, r0
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	2200      	movs	r2, #0
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	f7f8 ff36 	bl	80014a8 <_read>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_read_r+0x1e>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_read_r+0x1e>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20006990 	.word	0x20006990

0800864c <_malloc_usable_size_r>:
 800864c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008650:	1f18      	subs	r0, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfbc      	itt	lt
 8008656:	580b      	ldrlt	r3, [r1, r0]
 8008658:	18c0      	addlt	r0, r0, r3
 800865a:	4770      	bx	lr

0800865c <_init>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	bf00      	nop
 8008660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008662:	bc08      	pop	{r3}
 8008664:	469e      	mov	lr, r3
 8008666:	4770      	bx	lr

08008668 <_fini>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr
