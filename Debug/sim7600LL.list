
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c8  0800a4c8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d0  0800a4d0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094f4  20000180  0800a658  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009674  0800a658  00029674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eccd  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c0  00000000  00000000  0003ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00043640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00045088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027252  00000000  00000000  00046910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a374  00000000  00000000  0006db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2bad  00000000  00000000  00087ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016aa83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000764c  00000000  00000000  0016aad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a124 	.word	0x0800a124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	0800a124 	.word	0x0800a124

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000019c 	.word	0x2000019c
 80005a8:	200001f0 	.word	0x200001f0

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e6:	e000      	b.n	80006ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000716:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <LL_DMA_DisableStream+0x3c>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <LL_DMA_DisableStream+0x3c>)
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	440a      	add	r2, r1
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	440a      	add	r2, r1
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	6013      	str	r3, [r2, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	0800a400 	.word	0x0800a400

0800074c <LL_DMA_IsEnabledStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LL_DMA_IsEnabledStream+0x34>)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b01      	cmp	r3, #1
 800076c:	bf0c      	ite	eq
 800076e:	2301      	moveq	r3, #1
 8000770:	2300      	movne	r3, #0
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	0800a400 	.word	0x0800a400

08000784 <LL_DMA_IsActiveFlag_HT2>:
  * @rmtoll LISR  HTIF2    LL_DMA_IsActiveFlag_HT2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF2)==(DMA_LISR_HTIF2));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll LISR  TCIF2    LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <LL_DMA_ClearFlag_HT2>:
  * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007e2:	609a      	str	r2, [r3, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007fe:	609a      	str	r2, [r3, #8]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE);
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LL_DMA_IsEnabledIT_HT+0x34>)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	2b08      	cmp	r3, #8
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	0800a400 	.word	0x0800a400

08000844 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LL_DMA_IsEnabledIT_TC+0x34>)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	2b10      	cmp	r3, #16
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	0800a400 	.word	0x0800a400

0800087c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <LL_RCC_HSE_Enable+0x1c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <LL_RCC_HSE_Enable+0x1c>)
 8000886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <LL_RCC_HSE_IsReady+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <LL_RCC_SetSysClkSource+0x24>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f023 0203 	bic.w	r2, r3, #3
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <LL_RCC_SetSysClkSource+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	608b      	str	r3, [r1, #8]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <LL_RCC_GetSysClkSource+0x18>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f003 030c 	and.w	r3, r3, #12
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <LL_RCC_SetAHBPrescaler+0x24>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000918:	4904      	ldr	r1, [pc, #16]	; (800092c <LL_RCC_SetAHBPrescaler+0x24>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	608b      	str	r3, [r1, #8]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40023800 	.word	0x40023800

08000930 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <LL_RCC_SetAPB1Prescaler+0x24>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000940:	4904      	ldr	r1, [pc, #16]	; (8000954 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	608b      	str	r3, [r1, #8]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800

08000958 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000968:	4904      	ldr	r1, [pc, #16]	; (800097c <LL_RCC_SetAPB2Prescaler+0x24>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	608b      	str	r3, [r1, #8]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40023800 	.word	0x40023800

08000980 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_RCC_PLL_Enable+0x1c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <LL_RCC_PLL_Enable+0x1c>)
 800098a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <LL_RCC_PLL_IsReady+0x24>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009b0:	bf0c      	ite	eq
 80009b2:	2301      	moveq	r3, #1
 80009b4:	2300      	movne	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80009dc:	4013      	ands	r3, r2
 80009de:	68f9      	ldr	r1, [r7, #12]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	4311      	orrs	r1, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	0192      	lsls	r2, r2, #6
 80009e8:	430a      	orrs	r2, r1
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009ec:	4313      	orrs	r3, r2
 80009ee:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009f8:	4904      	ldr	r1, [pc, #16]	; (8000a0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	ffbf8000 	.word	0xffbf8000

08000a14 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	40023800 	.word	0x40023800

08000a44 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <LL_SYSCFG_SetEXTISource+0x58>)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	3302      	adds	r3, #2
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	0c1b      	lsrs	r3, r3, #16
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	ea02 0103 	and.w	r1, r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	fa93 f3a3 	rbit	r3, r3
 8000a70:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	fab3 f383 	clz	r3, r3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	fa03 f202 	lsl.w	r2, r3, r2
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <LL_SYSCFG_SetEXTISource+0x58>)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <LL_FLASH_SetLatency+0x24>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 0207 	bic.w	r2, r3, #7
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <LL_FLASH_SetLatency+0x24>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <LL_FLASH_GetLatency+0x18>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40023c00 	.word	0x40023c00

08000ae4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40007000 	.word	0x40007000

08000b0c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa93 f3a3 	rbit	r3, r3
 8000b26:	613b      	str	r3, [r7, #16]
  return result;
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	fab3 f383 	clz	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	2103      	movs	r1, #3
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	fa93 f3a3 	rbit	r3, r3
 8000b46:	61bb      	str	r3, [r7, #24]
  return result;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fab3 f383 	clz	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b089      	sub	sp, #36	; 0x24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa93 f3a3 	rbit	r3, r3
 8000b84:	613b      	str	r3, [r7, #16]
  return result;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	fab3 f383 	clz	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa93 f3a3 	rbit	r3, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	60da      	str	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3724      	adds	r7, #36	; 0x24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	619a      	str	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	041a      	lsls	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	619a      	str	r2, [r3, #24]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	4013      	ands	r3, r2
 8000c18:	041a      	lsls	r2, r3, #16
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43d9      	mvns	r1, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	400b      	ands	r3, r1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	619a      	str	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <sim7600_pause_rx_uart_dma>:

extern USART_TypeDef* usartSim7600;
//int numOfDisableDMA = 0;
//signal 0: use from IDLE interrupt, 1: use from DMA TC/HT interrutp
__STATIC_INLINE void sim7600_pause_rx_uart_dma(int signal)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

	//disable for soure
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <sim7600_pause_rx_uart_dma+0x2c>)
 8000c40:	f7ff fd64 	bl	800070c <LL_DMA_DisableStream>
		while(LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 0
 8000c44:	bf00      	nop
 8000c46:	2102      	movs	r1, #2
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <sim7600_pause_rx_uart_dma+0x2c>)
 8000c4a:	f7ff fd7f 	bl	800074c <LL_DMA_IsEnabledStream>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f8      	bne.n	8000c46 <sim7600_pause_rx_uart_dma+0x12>
	}
	LL_USART_DisableDMAReq_RX(USART1);
	while(LL_USART_IsEnabledDMAReq_RX(USART1));
	*/

}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40026400 	.word	0x40026400

08000c64 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e009      	b.n	8000c8a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fd1d 	bl	80006be <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbf1      	blt.n	8000c76 <_write+0x12>
	}
	return len;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b0ac      	sub	sp, #176	; 0xb0
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca2:	f000 fd43 	bl	800172c <HAL_Init>

  /* USER CODE BEGIN Init */
  eStatusPlayMp3 = ON;
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <main+0x124>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f8a6 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f000 f934 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb4:	f000 f922 	bl	8000efc <MX_DMA_Init>
  //MX_USART1_UART_Init();
  MX_SPI2_Init();
 8000cb8:	f000 f8ea 	bl	8000e90 <MX_SPI2_Init>
  //MX_TIM5_Init();
  /* USER CODE BEGIN 2 */
  //osMessageGet(queue_id, millisec)
  VS1003_Init();
 8000cbc:	f008 f8c0 	bl	8008e40 <VS1003_Init>
  VS1003_SoftReset();
 8000cc0:	f008 f936 	bl	8008f30 <VS1003_SoftReset>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000cc4:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <main+0x128>)
 8000cc6:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000cca:	461d      	mov	r5, r3
 8000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f931 	bl	8003f46 <osThreadCreate>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a38      	ldr	r2, [pc, #224]	; (8000dc8 <main+0x12c>)
 8000ce8:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, StartTask02, osPriorityHigh, 0, 128);
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <main+0x130>)
 8000cec:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000cfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 f91e 	bl	8003f46 <osThreadCreate>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a30      	ldr	r2, [pc, #192]	; (8000dd0 <main+0x134>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(sim7600Error, sim7600ErrorTask, osPriorityAboveNormal, 0, 128);
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <main+0x138>)
 8000d12:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000d16:	461d      	mov	r5, r3
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sim7600ErrorHandle = osThreadCreate(osThread(sim7600Error), NULL);
 8000d24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 f90b 	bl	8003f46 <osThreadCreate>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <main+0x13c>)
 8000d34:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(sim7600ErrorHandle);

  osMessageQDef(rxUASRTQueue, 20, uint8_t);
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <main+0x140>)
 8000d38:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart_rx_dma_queue_id = osMessageCreate(osMessageQ(rxUASRTQueue), NULL);
 8000d42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fa1f 	bl	800418c <osMessageCreate>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <main+0x144>)
 8000d52:	6013      	str	r3, [r2, #0]

  osThreadDef(usart_rx_dma, usart_rx_dmaTask, osPriorityRealtime, 0, 128);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <main+0x148>)
 8000d56:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_rx_dmaHandle = osThreadCreate(osThread(usart_rx_dma), NULL);
 8000d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 f8e9 	bl	8003f46 <osThreadCreate>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <main+0x14c>)
 8000d78:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(usart_rx_dmaHandle);

  osThreadDef(startPlayMp3, startPlayMp3Task, osPriorityRealtime, 0, 128);
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <main+0x150>)
 8000d7c:	f107 0414 	add.w	r4, r7, #20
 8000d80:	461d      	mov	r5, r3
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  startPlayMp3Handle = osThreadCreate(osThread(startPlayMp3), NULL);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 f8d6 	bl	8003f46 <osThreadCreate>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <main+0x154>)
 8000d9e:	6013      	str	r3, [r2, #0]

  osMessageQDef(playMp3Queue, 2, uint32_t);
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <main+0x158>)
 8000da2:	1d3c      	adds	r4, r7, #4
 8000da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  play_mp3_queue_id = osMessageCreate(osMessageQ(playMp3Queue), NULL);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 f9ec 	bl	800418c <osMessageCreate>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <main+0x15c>)
 8000db8:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dba:	f003 f8bd 	bl	8003f38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x122>
 8000dc0:	20004240 	.word	0x20004240
 8000dc4:	0800a184 	.word	0x0800a184
 8000dc8:	200041c8 	.word	0x200041c8
 8000dcc:	0800a1a0 	.word	0x0800a1a0
 8000dd0:	200041cc 	.word	0x200041cc
 8000dd4:	0800a1bc 	.word	0x0800a1bc
 8000dd8:	2000422c 	.word	0x2000422c
 8000ddc:	0800a1d8 	.word	0x0800a1d8
 8000de0:	20004294 	.word	0x20004294
 8000de4:	0800a1e8 	.word	0x0800a1e8
 8000de8:	20004290 	.word	0x20004290
 8000dec:	0800a204 	.word	0x0800a204
 8000df0:	20004234 	.word	0x20004234
 8000df4:	0800a220 	.word	0x0800a220
 8000df8:	20004238 	.word	0x20004238

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000e00:	2005      	movs	r0, #5
 8000e02:	f7ff fe4d 	bl	8000aa0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000e06:	bf00      	nop
 8000e08:	f7ff fe5e 	bl	8000ac8 <LL_FLASH_GetLatency>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d1fa      	bne.n	8000e08 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000e12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e16:	f7ff fe65 	bl	8000ae4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000e1a:	f7ff fd2f 	bl	800087c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000e1e:	bf00      	nop
 8000e20:	f7ff fd3c 	bl	800089c <LL_RCC_HSE_IsReady>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1fa      	bne.n	8000e20 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	22a8      	movs	r2, #168	; 0xa8
 8000e2e:	2104      	movs	r1, #4
 8000e30:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e34:	f7ff fdc8 	bl	80009c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e38:	f7ff fda2 	bl	8000980 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e3c:	bf00      	nop
 8000e3e:	f7ff fdaf 	bl	80009a0 <LL_RCC_PLL_IsReady>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d1fa      	bne.n	8000e3e <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fd5d 	bl	8000908 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000e4e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000e52:	f7ff fd6d 	bl	8000930 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e5a:	f7ff fd7d 	bl	8000958 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff fd30 	bl	80008c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e64:	bf00      	nop
 8000e66:	f7ff fd41 	bl	80008ec <LL_RCC_GetSysClkSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d1fa      	bne.n	8000e66 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <SystemClock_Config+0x90>)
 8000e72:	f003 f827 	bl	8003ec4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 fad8 	bl	800142c <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e82:	f000 f9e5 	bl	8001250 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	0a037a00 	.word	0x0a037a00

08000e90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <MX_SPI2_Init+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ec4:	2230      	movs	r2, #48	; 0x30
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_SPI2_Init+0x64>)
 8000ee2:	f001 fb15 	bl	8002510 <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000eec:	f000 f9b0 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200041d0 	.word	0x200041d0
 8000ef8:	40003800 	.word	0x40003800

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f00:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f04:	f7ff fd86 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	200f      	movs	r0, #15
 8000f0e:	f000 fd2b 	bl	8001968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 fd44 	bl	80019a0 <HAL_NVIC_EnableIRQ>

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	f7ff fd69 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f7ff fd66 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fd63 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f7ff fd60 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f7ff fd5d 	bl	8000a14 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 8000f5a:	21c0      	movs	r1, #192	; 0xc0
 8000f5c:	4836      	ldr	r0, [pc, #216]	; (8001038 <MX_GPIO_Init+0x11c>)
 8000f5e:	f7ff fe33 	bl	8000bc8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 8000f62:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000f66:	4835      	ldr	r0, [pc, #212]	; (800103c <MX_GPIO_Init+0x120>)
 8000f68:	f7ff fe2e 	bl	8000bc8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	4833      	ldr	r0, [pc, #204]	; (8001040 <MX_GPIO_Init+0x124>)
 8000f72:	f7ff fe37 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000f76:	23c0      	movs	r3, #192	; 0xc0
 8000f78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482a      	ldr	r0, [pc, #168]	; (8001038 <MX_GPIO_Init+0x11c>)
 8000f90:	f002 fba0 	bl	80036d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 8000f94:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 8000f98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_GPIO_Init+0x120>)
 8000fb0:	f002 fb90 	bl	80036d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481c      	ldr	r0, [pc, #112]	; (8001040 <MX_GPIO_Init+0x124>)
 8000fd0:	f002 fb80 	bl	80036d4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE9);
 8000fd4:	491b      	ldr	r1, [pc, #108]	; (8001044 <MX_GPIO_Init+0x128>)
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f7ff fd34 	bl	8000a44 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000fea:	2303      	movs	r3, #3
 8000fec:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f9e8 	bl	80033c8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOE, LL_GPIO_PIN_9, LL_GPIO_PULL_NO);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffe:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_GPIO_Init+0x120>)
 8001000:	f7ff fdb3 	bl	8000b6a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_GPIO_Init+0x120>)
 800100c:	f7ff fd7e 	bl	8000b0c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001010:	f7ff facc 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8001014:	4603      	mov	r3, r0
 8001016:	2200      	movs	r2, #0
 8001018:	210f      	movs	r1, #15
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fb1c 	bl	8000658 <NVIC_EncodePriority>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	2017      	movs	r0, #23
 8001026:	f7ff faed 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800102a:	2017      	movs	r0, #23
 800102c:	f7ff facc 	bl	80005c8 <__NVIC_EnableIRQ>

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020000 	.word	0x40020000
 800103c:	40021000 	.word	0x40021000
 8001040:	40020400 	.word	0x40020400
 8001044:	00f00002 	.word	0x00f00002

08001048 <DMA2_Stream2_IRQHandler>:

/* USER CODE BEGIN 4 */
int numOfDMAInterrupt = 0;
void DMA2_Stream2_IRQHandler(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    /* Check half-transfer complete interrupt */
    if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_2) && LL_DMA_IsActiveFlag_HT2(DMA2)) {
 800104c:	2102      	movs	r1, #2
 800104e:	481d      	ldr	r0, [pc, #116]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 8001050:	f7ff fbdc 	bl	800080c <LL_DMA_IsEnabledIT_HT>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d012      	beq.n	8001080 <DMA2_Stream2_IRQHandler+0x38>
 800105a:	481a      	ldr	r0, [pc, #104]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 800105c:	f7ff fb92 	bl	8000784 <LL_DMA_IsActiveFlag_HT2>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00c      	beq.n	8001080 <DMA2_Stream2_IRQHandler+0x38>
        LL_DMA_ClearFlag_HT2(DMA2);             /* Clear half-transfer complete flag */
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 8001068:	f7ff fbb4 	bl	80007d4 <LL_DMA_ClearFlag_HT2>
        sim7600_pause_rx_uart_dma(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fde1 	bl	8000c34 <sim7600_pause_rx_uart_dma>
        osMessagePut(usart_rx_dma_queue_id, 1, 0);
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <DMA2_Stream2_IRQHandler+0x80>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f8ae 	bl	80041dc <osMessagePut>
    }

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_2) && LL_DMA_IsActiveFlag_TC2(DMA2)) {
 8001080:	2102      	movs	r1, #2
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 8001084:	f7ff fbde 	bl	8000844 <LL_DMA_IsEnabledIT_TC>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d012      	beq.n	80010b4 <DMA2_Stream2_IRQHandler+0x6c>
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 8001090:	f7ff fb8c 	bl	80007ac <LL_DMA_IsActiveFlag_TC2>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <DMA2_Stream2_IRQHandler+0x6c>
        LL_DMA_ClearFlag_TC2(DMA2);             /* Clear transfer complete flag */
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <DMA2_Stream2_IRQHandler+0x7c>)
 800109c:	f7ff fba8 	bl	80007f0 <LL_DMA_ClearFlag_TC2>
        sim7600_pause_rx_uart_dma(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fdc7 	bl	8000c34 <sim7600_pause_rx_uart_dma>
        osMessagePut(usart_rx_dma_queue_id, 1, 0);
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <DMA2_Stream2_IRQHandler+0x80>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f894 	bl	80041dc <osMessagePut>
    }
    numOfDMAInterrupt++;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <DMA2_Stream2_IRQHandler+0x84>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <DMA2_Stream2_IRQHandler+0x84>)
 80010bc:	6013      	str	r3, [r2, #0]
    /* Implement other events when needed */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40026400 	.word	0x40026400
 80010c8:	20004294 	.word	0x20004294
 80010cc:	200003f0 	.word	0x200003f0

080010d0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_SPI_TxCpltCallback+0x28>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d107      	bne.n	80010f0 <HAL_SPI_TxCpltCallback+0x20>
  {
    //VS1003_PlayBeep_DMA();
    osMessagePut(play_mp3_queue_id, 0, osWaitForever); //play immidiate
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_SPI_TxCpltCallback+0x2c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f876 	bl	80041dc <osMessagePut>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200041d0 	.word	0x200041d0
 80010fc:	20004238 	.word	0x20004238

08001100 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	sim7600_usart_IRQHandler();
 8001104:	f007 fd8c 	bl	8008c20 <sim7600_usart_IRQHandler>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <sim7600ErrorTask>:

void sim7600ErrorTask(void const * argument)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //printf("%c", 'e');
    osDelay(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f002 ff6d 	bl	8003ff6 <osDelay>
    sim7600_handle_error();
 800111c:	f006 fe94 	bl	8007e48 <sim7600_handle_error>
    //VS1003_PlayBeep();
    LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <sim7600ErrorTask+0x20>)
 8001124:	f7ff fd6d 	bl	8000c02 <LL_GPIO_TogglePin>
    osDelay(1000);
 8001128:	e7f4      	b.n	8001114 <sim7600ErrorTask+0x8>
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <usart_rx_dmaTask>:
  }
}

void usart_rx_dmaTask(void const * argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6178      	str	r0, [r7, #20]
    // {
    //   //osMessageGet(usart_rx_dma_queue_id, 1000);
    // 	osDelay(50);
    // }
    //osDelay(100);
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <usart_rx_dmaTask+0x20>)
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	463b      	mov	r3, r7
 800113e:	f04f 32ff 	mov.w	r2, #4294967295
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f88a 	bl	800425c <osMessageGet>
    sim7600_usart_rx_check();
 8001148:	f006 ff64 	bl	8008014 <sim7600_usart_rx_check>
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 800114c:	e7f4      	b.n	8001138 <usart_rx_dmaTask+0x8>
 800114e:	bf00      	nop
 8001150:	20004294 	.word	0x20004294

08001154 <startPlayMp3Task>:
  }
}

osEvent playMp3QueueEvent;
void startPlayMp3Task(void const * argument)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6178      	str	r0, [r7, #20]
  for(;;)
  {
    playMp3QueueEvent = osMessageGet(play_mp3_queue_id, osWaitForever);
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <startPlayMp3Task+0x30>)
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	4c09      	ldr	r4, [pc, #36]	; (8001188 <startPlayMp3Task+0x34>)
 8001162:	463b      	mov	r3, r7
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f877 	bl	800425c <osMessageGet>
 800116e:	463b      	mov	r3, r7
 8001170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    playMp3DMA(playMp3QueueEvent.value.v);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <startPlayMp3Task+0x34>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f007 fc35 	bl	80089ec <playMp3DMA>
    playMp3QueueEvent = osMessageGet(play_mp3_queue_id, osWaitForever);
 8001182:	e7eb      	b.n	800115c <startPlayMp3Task+0x8>
 8001184:	20004238 	.word	0x20004238
 8001188:	20004304 	.word	0x20004304

0800118c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //osThreadSuspend(sim7600ErrorHandle); // suspend all other thread
  //Init_LL_GetTick();
  sim7600_init();
 8001194:	f006 fadc 	bl	8007750 <sim7600_init>
  if(!sim7600_config()) sim7600_error = true;
 8001198:	f006 fbd8 	bl	800794c <sim7600_config>
 800119c:	4603      	mov	r3, r0
 800119e:	f083 0301 	eor.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <StartDefaultTask+0x22>
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <StartDefaultTask+0x30>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
  //osThreadResumeAll();
  //osThreadResume(blinkTaskHandle);
  //osThreadResume(sim7600ErrorHandle);
  //osThreadResume(usart_rx_dmaHandle);
  
  osThreadTerminate(NULL);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f002 ff15 	bl	8003fde <osThreadTerminate>

  //osThreadTerminate(defaultTaskHandle);
  /* USER CODE END 5 */
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20004154 	.word	0x20004154

080011c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  static int StartTask02_num = 0;
  for(;;)
  {
	//LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
    osDelay(1000);
 80011c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011cc:	f002 ff13 	bl	8003ff6 <osDelay>

    if(sim7600_udp_IsOpen)
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <StartTask02+0x4c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f7      	beq.n	80011c8 <StartTask02+0x8>
    {
    	StartTask02_num++;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <StartTask02+0x50>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <StartTask02+0x50>)
 80011e0:	6013      	str	r3, [r2, #0]
    	//if(StartTask02_num % 5 == 0 || StartTask02_num < 30) sim7600_keepAlive_udp();
    	if((StartTask02_num % 5 == 0) || (StartTask02_num < 5)) sim7600_keepAlive_udp();
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <StartTask02+0x50>)
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <StartTask02+0x54>)
 80011e8:	fb83 2301 	smull	r2, r3, r3, r1
 80011ec:	105a      	asrs	r2, r3, #1
 80011ee:	17cb      	asrs	r3, r1, #31
 80011f0:	1ad2      	subs	r2, r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	1aca      	subs	r2, r1, r3
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d003      	beq.n	8001206 <StartTask02+0x46>
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <StartTask02+0x50>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b04      	cmp	r3, #4
 8001204:	dce0      	bgt.n	80011c8 <StartTask02+0x8>
 8001206:	f006 fde9 	bl	8007ddc <sim7600_keepAlive_udp>
    osDelay(1000);
 800120a:	e7dd      	b.n	80011c8 <StartTask02+0x8>
 800120c:	20004157 	.word	0x20004157
 8001210:	200003f4 	.word	0x200003f4
 8001214:	66666667 	.word	0x66666667

08001218 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d101      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122a:	f000 faa1 	bl	8001770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM5)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d103      	bne.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x28>
  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800123c:	f001 f8fb 	bl	8002436 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback 1 */
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40000c00 	.word	0x40000c00
 800124c:	40020000 	.word	0x40020000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x54>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_MspInit+0x54>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x54>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_MspInit+0x54>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_MspInit+0x54>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_MspInit+0x54>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fb61 	bl	8001968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <HAL_SPI_MspInit+0x11c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d178      	bne.n	80013c8 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a3d      	ldr	r2, [pc, #244]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_SPI_MspInit+0x120>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133a:	2305      	movs	r3, #5
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4824      	ldr	r0, [pc, #144]	; (80013d8 <HAL_SPI_MspInit+0x124>)
 8001346:	f000 fea9 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	481d      	ldr	r0, [pc, #116]	; (80013dc <HAL_SPI_MspInit+0x128>)
 8001368:	f000 fe98 	bl	800209c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_SPI_MspInit+0x130>)
 8001370:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 80013a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 80013ae:	f000 fb05 	bl	80019bc <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80013b8:	f7ff ff4a 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 80013c0:	649a      	str	r2, [r3, #72]	; 0x48
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_SPI_MspInit+0x12c>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40003800 	.word	0x40003800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020400 	.word	0x40020400
 80013e0:	200042a4 	.word	0x200042a4
 80013e4:	40026070 	.word	0x40026070

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_TIM_Base_MspInit+0x3c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10d      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_Base_MspInit+0x40>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_TIM_Base_MspInit+0x40>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_TIM_Base_MspInit+0x40>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40000c00 	.word	0x40000c00
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	201c      	movs	r0, #28
 8001442:	f000 fa91 	bl	8001968 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001446:	201c      	movs	r0, #28
 8001448:	f000 faaa 	bl	80019a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_InitTick+0xa8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_InitTick+0xa8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_InitTick+0xa8>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001468:	f107 0210 	add.w	r2, r7, #16
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f001 f81a 	bl	80024ac <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001478:	f001 f804 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 800147c:	4603      	mov	r3, r0
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_InitTick+0xac>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9b      	lsrs	r3, r3, #18
 800148c:	3b01      	subs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0xb0>)
 8001492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001496:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_InitTick+0xb0>)
 800149a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_InitTick+0xb0>)
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_InitTick+0xb0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_InitTick+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <HAL_InitTick+0xb0>)
 80014b4:	f001 fc4c 	bl	8002d50 <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d104      	bne.n	80014c8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <HAL_InitTick+0xb0>)
 80014c0:	f001 fc96 	bl	8002df0 <HAL_TIM_Base_Start_IT>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e000      	b.n	80014ca <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3730      	adds	r7, #48	; 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	20004310 	.word	0x20004310

080014e0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40013c00 	.word	0x40013c00

0800150c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6153      	str	r3, [r2, #20]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40013c00 	.word	0x40013c00

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Stream4_IRQHandler+0x10>)
 800155e:	f000 fb33 	bl	8001bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200042a4 	.word	0x200042a4

0800156c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001570:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001574:	f7ff ffb4 	bl	80014e0 <LL_EXTI_IsActiveFlag_0_31>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <EXTI9_5_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 800157e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001582:	f7ff ffc3 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    DREQ_VS1003_IRQhandler();
 8001586:	f007 fd3b 	bl	8009000 <DREQ_VS1003_IRQhandler>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM2_IRQHandler+0x10>)
 8001596:	f001 fc9b 	bl	8002ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20004310 	.word	0x20004310

080015a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
	}

return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:
	}
	return len;
}

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f007 fcde 	bl	8009038 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20020000 	.word	0x20020000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	200003f8 	.word	0x200003f8
 80016b0:	20009678 	.word	0x20009678

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f007 fc9d 	bl	8009044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fac7 	bl	8000c9c <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800171c:	0800a4d8 	.word	0x0800a4d8
  ldr r2, =_sbss
 8001720:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001724:	20009674 	.word	0x20009674

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f8fc 	bl	8001952 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fe66 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fd7c 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000004 	.word	0x20000004
 8001794:	20004358 	.word	0x20004358

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20004358 	.word	0x20004358

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000004 	.word	0x20000004

080017f8 <__NVIC_SetPriorityGrouping>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff4c 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197a:	f7ff ff61 	bl	8001840 <__NVIC_GetPriorityGrouping>
 800197e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7ff ffb1 	bl	80018ec <NVIC_EncodePriority>
 800198a:	4602      	mov	r2, r0
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff80 	bl	8001898 <__NVIC_SetPriority>
}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff54 	bl	800185c <__NVIC_EnableIRQ>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fee6 	bl	8001798 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e099      	b.n	8001b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f8:	e00f      	b.n	8001a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fa:	f7ff fecd 	bl	8001798 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d908      	bls.n	8001a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2203      	movs	r2, #3
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e078      	b.n	8001b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e8      	bne.n	80019fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_DMA_Init+0x158>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d107      	bne.n	8001a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f023 0307 	bic.w	r3, r3, #7
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d117      	bne.n	8001ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fa6f 	bl	8001fa4 <DMA_CheckFifoParam>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ada:	2301      	movs	r3, #1
 8001adc:	e016      	b.n	8001b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa26 	bl	8001f38 <DMA_CalcBaseAndBitshift>
 8001aec:	4603      	mov	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	223f      	movs	r2, #63	; 0x3f
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	f010803f 	.word	0xf010803f

08001b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Start_IT+0x26>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e040      	b.n	8001bc0 <HAL_DMA_Start_IT+0xa8>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d12f      	bne.n	8001bb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f9b8 	bl	8001edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	223f      	movs	r2, #63	; 0x3f
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0216 	orr.w	r2, r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0208 	orr.w	r2, r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e005      	b.n	8001bbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_DMA_IRQHandler+0x258>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_DMA_IRQHandler+0x25c>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0a9b      	lsrs	r3, r3, #10
 8001be0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01a      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2208      	movs	r2, #8
 8001c22:	409a      	lsls	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2201      	movs	r2, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2201      	movs	r2, #1
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2204      	movs	r2, #4
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0204 	orr.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d043      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03c      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d018      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
 8001cf6:	e01f      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e016      	b.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0208 	bic.w	r2, r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 808e 	beq.w	8001e66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8086 	beq.w	8001e66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2220      	movs	r2, #32
 8001d60:	409a      	lsls	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d136      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_IRQHandler+0x1da>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d07d      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
        }
        return;
 8001dde:	e078      	b.n	8001ed2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d108      	bne.n	8001e0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d030      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e02b      	b.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d027      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	e022      	b.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
 8001e20:	20000000 	.word	0x20000000
 8001e24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d032      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d022      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d307      	bcc.n	8001eae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f2      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x2ca>
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e000      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ed2:	bf00      	nop
    }
  }
}
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d108      	bne.n	8001f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1a:	e007      	b.n	8001f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b10      	subs	r3, #16
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <DMA_CalcBaseAndBitshift+0x64>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d909      	bls.n	8001f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
 8001f78:	e007      	b.n	8001f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	aaaaaaab 	.word	0xaaaaaaab
 8001fa0:	0800a420 	.word	0x0800a420

08001fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11f      	bne.n	8001ffe <DMA_CheckFifoParam+0x5a>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d856      	bhi.n	8002072 <DMA_CheckFifoParam+0xce>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <DMA_CheckFifoParam+0x28>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fef 	.word	0x08001fef
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	08002073 	.word	0x08002073
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d046      	beq.n	8002076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fec:	e043      	b.n	8002076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ff6:	d140      	bne.n	800207a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffc:	e03d      	b.n	800207a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002006:	d121      	bne.n	800204c <DMA_CheckFifoParam+0xa8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d837      	bhi.n	800207e <DMA_CheckFifoParam+0xda>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <DMA_CheckFifoParam+0x70>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202b 	.word	0x0800202b
 800201c:	08002025 	.word	0x08002025
 8002020:	0800203d 	.word	0x0800203d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      break;
 8002028:	e030      	b.n	800208c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d025      	beq.n	8002082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203a:	e022      	b.n	8002082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002044:	d11f      	bne.n	8002086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204a:	e01c      	b.n	8002086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d903      	bls.n	800205a <DMA_CheckFifoParam+0xb6>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002058:	e018      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      break;
 800205e:	e015      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
      break;
 8002070:	e00b      	b.n	800208a <DMA_CheckFifoParam+0xe6>
      break;
 8002072:	bf00      	nop
 8002074:	e00a      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e008      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e006      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e004      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;   
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
    }
  } 
  
  return status; 
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e16b      	b.n	8002390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 815a 	bne.w	800238a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d005      	beq.n	80020ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d130      	bne.n	8002150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b03      	cmp	r3, #3
 800215a:	d017      	beq.n	800218c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d123      	bne.n	80021e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	69b9      	ldr	r1, [r7, #24]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80b4 	beq.w	800238a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a5f      	ldr	r2, [pc, #380]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <HAL_GPIO_Init+0x30c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223e:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <HAL_GPIO_Init+0x310>)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	220f      	movs	r2, #15
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x314>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02b      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_GPIO_Init+0x318>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x222>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a50      	ldr	r2, [pc, #320]	; (80023b8 <HAL_GPIO_Init+0x31c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4f      	ldr	r2, [pc, #316]	; (80023bc <HAL_GPIO_Init+0x320>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x21a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4e      	ldr	r2, [pc, #312]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x216>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4d      	ldr	r2, [pc, #308]	; (80023c4 <HAL_GPIO_Init+0x328>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x212>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <HAL_GPIO_Init+0x32c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x20e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <HAL_GPIO_Init+0x330>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x20a>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e00e      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022a6:	2308      	movs	r3, #8
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x228>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d4:	4935      	ldr	r1, [pc, #212]	; (80023ac <HAL_GPIO_Init+0x310>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_GPIO_Init+0x334>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002306:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_GPIO_Init+0x334>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_GPIO_Init+0x334>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_GPIO_Init+0x334>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae90 	bls.w	80020b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43d9      	mvns	r1, r3
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_RCC_GetHCLKFreq+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002488:	f7ff fff0 	bl	800246c <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0a9b      	lsrs	r3, r3, #10
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4903      	ldr	r1, [pc, #12]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	0800a418 	.word	0x0800a418

080024ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	220f      	movs	r2, #15
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCC_GetClockConfig+0x60>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0207 	and.w	r2, r3, #7
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40023c00 	.word	0x40023c00

08002510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07b      	b.n	800261a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d009      	beq.n	8002548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
 800253a:	e005      	b.n	8002548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fea6 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	ea42 0103 	orr.w	r1, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0104 	and.w	r1, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f003 0210 	and.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_SPI_Transmit+0x22>
 8002640:	2302      	movs	r3, #2
 8002642:	e126      	b.n	8002892 <HAL_SPI_Transmit+0x270>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800264c:	f7ff f8a4 	bl	8001798 <HAL_GetTick>
 8002650:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002666:	e10b      	b.n	8002880 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_SPI_Transmit+0x52>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002678:	e102      	b.n	8002880 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c0:	d10f      	bne.n	80026e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	d007      	beq.n	8002700 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002708:	d14b      	bne.n	80027a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0xf6>
 8002712:	8afb      	ldrh	r3, [r7, #22]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d13e      	bne.n	8002796 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	1c9a      	adds	r2, r3, #2
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800273c:	e02b      	b.n	8002796 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d112      	bne.n	8002772 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	881a      	ldrh	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002770:	e011      	b.n	8002796 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002772:	f7ff f811 	bl	8001798 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d803      	bhi.n	800278a <HAL_SPI_Transmit+0x168>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Transmit+0x16e>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002794:	e074      	b.n	8002880 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ce      	bne.n	800273e <HAL_SPI_Transmit+0x11c>
 80027a0:	e04c      	b.n	800283c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x18e>
 80027aa:	8afb      	ldrh	r3, [r7, #22]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d140      	bne.n	8002832 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027d6:	e02c      	b.n	8002832 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d113      	bne.n	800280e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	86da      	strh	r2, [r3, #54]	; 0x36
 800280c:	e011      	b.n	8002832 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800280e:	f7fe ffc3 	bl	8001798 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d803      	bhi.n	8002826 <HAL_SPI_Transmit+0x204>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d102      	bne.n	800282c <HAL_SPI_Transmit+0x20a>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002830:	e026      	b.n	8002880 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1cd      	bne.n	80027d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fa43 	bl	8002ccc <SPI_EndRxTxTransaction>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e000      	b.n	8002880 <HAL_SPI_Transmit+0x25e>
  }

error:
 800287e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002890:	7ffb      	ldrb	r3, [r7, #31]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_SPI_Transmit_DMA+0x20>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e09b      	b.n	80029f4 <HAL_SPI_Transmit_DMA+0x158>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d002      	beq.n	80028d6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
 80028d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028d4:	e089      	b.n	80029ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_SPI_Transmit_DMA+0x46>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028e6:	e080      	b.n	80029ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292e:	d10f      	bne.n	8002950 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800294e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_SPI_Transmit_DMA+0x160>)
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <HAL_SPI_Transmit_DMA+0x164>)
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <HAL_SPI_Transmit_DMA+0x168>)
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	2200      	movs	r2, #0
 800296e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4619      	mov	r1, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002988:	f7ff f8c6 	bl	8001b18 <HAL_DMA_Start_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029aa:	e01e      	b.n	80029ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d007      	beq.n	80029ca <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0202 	orr.w	r2, r2, #2
 80029e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08002b61 	.word	0x08002b61
 8002a00:	08002ab9 	.word	0x08002ab9
 8002a04:	08002b7d 	.word	0x08002b7d

08002a08 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_DMAPause+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e010      	b.n	8002a40 <HAL_SPI_DMAPause+0x38>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0203 	bic.w	r2, r2, #3
 8002a34:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_DMAResume+0x16>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e010      	b.n	8002a84 <HAL_SPI_DMAResume+0x38>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0203 	orr.w	r2, r2, #3
 8002a78:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac6:	f7fe fe67 	bl	8001798 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	d03b      	beq.n	8002b54 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0220 	bic.w	r2, r2, #32
 8002aea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0202 	bic.w	r2, r2, #2
 8002afa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	2164      	movs	r1, #100	; 0x64
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f000 f8e3 	bl	8002ccc <SPI_EndRxTxTransaction>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002b4c:	6978      	ldr	r0, [r7, #20]
 8002b4e:	f7ff ffa9 	bl	8002aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002b52:	e002      	b.n	8002b5a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002b54:	6978      	ldr	r0, [r7, #20]
 8002b56:	f7fe fabb 	bl	80010d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff8e 	bl	8002a90 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0203 	bic.w	r2, r2, #3
 8002b98:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff ff78 	bl	8002aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bcc:	f7fe fde4 	bl	8001798 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bdc:	f7fe fddc 	bl	8001798 <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	015b      	lsls	r3, r3, #5
 8002be8:	0d1b      	lsrs	r3, r3, #20
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf2:	e054      	b.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d050      	beq.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bfc:	f7fe fdcc 	bl	8001798 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d902      	bls.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d13d      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2a:	d111      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c34:	d004      	beq.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d107      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c58:	d10f      	bne.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e017      	b.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d19b      	bne.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000

08002ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <SPI_EndRxTxTransaction+0x7c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <SPI_EndRxTxTransaction+0x80>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0d5b      	lsrs	r3, r3, #21
 8002ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d112      	bne.n	8002d1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff ff5a 	bl	8002bbc <SPI_WaitFlagStateUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d0f2      	beq.n	8002d1e <SPI_EndRxTxTransaction+0x52>
 8002d38:	e000      	b.n	8002d3c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d3a:	bf00      	nop
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	165e9f81 	.word	0x165e9f81

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e041      	b.n	8002de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe fb36 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 f9ce 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e04e      	b.n	8002ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d022      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e32:	d01d      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d018      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x80>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d111      	bne.n	8002e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d010      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e007      	b.n	8002ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40010400 	.word	0x40010400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40001800 	.word	0x40001800

08002ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d122      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0202 	mvn.w	r2, #2
 8002efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8ee 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8e0 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8f1 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d122      	bne.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d11b      	bne.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0204 	mvn.w	r2, #4
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8c4 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8b6 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8c7 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d122      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d11b      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0208 	mvn.w	r2, #8
 8002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f89a 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f88c 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f89d 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0210 	mvn.w	r2, #16
 8002ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f870 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f862 	bl	80030e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f873 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0201 	mvn.w	r2, #1
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe f8e2 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f902 	bl	8003284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f838 	bl	800311c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0220 	mvn.w	r2, #32
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8cc 	bl	8003270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	; (8003244 <TIM_Base_SetConfig+0x114>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d00f      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <TIM_Base_SetConfig+0x118>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3c      	ldr	r2, [pc, #240]	; (800324c <TIM_Base_SetConfig+0x11c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <TIM_Base_SetConfig+0x120>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3a      	ldr	r2, [pc, #232]	; (8003254 <TIM_Base_SetConfig+0x124>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <TIM_Base_SetConfig+0x114>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d027      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <TIM_Base_SetConfig+0x118>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d023      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2b      	ldr	r2, [pc, #172]	; (800324c <TIM_Base_SetConfig+0x11c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2a      	ldr	r2, [pc, #168]	; (8003250 <TIM_Base_SetConfig+0x120>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <TIM_Base_SetConfig+0x124>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d017      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <TIM_Base_SetConfig+0x128>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <TIM_Base_SetConfig+0x12c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00f      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <TIM_Base_SetConfig+0x130>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <TIM_Base_SetConfig+0x134>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <TIM_Base_SetConfig+0x138>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a23      	ldr	r2, [pc, #140]	; (800326c <TIM_Base_SetConfig+0x13c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <TIM_Base_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <TIM_Base_SetConfig+0x124>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40010400 	.word	0x40010400
 8003258:	40014000 	.word	0x40014000
 800325c:	40014400 	.word	0x40014400
 8003260:	40014800 	.word	0x40014800
 8003264:	40001800 	.word	0x40001800
 8003268:	40001c00 	.word	0x40001c00
 800326c:	40002000 	.word	0x40002000

08003270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_EXTI_EnableIT_0_31>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40013c00 	.word	0x40013c00

080032bc <LL_EXTI_DisableIT_0_31>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <LL_EXTI_EnableEvent_0_31>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40013c00 	.word	0x40013c00

08003308 <LL_EXTI_DisableEvent_0_31>:
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	43db      	mvns	r3, r3
 8003318:	4904      	ldr	r1, [pc, #16]	; (800332c <LL_EXTI_DisableEvent_0_31+0x24>)
 800331a:	4013      	ands	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40013c00 	.word	0x40013c00

08003330 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4904      	ldr	r1, [pc, #16]	; (8003350 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40013c00 	.word	0x40013c00

08003354 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	43db      	mvns	r3, r3
 8003364:	4904      	ldr	r1, [pc, #16]	; (8003378 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40013c00 	.word	0x40013c00

0800337c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	4904      	ldr	r1, [pc, #16]	; (800339c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40013c00 	.word	0x40013c00

080033a0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4904      	ldr	r1, [pc, #16]	; (80033c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	60cb      	str	r3, [r1, #12]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	791b      	ldrb	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d065      	beq.n	80034a8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d06c      	beq.n	80034be <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d01c      	beq.n	8003426 <LL_EXTI_Init+0x5e>
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	dc25      	bgt.n	800343c <LL_EXTI_Init+0x74>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <LL_EXTI_Init+0x32>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d00b      	beq.n	8003410 <LL_EXTI_Init+0x48>
 80033f8:	e020      	b.n	800343c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff82 	bl	8003308 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff45 	bl	8003298 <LL_EXTI_EnableIT_0_31>
          break;
 800340e:	e018      	b.n	8003442 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff51 	bl	80032bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff60 	bl	80032e4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003424:	e00d      	b.n	8003442 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff34 	bl	8003298 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff55 	bl	80032e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800343a:	e002      	b.n	8003442 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
          break;
 8003440:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	799b      	ldrb	r3, [r3, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d039      	beq.n	80034be <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d01c      	beq.n	800348c <LL_EXTI_Init+0xc4>
 8003452:	2b03      	cmp	r3, #3
 8003454:	dc25      	bgt.n	80034a2 <LL_EXTI_Init+0xda>
 8003456:	2b01      	cmp	r3, #1
 8003458:	d002      	beq.n	8003460 <LL_EXTI_Init+0x98>
 800345a:	2b02      	cmp	r3, #2
 800345c:	d00b      	beq.n	8003476 <LL_EXTI_Init+0xae>
 800345e:	e020      	b.n	80034a2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff9b 	bl	80033a0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff5e 	bl	8003330 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003474:	e024      	b.n	80034c0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff6a 	bl	8003354 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff79 	bl	800337c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800348a:	e019      	b.n	80034c0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff4d 	bl	8003330 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff6e 	bl	800337c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034a0:	e00e      	b.n	80034c0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
            break;
 80034a6:	e00b      	b.n	80034c0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff05 	bl	80032bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff26 	bl	8003308 <LL_EXTI_DisableEvent_0_31>
 80034bc:	e000      	b.n	80034c0 <LL_EXTI_Init+0xf8>
      }
 80034be:	bf00      	nop
  }
  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <LL_GPIO_SetPinMode>:
{
 80034ca:	b480      	push	{r7}
 80034cc:	b089      	sub	sp, #36	; 0x24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	613b      	str	r3, [r7, #16]
  return result;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2103      	movs	r1, #3
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	401a      	ands	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	61bb      	str	r3, [r7, #24]
  return result;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	431a      	orrs	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]
}
 800351c:	bf00      	nop
 800351e:	3724      	adds	r7, #36	; 0x24
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_GPIO_SetPinOutputType>:
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	43db      	mvns	r3, r3
 800353c:	401a      	ands	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_GPIO_SetPinSpeed>:
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	613b      	str	r3, [r7, #16]
  return result;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2103      	movs	r1, #3
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	61bb      	str	r3, [r7, #24]
  return result;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	bf00      	nop
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_GPIO_SetPinPull>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	b089      	sub	sp, #36	; 0x24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	613b      	str	r3, [r7, #16]
  return result;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2103      	movs	r1, #3
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	401a      	ands	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	61bb      	str	r3, [r7, #24]
  return result;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60da      	str	r2, [r3, #12]
}
 8003608:	bf00      	nop
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_GPIO_SetAFPin_0_7>:
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	613b      	str	r3, [r7, #16]
  return result;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	210f      	movs	r1, #15
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	61bb      	str	r3, [r7, #24]
  return result;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_GPIO_SetAFPin_8_15>:
{
 8003672:	b480      	push	{r7}
 8003674:	b089      	sub	sp, #36	; 0x24
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	613b      	str	r3, [r7, #16]
  return result;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	210f      	movs	r1, #15
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	61bb      	str	r3, [r7, #24]
  return result;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036c8:	bf00      	nop
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	613b      	str	r3, [r7, #16]
  return result;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80036fe:	e050      	b.n	80037a2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2101      	movs	r1, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d042      	beq.n	800379c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d003      	beq.n	8003726 <LL_GPIO_Init+0x52>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d10d      	bne.n	8003742 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	461a      	mov	r2, r3
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff12 	bl	8003558 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	461a      	mov	r2, r3
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fef3 	bl	8003528 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	461a      	mov	r2, r3
 8003748:	69b9      	ldr	r1, [r7, #24]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff33 	bl	80035b6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d11a      	bne.n	800378e <LL_GPIO_Init+0xba>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	60bb      	str	r3, [r7, #8]
  return result;
 8003764:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b07      	cmp	r3, #7
 800376e:	d807      	bhi.n	8003780 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	461a      	mov	r2, r3
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff4b 	bl	8003614 <LL_GPIO_SetAFPin_0_7>
 800377e:	e006      	b.n	800378e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	461a      	mov	r2, r3
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff72 	bl	8003672 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	461a      	mov	r2, r3
 8003794:	69b9      	ldr	r1, [r7, #24]
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe97 	bl	80034ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1a7      	bne.n	8003700 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <LL_RCC_GetSysClkSource>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <LL_RCC_GetSysClkSource+0x18>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <LL_RCC_GetAHBPrescaler>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <LL_RCC_GetAPB1Prescaler>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <LL_RCC_GetAPB1Prescaler+0x18>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <LL_RCC_GetAPB2Prescaler>:
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800

0800382c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LL_RCC_PLL_GetMainSource+0x18>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <LL_RCC_PLL_GetN+0x18>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40023800 	.word	0x40023800

08003864 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <LL_RCC_PLL_GetP+0x18>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800

08003880 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <LL_RCC_PLL_GetDivider+0x18>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80038a4:	f000 f820 	bl	80038e8 <RCC_GetSystemClockFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f840 	bl	8003938 <RCC_GetHCLKClockFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f84e 	bl	8003964 <RCC_GetPCLK1ClockFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f85a 	bl	800398c <RCC_GetPCLK2ClockFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60da      	str	r2, [r3, #12]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80038f2:	f7ff ff63 	bl	80037bc <LL_RCC_GetSysClkSource>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d00c      	beq.n	8003916 <RCC_GetSystemClockFreq+0x2e>
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d80f      	bhi.n	8003920 <RCC_GetSystemClockFreq+0x38>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <RCC_GetSystemClockFreq+0x22>
 8003904:	2b04      	cmp	r3, #4
 8003906:	d003      	beq.n	8003910 <RCC_GetSystemClockFreq+0x28>
 8003908:	e00a      	b.n	8003920 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <RCC_GetSystemClockFreq+0x48>)
 800390c:	607b      	str	r3, [r7, #4]
      break;
 800390e:	e00a      	b.n	8003926 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <RCC_GetSystemClockFreq+0x4c>)
 8003912:	607b      	str	r3, [r7, #4]
      break;
 8003914:	e007      	b.n	8003926 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003916:	2008      	movs	r0, #8
 8003918:	f000 f84c 	bl	80039b4 <RCC_PLL_GetFreqDomain_SYS>
 800391c:	6078      	str	r0, [r7, #4]
      break;
 800391e:	e002      	b.n	8003926 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <RCC_GetSystemClockFreq+0x48>)
 8003922:	607b      	str	r3, [r7, #4]
      break;
 8003924:	bf00      	nop
  }

  return frequency;
 8003926:	687b      	ldr	r3, [r7, #4]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003940:	f7ff ff4a 	bl	80037d8 <LL_RCC_GetAHBPrescaler>
 8003944:	4603      	mov	r3, r0
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <RCC_GetHCLKClockFreq+0x28>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	40d3      	lsrs	r3, r2
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	0800a408 	.word	0x0800a408

08003964 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800396c:	f7ff ff42 	bl	80037f4 <LL_RCC_GetAPB1Prescaler>
 8003970:	4603      	mov	r3, r0
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <RCC_GetPCLK1ClockFreq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	40d3      	lsrs	r3, r2
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0800a418 	.word	0x0800a418

0800398c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003994:	f7ff ff3c 	bl	8003810 <LL_RCC_GetAPB2Prescaler>
 8003998:	4603      	mov	r3, r0
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	461a      	mov	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	40d3      	lsrs	r3, r2
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	0800a418 	.word	0x0800a418

080039b4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80039c8:	f7ff ff30 	bl	800382c <LL_RCC_PLL_GetMainSource>
 80039cc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039da:	d003      	beq.n	80039e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80039dc:	e005      	b.n	80039ea <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80039e0:	617b      	str	r3, [r7, #20]
      break;
 80039e2:	e005      	b.n	80039f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80039e6:	617b      	str	r3, [r7, #20]
      break;
 80039e8:	e002      	b.n	80039f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80039ec:	617b      	str	r3, [r7, #20]
      break;
 80039ee:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d113      	bne.n	8003a1e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80039f6:	f7ff ff43 	bl	8003880 <LL_RCC_PLL_GetDivider>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fbb3 f4f2 	udiv	r4, r3, r2
 8003a02:	f7ff ff21 	bl	8003848 <LL_RCC_PLL_GetN>
 8003a06:	4603      	mov	r3, r0
 8003a08:	fb03 f404 	mul.w	r4, r3, r4
 8003a0c:	f7ff ff2a 	bl	8003864 <LL_RCC_PLL_GetP>
 8003a10:	4603      	mov	r3, r0
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	3301      	adds	r3, #1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a1c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003a1e:	693b      	ldr	r3, [r7, #16]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	615a      	str	r2, [r3, #20]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	b09f      	sub	sp, #124	; 0x7c
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6778      	str	r0, [r7, #116]	; 0x74
 8003aae:	6739      	str	r1, [r7, #112]	; 0x70
 8003ab0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aba:	f040 80bc 	bne.w	8003c36 <LL_USART_SetBaudRate+0x192>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	f04f 0500 	mov.w	r5, #0
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	eb12 0a02 	adds.w	sl, r2, r2
 8003ace:	eb43 0b03 	adc.w	fp, r3, r3
 8003ad2:	4652      	mov	r2, sl
 8003ad4:	465b      	mov	r3, fp
 8003ad6:	1912      	adds	r2, r2, r4
 8003ad8:	eb45 0303 	adc.w	r3, r5, r3
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	00d9      	lsls	r1, r3, #3
 8003ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aea:	00d0      	lsls	r0, r2, #3
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	1911      	adds	r1, r2, r4
 8003af2:	6639      	str	r1, [r7, #96]	; 0x60
 8003af4:	416b      	adcs	r3, r5
 8003af6:	667b      	str	r3, [r7, #100]	; 0x64
 8003af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	6339      	str	r1, [r7, #48]	; 0x30
 8003b04:	415b      	adcs	r3, r3
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
 8003b08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b10:	f7fc fbb6 	bl	8000280 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4ba9      	ldr	r3, [pc, #676]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	b29e      	uxth	r6, r3
 8003b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b28:	461c      	mov	r4, r3
 8003b2a:	f04f 0500 	mov.w	r5, #0
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b36:	415b      	adcs	r3, r3
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b3e:	1912      	adds	r2, r2, r4
 8003b40:	eb45 0303 	adc.w	r3, r5, r3
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	00d9      	lsls	r1, r3, #3
 8003b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b52:	00d0      	lsls	r0, r2, #3
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	1911      	adds	r1, r2, r4
 8003b5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b5c:	416b      	adcs	r3, r5
 8003b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	6239      	str	r1, [r7, #32]
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b74:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b78:	f7fc fb82 	bl	8000280 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4b8f      	ldr	r3, [pc, #572]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003b82:	fba3 1302 	umull	r1, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2164      	movs	r1, #100	; 0x64
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	3332      	adds	r3, #50	; 0x32
 8003b94:	4a8a      	ldr	r2, [pc, #552]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4433      	add	r3, r6
 8003baa:	b29e      	uxth	r6, r3
 8003bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	1894      	adds	r4, r2, r2
 8003bba:	61bc      	str	r4, [r7, #24]
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc4:	1812      	adds	r2, r2, r0
 8003bc6:	eb41 0303 	adc.w	r3, r1, r3
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	f04f 0500 	mov.w	r5, #0
 8003bd2:	00dd      	lsls	r5, r3, #3
 8003bd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bd8:	00d4      	lsls	r4, r2, #3
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	1814      	adds	r4, r2, r0
 8003be0:	653c      	str	r4, [r7, #80]	; 0x50
 8003be2:	414b      	adcs	r3, r1
 8003be4:	657b      	str	r3, [r7, #84]	; 0x54
 8003be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	6139      	str	r1, [r7, #16]
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bfe:	f7fc fb3f 	bl	8000280 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4b6e      	ldr	r3, [pc, #440]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003c08:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	2164      	movs	r1, #100	; 0x64
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	3332      	adds	r3, #50	; 0x32
 8003c1a:	4a69      	ldr	r2, [pc, #420]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4433      	add	r3, r6
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8003c34:	e0be      	b.n	8003db4 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c38:	461c      	mov	r4, r3
 8003c3a:	f04f 0500 	mov.w	r5, #0
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	eb12 0802 	adds.w	r8, r2, r2
 8003c46:	eb43 0903 	adc.w	r9, r3, r3
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	1912      	adds	r2, r2, r4
 8003c50:	eb45 0303 	adc.w	r3, r5, r3
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	00d9      	lsls	r1, r3, #3
 8003c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c62:	00d0      	lsls	r0, r2, #3
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	1911      	adds	r1, r2, r4
 8003c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c6c:	416b      	adcs	r3, r5
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c72:	4618      	mov	r0, r3
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	008b      	lsls	r3, r1, #2
 8003c82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c86:	0082      	lsls	r2, r0, #2
 8003c88:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c8c:	f7fc faf8 	bl	8000280 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003c96:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	b29e      	uxth	r6, r3
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	1894      	adds	r4, r2, r2
 8003cb0:	60bc      	str	r4, [r7, #8]
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cba:	1812      	adds	r2, r2, r0
 8003cbc:	eb41 0303 	adc.w	r3, r1, r3
 8003cc0:	f04f 0400 	mov.w	r4, #0
 8003cc4:	f04f 0500 	mov.w	r5, #0
 8003cc8:	00dd      	lsls	r5, r3, #3
 8003cca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cce:	00d4      	lsls	r4, r2, #3
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	1814      	adds	r4, r2, r0
 8003cd6:	643c      	str	r4, [r7, #64]	; 0x40
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	647b      	str	r3, [r7, #68]	; 0x44
 8003cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	008b      	lsls	r3, r1, #2
 8003cee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf2:	0082      	lsls	r2, r0, #2
 8003cf4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cf8:	f7fc fac2 	bl	8000280 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003d02:	fba3 1302 	umull	r1, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2164      	movs	r1, #100	; 0x64
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	3332      	adds	r3, #50	; 0x32
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4433      	add	r3, r6
 8003d26:	b29e      	uxth	r6, r3
 8003d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	1894      	adds	r4, r2, r2
 8003d36:	603c      	str	r4, [r7, #0]
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d40:	1812      	adds	r2, r2, r0
 8003d42:	eb41 0303 	adc.w	r3, r1, r3
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	f04f 0500 	mov.w	r5, #0
 8003d4e:	00dd      	lsls	r5, r3, #3
 8003d50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d54:	00d4      	lsls	r4, r2, #3
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	1814      	adds	r4, r2, r0
 8003d5c:	63bc      	str	r4, [r7, #56]	; 0x38
 8003d5e:	414b      	adcs	r3, r1
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d64:	4618      	mov	r0, r3
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	008b      	lsls	r3, r1, #2
 8003d74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d78:	0082      	lsls	r2, r0, #2
 8003d7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003d7e:	f7fc fa7f 	bl	8000280 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <LL_USART_SetBaudRate+0x31c>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4433      	add	r3, r6
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	377c      	adds	r7, #124	; 0x7c
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	51eb851f 	.word	0x51eb851f

08003dc4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fe2a 	bl	8003a30 <LL_USART_IsEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d15e      	bne.n	8003ea0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dea:	f023 030c 	bic.w	r3, r3, #12
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6851      	ldr	r1, [r2, #4]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	4311      	orrs	r1, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6992      	ldr	r2, [r2, #24]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fe21 	bl	8003a58 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fe2e 	bl	8003a7e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fd38 	bl	800389c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <LL_USART_Init+0xe8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d102      	bne.n	8003e3a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e021      	b.n	8003e7e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <LL_USART_Init+0xec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d102      	bne.n	8003e48 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e01a      	b.n	8003e7e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <LL_USART_Init+0xf0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d102      	bne.n	8003e56 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e013      	b.n	8003e7e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <LL_USART_Init+0xf4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d102      	bne.n	8003e64 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e00c      	b.n	8003e7e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <LL_USART_Init+0xf8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e005      	b.n	8003e7e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <LL_USART_Init+0xfc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69b9      	ldr	r1, [r7, #24]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fe02 	bl	8003aa4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40011000 	.word	0x40011000
 8003eb0:	40004400 	.word	0x40004400
 8003eb4:	40004800 	.word	0x40004800
 8003eb8:	40011400 	.word	0x40011400
 8003ebc:	40004c00 	.word	0x40004c00
 8003ec0:	40005000 	.word	0x40005000

08003ec4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <LL_SetSystemCoreClock+0x1c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6013      	str	r3, [r2, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef6:	2b84      	cmp	r3, #132	; 0x84
 8003ef8:	d005      	beq.n	8003f06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	3303      	adds	r3, #3
 8003f04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1a:	f3ef 8305 	mrs	r3, IPSR
 8003f1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f3c:	f001 fc02 	bl	8005744 <vTaskStartScheduler>
  
  return osOK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f48:	b089      	sub	sp, #36	; 0x24
 8003f4a:	af04      	add	r7, sp, #16
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <osThreadCreate+0x54>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01c      	beq.n	8003f9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685c      	ldr	r4, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681d      	ldr	r5, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691e      	ldr	r6, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffb6 	bl	8003ee4 <makeFreeRtosPriority>
 8003f78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f82:	9202      	str	r2, [sp, #8]
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	9100      	str	r1, [sp, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f001 f980 	bl	8005294 <xTaskCreateStatic>
 8003f94:	4603      	mov	r3, r0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e01c      	b.n	8003fd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685c      	ldr	r4, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fa6:	b29e      	uxth	r6, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ff98 	bl	8003ee4 <makeFreeRtosPriority>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	9200      	str	r2, [sp, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f001 f9c2 	bl	800534e <xTaskCreate>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d001      	beq.n	8003fd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fde <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 fae8 	bl	80055bc <vTaskDelete>
  return osOK;
 8003fec:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <osDelay+0x16>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e000      	b.n	800400e <osDelay+0x18>
 800400c:	2301      	movs	r3, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fb64 	bl	80056dc <vTaskDelay>
  
  return osOK;
 8004014:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800401e:	b580      	push	{r7, lr}
 8004020:	b086      	sub	sp, #24
 8004022:	af02      	add	r7, sp, #8
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10a      	bne.n	800404c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2203      	movs	r2, #3
 800403c:	9200      	str	r2, [sp, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	2001      	movs	r0, #1
 8004044:	f000 fa9a 	bl	800457c <xQueueGenericCreateStatic>
 8004048:	4603      	mov	r3, r0
 800404a:	e016      	b.n	800407a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	e014      	b.n	800407a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d110      	bne.n	8004078 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004056:	2203      	movs	r2, #3
 8004058:	2100      	movs	r1, #0
 800405a:	2001      	movs	r0, #1
 800405c:	f000 fb06 	bl	800466c <xQueueGenericCreate>
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <osSemaphoreCreate+0x56>
 8004068:	2300      	movs	r3, #0
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fb56 	bl	8004720 <xQueueGenericSend>
      return sema;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	e000      	b.n	800407a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004078:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	e03a      	b.n	8004112 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d103      	bne.n	80040b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e009      	b.n	80040c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80040c0:	2301      	movs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80040c4:	f7ff ff26 	bl	8003f14 <inHandlerMode>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d017      	beq.n	80040fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	461a      	mov	r2, r3
 80040d4:	2100      	movs	r1, #0
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 ff34 	bl	8004f44 <xQueueReceiveFromISR>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80040e2:	23ff      	movs	r3, #255	; 0xff
 80040e4:	e015      	b.n	8004112 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d011      	beq.n	8004110 <osSemaphoreWait+0x8c>
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <osSemaphoreWait+0x98>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	e008      	b.n	8004110 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fe13 	bl	8004d2c <xQueueSemaphoreTake>
 8004106:	4603      	mov	r3, r0
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800410c:	23ff      	movs	r3, #255	; 0xff
 800410e:	e000      	b.n	8004112 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004130:	f7ff fef0 	bl	8003f14 <inHandlerMode>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fc86 	bl	8004a52 <xQueueGiveFromISR>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d001      	beq.n	8004150 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800414c:	23ff      	movs	r3, #255	; 0xff
 800414e:	e017      	b.n	8004180 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <osSemaphoreRelease+0x5e>
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <osSemaphoreRelease+0x68>)
 8004158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	e00a      	b.n	800417e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004168:	2300      	movs	r3, #0
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fad6 	bl	8004720 <xQueueGenericSend>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800417a:	23ff      	movs	r3, #255	; 0xff
 800417c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b085      	sub	sp, #20
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <osMessageCreate+0x36>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2400      	movs	r4, #0
 80041b8:	9400      	str	r4, [sp, #0]
 80041ba:	f000 f9df 	bl	800457c <xQueueGenericCreateStatic>
 80041be:	4603      	mov	r3, r0
 80041c0:	e008      	b.n	80041d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	4619      	mov	r1, r3
 80041ce:	f000 fa4d 	bl	800466c <xQueueGenericCreate>
 80041d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <osMessagePut+0x1e>
    ticks = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80041fa:	f7ff fe8b 	bl	8003f14 <inHandlerMode>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d018      	beq.n	8004236 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004204:	f107 0210 	add.w	r2, r7, #16
 8004208:	f107 0108 	add.w	r1, r7, #8
 800420c:	2300      	movs	r3, #0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb84 	bl	800491c <xQueueGenericSendFromISR>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <osMessagePut+0x42>
      return osErrorOS;
 800421a:	23ff      	movs	r3, #255	; 0xff
 800421c:	e018      	b.n	8004250 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d014      	beq.n	800424e <osMessagePut+0x72>
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <osMessagePut+0x7c>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	e00b      	b.n	800424e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004236:	f107 0108 	add.w	r1, r7, #8
 800423a:	2300      	movs	r3, #0
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa6e 	bl	8004720 <xQueueGenericSend>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d001      	beq.n	800424e <osMessagePut+0x72>
      return osErrorOS;
 800424a:	23ff      	movs	r3, #255	; 0xff
 800424c:	e000      	b.n	8004250 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b08b      	sub	sp, #44	; 0x2c
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	617b      	str	r3, [r7, #20]
    return event;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	461c      	mov	r4, r3
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800428a:	e054      	b.n	8004336 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d103      	bne.n	80042a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
 80042a2:	e009      	b.n	80042b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <osMessageGet+0x5c>
      ticks = 1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80042b8:	f7ff fe2c 	bl	8003f14 <inHandlerMode>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01c      	beq.n	80042fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80042c2:	f107 0220 	add.w	r2, r7, #32
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	f000 fe38 	bl	8004f44 <xQueueReceiveFromISR>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80042da:	2310      	movs	r3, #16
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e001      	b.n	80042e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01d      	beq.n	8004326 <osMessageGet+0xca>
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <osMessageGet+0xe4>)
 80042ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	e014      	b.n	8004326 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	3304      	adds	r3, #4
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	4619      	mov	r1, r3
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f000 fc30 	bl	8004b6c <xQueueReceive>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004312:	2310      	movs	r3, #16
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e006      	b.n	8004326 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <osMessageGet+0xc6>
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <osMessageGet+0xc8>
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	461c      	mov	r4, r3
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	372c      	adds	r7, #44	; 0x2c
 800433a:	46bd      	mov	sp, r7
 800433c:	bd90      	pop	{r4, r7, pc}
 800433e:	bf00      	nop
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f103 0208 	add.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f103 0208 	add.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f103 0208 	add.w	r2, r3, #8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d103      	bne.n	8004406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e00c      	b.n	8004420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3308      	adds	r3, #8
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e002      	b.n	8004414 <vListInsert+0x2e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d2f6      	bcs.n	800440e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6892      	ldr	r2, [r2, #8]
 800446e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d103      	bne.n	800448c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044d6:	f002 f885 	bl	80065e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	3b01      	subs	r3, #1
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d114      	bne.n	8004556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3310      	adds	r3, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f001 fb45 	bl	8005bc8 <xTaskRemoveFromEventList>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <xQueueGenericReset+0xcc>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	e009      	b.n	800456a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fef2 	bl	8004344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff feed 	bl	8004344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f002 f86b 	bl	8006644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <xQueueGenericCreateStatic+0x52>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xQueueGenericCreateStatic+0x56>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericCreateStatic+0x58>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <xQueueGenericCreateStatic+0x7e>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericCreateStatic+0x82>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericCreateStatic+0x84>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800461a:	2348      	movs	r3, #72	; 0x48
 800461c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b48      	cmp	r3, #72	; 0x48
 8004622:	d00a      	beq.n	800463a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800463a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800464e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f83f 	bl	80046e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004664:	4618      	mov	r0, r3
 8004666:	3730      	adds	r7, #48	; 0x30
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	3348      	adds	r3, #72	; 0x48
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 f8bf 	bl	8006828 <pvPortMalloc>
 80046aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3348      	adds	r3, #72	; 0x48
 80046ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046c4:	79fa      	ldrb	r2, [r7, #7]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f805 	bl	80046e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046d6:	69bb      	ldr	r3, [r7, #24]
	}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800470e:	2101      	movs	r1, #1
 8004710:	69b8      	ldr	r0, [r7, #24]
 8004712:	f7ff fecb 	bl	80044ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	; 0x38
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800472e:	2300      	movs	r3, #0
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueGenericSend+0x32>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <xQueueGenericSend+0x40>
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <xQueueGenericSend+0x44>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <xQueueGenericSend+0x46>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <xQueueGenericSend+0x60>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x6e>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <xQueueGenericSend+0x72>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <xQueueGenericSend+0x74>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericSend+0x8e>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	623b      	str	r3, [r7, #32]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ae:	f001 fbc7 	bl	8005f40 <xTaskGetSchedulerState>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <xQueueGenericSend+0x9e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <xQueueGenericSend+0xa2>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericSend+0xa4>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericSend+0xbe>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	61fb      	str	r3, [r7, #28]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047de:	f001 ff01 	bl	80065e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <xQueueGenericSend+0xd4>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d129      	bne.n	8004848 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fa:	f000 fc3b 	bl	8005074 <prvCopyDataToQueue>
 80047fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f001 f9db 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004818:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <xQueueGenericSend+0x1f8>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	e00a      	b.n	8004840 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <xQueueGenericSend+0x1f8>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004840:	f001 ff00 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8004844:	2301      	movs	r3, #1
 8004846:	e063      	b.n	8004910 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800484e:	f001 fef9 	bl	8006644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004852:	2300      	movs	r3, #0
 8004854:	e05c      	b.n	8004910 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	4618      	mov	r0, r3
 8004862:	f001 fa13 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800486a:	f001 feeb 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800486e:	f000 ffc9 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004872:	f001 feb7 	bl	80065e4 <vPortEnterCritical>
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800487c:	b25b      	sxtb	r3, r3
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d103      	bne.n	800488c <xQueueGenericSend+0x16c>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004892:	b25b      	sxtb	r3, r3
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d103      	bne.n	80048a2 <xQueueGenericSend+0x182>
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a2:	f001 fecf 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048a6:	1d3a      	adds	r2, r7, #4
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fa02 	bl	8005cb8 <xTaskCheckForTimeOut>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d124      	bne.n	8004904 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048bc:	f000 fcd2 	bl	8005264 <prvIsQueueFull>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	3310      	adds	r3, #16
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f956 	bl	8005b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d6:	f000 fc5d 	bl	8005194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048da:	f000 ffa1 	bl	8005820 <xTaskResumeAll>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af7c 	bne.w	80047de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <xQueueGenericSend+0x1f8>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	e772      	b.n	80047de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fa:	f000 fc4b 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048fe:	f000 ff8f 	bl	8005820 <xTaskResumeAll>
 8004902:	e76c      	b.n	80047de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004906:	f000 fc45 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800490a:	f000 ff89 	bl	8005820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800490e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004910:	4618      	mov	r0, r3
 8004912:	3738      	adds	r7, #56	; 0x38
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b090      	sub	sp, #64	; 0x40
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <xQueueGenericSendFromISR+0x3c>
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xQueueGenericSendFromISR+0x40>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <xQueueGenericSendFromISR+0x42>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d103      	bne.n	8004986 <xQueueGenericSendFromISR+0x6a>
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <xQueueGenericSendFromISR+0x6e>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericSendFromISR+0x70>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	623b      	str	r3, [r7, #32]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049a6:	f001 feff 	bl	80067a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049aa:	f3ef 8211 	mrs	r2, BASEPRI
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	61fa      	str	r2, [r7, #28]
 80049c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <xQueueGenericSendFromISR+0xbc>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d12f      	bne.n	8004a38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049ee:	f000 fb41 	bl	8005074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d112      	bne.n	8004a22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d016      	beq.n	8004a32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	3324      	adds	r3, #36	; 0x24
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f8dd 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e007      	b.n	8004a32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a26:	3301      	adds	r3, #1
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	b25a      	sxtb	r2, r3
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a32:	2301      	movs	r3, #1
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a36:	e001      	b.n	8004a3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3740      	adds	r7, #64	; 0x40
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08e      	sub	sp, #56	; 0x38
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	623b      	str	r3, [r7, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <xQueueGiveFromISR+0x58>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <xQueueGiveFromISR+0x5c>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xQueueGiveFromISR+0x5e>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGiveFromISR+0x78>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	61bb      	str	r3, [r7, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aca:	f001 fe6d 	bl	80067a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004ace:	f3ef 8211 	mrs	r2, BASEPRI
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	617a      	str	r2, [r7, #20]
 8004ae4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004ae6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d22b      	bcs.n	8004b52 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d112      	bne.n	8004b3c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f850 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e007      	b.n	8004b4c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b40:	3301      	adds	r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	b25a      	sxtb	r2, r3
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	e001      	b.n	8004b56 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f383 8811 	msr	BASEPRI, r3
}
 8004b60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3738      	adds	r7, #56	; 0x38
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <xQueueReceive+0x30>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	623b      	str	r3, [r7, #32]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <xQueueReceive+0x3e>
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <xQueueReceive+0x42>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueReceive+0x44>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueReceive+0x5e>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	61fb      	str	r3, [r7, #28]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bca:	f001 f9b9 	bl	8005f40 <xTaskGetSchedulerState>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <xQueueReceive+0x6e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <xQueueReceive+0x72>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xQueueReceive+0x74>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <xQueueReceive+0x8e>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61bb      	str	r3, [r7, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bfa:	f001 fcf3 	bl	80065e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01f      	beq.n	8004c4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0e:	f000 fa9b 	bl	8005148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00f      	beq.n	8004c42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	3310      	adds	r3, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 ffce 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c32:	4b3d      	ldr	r3, [pc, #244]	; (8004d28 <xQueueReceive+0x1bc>)
 8004c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c42:	f001 fcff 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e069      	b.n	8004d1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c50:	f001 fcf8 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e062      	b.n	8004d1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 f812 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c6c:	f001 fcea 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c70:	f000 fdc8 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c74:	f001 fcb6 	bl	80065e4 <vPortEnterCritical>
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d103      	bne.n	8004c8e <xQueueReceive+0x122>
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d103      	bne.n	8004ca4 <xQueueReceive+0x138>
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca4:	f001 fcce 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca8:	1d3a      	adds	r2, r7, #4
 8004caa:	f107 0310 	add.w	r3, r7, #16
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f801 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d123      	bne.n	8004d04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbe:	f000 fabb 	bl	8005238 <prvIsQueueEmpty>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d017      	beq.n	8004cf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 ff55 	bl	8005b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd8:	f000 fa5c 	bl	8005194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cdc:	f000 fda0 	bl	8005820 <xTaskResumeAll>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d189      	bne.n	8004bfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <xQueueReceive+0x1bc>)
 8004ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	e780      	b.n	8004bfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfa:	f000 fa4b 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cfe:	f000 fd8f 	bl	8005820 <xTaskResumeAll>
 8004d02:	e77a      	b.n	8004bfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f000 fa45 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d0a:	f000 fd89 	bl	8005820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d10:	f000 fa92 	bl	8005238 <prvIsQueueEmpty>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f43f af6f 	beq.w	8004bfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3730      	adds	r7, #48	; 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08e      	sub	sp, #56	; 0x38
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	623b      	str	r3, [r7, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61fb      	str	r3, [r7, #28]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d7c:	f001 f8e0 	bl	8005f40 <xTaskGetSchedulerState>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <xQueueSemaphoreTake+0x60>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <xQueueSemaphoreTake+0x64>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <xQueueSemaphoreTake+0x66>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	61bb      	str	r3, [r7, #24]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dac:	f001 fc1a 	bl	80065e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d024      	beq.n	8004e06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dcc:	f001 fa60 	bl	8006290 <pvTaskIncrementMutexHeldCount>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00f      	beq.n	8004dfe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	3310      	adds	r3, #16
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fef0 	bl	8005bc8 <xTaskRemoveFromEventList>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <xQueueSemaphoreTake+0x214>)
 8004df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dfe:	f001 fc21 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e097      	b.n	8004f36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	617b      	str	r3, [r7, #20]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e28:	f001 fc0c 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e082      	b.n	8004f36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ff26 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e44:	f001 fbfe 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e48:	f000 fcdc 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e4c:	f001 fbca 	bl	80065e4 <vPortEnterCritical>
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d103      	bne.n	8004e66 <xQueueSemaphoreTake+0x13a>
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d103      	bne.n	8004e7c <xQueueSemaphoreTake+0x150>
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7c:	f001 fbe2 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e80:	463a      	mov	r2, r7
 8004e82:	f107 030c 	add.w	r3, r7, #12
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 ff15 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d132      	bne.n	8004efa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e96:	f000 f9cf 	bl	8005238 <prvIsQueueEmpty>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d026      	beq.n	8004eee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d109      	bne.n	8004ebc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ea8:	f001 fb9c 	bl	80065e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f863 	bl	8005f7c <xTaskPriorityInherit>
 8004eb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004eb8:	f001 fbc4 	bl	8006644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fe5b 	bl	8005b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ecc:	f000 f962 	bl	8005194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed0:	f000 fca6 	bl	8005820 <xTaskResumeAll>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f47f af68 	bne.w	8004dac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004edc:	4b18      	ldr	r3, [pc, #96]	; (8004f40 <xQueueSemaphoreTake+0x214>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	e75e      	b.n	8004dac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ef0:	f000 f950 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef4:	f000 fc94 	bl	8005820 <xTaskResumeAll>
 8004ef8:	e758      	b.n	8004dac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004efc:	f000 f94a 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f00:	f000 fc8e 	bl	8005820 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f06:	f000 f997 	bl	8005238 <prvIsQueueEmpty>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f43f af4d 	beq.w	8004dac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004f18:	f001 fb64 	bl	80065e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f1e:	f000 f891 	bl	8005044 <prvGetDisinheritPriorityAfterTimeout>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 f922 	bl	8006174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f30:	f001 fb88 	bl	8006644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3738      	adds	r7, #56	; 0x38
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08e      	sub	sp, #56	; 0x38
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	623b      	str	r3, [r7, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <xQueueReceiveFromISR+0x3a>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <xQueueReceiveFromISR+0x3e>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueReceiveFromISR+0x40>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61fb      	str	r3, [r7, #28]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f9e:	f001 fc03 	bl	80067a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	61ba      	str	r2, [r7, #24]
 8004fb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004fba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02f      	beq.n	800502a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd8:	f000 f8b6 	bl	8005148 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d112      	bne.n	8005014 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fde4 	bl	8005bc8 <xTaskRemoveFromEventList>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e007      	b.n	8005024 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	3301      	adds	r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	b25a      	sxtb	r2, r3
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005024:	2301      	movs	r3, #1
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
 8005028:	e001      	b.n	800502e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f383 8811 	msr	BASEPRI, r3
}
 8005038:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800503c:	4618      	mov	r0, r3
 800503e:	3738      	adds	r7, #56	; 0x38
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1c3 0307 	rsb	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e001      	b.n	8005066 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005066:	68fb      	ldr	r3, [r7, #12]
	}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d14d      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ffe2 	bl	8006068 <xTaskPriorityDisinherit>
 80050a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	e043      	b.n	8005136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d119      	bne.n	80050e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6858      	ldr	r0, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	f003 ffe4 	bl	800908c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d32b      	bcc.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	e026      	b.n	8005136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68d8      	ldr	r0, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	461a      	mov	r2, r3
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	f003 ffca 	bl	800908c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	425b      	negs	r3, r3
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d207      	bcs.n	8005124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	425b      	negs	r3, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d105      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3b01      	subs	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d303      	bcc.n	800517c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	461a      	mov	r2, r3
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f003 ff80 	bl	800908c <memcpy>
	}
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800519c:	f001 fa22 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a8:	e011      	b.n	80051ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd06 	bl	8005bc8 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051c2:	f000 fddb 	bl	8005d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dce9      	bgt.n	80051aa <prvUnlockQueue+0x16>
 80051d6:	e000      	b.n	80051da <prvUnlockQueue+0x46>
					break;
 80051d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051e2:	f001 fa2f 	bl	8006644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e6:	f001 f9fd 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f2:	e011      	b.n	8005218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3310      	adds	r3, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fce1 	bl	8005bc8 <xTaskRemoveFromEventList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800520c:	f000 fdb6 	bl	8005d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	3b01      	subs	r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dce9      	bgt.n	80051f4 <prvUnlockQueue+0x60>
 8005220:	e000      	b.n	8005224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	22ff      	movs	r2, #255	; 0xff
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800522c:	f001 fa0a 	bl	8006644 <vPortExitCritical>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f001 f9d0 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e001      	b.n	8005256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 f9f5 	bl	8006644 <vPortExitCritical>

	return xReturn;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 f9ba 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	429a      	cmp	r2, r3
 800527a:	d102      	bne.n	8005282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e001      	b.n	8005286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f001 f9dd 	bl	8006644 <vPortExitCritical>

	return xReturn;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08e      	sub	sp, #56	; 0x38
 8005298:	af04      	add	r7, sp, #16
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xTaskCreateStatic+0x2a>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xTaskCreateStatic+0x46>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61fb      	str	r3, [r7, #28]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052da:	2354      	movs	r3, #84	; 0x54
 80052dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b54      	cmp	r3, #84	; 0x54
 80052e2:	d00a      	beq.n	80052fa <xTaskCreateStatic+0x66>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	61bb      	str	r3, [r7, #24]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01e      	beq.n	8005340 <xTaskCreateStatic+0xac>
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800531a:	2300      	movs	r3, #0
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f850 	bl	80053d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533a:	f000 f8d5 	bl	80054e8 <prvAddNewTaskToReadyList>
 800533e:	e001      	b.n	8005344 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005344:	697b      	ldr	r3, [r7, #20]
	}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800534e:	b580      	push	{r7, lr}
 8005350:	b08c      	sub	sp, #48	; 0x30
 8005352:	af04      	add	r7, sp, #16
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fa60 	bl	8006828 <pvPortMalloc>
 8005368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005370:	2054      	movs	r0, #84	; 0x54
 8005372:	f001 fa59 	bl	8006828 <pvPortMalloc>
 8005376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
 8005384:	e005      	b.n	8005392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005386:	6978      	ldr	r0, [r7, #20]
 8005388:	f001 fb1a 	bl	80069c0 <vPortFree>
 800538c:	e001      	b.n	8005392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f80e 	bl	80053d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053bc:	69f8      	ldr	r0, [r7, #28]
 80053be:	f000 f893 	bl	80054e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	e002      	b.n	80053ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053ce:	69bb      	ldr	r3, [r7, #24]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	3b01      	subs	r3, #1
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <prvInitialiseNewTask+0x48>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	617b      	str	r3, [r7, #20]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01f      	beq.n	8005466 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e012      	b.n	8005452 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	7819      	ldrb	r1, [r3, #0]
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	3334      	adds	r3, #52	; 0x34
 800543c:	460a      	mov	r2, r1
 800543e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3301      	adds	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d9e9      	bls.n	800542c <prvInitialiseNewTask+0x54>
 8005458:	e000      	b.n	800545c <prvInitialiseNewTask+0x84>
			{
				break;
 800545a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005464:	e003      	b.n	800546e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	2b06      	cmp	r3, #6
 8005472:	d901      	bls.n	8005478 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005474:	2306      	movs	r3, #6
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe ff78 	bl	8004384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	3318      	adds	r3, #24
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe ff73 	bl	8004384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	f1c3 0207 	rsb	r2, r3, #7
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2200      	movs	r2, #0
 80054b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	69b8      	ldr	r0, [r7, #24]
 80054c8:	f000 ff5c 	bl	8006384 <pxPortInitialiseStack>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f0:	f001 f878 	bl	80065e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f4:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 80054fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005506:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800550c:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d110      	bne.n	8005536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005514:	f000 fc56 	bl	8005dc4 <prvInitialiseTaskLists>
 8005518:	e00d      	b.n	8005536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551a:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <prvAddNewTaskToReadyList+0xc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005522:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	429a      	cmp	r2, r3
 800552e:	d802      	bhi.n	8005536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <prvAddNewTaskToReadyList+0xc4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3301      	adds	r3, #1
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <prvAddNewTaskToReadyList+0xc4>)
 800553e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	2201      	movs	r2, #1
 8005546:	409a      	lsls	r2, r3
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <prvAddNewTaskToReadyList+0xc8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4313      	orrs	r3, r2
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <prvAddNewTaskToReadyList+0xc8>)
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <prvAddNewTaskToReadyList+0xcc>)
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f7fe ff18 	bl	800439e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800556e:	f001 f869 	bl	8006644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <prvAddNewTaskToReadyList+0xc0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00e      	beq.n	8005598 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d207      	bcs.n	8005598 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <prvAddNewTaskToReadyList+0xd0>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	200004fc 	.word	0x200004fc
 80055a4:	200003fc 	.word	0x200003fc
 80055a8:	20000508 	.word	0x20000508
 80055ac:	20000518 	.word	0x20000518
 80055b0:	20000504 	.word	0x20000504
 80055b4:	20000400 	.word	0x20000400
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80055c4:	f001 f80e 	bl	80065e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <vTaskDelete+0x18>
 80055ce:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <vTaskDelete+0xf8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	e000      	b.n	80055d6 <vTaskDelete+0x1a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3304      	adds	r3, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe ff3b 	bl	8004458 <uxListRemove>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d115      	bne.n	8005614 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4932      	ldr	r1, [pc, #200]	; (80056b8 <vTaskDelete+0xfc>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <vTaskDelete+0x58>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43da      	mvns	r2, r3
 800560a:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <vTaskDelete+0x100>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4013      	ands	r3, r2
 8005610:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <vTaskDelete+0x100>)
 8005612:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3318      	adds	r3, #24
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe ff19 	bl	8004458 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <vTaskDelete+0x104>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <vTaskDelete+0x104>)
 800562e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005630:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <vTaskDelete+0xf8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10b      	bne.n	8005652 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4820      	ldr	r0, [pc, #128]	; (80056c4 <vTaskDelete+0x108>)
 8005642:	f7fe feac 	bl	800439e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005646:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <vTaskDelete+0x10c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <vTaskDelete+0x10c>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e009      	b.n	8005666 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <vTaskDelete+0x110>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <vTaskDelete+0x110>)
 800565a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fc1f 	bl	8005ea0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005662:	f000 fc4d 	bl	8005f00 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005666:	f000 ffed 	bl	8006644 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <vTaskDelete+0x114>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01b      	beq.n	80056aa <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <vTaskDelete+0xf8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d116      	bne.n	80056aa <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <vTaskDelete+0x118>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <vTaskDelete+0xde>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60bb      	str	r3, [r7, #8]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <vTaskDelete+0x11c>)
 800569c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200003fc 	.word	0x200003fc
 80056b8:	20000400 	.word	0x20000400
 80056bc:	20000504 	.word	0x20000504
 80056c0:	20000518 	.word	0x20000518
 80056c4:	200004d0 	.word	0x200004d0
 80056c8:	200004e4 	.word	0x200004e4
 80056cc:	200004fc 	.word	0x200004fc
 80056d0:	20000508 	.word	0x20000508
 80056d4:	20000524 	.word	0x20000524
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d017      	beq.n	800571e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <vTaskDelay+0x60>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <vTaskDelay+0x30>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800570c:	f000 f87a 	bl	8005804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005710:	2100      	movs	r1, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fdd0 	bl	80062b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005718:	f000 f882 	bl	8005820 <xTaskResumeAll>
 800571c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <vTaskDelay+0x64>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000524 	.word	0x20000524
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005752:	463a      	mov	r2, r7
 8005754:	1d39      	adds	r1, r7, #4
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	4618      	mov	r0, r3
 800575c:	f7fa ff0c 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	9202      	str	r2, [sp, #8]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	2300      	movs	r3, #0
 8005770:	460a      	mov	r2, r1
 8005772:	491e      	ldr	r1, [pc, #120]	; (80057ec <vTaskStartScheduler+0xa8>)
 8005774:	481e      	ldr	r0, [pc, #120]	; (80057f0 <vTaskStartScheduler+0xac>)
 8005776:	f7ff fd8d 	bl	8005294 <xTaskCreateStatic>
 800577a:	4603      	mov	r3, r0
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <vTaskStartScheduler+0xb0>)
 800577e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005780:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <vTaskStartScheduler+0xb0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005788:	2301      	movs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e001      	b.n	8005792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d116      	bne.n	80057c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <vTaskStartScheduler+0xb4>)
 80057ae:	f04f 32ff 	mov.w	r2, #4294967295
 80057b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <vTaskStartScheduler+0xb8>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <vTaskStartScheduler+0xbc>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c0:	f000 fe6e 	bl	80064a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c4:	e00e      	b.n	80057e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d10a      	bne.n	80057e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vTaskStartScheduler+0x9e>
}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	0800a230 	.word	0x0800a230
 80057f0:	08005d95 	.word	0x08005d95
 80057f4:	20000520 	.word	0x20000520
 80057f8:	2000051c 	.word	0x2000051c
 80057fc:	20000508 	.word	0x20000508
 8005800:	20000500 	.word	0x20000500

08005804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <vTaskSuspendAll+0x18>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a03      	ldr	r2, [pc, #12]	; (800581c <vTaskSuspendAll+0x18>)
 8005810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000524 	.word	0x20000524

08005820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800582e:	4b41      	ldr	r3, [pc, #260]	; (8005934 <xTaskResumeAll+0x114>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <xTaskResumeAll+0x2c>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	603b      	str	r3, [r7, #0]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800584c:	f000 feca 	bl	80065e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005850:	4b38      	ldr	r3, [pc, #224]	; (8005934 <xTaskResumeAll+0x114>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	4a37      	ldr	r2, [pc, #220]	; (8005934 <xTaskResumeAll+0x114>)
 8005858:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <xTaskResumeAll+0x114>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d161      	bne.n	8005926 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <xTaskResumeAll+0x118>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d05d      	beq.n	8005926 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586a:	e02e      	b.n	80058ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586c:	4b33      	ldr	r3, [pc, #204]	; (800593c <xTaskResumeAll+0x11c>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3318      	adds	r3, #24
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fded 	bl	8004458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fde8 	bl	8004458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <xTaskResumeAll+0x120>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <xTaskResumeAll+0x120>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a27      	ldr	r2, [pc, #156]	; (8005944 <xTaskResumeAll+0x124>)
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe fd74 	bl	800439e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <xTaskResumeAll+0x128>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <xTaskResumeAll+0x12c>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <xTaskResumeAll+0x11c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1cc      	bne.n	800586c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058d8:	f000 fb12 	bl	8005f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058dc:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <xTaskResumeAll+0x130>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d010      	beq.n	800590a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058e8:	f000 f836 	bl	8005958 <xTaskIncrementTick>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <xTaskResumeAll+0x12c>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f1      	bne.n	80058e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <xTaskResumeAll+0x130>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <xTaskResumeAll+0x12c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <xTaskResumeAll+0x134>)
 8005918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005926:	f000 fe8d 	bl	8006644 <vPortExitCritical>

	return xAlreadyYielded;
 800592a:	68bb      	ldr	r3, [r7, #8]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000524 	.word	0x20000524
 8005938:	200004fc 	.word	0x200004fc
 800593c:	200004bc 	.word	0x200004bc
 8005940:	20000504 	.word	0x20000504
 8005944:	20000400 	.word	0x20000400
 8005948:	200003fc 	.word	0x200003fc
 800594c:	20000510 	.word	0x20000510
 8005950:	2000050c 	.word	0x2000050c
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <xTaskIncrementTick+0x144>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 808e 	bne.w	8005a88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800596c:	4b4c      	ldr	r3, [pc, #304]	; (8005aa0 <xTaskIncrementTick+0x148>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005974:	4a4a      	ldr	r2, [pc, #296]	; (8005aa0 <xTaskIncrementTick+0x148>)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d120      	bne.n	80059c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005980:	4b48      	ldr	r3, [pc, #288]	; (8005aa4 <xTaskIncrementTick+0x14c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskIncrementTick+0x46>
 80059a0:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <xTaskIncrementTick+0x14c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	4b40      	ldr	r3, [pc, #256]	; (8005aa8 <xTaskIncrementTick+0x150>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3e      	ldr	r2, [pc, #248]	; (8005aa4 <xTaskIncrementTick+0x14c>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4a3e      	ldr	r2, [pc, #248]	; (8005aa8 <xTaskIncrementTick+0x150>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <xTaskIncrementTick+0x154>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a3c      	ldr	r2, [pc, #240]	; (8005aac <xTaskIncrementTick+0x154>)
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	f000 fa9f 	bl	8005f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059c2:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d348      	bcc.n	8005a5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059cc:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <xTaskIncrementTick+0x14c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295
 80059dc:	601a      	str	r2, [r3, #0]
					break;
 80059de:	e03e      	b.n	8005a5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e0:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <xTaskIncrementTick+0x14c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d203      	bcs.n	8005a00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059f8:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <xTaskIncrementTick+0x158>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059fe:	e02e      	b.n	8005a5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fd27 	bl	8004458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	3318      	adds	r3, #24
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fd1e 	bl	8004458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <xTaskIncrementTick+0x15c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <xTaskIncrementTick+0x15c>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <xTaskIncrementTick+0x160>)
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7fe fcaa 	bl	800439e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <xTaskIncrementTick+0x164>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3b9      	bcc.n	80059cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5c:	e7b6      	b.n	80059cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5e:	4b17      	ldr	r3, [pc, #92]	; (8005abc <xTaskIncrementTick+0x164>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <xTaskIncrementTick+0x160>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d901      	bls.n	8005a7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <xTaskIncrementTick+0x168>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e004      	b.n	8005a92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <xTaskIncrementTick+0x16c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <xTaskIncrementTick+0x16c>)
 8005a90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a92:	697b      	ldr	r3, [r7, #20]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20000524 	.word	0x20000524
 8005aa0:	20000500 	.word	0x20000500
 8005aa4:	200004b4 	.word	0x200004b4
 8005aa8:	200004b8 	.word	0x200004b8
 8005aac:	20000514 	.word	0x20000514
 8005ab0:	2000051c 	.word	0x2000051c
 8005ab4:	20000504 	.word	0x20000504
 8005ab8:	20000400 	.word	0x20000400
 8005abc:	200003fc 	.word	0x200003fc
 8005ac0:	20000510 	.word	0x20000510
 8005ac4:	2000050c 	.word	0x2000050c

08005ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ace:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <vTaskSwitchContext+0xa4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ad6:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <vTaskSwitchContext+0xa8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005adc:	e03f      	b.n	8005b5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <vTaskSwitchContext+0xa8>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <vTaskSwitchContext+0xac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	fab3 f383 	clz	r3, r3
 8005af0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	f1c3 031f 	rsb	r3, r3, #31
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	491f      	ldr	r1, [pc, #124]	; (8005b78 <vTaskSwitchContext+0xb0>)
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vTaskSwitchContext+0x5a>
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <vTaskSwitchContext+0xb0>)
 8005b30:	4413      	add	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3308      	adds	r3, #8
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d104      	bne.n	8005b54 <vTaskSwitchContext+0x8c>
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <vTaskSwitchContext+0xb4>)
 8005b5c:	6013      	str	r3, [r2, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000524 	.word	0x20000524
 8005b70:	20000510 	.word	0x20000510
 8005b74:	20000504 	.word	0x20000504
 8005b78:	20000400 	.word	0x20000400
 8005b7c:	200003fc 	.word	0x200003fc

08005b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <vTaskPlaceOnEventList+0x44>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3318      	adds	r3, #24
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fe fc19 	bl	80043e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	6838      	ldr	r0, [r7, #0]
 8005bb8:	f000 fb7e 	bl	80062b8 <prvAddCurrentTaskToDelayedList>
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200003fc 	.word	0x200003fc

08005bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3318      	adds	r3, #24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fc2d 	bl	8004458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <xTaskRemoveFromEventList+0xac>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11c      	bne.n	8005c40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fc24 	bl	8004458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <xTaskRemoveFromEventList+0xb0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <xTaskRemoveFromEventList+0xb0>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <xTaskRemoveFromEventList+0xb4>)
 8005c30:	441a      	add	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fe fbb0 	bl	800439e <vListInsertEnd>
 8005c3e:	e005      	b.n	8005c4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3318      	adds	r3, #24
 8005c44:	4619      	mov	r1, r3
 8005c46:	480e      	ldr	r0, [pc, #56]	; (8005c80 <xTaskRemoveFromEventList+0xb8>)
 8005c48:	f7fe fba9 	bl	800439e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <xTaskRemoveFromEventList+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d905      	bls.n	8005c66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <xTaskRemoveFromEventList+0xc0>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e001      	b.n	8005c6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c6a:	697b      	ldr	r3, [r7, #20]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000524 	.word	0x20000524
 8005c78:	20000504 	.word	0x20000504
 8005c7c:	20000400 	.word	0x20000400
 8005c80:	200004bc 	.word	0x200004bc
 8005c84:	200003fc 	.word	0x200003fc
 8005c88:	20000510 	.word	0x20000510

08005c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vTaskInternalSetTimeOutState+0x24>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <vTaskInternalSetTimeOutState+0x28>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000514 	.word	0x20000514
 8005cb4:	20000500 	.word	0x20000500

08005cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	613b      	str	r3, [r7, #16]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cfa:	f000 fc73 	bl	80065e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d102      	bne.n	8005d1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e023      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <xTaskCheckForTimeOut+0xc0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d007      	beq.n	8005d3a <xTaskCheckForTimeOut+0x82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e015      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d20b      	bcs.n	8005d5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff9b 	bl	8005c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e004      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f000 fc6d 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000500 	.word	0x20000500
 8005d78:	20000514 	.word	0x20000514

08005d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <vTaskMissedYield+0x14>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000510 	.word	0x20000510

08005d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d9c:	f000 f852 	bl	8005e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvIdleTask+0x28>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d9f9      	bls.n	8005d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <prvIdleTask+0x2c>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005db8:	e7f0      	b.n	8005d9c <prvIdleTask+0x8>
 8005dba:	bf00      	nop
 8005dbc:	20000400 	.word	0x20000400
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	e00c      	b.n	8005dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <prvInitialiseTaskLists+0x60>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fab0 	bl	8004344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3301      	adds	r3, #1
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d9ef      	bls.n	8005dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005df2:	f7fe faa7 	bl	8004344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005df6:	480d      	ldr	r0, [pc, #52]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005df8:	f7fe faa4 	bl	8004344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dfc:	480c      	ldr	r0, [pc, #48]	; (8005e30 <prvInitialiseTaskLists+0x6c>)
 8005dfe:	f7fe faa1 	bl	8004344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e02:	480c      	ldr	r0, [pc, #48]	; (8005e34 <prvInitialiseTaskLists+0x70>)
 8005e04:	f7fe fa9e 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <prvInitialiseTaskLists+0x74>)
 8005e0a:	f7fe fa9b 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvInitialiseTaskLists+0x78>)
 8005e10:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <prvInitialiseTaskLists+0x7c>)
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000400 	.word	0x20000400
 8005e28:	2000048c 	.word	0x2000048c
 8005e2c:	200004a0 	.word	0x200004a0
 8005e30:	200004bc 	.word	0x200004bc
 8005e34:	200004d0 	.word	0x200004d0
 8005e38:	200004e8 	.word	0x200004e8
 8005e3c:	200004b4 	.word	0x200004b4
 8005e40:	200004b8 	.word	0x200004b8

08005e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4a:	e019      	b.n	8005e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e4c:	f000 fbca 	bl	80065e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <prvCheckTasksWaitingTermination+0x50>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fafb 	bl	8004458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e76:	f000 fbe5 	bl	8006644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f810 	bl	8005ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e1      	bne.n	8005e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200004d0 	.word	0x200004d0
 8005e98:	200004fc 	.word	0x200004fc
 8005e9c:	200004e4 	.word	0x200004e4

08005ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fd82 	bl	80069c0 <vPortFree>
				vPortFree( pxTCB );
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fd7f 	bl	80069c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec2:	e018      	b.n	8005ef6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d103      	bne.n	8005ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fd76 	bl	80069c0 <vPortFree>
	}
 8005ed4:	e00f      	b.n	8005ef6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d00a      	beq.n	8005ef6 <prvDeleteTCB+0x56>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <prvDeleteTCB+0x54>
	}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvResetNextTaskUnblockTime+0x38>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvResetNextTaskUnblockTime+0x3c>)
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295
 8005f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f18:	e008      	b.n	8005f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <prvResetNextTaskUnblockTime+0x38>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <prvResetNextTaskUnblockTime+0x3c>)
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	200004b4 	.word	0x200004b4
 8005f3c:	2000051c 	.word	0x2000051c

08005f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <xTaskGetSchedulerState+0x34>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	e008      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <xTaskGetSchedulerState+0x38>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	e001      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f66:	687b      	ldr	r3, [r7, #4]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000508 	.word	0x20000508
 8005f78:	20000524 	.word	0x20000524

08005f7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d05e      	beq.n	8006050 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4b31      	ldr	r3, [pc, #196]	; (800605c <xTaskPriorityInherit+0xe0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d24e      	bcs.n	800603e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db06      	blt.n	8005fb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa8:	4b2c      	ldr	r3, [pc, #176]	; (800605c <xTaskPriorityInherit+0xe0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	f1c3 0207 	rsb	r2, r3, #7
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6959      	ldr	r1, [r3, #20]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a26      	ldr	r2, [pc, #152]	; (8006060 <xTaskPriorityInherit+0xe4>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d12f      	bne.n	800602e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fa40 	bl	8004458 <uxListRemove>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43da      	mvns	r2, r3
 8005fea:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <xTaskPriorityInherit+0xe8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	4a1c      	ldr	r2, [pc, #112]	; (8006064 <xTaskPriorityInherit+0xe8>)
 8005ff2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <xTaskPriorityInherit+0xe0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	4b17      	ldr	r3, [pc, #92]	; (8006064 <xTaskPriorityInherit+0xe8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	4a15      	ldr	r2, [pc, #84]	; (8006064 <xTaskPriorityInherit+0xe8>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a10      	ldr	r2, [pc, #64]	; (8006060 <xTaskPriorityInherit+0xe4>)
 800601e:	441a      	add	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe f9b9 	bl	800439e <vListInsertEnd>
 800602c:	e004      	b.n	8006038 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <xTaskPriorityInherit+0xe0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e008      	b.n	8006050 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <xTaskPriorityInherit+0xe0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d201      	bcs.n	8006050 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006050:	68fb      	ldr	r3, [r7, #12]
	}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200003fc 	.word	0x200003fc
 8006060:	20000400 	.word	0x20000400
 8006064:	20000504 	.word	0x20000504

08006068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d06e      	beq.n	800615c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800607e:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <xTaskPriorityDisinherit+0x100>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d00a      	beq.n	800609e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60fb      	str	r3, [r7, #12]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60bb      	str	r3, [r7, #8]
}
 80060b8:	bf00      	nop
 80060ba:	e7fe      	b.n	80060ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d044      	beq.n	800615c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d140      	bne.n	800615c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3304      	adds	r3, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe f9ba 	bl	8004458 <uxListRemove>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d115      	bne.n	8006116 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	491f      	ldr	r1, [pc, #124]	; (800616c <xTaskPriorityDisinherit+0x104>)
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTaskPriorityDisinherit+0xae>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43da      	mvns	r2, r3
 800610c:	4b18      	ldr	r3, [pc, #96]	; (8006170 <xTaskPriorityDisinherit+0x108>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4013      	ands	r3, r2
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <xTaskPriorityDisinherit+0x108>)
 8006114:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f1c3 0207 	rsb	r2, r3, #7
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	2201      	movs	r2, #1
 8006130:	409a      	lsls	r2, r3
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <xTaskPriorityDisinherit+0x108>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <xTaskPriorityDisinherit+0x108>)
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <xTaskPriorityDisinherit+0x104>)
 800614a:	441a      	add	r2, r3
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fe f923 	bl	800439e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800615c:	697b      	ldr	r3, [r7, #20]
	}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200003fc 	.word	0x200003fc
 800616c:	20000400 	.word	0x20000400
 8006170:	20000504 	.word	0x20000504

08006174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006182:	2301      	movs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d077      	beq.n	800627c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60fb      	str	r3, [r7, #12]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d902      	bls.n	80061ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	e002      	b.n	80061c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d058      	beq.n	800627c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d153      	bne.n	800627c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d10a      	bne.n	80061f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60bb      	str	r3, [r7, #8]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	db04      	blt.n	8006212 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f1c3 0207 	rsb	r2, r3, #7
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6959      	ldr	r1, [r3, #20]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4a19      	ldr	r2, [pc, #100]	; (8006288 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006222:	4413      	add	r3, r2
 8006224:	4299      	cmp	r1, r3
 8006226:	d129      	bne.n	800627c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe f913 	bl	8004458 <uxListRemove>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	2201      	movs	r2, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43da      	mvns	r2, r3
 8006244:	4b11      	ldr	r3, [pc, #68]	; (800628c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4013      	ands	r3, r2
 800624a:	4a10      	ldr	r2, [pc, #64]	; (800628c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800624c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	2201      	movs	r2, #1
 8006254:	409a      	lsls	r2, r3
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4313      	orrs	r3, r2
 800625c:	4a0b      	ldr	r2, [pc, #44]	; (800628c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4a06      	ldr	r2, [pc, #24]	; (8006288 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800626e:	441a      	add	r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f7fe f891 	bl	800439e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800627c:	bf00      	nop
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200003fc 	.word	0x200003fc
 8006288:	20000400 	.word	0x20000400
 800628c:	20000504 	.word	0x20000504

08006290 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a2:	3201      	adds	r2, #1
 80062a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80062a6:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80062a8:	681b      	ldr	r3, [r3, #0]
	}
 80062aa:	4618      	mov	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	200003fc 	.word	0x200003fc

080062b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062c2:	4b29      	ldr	r3, [pc, #164]	; (8006368 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c8:	4b28      	ldr	r3, [pc, #160]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe f8c2 	bl	8004458 <uxListRemove>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	2201      	movs	r2, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43da      	mvns	r2, r3
 80062e8:	4b21      	ldr	r3, [pc, #132]	; (8006370 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4013      	ands	r3, r2
 80062ee:	4a20      	ldr	r2, [pc, #128]	; (8006370 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d10a      	bne.n	8006310 <prvAddCurrentTaskToDelayedList+0x58>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006300:	4b1a      	ldr	r3, [pc, #104]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	481a      	ldr	r0, [pc, #104]	; (8006374 <prvAddCurrentTaskToDelayedList+0xbc>)
 800630a:	f7fe f848 	bl	800439e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800630e:	e026      	b.n	800635e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006318:	4b14      	ldr	r3, [pc, #80]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	429a      	cmp	r2, r3
 8006326:	d209      	bcs.n	800633c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <prvAddCurrentTaskToDelayedList+0xc0>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe f856 	bl	80043e6 <vListInsert>
}
 800633a:	e010      	b.n	800635e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <prvAddCurrentTaskToDelayedList+0xc4>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7fe f84c 	bl	80043e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d202      	bcs.n	800635e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <prvAddCurrentTaskToDelayedList+0xc8>)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6013      	str	r3, [r2, #0]
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000500 	.word	0x20000500
 800636c:	200003fc 	.word	0x200003fc
 8006370:	20000504 	.word	0x20000504
 8006374:	200004e8 	.word	0x200004e8
 8006378:	200004b8 	.word	0x200004b8
 800637c:	200004b4 	.word	0x200004b4
 8006380:	2000051c 	.word	0x2000051c

08006384 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b04      	subs	r3, #4
 8006394:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800639c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b04      	subs	r3, #4
 80063b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063b4:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <pxPortInitialiseStack+0x64>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b14      	subs	r3, #20
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3b04      	subs	r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f06f 0202 	mvn.w	r2, #2
 80063d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3b20      	subs	r3, #32
 80063d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	080063ed 	.word	0x080063ed

080063ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <prvTaskExitError+0x54>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d00a      	beq.n	8006416 <prvTaskExitError+0x2a>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <prvTaskExitError+0x28>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	60bb      	str	r3, [r7, #8]
}
 8006428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800642a:	bf00      	nop
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0fc      	beq.n	800642c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000008 	.word	0x20000008
	...

08006450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <pxCurrentTCBConst2>)
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f380 8809 	msr	PSP, r0
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8811 	msr	BASEPRI, r0
 800646a:	4770      	bx	lr
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst2>:
 8006470:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <prvPortStartFirstTask+0x24>)
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f380 8808 	msr	MSP, r0
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8814 	msr	CONTROL, r0
 800648a:	b662      	cpsie	i
 800648c:	b661      	cpsie	f
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	df00      	svc	0
 8006498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800649a:	bf00      	nop
 800649c:	e000ed08 	.word	0xe000ed08

080064a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064a6:	4b46      	ldr	r3, [pc, #280]	; (80065c0 <xPortStartScheduler+0x120>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a46      	ldr	r2, [pc, #280]	; (80065c4 <xPortStartScheduler+0x124>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10a      	bne.n	80064c6 <xPortStartScheduler+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <xPortStartScheduler+0x120>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3f      	ldr	r2, [pc, #252]	; (80065c8 <xPortStartScheduler+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10a      	bne.n	80064e6 <xPortStartScheduler+0x46>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <xPortStartScheduler+0x12c>)
 80064e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <xPortStartScheduler+0x130>)
 800650c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xPortStartScheduler+0x134>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006514:	e009      	b.n	800652a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <xPortStartScheduler+0x134>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <xPortStartScheduler+0x134>)
 800651e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d0ef      	beq.n	8006516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <xPortStartScheduler+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1c3 0307 	rsb	r3, r3, #7
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00a      	beq.n	8006558 <xPortStartScheduler+0xb8>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <xPortStartScheduler+0x134>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <xPortStartScheduler+0x134>)
 8006560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <xPortStartScheduler+0x134>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <xPortStartScheduler+0x134>)
 800656c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <xPortStartScheduler+0x138>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <xPortStartScheduler+0x138>)
 800657c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <xPortStartScheduler+0x138>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <xPortStartScheduler+0x138>)
 8006588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800658c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800658e:	f000 f8dd 	bl	800674c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <xPortStartScheduler+0x13c>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006598:	f000 f8fc 	bl	8006794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800659c:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <xPortStartScheduler+0x140>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <xPortStartScheduler+0x140>)
 80065a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065a8:	f7ff ff66 	bl	8006478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ac:	f7ff fa8c 	bl	8005ac8 <vTaskSwitchContext>
	prvTaskExitError();
 80065b0:	f7ff ff1c 	bl	80063ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00
 80065c4:	410fc271 	.word	0x410fc271
 80065c8:	410fc270 	.word	0x410fc270
 80065cc:	e000e400 	.word	0xe000e400
 80065d0:	20000528 	.word	0x20000528
 80065d4:	2000052c 	.word	0x2000052c
 80065d8:	e000ed20 	.word	0xe000ed20
 80065dc:	20000008 	.word	0x20000008
 80065e0:	e000ef34 	.word	0xe000ef34

080065e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	607b      	str	r3, [r7, #4]
}
 80065fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <vPortEnterCritical+0x58>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <vPortEnterCritical+0x58>)
 8006606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <vPortEnterCritical+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10f      	bne.n	8006630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <vPortEnterCritical+0x5c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <vPortEnterCritical+0x4c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <vPortEnterCritical+0x4a>
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000008 	.word	0x20000008
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <vPortExitCritical+0x50>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vPortExitCritical+0x24>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	607b      	str	r3, [r7, #4]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vPortExitCritical+0x50>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <vPortExitCritical+0x50>)
 8006670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006672:	4b08      	ldr	r3, [pc, #32]	; (8006694 <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <vPortExitCritical+0x42>
 800667a:	2300      	movs	r3, #0
 800667c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f383 8811 	msr	BASEPRI, r3
}
 8006684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000008 	.word	0x20000008
	...

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	f380 8811 	msr	BASEPRI, r0
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f7ff f9fa 	bl	8005ac8 <vTaskSwitchContext>
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f380 8811 	msr	BASEPRI, r0
 80066dc:	bc09      	pop	{r0, r3}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f01e 0f10 	tst.w	lr, #16
 80066ea:	bf08      	it	eq
 80066ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f0:	f380 8809 	msr	PSP, r0
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst>:
 8006700:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	607b      	str	r3, [r7, #4]
}
 8006720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006722:	f7ff f919 	bl	8005958 <xTaskIncrementTick>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <SysTick_Handler+0x40>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <vPortSetupTimerInterrupt+0x38>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <vPortSetupTimerInterrupt+0x40>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <vPortSetupTimerInterrupt+0x44>)
 800676a:	3b01      	subs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	e000e010 	.word	0xe000e010
 8006784:	e000e018 	.word	0xe000e018
 8006788:	20000000 	.word	0x20000000
 800678c:	10624dd3 	.word	0x10624dd3
 8006790:	e000e014 	.word	0xe000e014

08006794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067a4 <vPortEnableVFP+0x10>
 8006798:	6801      	ldr	r1, [r0, #0]
 800679a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800679e:	6001      	str	r1, [r0, #0]
 80067a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067a2:	bf00      	nop
 80067a4:	e000ed88 	.word	0xe000ed88

080067a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d914      	bls.n	80067e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <vPortValidateInterruptPriority+0x70>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067c4:	4b15      	ldr	r3, [pc, #84]	; (800681c <vPortValidateInterruptPriority+0x74>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	7afa      	ldrb	r2, [r7, #11]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d20a      	bcs.n	80067e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067e4:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <vPortValidateInterruptPriority+0x78>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <vPortValidateInterruptPriority+0x7c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d90a      	bls.n	800680a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	603b      	str	r3, [r7, #0]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <vPortValidateInterruptPriority+0x60>
	}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000e3f0 	.word	0xe000e3f0
 800681c:	20000528 	.word	0x20000528
 8006820:	e000ed0c 	.word	0xe000ed0c
 8006824:	2000052c 	.word	0x2000052c

08006828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006834:	f7fe ffe6 	bl	8005804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006838:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <pvPortMalloc+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006840:	f000 f920 	bl	8006a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <pvPortMalloc+0x184>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8093 	bne.w	8006978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01d      	beq.n	8006894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006858:	2208      	movs	r2, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	3308      	adds	r3, #8
 8006872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0x6c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06e      	beq.n	8006978 <pvPortMalloc+0x150>
 800689a:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <pvPortMalloc+0x188>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d869      	bhi.n	8006978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <pvPortMalloc+0x18c>)
 80068a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068a8:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x18c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ae:	e004      	b.n	80068ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <pvPortMalloc+0xa4>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f1      	bne.n	80068b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <pvPortMalloc+0x180>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d050      	beq.n	8006978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	4413      	add	r3, r2
 80068de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	2308      	movs	r3, #8
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d91f      	bls.n	8006938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <pvPortMalloc+0xf8>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	613b      	str	r3, [r7, #16]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	f000 f908 	bl	8006b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <pvPortMalloc+0x188>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <pvPortMalloc+0x188>)
 8006944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <pvPortMalloc+0x188>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <pvPortMalloc+0x190>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <pvPortMalloc+0x188>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <pvPortMalloc+0x190>)
 8006958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x184>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	431a      	orrs	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x194>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <pvPortMalloc+0x194>)
 8006976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006978:	f7fe ff52 	bl	8005820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <pvPortMalloc+0x174>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0x172>
	return pvReturn;
 800699c:	69fb      	ldr	r3, [r7, #28]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20004138 	.word	0x20004138
 80069ac:	2000414c 	.word	0x2000414c
 80069b0:	2000413c 	.word	0x2000413c
 80069b4:	20004130 	.word	0x20004130
 80069b8:	20004140 	.word	0x20004140
 80069bc:	20004144 	.word	0x20004144

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <vPortFree+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <vPortFree+0x44>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <vPortFree+0x62>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60bb      	str	r3, [r7, #8]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <vPortFree+0xb8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01e      	beq.n	8006a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <vPortFree+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7fe fedc 	bl	8005804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vPortFree+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <vPortFree+0xbc>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f874 	bl	8006b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <vPortFree+0xc0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vPortFree+0xc0>)
 8006a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a6a:	f7fe fed9 	bl	8005820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000414c 	.word	0x2000414c
 8006a7c:	2000413c 	.word	0x2000413c
 8006a80:	20004148 	.word	0x20004148

08006a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <prvHeapInit+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <prvHeapInit+0xac>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <prvHeapInit+0xb0>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <prvHeapInit+0xb0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvHeapInit+0xb4>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <prvHeapInit+0xb8>)
 8006b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <prvHeapInit+0xbc>)
 8006b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvHeapInit+0xc0>)
 8006b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20000530 	.word	0x20000530
 8006b34:	20004130 	.word	0x20004130
 8006b38:	20004138 	.word	0x20004138
 8006b3c:	20004140 	.word	0x20004140
 8006b40:	2000413c 	.word	0x2000413c
 8006b44:	2000414c 	.word	0x2000414c

08006b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvInsertBlockIntoFreeList+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x14>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f7      	bhi.n	8006b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d118      	bne.n	8006bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00d      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e008      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d002      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20004130 	.word	0x20004130
 8006bf8:	20004138 	.word	0x20004138

08006bfc <__NVIC_GetPriorityGrouping>:
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <__NVIC_GetPriorityGrouping+0x18>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	f003 0307 	and.w	r3, r3, #7
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	e000ed00 	.word	0xe000ed00

08006c18 <__NVIC_EnableIRQ>:
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db0b      	blt.n	8006c42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	f003 021f 	and.w	r2, r3, #31
 8006c30:	4907      	ldr	r1, [pc, #28]	; (8006c50 <__NVIC_EnableIRQ+0x38>)
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	2001      	movs	r0, #1
 8006c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	e000e100 	.word	0xe000e100

08006c54 <__NVIC_SetPriority>:
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	db0a      	blt.n	8006c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	490c      	ldr	r1, [pc, #48]	; (8006ca0 <__NVIC_SetPriority+0x4c>)
 8006c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c72:	0112      	lsls	r2, r2, #4
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	440b      	add	r3, r1
 8006c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c7c:	e00a      	b.n	8006c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	4908      	ldr	r1, [pc, #32]	; (8006ca4 <__NVIC_SetPriority+0x50>)
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	3b04      	subs	r3, #4
 8006c8c:	0112      	lsls	r2, r2, #4
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	440b      	add	r3, r1
 8006c92:	761a      	strb	r2, [r3, #24]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	e000e100 	.word	0xe000e100
 8006ca4:	e000ed00 	.word	0xe000ed00

08006ca8 <NVIC_EncodePriority>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	; 0x24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f1c3 0307 	rsb	r3, r3, #7
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	bf28      	it	cs
 8006cc6:	2304      	movcs	r3, #4
 8006cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2b06      	cmp	r3, #6
 8006cd0:	d902      	bls.n	8006cd8 <NVIC_EncodePriority+0x30>
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3b03      	subs	r3, #3
 8006cd6:	e000      	b.n	8006cda <NVIC_EncodePriority+0x32>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	401a      	ands	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfa:	43d9      	mvns	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d00:	4313      	orrs	r3, r2
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3724      	adds	r7, #36	; 0x24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <LL_DMA_EnableStream>:
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <LL_DMA_EnableStream+0x3c>)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	4413      	add	r3, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4908      	ldr	r1, [pc, #32]	; (8006d4c <LL_DMA_EnableStream+0x3c>)
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	440a      	add	r2, r1
 8006d30:	7812      	ldrb	r2, [r2, #0]
 8006d32:	4611      	mov	r1, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	440a      	add	r2, r1
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6013      	str	r3, [r2, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	0800a428 	.word	0x0800a428

08006d50 <LL_DMA_DisableStream>:
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <LL_DMA_DisableStream+0x3c>)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4413      	add	r3, r2
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4908      	ldr	r1, [pc, #32]	; (8006d8c <LL_DMA_DisableStream+0x3c>)
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	440a      	add	r2, r1
 8006d70:	7812      	ldrb	r2, [r2, #0]
 8006d72:	4611      	mov	r1, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	440a      	add	r2, r1
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	6013      	str	r3, [r2, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	0800a428 	.word	0x0800a428

08006d90 <LL_DMA_IsEnabledStream>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	; (8006dc4 <LL_DMA_IsEnabledStream+0x34>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	4413      	add	r3, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	bf0c      	ite	eq
 8006db2:	2301      	moveq	r3, #1
 8006db4:	2300      	movne	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	0800a428 	.word	0x0800a428

08006dc8 <LL_DMA_SetDataTransferDirection>:
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <LL_DMA_SetDataTransferDirection+0x44>)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006de8:	4908      	ldr	r1, [pc, #32]	; (8006e0c <LL_DMA_SetDataTransferDirection+0x44>)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	440b      	add	r3, r1
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	440b      	add	r3, r1
 8006df6:	4619      	mov	r1, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	0800a428 	.word	0x0800a428

08006e10 <LL_DMA_SetMode>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8006e1c:	4a0d      	ldr	r2, [pc, #52]	; (8006e54 <LL_DMA_SetMode+0x44>)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8006e30:	4908      	ldr	r1, [pc, #32]	; (8006e54 <LL_DMA_SetMode+0x44>)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	440b      	add	r3, r1
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	440b      	add	r3, r1
 8006e3e:	4619      	mov	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	0800a428 	.word	0x0800a428

08006e58 <LL_DMA_SetPeriphIncMode>:
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8006e64:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <LL_DMA_SetPeriphIncMode+0x44>)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4413      	add	r3, r2
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e78:	4908      	ldr	r1, [pc, #32]	; (8006e9c <LL_DMA_SetPeriphIncMode+0x44>)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	440b      	add	r3, r1
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	440b      	add	r3, r1
 8006e86:	4619      	mov	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	0800a428 	.word	0x0800a428

08006ea0 <LL_DMA_SetMemoryIncMode>:
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8006eac:	4a0d      	ldr	r2, [pc, #52]	; (8006ee4 <LL_DMA_SetMemoryIncMode+0x44>)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ec0:	4908      	ldr	r1, [pc, #32]	; (8006ee4 <LL_DMA_SetMemoryIncMode+0x44>)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	440b      	add	r3, r1
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	440b      	add	r3, r1
 8006ece:	4619      	mov	r1, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	0800a428 	.word	0x0800a428

08006ee8 <LL_DMA_SetPeriphSize>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <LL_DMA_SetPeriphSize+0x44>)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006f08:	4908      	ldr	r1, [pc, #32]	; (8006f2c <LL_DMA_SetPeriphSize+0x44>)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	440b      	add	r3, r1
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	440b      	add	r3, r1
 8006f16:	4619      	mov	r1, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	600b      	str	r3, [r1, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	0800a428 	.word	0x0800a428

08006f30 <LL_DMA_SetMemorySize>:
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8006f3c:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <LL_DMA_SetMemorySize+0x44>)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4413      	add	r3, r2
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8006f50:	4908      	ldr	r1, [pc, #32]	; (8006f74 <LL_DMA_SetMemorySize+0x44>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	440b      	add	r3, r1
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	440b      	add	r3, r1
 8006f5e:	4619      	mov	r1, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	0800a428 	.word	0x0800a428

08006f78 <LL_DMA_SetStreamPriorityLevel>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4413      	add	r3, r2
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f98:	4908      	ldr	r1, [pc, #32]	; (8006fbc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	440b      	add	r3, r1
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	440b      	add	r3, r1
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	0800a428 	.word	0x0800a428

08006fc0 <LL_DMA_SetDataLength>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <LL_DMA_SetDataLength+0x44>)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	4908      	ldr	r1, [pc, #32]	; (8007004 <LL_DMA_SetDataLength+0x44>)
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	0800a428 	.word	0x0800a428

08007008 <LL_DMA_GetDataLength>:
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8007012:	4a07      	ldr	r2, [pc, #28]	; (8007030 <LL_DMA_GetDataLength+0x28>)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	4413      	add	r3, r2
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	b29b      	uxth	r3, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	0800a428 	.word	0x0800a428

08007034 <LL_DMA_SetChannelSelection>:
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8007040:	4a0d      	ldr	r2, [pc, #52]	; (8007078 <LL_DMA_SetChannelSelection+0x44>)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007054:	4908      	ldr	r1, [pc, #32]	; (8007078 <LL_DMA_SetChannelSelection+0x44>)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	440b      	add	r3, r1
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	4619      	mov	r1, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	440b      	add	r3, r1
 8007062:	4619      	mov	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4313      	orrs	r3, r2
 8007068:	600b      	str	r3, [r1, #0]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	0800a428 	.word	0x0800a428

0800707c <LL_DMA_DisableFifoMode>:
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <LL_DMA_DisableFifoMode+0x3c>)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4413      	add	r3, r2
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4908      	ldr	r1, [pc, #32]	; (80070b8 <LL_DMA_DisableFifoMode+0x3c>)
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	440a      	add	r2, r1
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	4611      	mov	r1, r2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	440a      	add	r2, r1
 80070a4:	f023 0304 	bic.w	r3, r3, #4
 80070a8:	6153      	str	r3, [r2, #20]
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	0800a428 	.word	0x0800a428

080070bc <LL_DMA_SetMemoryAddress>:
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80070c8:	4a07      	ldr	r2, [pc, #28]	; (80070e8 <LL_DMA_SetMemoryAddress+0x2c>)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4413      	add	r3, r2
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60d3      	str	r3, [r2, #12]
}
 80070dc:	bf00      	nop
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	0800a428 	.word	0x0800a428

080070ec <LL_DMA_SetPeriphAddress>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80070f8:	4a07      	ldr	r2, [pc, #28]	; (8007118 <LL_DMA_SetPeriphAddress+0x2c>)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6093      	str	r3, [r2, #8]
}
 800710c:	bf00      	nop
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	0800a428 	.word	0x0800a428

0800711c <LL_AHB1_GRP1_EnableClock>:
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007128:	4907      	ldr	r1, [pc, #28]	; (8007148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4313      	orrs	r3, r2
 800712e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4013      	ands	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40023800 	.word	0x40023800

0800714c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007158:	4907      	ldr	r1, [pc, #28]	; (8007178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4313      	orrs	r3, r2
 800715e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4013      	ands	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40023800 	.word	0x40023800

0800717c <LL_USART_Enable>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <LL_USART_Disable>:
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <LL_USART_IsEnabled>:
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <LL_USART_EnableRTSHWFlowCtrl>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	615a      	str	r2, [r3, #20]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <LL_USART_SetBaudRate>:
{
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b09f      	sub	sp, #124	; 0x7c
 800720a:	af00      	add	r7, sp, #0
 800720c:	6778      	str	r0, [r7, #116]	; 0x74
 800720e:	6739      	str	r1, [r7, #112]	; 0x70
 8007210:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007212:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800721a:	f040 80bc 	bne.w	8007396 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800721e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007220:	461c      	mov	r4, r3
 8007222:	f04f 0500 	mov.w	r5, #0
 8007226:	4622      	mov	r2, r4
 8007228:	462b      	mov	r3, r5
 800722a:	eb12 0a02 	adds.w	sl, r2, r2
 800722e:	eb43 0b03 	adc.w	fp, r3, r3
 8007232:	4652      	mov	r2, sl
 8007234:	465b      	mov	r3, fp
 8007236:	1912      	adds	r2, r2, r4
 8007238:	eb45 0303 	adc.w	r3, r5, r3
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	00d9      	lsls	r1, r3, #3
 8007246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800724a:	00d0      	lsls	r0, r2, #3
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	1911      	adds	r1, r2, r4
 8007252:	6639      	str	r1, [r7, #96]	; 0x60
 8007254:	416b      	adcs	r3, r5
 8007256:	667b      	str	r3, [r7, #100]	; 0x64
 8007258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800725a:	461a      	mov	r2, r3
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	1891      	adds	r1, r2, r2
 8007262:	6339      	str	r1, [r7, #48]	; 0x30
 8007264:	415b      	adcs	r3, r3
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
 8007268:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800726c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007270:	f7f9 f806 	bl	8000280 <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4ba9      	ldr	r3, [pc, #676]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 800727a:	fba3 2302 	umull	r2, r3, r3, r2
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	b29b      	uxth	r3, r3
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	b29e      	uxth	r6, r3
 8007286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007288:	461c      	mov	r4, r3
 800728a:	f04f 0500 	mov.w	r5, #0
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	1891      	adds	r1, r2, r2
 8007294:	62b9      	str	r1, [r7, #40]	; 0x28
 8007296:	415b      	adcs	r3, r3
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800729a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800729e:	1912      	adds	r2, r2, r4
 80072a0:	eb45 0303 	adc.w	r3, r5, r3
 80072a4:	f04f 0000 	mov.w	r0, #0
 80072a8:	f04f 0100 	mov.w	r1, #0
 80072ac:	00d9      	lsls	r1, r3, #3
 80072ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072b2:	00d0      	lsls	r0, r2, #3
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	1911      	adds	r1, r2, r4
 80072ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80072bc:	416b      	adcs	r3, r5
 80072be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072c2:	461a      	mov	r2, r3
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	1891      	adds	r1, r2, r2
 80072ca:	6239      	str	r1, [r7, #32]
 80072cc:	415b      	adcs	r3, r3
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072d4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80072d8:	f7f8 ffd2 	bl	8000280 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4b8f      	ldr	r3, [pc, #572]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 80072e2:	fba3 1302 	umull	r1, r3, r3, r2
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	2164      	movs	r1, #100	; 0x64
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	3332      	adds	r3, #50	; 0x32
 80072f4:	4a8a      	ldr	r2, [pc, #552]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007306:	b29b      	uxth	r3, r3
 8007308:	4433      	add	r3, r6
 800730a:	b29e      	uxth	r6, r3
 800730c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730e:	4618      	mov	r0, r3
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	1894      	adds	r4, r2, r2
 800731a:	61bc      	str	r4, [r7, #24]
 800731c:	415b      	adcs	r3, r3
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007324:	1812      	adds	r2, r2, r0
 8007326:	eb41 0303 	adc.w	r3, r1, r3
 800732a:	f04f 0400 	mov.w	r4, #0
 800732e:	f04f 0500 	mov.w	r5, #0
 8007332:	00dd      	lsls	r5, r3, #3
 8007334:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007338:	00d4      	lsls	r4, r2, #3
 800733a:	4622      	mov	r2, r4
 800733c:	462b      	mov	r3, r5
 800733e:	1814      	adds	r4, r2, r0
 8007340:	653c      	str	r4, [r7, #80]	; 0x50
 8007342:	414b      	adcs	r3, r1
 8007344:	657b      	str	r3, [r7, #84]	; 0x54
 8007346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007348:	461a      	mov	r2, r3
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	1891      	adds	r1, r2, r2
 8007350:	6139      	str	r1, [r7, #16]
 8007352:	415b      	adcs	r3, r3
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800735a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800735e:	f7f8 ff8f 	bl	8000280 <__aeabi_uldivmod>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4b6e      	ldr	r3, [pc, #440]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 8007368:	fba3 1302 	umull	r1, r3, r3, r2
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	2164      	movs	r1, #100	; 0x64
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	3332      	adds	r3, #50	; 0x32
 800737a:	4a69      	ldr	r2, [pc, #420]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	b29b      	uxth	r3, r3
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	b29b      	uxth	r3, r3
 800738a:	4433      	add	r3, r6
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	e0be      	b.n	8007514 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007398:	461c      	mov	r4, r3
 800739a:	f04f 0500 	mov.w	r5, #0
 800739e:	4622      	mov	r2, r4
 80073a0:	462b      	mov	r3, r5
 80073a2:	eb12 0802 	adds.w	r8, r2, r2
 80073a6:	eb43 0903 	adc.w	r9, r3, r3
 80073aa:	4642      	mov	r2, r8
 80073ac:	464b      	mov	r3, r9
 80073ae:	1912      	adds	r2, r2, r4
 80073b0:	eb45 0303 	adc.w	r3, r5, r3
 80073b4:	f04f 0000 	mov.w	r0, #0
 80073b8:	f04f 0100 	mov.w	r1, #0
 80073bc:	00d9      	lsls	r1, r3, #3
 80073be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073c2:	00d0      	lsls	r0, r2, #3
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	1911      	adds	r1, r2, r4
 80073ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80073cc:	416b      	adcs	r3, r5
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d2:	4618      	mov	r0, r3
 80073d4:	f04f 0100 	mov.w	r1, #0
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	008b      	lsls	r3, r1, #2
 80073e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073e6:	0082      	lsls	r2, r0, #2
 80073e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073ec:	f7f8 ff48 	bl	8000280 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4b4a      	ldr	r3, [pc, #296]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 80073f6:	fba3 2302 	umull	r2, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	b29e      	uxth	r6, r3
 8007402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007404:	4618      	mov	r0, r3
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	1894      	adds	r4, r2, r2
 8007410:	60bc      	str	r4, [r7, #8]
 8007412:	415b      	adcs	r3, r3
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800741a:	1812      	adds	r2, r2, r0
 800741c:	eb41 0303 	adc.w	r3, r1, r3
 8007420:	f04f 0400 	mov.w	r4, #0
 8007424:	f04f 0500 	mov.w	r5, #0
 8007428:	00dd      	lsls	r5, r3, #3
 800742a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800742e:	00d4      	lsls	r4, r2, #3
 8007430:	4622      	mov	r2, r4
 8007432:	462b      	mov	r3, r5
 8007434:	1814      	adds	r4, r2, r0
 8007436:	643c      	str	r4, [r7, #64]	; 0x40
 8007438:	414b      	adcs	r3, r1
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
 800743c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800743e:	4618      	mov	r0, r3
 8007440:	f04f 0100 	mov.w	r1, #0
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	008b      	lsls	r3, r1, #2
 800744e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007452:	0082      	lsls	r2, r0, #2
 8007454:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007458:	f7f8 ff12 	bl	8000280 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4b2f      	ldr	r3, [pc, #188]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 8007462:	fba3 1302 	umull	r1, r3, r3, r2
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	2164      	movs	r1, #100	; 0x64
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	3332      	adds	r3, #50	; 0x32
 8007474:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	b29b      	uxth	r3, r3
 800747e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007482:	b29b      	uxth	r3, r3
 8007484:	4433      	add	r3, r6
 8007486:	b29e      	uxth	r6, r3
 8007488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800748a:	4618      	mov	r0, r3
 800748c:	f04f 0100 	mov.w	r1, #0
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	1894      	adds	r4, r2, r2
 8007496:	603c      	str	r4, [r7, #0]
 8007498:	415b      	adcs	r3, r3
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a0:	1812      	adds	r2, r2, r0
 80074a2:	eb41 0303 	adc.w	r3, r1, r3
 80074a6:	f04f 0400 	mov.w	r4, #0
 80074aa:	f04f 0500 	mov.w	r5, #0
 80074ae:	00dd      	lsls	r5, r3, #3
 80074b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074b4:	00d4      	lsls	r4, r2, #3
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	1814      	adds	r4, r2, r0
 80074bc:	63bc      	str	r4, [r7, #56]	; 0x38
 80074be:	414b      	adcs	r3, r1
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074c4:	4618      	mov	r0, r3
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	008b      	lsls	r3, r1, #2
 80074d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074d8:	0082      	lsls	r2, r0, #2
 80074da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80074de:	f7f8 fecf 	bl	8000280 <__aeabi_uldivmod>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 80074e8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	2164      	movs	r1, #100	; 0x64
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	3332      	adds	r3, #50	; 0x32
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <LL_USART_SetBaudRate+0x31c>)
 80074fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	b29b      	uxth	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	b29b      	uxth	r3, r3
 800750a:	4433      	add	r3, r6
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007512:	609a      	str	r2, [r3, #8]
}
 8007514:	bf00      	nop
 8007516:	377c      	adds	r7, #124	; 0x7c
 8007518:	46bd      	mov	sp, r7
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	bf00      	nop
 8007520:	51eb851f 	.word	0x51eb851f

08007524 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	615a      	str	r2, [r3, #20]
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b80      	cmp	r3, #128	; 0x80
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f043 0210 	orr.w	r2, r3, #16
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	615a      	str	r2, [r3, #20]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <LL_GPIO_SetOutputPin>:
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	619a      	str	r2, [r3, #24]
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <LL_GPIO_ResetOutputPin>:
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	041a      	lsls	r2, r3, #16
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	619a      	str	r2, [r3, #24]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <sim7600_delay_ms>:
	LL_USART_EnableDMAReq_RX(USART1);
		while(!LL_USART_IsEnabledDMAReq_RX(USART1));*/
}

__STATIC_INLINE void sim7600_delay_ms(int _ms)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	osDelay(_ms);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc fcd9 	bl	8003ff6 <osDelay>
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <sim7600_powerON>:
mp3PacketStruct mp3Packet[mp3PacketSize];

//init gpio, uart, dma(no fifo, byte->byte)

void sim7600_powerON()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 8007650:	2101      	movs	r1, #1
 8007652:	480c      	ldr	r0, [pc, #48]	; (8007684 <sim7600_powerON+0x38>)
 8007654:	f7ff ffd1 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8007658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800765c:	f7ff ffea 	bl	8007634 <sim7600_delay_ms>

  Sim_PWR(0);
 8007660:	2101      	movs	r1, #1
 8007662:	4808      	ldr	r0, [pc, #32]	; (8007684 <sim7600_powerON+0x38>)
 8007664:	f7ff ffd7 	bl	8007616 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(500);
 8007668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800766c:	f7ff ffe2 	bl	8007634 <sim7600_delay_ms>

  Sim_PWR(1);
 8007670:	2101      	movs	r1, #1
 8007672:	4804      	ldr	r0, [pc, #16]	; (8007684 <sim7600_powerON+0x38>)
 8007674:	f7ff ffc1 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(20000);
 8007678:	f644 6020 	movw	r0, #20000	; 0x4e20
 800767c:	f7ff ffda 	bl	8007634 <sim7600_delay_ms>
}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40021000 	.word	0x40021000

08007688 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 800768c:	2101      	movs	r1, #1
 800768e:	480c      	ldr	r0, [pc, #48]	; (80076c0 <sim7600_powerOFF+0x38>)
 8007690:	f7ff ffb3 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8007694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007698:	f7ff ffcc 	bl	8007634 <sim7600_delay_ms>

  Sim_PWR(0);
 800769c:	2101      	movs	r1, #1
 800769e:	4808      	ldr	r0, [pc, #32]	; (80076c0 <sim7600_powerOFF+0x38>)
 80076a0:	f7ff ffb9 	bl	8007616 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(4000);
 80076a4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80076a8:	f7ff ffc4 	bl	8007634 <sim7600_delay_ms>

  Sim_PWR(1);
 80076ac:	2101      	movs	r1, #1
 80076ae:	4804      	ldr	r0, [pc, #16]	; (80076c0 <sim7600_powerOFF+0x38>)
 80076b0:	f7ff ffa3 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(20000); // ~ 3 minutes
 80076b4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80076b8:	f7ff ffbc 	bl	8007634 <sim7600_delay_ms>
}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40021000 	.word	0x40021000

080076c4 <sim7600_reset>:

void sim7600_reset()
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  Sim_RST(1);
 80076c8:	2104      	movs	r1, #4
 80076ca:	480c      	ldr	r0, [pc, #48]	; (80076fc <sim7600_reset+0x38>)
 80076cc:	f7ff ff95 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 80076d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076d4:	f7ff ffae 	bl	8007634 <sim7600_delay_ms>

  Sim_RST(0);
 80076d8:	2104      	movs	r1, #4
 80076da:	4808      	ldr	r0, [pc, #32]	; (80076fc <sim7600_reset+0x38>)
 80076dc:	f7ff ff9b 	bl	8007616 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(350);
 80076e0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80076e4:	f7ff ffa6 	bl	8007634 <sim7600_delay_ms>

  Sim_RST(1);
 80076e8:	2104      	movs	r1, #4
 80076ea:	4804      	ldr	r0, [pc, #16]	; (80076fc <sim7600_reset+0x38>)
 80076ec:	f7ff ff85 	bl	80075fa <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(2000);
 80076f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80076f4:	f7ff ff9e 	bl	8007634 <sim7600_delay_ms>
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000

08007700 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007706:	463b      	mov	r3, r7
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
 8007714:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8007716:	2010      	movs	r0, #16
 8007718:	f7ff fd00 	bl	800711c <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_SetOutputPin(GPIOE, pwrSIM_Pin | rstSIM_Pin | CTS_SIM_Pin);
 800771c:	2107      	movs	r1, #7
 800771e:	480b      	ldr	r0, [pc, #44]	; (800774c <sim7600_gpio_init+0x4c>)
 8007720:	f7ff ff6b 	bl	80075fa <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin | CTS_SIM_Pin;
 8007724:	2307      	movs	r3, #7
 8007726:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007728:	2301      	movs	r3, #1
 800772a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800772c:	2300      	movs	r3, #0
 800772e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007734:	2301      	movs	r3, #1
 8007736:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007738:	463b      	mov	r3, r7
 800773a:	4619      	mov	r1, r3
 800773c:	4803      	ldr	r0, [pc, #12]	; (800774c <sim7600_gpio_init+0x4c>)
 800773e:	f7fb ffc9 	bl	80036d4 <LL_GPIO_Init>
}
 8007742:	bf00      	nop
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000

08007750 <sim7600_init>:

void sim7600_init()
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b092      	sub	sp, #72	; 0x48
 8007754:	af00      	add	r7, sp, #0
  //init udp var
  // int i, limit = mp3PacketSize;
  // for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;

  sim_buff[sim_buff_size] = '\0'; //initialize last bytes to ensure end of string (with strstr at handle receive data)
 8007756:	4b74      	ldr	r3, [pc, #464]	; (8007928 <sim7600_init+0x1d8>)
 8007758:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800775c:	3308      	adds	r3, #8
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]

  //init semaphore to be ensure tx uart (share resource) use properly (place at main.c)
  osSemaphoreDef(BinSemsim7600UartTx);
 8007762:	2300      	movs	r3, #0
 8007764:	643b      	str	r3, [r7, #64]	; 0x40
 8007766:	2300      	movs	r3, #0
 8007768:	647b      	str	r3, [r7, #68]	; 0x44
  BinSemsim7600UartTxHandle = osSemaphoreCreate(osSemaphore(BinSemsim7600UartTx), 1);
 800776a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800776e:	2101      	movs	r1, #1
 8007770:	4618      	mov	r0, r3
 8007772:	f7fc fc54 	bl	800401e <osSemaphoreCreate>
 8007776:	4603      	mov	r3, r0
 8007778:	4a6c      	ldr	r2, [pc, #432]	; (800792c <sim7600_init+0x1dc>)
 800777a:	6013      	str	r3, [r2, #0]

  //semaphore to make sure that response is check properly
  osSemaphoreDef(BinSemPlayMp3);
 800777c:	2300      	movs	r3, #0
 800777e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemPlayMp3Handle = osSemaphoreCreate(osSemaphore(BinSemPlayMp3), 1);
 8007784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f7fc fc47 	bl	800401e <osSemaphoreCreate>
 8007790:	4603      	mov	r3, r0
 8007792:	4a67      	ldr	r2, [pc, #412]	; (8007930 <sim7600_init+0x1e0>)
 8007794:	6013      	str	r3, [r2, #0]

  sim7600_gpio_init();
 8007796:	f7ff ffb3 	bl	8007700 <sim7600_gpio_init>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779a:	f107 0320 	add.w	r3, r7, #32
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	609a      	str	r2, [r3, #8]
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	611a      	str	r2, [r3, #16]
 80077aa:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80077ac:	1d3b      	adds	r3, r7, #4
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	605a      	str	r2, [r3, #4]
 80077b4:	609a      	str	r2, [r3, #8]
 80077b6:	60da      	str	r2, [r3, #12]
 80077b8:	611a      	str	r2, [r3, #16]
 80077ba:	615a      	str	r2, [r3, #20]
 80077bc:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80077be:	2010      	movs	r0, #16
 80077c0:	f7ff fcc4 	bl	800714c <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80077c4:	2001      	movs	r0, #1
 80077c6:	f7ff fca9 	bl	800711c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80077ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80077ce:	f7ff fca5 	bl	800711c <LL_AHB1_GRP1_EnableClock>
       * USART1 GPIO Configuration
       *
       * PA9   ------> USART1_TX
       * PA10   ------> USART1_RX
       */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 80077d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80077d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80077d8:	2302      	movs	r3, #2
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077dc:	2303      	movs	r3, #3
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80077e4:	2301      	movs	r3, #1
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 80077e8:	2307      	movs	r3, #7
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ec:	f107 0320 	add.w	r3, r7, #32
 80077f0:	4619      	mov	r1, r3
 80077f2:	4850      	ldr	r0, [pc, #320]	; (8007934 <sim7600_init+0x1e4>)
 80077f4:	f7fb ff6e 	bl	80036d4 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80077f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077fc:	2102      	movs	r1, #2
 80077fe:	484e      	ldr	r0, [pc, #312]	; (8007938 <sim7600_init+0x1e8>)
 8007800:	f7ff fc18 	bl	8007034 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007804:	2200      	movs	r2, #0
 8007806:	2102      	movs	r1, #2
 8007808:	484b      	ldr	r0, [pc, #300]	; (8007938 <sim7600_init+0x1e8>)
 800780a:	f7ff fadd 	bl	8006dc8 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 800780e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007812:	2102      	movs	r1, #2
 8007814:	4848      	ldr	r0, [pc, #288]	; (8007938 <sim7600_init+0x1e8>)
 8007816:	f7ff fbaf 	bl	8006f78 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800781a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800781e:	2102      	movs	r1, #2
 8007820:	4845      	ldr	r0, [pc, #276]	; (8007938 <sim7600_init+0x1e8>)
 8007822:	f7ff faf5 	bl	8006e10 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8007826:	2200      	movs	r2, #0
 8007828:	2102      	movs	r1, #2
 800782a:	4843      	ldr	r0, [pc, #268]	; (8007938 <sim7600_init+0x1e8>)
 800782c:	f7ff fb14 	bl	8006e58 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8007830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007834:	2102      	movs	r1, #2
 8007836:	4840      	ldr	r0, [pc, #256]	; (8007938 <sim7600_init+0x1e8>)
 8007838:	f7ff fb32 	bl	8006ea0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800783c:	2200      	movs	r2, #0
 800783e:	2102      	movs	r1, #2
 8007840:	483d      	ldr	r0, [pc, #244]	; (8007938 <sim7600_init+0x1e8>)
 8007842:	f7ff fb51 	bl	8006ee8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8007846:	2200      	movs	r2, #0
 8007848:	2102      	movs	r1, #2
 800784a:	483b      	ldr	r0, [pc, #236]	; (8007938 <sim7600_init+0x1e8>)
 800784c:	f7ff fb70 	bl	8006f30 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8007850:	2102      	movs	r1, #2
 8007852:	4839      	ldr	r0, [pc, #228]	; (8007938 <sim7600_init+0x1e8>)
 8007854:	f7ff fc12 	bl	800707c <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8007858:	4a38      	ldr	r2, [pc, #224]	; (800793c <sim7600_init+0x1ec>)
 800785a:	2102      	movs	r1, #2
 800785c:	4836      	ldr	r0, [pc, #216]	; (8007938 <sim7600_init+0x1e8>)
 800785e:	f7ff fc45 	bl	80070ec <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buffer);
 8007862:	4b37      	ldr	r3, [pc, #220]	; (8007940 <sim7600_init+0x1f0>)
 8007864:	461a      	mov	r2, r3
 8007866:	2102      	movs	r1, #2
 8007868:	4833      	ldr	r0, [pc, #204]	; (8007938 <sim7600_init+0x1e8>)
 800786a:	f7ff fc27 	bl	80070bc <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buffer_size);
 800786e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007872:	2102      	movs	r1, #2
 8007874:	4830      	ldr	r0, [pc, #192]	; (8007938 <sim7600_init+0x1e8>)
 8007876:	f7ff fba3 	bl	8006fc0 <LL_DMA_SetDataLength>
  /* DMA interrupt init */
  //NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
  //NVIC_EnableIRQ(DMA2_Stream2_IRQn);

  /* USART configuration */
  USART_InitStruct.BaudRate = Sim7600BaudDefaul;
 800787a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800787e:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007880:	2300      	movs	r3, #0
 8007882:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007888:	2300      	movs	r3, #0
 800788a:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800788c:	230c      	movs	r3, #12
 800788e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007890:	2300      	movs	r3, #0
 8007892:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8007898:	1d3b      	adds	r3, r7, #4
 800789a:	4619      	mov	r1, r3
 800789c:	4829      	ldr	r0, [pc, #164]	; (8007944 <sim7600_init+0x1f4>)
 800789e:	f7fc fa91 	bl	8003dc4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80078a2:	4828      	ldr	r0, [pc, #160]	; (8007944 <sim7600_init+0x1f4>)
 80078a4:	f7ff fe3e 	bl	8007524 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 80078a8:	4826      	ldr	r0, [pc, #152]	; (8007944 <sim7600_init+0x1f4>)
 80078aa:	f7ff fe87 	bl	80075bc <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 80078ae:	4825      	ldr	r0, [pc, #148]	; (8007944 <sim7600_init+0x1f4>)
 80078b0:	f7ff fe74 	bl	800759c <LL_USART_EnableIT_IDLE>
  LL_USART_EnableRTSHWFlowCtrl(USART1);
 80078b4:	4823      	ldr	r0, [pc, #140]	; (8007944 <sim7600_init+0x1f4>)
 80078b6:	f7ff fc95 	bl	80071e4 <LL_USART_EnableRTSHWFlowCtrl>

  /* USART interrupt */
  //priority high (6) after spi and dma for vs1003
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 14, 0));
 80078ba:	f7ff f99f 	bl	8006bfc <__NVIC_GetPriorityGrouping>
 80078be:	4603      	mov	r3, r0
 80078c0:	2200      	movs	r2, #0
 80078c2:	210e      	movs	r1, #14
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff f9ef 	bl	8006ca8 <NVIC_EncodePriority>
 80078ca:	4603      	mov	r3, r0
 80078cc:	4619      	mov	r1, r3
 80078ce:	2025      	movs	r0, #37	; 0x25
 80078d0:	f7ff f9c0 	bl	8006c54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80078d4:	2025      	movs	r0, #37	; 0x25
 80078d6:	f7ff f99f 	bl	8006c18 <__NVIC_EnableIRQ>

  // Clear IDLE line flag
  volatile uint32_t tmpreg;
  tmpreg = usartSim7600->SR;
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <sim7600_init+0x1f8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	603b      	str	r3, [r7, #0]
  (void)tmpreg;
 80078e2:	683b      	ldr	r3, [r7, #0]
  tmpreg = usartSim7600->DR;
 80078e4:	4b18      	ldr	r3, [pc, #96]	; (8007948 <sim7600_init+0x1f8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	603b      	str	r3, [r7, #0]
  (void)tmpreg;
 80078ec:	683b      	ldr	r3, [r7, #0]

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80078ee:	2102      	movs	r1, #2
 80078f0:	4811      	ldr	r0, [pc, #68]	; (8007938 <sim7600_init+0x1e8>)
 80078f2:	f7ff fa0d 	bl	8006d10 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 80078f6:	4813      	ldr	r0, [pc, #76]	; (8007944 <sim7600_init+0x1f4>)
 80078f8:	f7ff fc40 	bl	800717c <LL_USART_Enable>

  //wait until USART DMA is ready
  while(!LL_USART_IsEnabled(USART1) || !LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2));
 80078fc:	bf00      	nop
 80078fe:	4811      	ldr	r0, [pc, #68]	; (8007944 <sim7600_init+0x1f4>)
 8007900:	f7ff fc5c 	bl	80071bc <LL_USART_IsEnabled>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f9      	beq.n	80078fe <sim7600_init+0x1ae>
 800790a:	2102      	movs	r1, #2
 800790c:	480a      	ldr	r0, [pc, #40]	; (8007938 <sim7600_init+0x1e8>)
 800790e:	f7ff fa3f 	bl	8006d90 <LL_DMA_IsEnabledStream>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0f2      	beq.n	80078fe <sim7600_init+0x1ae>

  //power off to debug (don't need to plug out sim7600)
  sim7600_powerOFF();
 8007918:	f7ff feb6 	bl	8007688 <sim7600_powerOFF>

  //power on sim7600
  sim7600_powerON();
 800791c:	f7ff fe96 	bl	800764c <sim7600_powerON>
}
 8007920:	bf00      	nop
 8007922:	3748      	adds	r7, #72	; 0x48
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200082d4 	.word	0x200082d4
 800792c:	200057d4 	.word	0x200057d4
 8007930:	200057bc 	.word	0x200057bc
 8007934:	40020000 	.word	0x40020000
 8007938:	40026400 	.word	0x40026400
 800793c:	40011004 	.word	0x40011004
 8007940:	2000442c 	.word	0x2000442c
 8007944:	40011000 	.word	0x40011000
 8007948:	2000000c 	.word	0x2000000c

0800794c <sim7600_config>:

bool Sim7600BasicConfigSuccess = false;

bool sim7600_config()
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  //osThreadResume(usart_rx_dmaHandle);

  Sim7600BasicConfigSuccess = false;
 8007950:	4b57      	ldr	r3, [pc, #348]	; (8007ab0 <sim7600_config+0x164>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
  //config until success (connect to server)

  //echo cmd off
  if (!sim7600_send_cmd("ATE0\r\n", "OK", "", 500))
 8007956:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800795a:	4a56      	ldr	r2, [pc, #344]	; (8007ab4 <sim7600_config+0x168>)
 800795c:	4956      	ldr	r1, [pc, #344]	; (8007ab8 <sim7600_config+0x16c>)
 800795e:	4857      	ldr	r0, [pc, #348]	; (8007abc <sim7600_config+0x170>)
 8007960:	f000 fad0 	bl	8007f04 <sim7600_send_cmd>
 8007964:	4603      	mov	r3, r0
 8007966:	f083 0301 	eor.w	r3, r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <sim7600_config+0x28>
    return false;
 8007970:	2300      	movs	r3, #0
 8007972:	e09a      	b.n	8007aaa <sim7600_config+0x15e>
  restartSimstatus = 0; //reset
 8007974:	4b52      	ldr	r3, [pc, #328]	; (8007ac0 <sim7600_config+0x174>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]

  //flow control AT+IFC=0,2 (CTS at sim , and RTS at stm32) at pin pe1
  if (!sim7600_send_cmd("AT+IFC=0,2\r\n", "OK", "", 500))
 800797a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800797e:	4a4d      	ldr	r2, [pc, #308]	; (8007ab4 <sim7600_config+0x168>)
 8007980:	494d      	ldr	r1, [pc, #308]	; (8007ab8 <sim7600_config+0x16c>)
 8007982:	4850      	ldr	r0, [pc, #320]	; (8007ac4 <sim7600_config+0x178>)
 8007984:	f000 fabe 	bl	8007f04 <sim7600_send_cmd>
 8007988:	4603      	mov	r3, r0
 800798a:	f083 0301 	eor.w	r3, r3, #1
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <sim7600_config+0x4c>
    return false;
 8007994:	2300      	movs	r3, #0
 8007996:	e088      	b.n	8007aaa <sim7600_config+0x15e>

  //change to main baudrate
  sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", Sim7600BaudMain);
 8007998:	4a4b      	ldr	r2, [pc, #300]	; (8007ac8 <sim7600_config+0x17c>)
 800799a:	494c      	ldr	r1, [pc, #304]	; (8007acc <sim7600_config+0x180>)
 800799c:	484c      	ldr	r0, [pc, #304]	; (8007ad0 <sim7600_config+0x184>)
 800799e:	f001 fc01 	bl	80091a4 <siprintf>
  if (!sim7600_send_cmd(sim7600_cmd_buff, "OK", "", 500))
 80079a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80079a6:	4a43      	ldr	r2, [pc, #268]	; (8007ab4 <sim7600_config+0x168>)
 80079a8:	4943      	ldr	r1, [pc, #268]	; (8007ab8 <sim7600_config+0x16c>)
 80079aa:	4849      	ldr	r0, [pc, #292]	; (8007ad0 <sim7600_config+0x184>)
 80079ac:	f000 faaa 	bl	8007f04 <sim7600_send_cmd>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f083 0301 	eor.w	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <sim7600_config+0x74>
    return false;
 80079bc:	2300      	movs	r3, #0
 80079be:	e074      	b.n	8007aaa <sim7600_config+0x15e>
  sim7600_change_baud(Sim7600BaudMain);
 80079c0:	4841      	ldr	r0, [pc, #260]	; (8007ac8 <sim7600_config+0x17c>)
 80079c2:	f001 f95f 	bl	8008c84 <sim7600_change_baud>

  //check sim
  if (!sim7600_send_cmd("at+ciccid\r\n", "OK", "", 500))
 80079c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80079ca:	4a3a      	ldr	r2, [pc, #232]	; (8007ab4 <sim7600_config+0x168>)
 80079cc:	493a      	ldr	r1, [pc, #232]	; (8007ab8 <sim7600_config+0x16c>)
 80079ce:	4841      	ldr	r0, [pc, #260]	; (8007ad4 <sim7600_config+0x188>)
 80079d0:	f000 fa98 	bl	8007f04 <sim7600_send_cmd>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f083 0301 	eor.w	r3, r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <sim7600_config+0x98>
    return false;
 80079e0:	2300      	movs	r3, #0
 80079e2:	e062      	b.n	8007aaa <sim7600_config+0x15e>
  if (!sim7600_send_cmd("at+csq\r\n", "OK", "", 500))
 80079e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80079e8:	4a32      	ldr	r2, [pc, #200]	; (8007ab4 <sim7600_config+0x168>)
 80079ea:	4933      	ldr	r1, [pc, #204]	; (8007ab8 <sim7600_config+0x16c>)
 80079ec:	483a      	ldr	r0, [pc, #232]	; (8007ad8 <sim7600_config+0x18c>)
 80079ee:	f000 fa89 	bl	8007f04 <sim7600_send_cmd>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f083 0301 	eor.w	r3, r3, #1
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <sim7600_config+0xb6>
    return false;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e053      	b.n	8007aaa <sim7600_config+0x15e>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_send_cmd("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", "", 500))
 8007a02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a06:	4a2b      	ldr	r2, [pc, #172]	; (8007ab4 <sim7600_config+0x168>)
 8007a08:	492b      	ldr	r1, [pc, #172]	; (8007ab8 <sim7600_config+0x16c>)
 8007a0a:	4834      	ldr	r0, [pc, #208]	; (8007adc <sim7600_config+0x190>)
 8007a0c:	f000 fa7a 	bl	8007f04 <sim7600_send_cmd>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f083 0301 	eor.w	r3, r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <sim7600_config+0xd4>
    return false;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e044      	b.n	8007aaa <sim7600_config+0x15e>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 12000(max)
  if (!sim7600_send_cmd("AT+CIPCCFG=10,0,0,1,1,0,3000\r\n", "OK", "", 500))
 8007a20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a24:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <sim7600_config+0x168>)
 8007a26:	4924      	ldr	r1, [pc, #144]	; (8007ab8 <sim7600_config+0x16c>)
 8007a28:	482d      	ldr	r0, [pc, #180]	; (8007ae0 <sim7600_config+0x194>)
 8007a2a:	f000 fa6b 	bl	8007f04 <sim7600_send_cmd>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f083 0301 	eor.w	r3, r3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <sim7600_config+0xf2>
    return false;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e035      	b.n	8007aaa <sim7600_config+0x15e>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPHEAD=1\r\n", "OK", "", 500))
 8007a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a42:	4a1c      	ldr	r2, [pc, #112]	; (8007ab4 <sim7600_config+0x168>)
 8007a44:	491c      	ldr	r1, [pc, #112]	; (8007ab8 <sim7600_config+0x16c>)
 8007a46:	4827      	ldr	r0, [pc, #156]	; (8007ae4 <sim7600_config+0x198>)
 8007a48:	f000 fa5c 	bl	8007f04 <sim7600_send_cmd>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f083 0301 	eor.w	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <sim7600_config+0x110>
    return false;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e026      	b.n	8007aaa <sim7600_config+0x15e>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPSRIP=0\r\n", "OK", "", 500))
 8007a5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a60:	4a14      	ldr	r2, [pc, #80]	; (8007ab4 <sim7600_config+0x168>)
 8007a62:	4915      	ldr	r1, [pc, #84]	; (8007ab8 <sim7600_config+0x16c>)
 8007a64:	4820      	ldr	r0, [pc, #128]	; (8007ae8 <sim7600_config+0x19c>)
 8007a66:	f000 fa4d 	bl	8007f04 <sim7600_send_cmd>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f083 0301 	eor.w	r3, r3, #1
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <sim7600_config+0x12e>
    return false;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e017      	b.n	8007aaa <sim7600_config+0x15e>

  Sim7600BasicConfigSuccess = true;
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <sim7600_config+0x164>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	701a      	strb	r2, [r3, #0]

  //open net
  if (!sim7600_open_network())
 8007a80:	f000 f86a 	bl	8007b58 <sim7600_open_network>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f083 0301 	eor.w	r3, r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <sim7600_config+0x148>
    return false;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e00a      	b.n	8007aaa <sim7600_config+0x15e>

  //open udp connect
  //create UDP connect socket at link 1, local port (mot important) 8080
  //AT+CIPOPEN=1,"UDP",,,8080 : \r\n+CIPOPEN: 1,0 or \r\n+CIPOPEN: 1,4
  if (!sim7600_open_udp_connect())
 8007a94:	f000 f8b4 	bl	8007c00 <sim7600_open_udp_connect>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f083 0301 	eor.w	r3, r3, #1
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <sim7600_config+0x15c>
    return false;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <sim7600_config+0x15e>
  //open TCP socket with domain
  // if (!sim7600_open_tcp_connect())
  //   return false;

  //success config
  return true;
 8007aa8:	2301      	movs	r3, #1
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20004159 	.word	0x20004159
 8007ab4:	0800a238 	.word	0x0800a238
 8007ab8:	0800a23c 	.word	0x0800a23c
 8007abc:	0800a240 	.word	0x0800a240
 8007ac0:	20004150 	.word	0x20004150
 8007ac4:	0800a248 	.word	0x0800a248
 8007ac8:	002dc6c0 	.word	0x002dc6c0
 8007acc:	0800a258 	.word	0x0800a258
 8007ad0:	20004364 	.word	0x20004364
 8007ad4:	0800a264 	.word	0x0800a264
 8007ad8:	0800a270 	.word	0x0800a270
 8007adc:	0800a27c 	.word	0x0800a27c
 8007ae0:	0800a2a0 	.word	0x0800a2a0
 8007ae4:	0800a2c0 	.word	0x0800a2c0
 8007ae8:	0800a2d0 	.word	0x0800a2d0

08007aec <sim7600_update_response>:
//param bool openWithIPv4
//return: 0-success, 1:TCP error(net is good but can't connect). 2:error need to start
//

void sim7600_update_response(const char* _res1, const char* _res2)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  res1Length = strlen(_res1);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f8 fb6a 	bl	80001d0 <strlen>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <sim7600_update_response+0x5c>)
 8007b02:	601a      	str	r2, [r3, #0]
  res2Length = strlen(_res2);
 8007b04:	6838      	ldr	r0, [r7, #0]
 8007b06:	f7f8 fb63 	bl	80001d0 <strlen>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <sim7600_update_response+0x60>)
 8007b10:	601a      	str	r2, [r3, #0]
  if(res1Length > 0)  res1 = _res1;
 8007b12:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <sim7600_update_response+0x5c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dd03      	ble.n	8007b22 <sim7600_update_response+0x36>
 8007b1a:	4a0d      	ldr	r2, [pc, #52]	; (8007b50 <sim7600_update_response+0x64>)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	e002      	b.n	8007b28 <sim7600_update_response+0x3c>
  else res1 = NULL;
 8007b22:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <sim7600_update_response+0x64>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
  if(res2Length > 0) res2 = _res2;
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <sim7600_update_response+0x60>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd03      	ble.n	8007b38 <sim7600_update_response+0x4c>
 8007b30:	4a08      	ldr	r2, [pc, #32]	; (8007b54 <sim7600_update_response+0x68>)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6013      	str	r3, [r2, #0]
  else res2 = NULL;
}
 8007b36:	e002      	b.n	8007b3e <sim7600_update_response+0x52>
  else res2 = NULL;
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <sim7600_update_response+0x68>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	2000428c 	.word	0x2000428c
 8007b4c:	20004298 	.word	0x20004298
 8007b50:	2000423c 	.word	0x2000423c
 8007b54:	20004230 	.word	0x20004230

08007b58 <sim7600_open_network>:

int sim7600_open_netStatus = 0; // 0 : success, 1 : send cmd
bool sim7600_open_network()
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007b5e:	4b21      	ldr	r3, [pc, #132]	; (8007be4 <sim7600_open_network+0x8c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f04f 31ff 	mov.w	r1, #4294967295
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fc fa8c 	bl	8004084 <osSemaphoreWait>

  sim7600_update_response("OK", "Network is already opened");
 8007b6c:	491e      	ldr	r1, [pc, #120]	; (8007be8 <sim7600_open_network+0x90>)
 8007b6e:	481f      	ldr	r0, [pc, #124]	; (8007bec <sim7600_open_network+0x94>)
 8007b70:	f7ff ffbc 	bl	8007aec <sim7600_update_response>

  sim7600_usart_send_string("AT+NETOPEN\r\n");
 8007b74:	481e      	ldr	r0, [pc, #120]	; (8007bf0 <sim7600_open_network+0x98>)
 8007b76:	f000 fa0b 	bl	8007f90 <sim7600_usart_send_string>

  sim7600_open_netStatus = 1;
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <sim7600_open_network+0x9c>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007b80:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <sim7600_open_network+0x8c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fc facb 	bl	8004120 <osSemaphoreRelease>

  int try = 24; // ~ 12s
 8007b8a:	2318      	movs	r3, #24
 8007b8c:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(500);
 8007b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b92:	f7ff fd4f 	bl	8007634 <sim7600_delay_ms>
    if (sim7600_open_netStatus == 0)
 8007b96:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <sim7600_open_network+0x9c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <sim7600_open_network+0x4e>
    {
      sim7600_network_IsOpen = true;
 8007b9e:	4b16      	ldr	r3, [pc, #88]	; (8007bf8 <sim7600_open_network+0xa0>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e005      	b.n	8007bb2 <sim7600_open_network+0x5a>
    }
  } while (--try);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1ed      	bne.n	8007b8e <sim7600_open_network+0x36>

  sim7600_open_netStatus = 0;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <sim7600_open_network+0x9c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]

  sim7600_error = !sim7600_network_IsOpen;
 8007bb8:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <sim7600_open_network+0xa0>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	f083 0301 	eor.w	r3, r3, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <sim7600_open_network+0xa4>)
 8007bd4:	701a      	strb	r2, [r3, #0]

  return sim7600_network_IsOpen;
 8007bd6:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <sim7600_open_network+0xa0>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200057d4 	.word	0x200057d4
 8007be8:	0800a2e0 	.word	0x0800a2e0
 8007bec:	0800a23c 	.word	0x0800a23c
 8007bf0:	0800a2fc 	.word	0x0800a2fc
 8007bf4:	20004160 	.word	0x20004160
 8007bf8:	20004155 	.word	0x20004155
 8007bfc:	20004154 	.word	0x20004154

08007c00 <sim7600_open_udp_connect>:

int sim7600_open_udp_connectStatus = 0; // 1 : send cmd, 0 : success
bool sim7600_open_udp_connect()
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007c06:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <sim7600_open_udp_connect+0x90>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fc fa38 	bl	8004084 <osSemaphoreWait>

  sim7600_update_response("+CIPOPEN: 1,0", "+CIPOPEN: 1,4");
 8007c14:	491f      	ldr	r1, [pc, #124]	; (8007c94 <sim7600_open_udp_connect+0x94>)
 8007c16:	4820      	ldr	r0, [pc, #128]	; (8007c98 <sim7600_open_udp_connect+0x98>)
 8007c18:	f7ff ff68 	bl	8007aec <sim7600_update_response>

  sim7600_usart_send_string("AT+CIPOPEN=1,\"UDP\",,,8080\r\n");
 8007c1c:	481f      	ldr	r0, [pc, #124]	; (8007c9c <sim7600_open_udp_connect+0x9c>)
 8007c1e:	f000 f9b7 	bl	8007f90 <sim7600_usart_send_string>

  sim7600_open_udp_connectStatus = 1;
 8007c22:	4b1f      	ldr	r3, [pc, #124]	; (8007ca0 <sim7600_open_udp_connect+0xa0>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <sim7600_open_udp_connect+0x90>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fc fa77 	bl	8004120 <osSemaphoreRelease>

  int try = 24; // ~ 12s
 8007c32:	2318      	movs	r3, #24
 8007c34:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(500);
 8007c36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c3a:	f7ff fcfb 	bl	8007634 <sim7600_delay_ms>
    if (sim7600_open_udp_connectStatus == 0)
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <sim7600_open_udp_connect+0xa0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <sim7600_open_udp_connect+0x54>
    {
      sim7600_udp_IsOpen = true;
 8007c46:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <sim7600_open_udp_connect+0xa4>)
 8007c48:	2201      	movs	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
      sim7600_tcp_led_status(1);
 8007c4c:	2140      	movs	r1, #64	; 0x40
 8007c4e:	4816      	ldr	r0, [pc, #88]	; (8007ca8 <sim7600_open_udp_connect+0xa8>)
 8007c50:	f7ff fce1 	bl	8007616 <LL_GPIO_ResetOutputPin>
    }
  } while (--try);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1ea      	bne.n	8007c36 <sim7600_open_udp_connect+0x36>

  sim7600_open_udp_connectStatus = 0;
 8007c60:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <sim7600_open_udp_connect+0xa0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

  sim7600_error = !sim7600_udp_IsOpen;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <sim7600_open_udp_connect+0xa4>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bf14      	ite	ne
 8007c6e:	2301      	movne	r3, #1
 8007c70:	2300      	moveq	r3, #0
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f083 0301 	eor.w	r3, r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <sim7600_open_udp_connect+0xac>)
 8007c82:	701a      	strb	r2, [r3, #0]

  return sim7600_udp_IsOpen;
 8007c84:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <sim7600_open_udp_connect+0xa4>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200057d4 	.word	0x200057d4
 8007c94:	0800a30c 	.word	0x0800a30c
 8007c98:	0800a31c 	.word	0x0800a31c
 8007c9c:	0800a32c 	.word	0x0800a32c
 8007ca0:	20004164 	.word	0x20004164
 8007ca4:	20004157 	.word	0x20004157
 8007ca8:	40020000 	.word	0x40020000
 8007cac:	20004154 	.word	0x20004154

08007cb0 <sim7600_send_packet_ip>:
  return send_ip_packet_success;
}*/

//send packet, type:1 - UDP , type:0 - TCP
bool sim7600_send_packet_ip(int type, uint8_t* data, int data_length)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  if(type == 1) // udp
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d109      	bne.n	8007cd6 <sim7600_send_packet_ip+0x26>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 8007cc2:	4b3b      	ldr	r3, [pc, #236]	; (8007db0 <sim7600_send_packet_ip+0x100>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	4b3a      	ldr	r3, [pc, #232]	; (8007db4 <sim7600_send_packet_ip+0x104>)
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	493a      	ldr	r1, [pc, #232]	; (8007db8 <sim7600_send_packet_ip+0x108>)
 8007cce:	483b      	ldr	r0, [pc, #236]	; (8007dbc <sim7600_send_packet_ip+0x10c>)
 8007cd0:	f001 fa68 	bl	80091a4 <siprintf>
 8007cd4:	e00d      	b.n	8007cf2 <sim7600_send_packet_ip+0x42>
  }
  else if(type == 0) //tcp
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d105      	bne.n	8007ce8 <sim7600_send_packet_ip+0x38>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4938      	ldr	r1, [pc, #224]	; (8007dc0 <sim7600_send_packet_ip+0x110>)
 8007ce0:	4836      	ldr	r0, [pc, #216]	; (8007dbc <sim7600_send_packet_ip+0x10c>)
 8007ce2:	f001 fa5f 	bl	80091a4 <siprintf>
 8007ce6:	e004      	b.n	8007cf2 <sim7600_send_packet_ip+0x42>
  }
  else //ssl AT+CCHSEND=0,2
  {
	  sprintf(sim7600_cmd_buff, "AT+CCHSEND=0,%d\r", data_length);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4936      	ldr	r1, [pc, #216]	; (8007dc4 <sim7600_send_packet_ip+0x114>)
 8007cec:	4833      	ldr	r0, [pc, #204]	; (8007dbc <sim7600_send_packet_ip+0x10c>)
 8007cee:	f001 fa59 	bl	80091a4 <siprintf>
  }

  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007cf2:	4b35      	ldr	r3, [pc, #212]	; (8007dc8 <sim7600_send_packet_ip+0x118>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fc f9c2 	bl	8004084 <osSemaphoreWait>

  sim7600_usart_send_string(sim7600_cmd_buff);
 8007d00:	482e      	ldr	r0, [pc, #184]	; (8007dbc <sim7600_send_packet_ip+0x10c>)
 8007d02:	f000 f945 	bl	8007f90 <sim7600_usart_send_string>
  sim7600_send_packetStatus1 = 1;
 8007d06:	4b31      	ldr	r3, [pc, #196]	; (8007dcc <sim7600_send_packet_ip+0x11c>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007d0c:	4b2e      	ldr	r3, [pc, #184]	; (8007dc8 <sim7600_send_packet_ip+0x118>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fc fa05 	bl	8004120 <osSemaphoreRelease>

  bool send_ip_packet_success = false;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
  int try = 5;
 8007d1a:	2305      	movs	r3, #5
 8007d1c:	613b      	str	r3, [r7, #16]

  do
  {
    sim7600_delay_ms(100);
 8007d1e:	2064      	movs	r0, #100	; 0x64
 8007d20:	f7ff fc88 	bl	8007634 <sim7600_delay_ms>
    if(sim7600_send_packetStatus1 == 0) //success
 8007d24:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <sim7600_send_packet_ip+0x11c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <sim7600_send_packet_ip+0x82>
    {
      send_ip_packet_success = true;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d30:	e005      	b.n	8007d3e <sim7600_send_packet_ip+0x8e>
    }
  } while (--try);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1ef      	bne.n	8007d1e <sim7600_send_packet_ip+0x6e>

  sim7600_send_packetStatus1 = 0;
 8007d3e:	4b23      	ldr	r3, [pc, #140]	; (8007dcc <sim7600_send_packet_ip+0x11c>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]


  if(send_ip_packet_success)
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d02d      	beq.n	8007da6 <sim7600_send_packet_ip+0xf6>
  {
    send_ip_packet_success = false; //reset
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

    try = 60; // ~ 6s, since timeout set up for AT+CIPSEND is 5s
 8007d4e:	233c      	movs	r3, #60	; 0x3c
 8007d50:	613b      	str	r3, [r7, #16]

    //send data
    //wait to aquire to update res
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007d52:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <sim7600_send_packet_ip+0x118>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f04f 31ff 	mov.w	r1, #4294967295
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fc f992 	bl	8004084 <osSemaphoreWait>

    sim7600_update_response("OK", "");
 8007d60:	491b      	ldr	r1, [pc, #108]	; (8007dd0 <sim7600_send_packet_ip+0x120>)
 8007d62:	481c      	ldr	r0, [pc, #112]	; (8007dd4 <sim7600_send_packet_ip+0x124>)
 8007d64:	f7ff fec2 	bl	8007aec <sim7600_update_response>
    sim7600_usart_send_byte(data, data_length);
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	68b8      	ldr	r0, [r7, #8]
 8007d6c:	f000 f920 	bl	8007fb0 <sim7600_usart_send_byte>
    sim7600_send_packetStatus2 = 1;
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <sim7600_send_packet_ip+0x128>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]

    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <sim7600_send_packet_ip+0x118>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc f9d0 	bl	8004120 <osSemaphoreRelease>

    do
    {
      sim7600_delay_ms(100);
 8007d80:	2064      	movs	r0, #100	; 0x64
 8007d82:	f7ff fc57 	bl	8007634 <sim7600_delay_ms>
      if(sim7600_send_packetStatus2 == 0) //success
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <sim7600_send_packet_ip+0x128>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <sim7600_send_packet_ip+0xe4>
      {
        send_ip_packet_success = true;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
        break;
 8007d92:	e005      	b.n	8007da0 <sim7600_send_packet_ip+0xf0>
      }
    } while (--try);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ef      	bne.n	8007d80 <sim7600_send_packet_ip+0xd0>

    sim7600_send_packetStatus2 = 0;
 8007da0:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <sim7600_send_packet_ip+0x128>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
  }

  return send_ip_packet_success;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000074 	.word	0x20000074
 8007db4:	20000010 	.word	0x20000010
 8007db8:	0800a348 	.word	0x0800a348
 8007dbc:	20004364 	.word	0x20004364
 8007dc0:	0800a364 	.word	0x0800a364
 8007dc4:	0800a378 	.word	0x0800a378
 8007dc8:	200057d4 	.word	0x200057d4
 8007dcc:	20004168 	.word	0x20004168
 8007dd0:	0800a238 	.word	0x0800a238
 8007dd4:	0800a23c 	.word	0x0800a23c
 8007dd8:	2000416c 	.word	0x2000416c

08007ddc <sim7600_keepAlive_udp>:

int keep_alive_udp_error = 0;
void sim7600_keepAlive_udp()
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  //static firstSendNum = 10;

  //send udp, tcp keep alive every 30s
  if(sim7600_udp_IsOpen)
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <sim7600_keepAlive_udp+0x58>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <sim7600_keepAlive_udp+0x3a>
  {
    if(!sim7600_send_packet_ip(1, "00000002", 8)) keep_alive_udp_error++;
 8007de8:	2208      	movs	r2, #8
 8007dea:	4913      	ldr	r1, [pc, #76]	; (8007e38 <sim7600_keepAlive_udp+0x5c>)
 8007dec:	2001      	movs	r0, #1
 8007dee:	f7ff ff5f 	bl	8007cb0 <sim7600_send_packet_ip>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f083 0301 	eor.w	r3, r3, #1
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <sim7600_keepAlive_udp+0x2e>
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <sim7600_keepAlive_udp+0x60>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <sim7600_keepAlive_udp+0x60>)
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e005      	b.n	8007e16 <sim7600_keepAlive_udp+0x3a>
    else 
    {
      keep_alive_udp_error = 0;
 8007e0a:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <sim7600_keepAlive_udp+0x60>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
      printf("request udp done\n");
 8007e10:	480b      	ldr	r0, [pc, #44]	; (8007e40 <sim7600_keepAlive_udp+0x64>)
 8007e12:	f001 f9bf 	bl	8009194 <puts>
    }
  }
  //after 2 time
  if(keep_alive_udp_error >= 10)
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <sim7600_keepAlive_udp+0x60>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	dd08      	ble.n	8007e30 <sim7600_keepAlive_udp+0x54>
  {
    keep_alive_udp_error = 0; // reset
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <sim7600_keepAlive_udp+0x60>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
    sim7600_udp_IsOpen = false;
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <sim7600_keepAlive_udp+0x58>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
    sim7600_error= true;
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <sim7600_keepAlive_udp+0x68>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
  }
}
 8007e30:	bf00      	nop
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20004157 	.word	0x20004157
 8007e38:	0800a38c 	.word	0x0800a38c
 8007e3c:	20004170 	.word	0x20004170
 8007e40:	0800a398 	.word	0x0800a398
 8007e44:	20004154 	.word	0x20004154

08007e48 <sim7600_handle_error>:
}

//this function run in seperate task have highest priority
//error occur when network or tcp connect is close
void sim7600_handle_error()
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  if(sim7600_have_call)
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <sim7600_handle_error+0x9c>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d011      	beq.n	8007e78 <sim7600_handle_error+0x30>
  {
    sim7600_have_call = false;
 8007e54:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <sim7600_handle_error+0x9c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]

    //wait to aquire to send, wait until
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007e5a:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <sim7600_handle_error+0xa0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fc f90e 	bl	8004084 <osSemaphoreWait>
    sim7600_usart_send_string("AT+CHUP\r\n");
 8007e68:	4820      	ldr	r0, [pc, #128]	; (8007eec <sim7600_handle_error+0xa4>)
 8007e6a:	f000 f891 	bl	8007f90 <sim7600_usart_send_string>
    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007e6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <sim7600_handle_error+0xa0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc f954 	bl	8004120 <osSemaphoreRelease>
  }
  if (sim7600_error)
 8007e78:	4b1d      	ldr	r3, [pc, #116]	; (8007ef0 <sim7600_handle_error+0xa8>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02f      	beq.n	8007ee0 <sim7600_handle_error+0x98>
  {
    //turn of led
    sim7600_tcp_led_status(0);
 8007e80:	2140      	movs	r1, #64	; 0x40
 8007e82:	481c      	ldr	r0, [pc, #112]	; (8007ef4 <sim7600_handle_error+0xac>)
 8007e84:	f7ff fbb9 	bl	80075fa <LL_GPIO_SetOutputPin>
    //check whether basic config is success?
    //if success, check network again, if network false, restart, if still work, open tcp and udp again (then return -> don not restart)
    if (Sim7600BasicConfigSuccess)
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <sim7600_handle_error+0xb0>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01d      	beq.n	8007ecc <sim7600_handle_error+0x84>
    {
      //check network is open or closed(open again)
      if(!sim7600_network_IsOpen) sim7600_open_network();
 8007e90:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <sim7600_handle_error+0xb4>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f083 0301 	eor.w	r3, r3, #1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <sim7600_handle_error+0x5a>
 8007e9e:	f7ff fe5b 	bl	8007b58 <sim7600_open_network>

      //after above step if network open success, continue open tcp
      if (sim7600_network_IsOpen)
 8007ea2:	4b16      	ldr	r3, [pc, #88]	; (8007efc <sim7600_handle_error+0xb4>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d010      	beq.n	8007ecc <sim7600_handle_error+0x84>
      {
        //network still open, check udp, tcp connect
        if(!sim7600_udp_IsOpen) sim7600_open_udp_connect();
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <sim7600_handle_error+0xb8>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f083 0301 	eor.w	r3, r3, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <sim7600_handle_error+0x74>
 8007eb8:	f7ff fea2 	bl	8007c00 <sim7600_open_udp_connect>
        //if(!sim7600_tcp_IsOpen) sim7600_open_tcp_connect();
        if(sim7600_udp_IsOpen)
 8007ebc:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <sim7600_handle_error+0xb8>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <sim7600_handle_error+0x84>
        {
        	sim7600_error = false;
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <sim7600_handle_error+0xa8>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
        	return; //when network and udp is ok
 8007eca:	e009      	b.n	8007ee0 <sim7600_handle_error+0x98>
      }
    }

    //if basic config is not success or network false -> restart and config again
    //turn status (play->stop) and disable uart before restart
    sim7600_restart();
 8007ecc:	f000 fef2 	bl	8008cb4 <sim7600_restart>
    if (sim7600_config())
 8007ed0:	f7ff fd3c 	bl	800794c <sim7600_config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <sim7600_handle_error+0x98>
      sim7600_error = false;
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <sim7600_handle_error+0xa8>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
  }

  //update led error
  //if sim7600_error == true, turn on and vice versa
}
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20004158 	.word	0x20004158
 8007ee8:	200057d4 	.word	0x200057d4
 8007eec:	0800a3ec 	.word	0x0800a3ec
 8007ef0:	20004154 	.word	0x20004154
 8007ef4:	40020000 	.word	0x40020000
 8007ef8:	20004159 	.word	0x20004159
 8007efc:	20004155 	.word	0x20004155
 8007f00:	20004157 	.word	0x20004157

08007f04 <sim7600_send_cmd>:

//send command (auto add "\r\n"), with timeout, if > timeout -> reset by
int cmdSendStatus = 0; // 1: sended, 0: ok
bool sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
  

  sim7600_update_response(response1, response2);
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	68b8      	ldr	r0, [r7, #8]
 8007f16:	f7ff fde9 	bl	8007aec <sim7600_update_response>
  int try = timeout / 100;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	4a19      	ldr	r2, [pc, #100]	; (8007f84 <sim7600_send_cmd+0x80>)
 8007f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8007f22:	1152      	asrs	r2, r2, #5
 8007f24:	17db      	asrs	r3, r3, #31
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	617b      	str	r3, [r7, #20]
  bool send_cmd_success = false;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	74fb      	strb	r3, [r7, #19]
  do
  {
    //wait to aquire to update res
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8007f2e:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <sim7600_send_cmd+0x84>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f04f 31ff 	mov.w	r1, #4294967295
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fc f8a4 	bl	8004084 <osSemaphoreWait>

    sim7600_usart_send_string(cmd);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f827 	bl	8007f90 <sim7600_usart_send_string>

    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <sim7600_send_cmd+0x84>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc f8ea 	bl	8004120 <osSemaphoreRelease>

    cmdSendStatus = 1;
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <sim7600_send_cmd+0x88>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
    sim7600_delay_ms(100); //10ms receive max 100 bytes with baud = 115200
 8007f52:	2064      	movs	r0, #100	; 0x64
 8007f54:	f7ff fb6e 	bl	8007634 <sim7600_delay_ms>
    if (cmdSendStatus == 0)
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <sim7600_send_cmd+0x88>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <sim7600_send_cmd+0x62>
    {
      send_cmd_success = true;
 8007f60:	2301      	movs	r3, #1
 8007f62:	74fb      	strb	r3, [r7, #19]
      break;
 8007f64:	e005      	b.n	8007f72 <sim7600_send_cmd+0x6e>
    }
  } while (--try);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1dd      	bne.n	8007f2e <sim7600_send_cmd+0x2a>

  cmdSendStatus = 0; // reset
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <sim7600_send_cmd+0x88>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

  return send_cmd_success;
 8007f78:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	51eb851f 	.word	0x51eb851f
 8007f88:	200057d4 	.word	0x200057d4
 8007f8c:	20004178 	.word	0x20004178

08007f90 <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  sim7600_usart_send_byte(str, strlen(str));
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7f8 f919 	bl	80001d0 <strlen>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f804 	bl	8007fb0 <sim7600_usart_send_byte>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  const uint8_t *d = data;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 8007fbe:	e016      	b.n	8007fee <sim7600_usart_send_byte+0x3e>
  {
    LL_USART_TransmitData8(usartSim7600, *d);
 8007fc0:	4b13      	ldr	r3, [pc, #76]	; (8008010 <sim7600_usart_send_byte+0x60>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f7ff fb06 	bl	80075dc <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(usartSim7600));
 8007fd0:	bf00      	nop
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <sim7600_usart_send_byte+0x60>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff facd 	bl	8007576 <LL_USART_IsActiveFlag_TXE>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f7      	beq.n	8007fd2 <sim7600_usart_send_byte+0x22>
  for (; len > 0; --len, ++d)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dce5      	bgt.n	8007fc0 <sim7600_usart_send_byte+0x10>
  }
  while (!LL_USART_IsActiveFlag_TC(usartSim7600));
 8007ff4:	bf00      	nop
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <sim7600_usart_send_byte+0x60>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff faa8 	bl	8007550 <LL_USART_IsActiveFlag_TC>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f7      	beq.n	8007ff6 <sim7600_usart_send_byte+0x46>
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	2000000c 	.word	0x2000000c

08008014 <sim7600_usart_rx_check>:
int pos = 0;

volatile uint16_t ndtr_dma, ndtr_dma2;
volatile int returnTmp = 0;
void sim7600_usart_rx_check()
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /* Calculate current position in buffer */
  ndtr_dma = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8008018:	2102      	movs	r1, #2
 800801a:	483d      	ldr	r0, [pc, #244]	; (8008110 <sim7600_usart_rx_check+0xfc>)
 800801c:	f7fe fff4 	bl	8007008 <LL_DMA_GetDataLength>
 8008020:	4603      	mov	r3, r0
 8008022:	b29a      	uxth	r2, r3
 8008024:	4b3b      	ldr	r3, [pc, #236]	; (8008114 <sim7600_usart_rx_check+0x100>)
 8008026:	801a      	strh	r2, [r3, #0]
  pos = sim_dma_buffer_size - (int)ndtr_dma;
 8008028:	4b3a      	ldr	r3, [pc, #232]	; (8008114 <sim7600_usart_rx_check+0x100>)
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8008032:	3308      	adds	r3, #8
 8008034:	4a38      	ldr	r2, [pc, #224]	; (8008118 <sim7600_usart_rx_check+0x104>)
 8008036:	6013      	str	r3, [r2, #0]
  // if(pos > (2*sim_dma_buffer_size))
  // {
	//   pos = 0;
  // }
  //pos = sim_dma_buffer_size - dma_NDTR;
  if (pos != old_pos)
 8008038:	4b37      	ldr	r3, [pc, #220]	; (8008118 <sim7600_usart_rx_check+0x104>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	4b37      	ldr	r3, [pc, #220]	; (800811c <sim7600_usart_rx_check+0x108>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d064      	beq.n	800810e <sim7600_usart_rx_check+0xfa>
  { /* Check change in received data */
    if (pos > old_pos)
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <sim7600_usart_rx_check+0x104>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b34      	ldr	r3, [pc, #208]	; (800811c <sim7600_usart_rx_check+0x108>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	dd12      	ble.n	8008076 <sim7600_usart_rx_check+0x62>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos);
      sim_buff_length = pos - old_pos;
 8008050:	4b31      	ldr	r3, [pc, #196]	; (8008118 <sim7600_usart_rx_check+0x104>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	4b31      	ldr	r3, [pc, #196]	; (800811c <sim7600_usart_rx_check+0x108>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	4a31      	ldr	r2, [pc, #196]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 800805c:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <sim7600_usart_rx_check+0x108>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <sim7600_usart_rx_check+0x110>)
 8008066:	4413      	add	r3, r2
 8008068:	4a2d      	ldr	r2, [pc, #180]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	482e      	ldr	r0, [pc, #184]	; (8008128 <sim7600_usart_rx_check+0x114>)
 8008070:	f001 f80c 	bl	800908c <memcpy>
 8008074:	e027      	b.n	80080c6 <sim7600_usart_rx_check+0xb2>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buffer_size - old_pos;
 8008076:	4b29      	ldr	r3, [pc, #164]	; (800811c <sim7600_usart_rx_check+0x108>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800807e:	3308      	adds	r3, #8
 8008080:	4a27      	ldr	r2, [pc, #156]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 8008082:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8008084:	4b25      	ldr	r3, [pc, #148]	; (800811c <sim7600_usart_rx_check+0x108>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	4b26      	ldr	r3, [pc, #152]	; (8008124 <sim7600_usart_rx_check+0x110>)
 800808c:	4413      	add	r3, r2
 800808e:	4a24      	ldr	r2, [pc, #144]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	4824      	ldr	r0, [pc, #144]	; (8008128 <sim7600_usart_rx_check+0x114>)
 8008096:	f000 fff9 	bl	800908c <memcpy>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 800809a:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <sim7600_usart_rx_check+0x104>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd11      	ble.n	80080c6 <sim7600_usart_rx_check+0xb2>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], pos);
        memcpy(sim_buff + sim_buff_length, sim_dma_buffer, pos);
 80080a2:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <sim7600_usart_rx_check+0x114>)
 80080aa:	4413      	add	r3, r2
 80080ac:	4a1a      	ldr	r2, [pc, #104]	; (8008118 <sim7600_usart_rx_check+0x104>)
 80080ae:	6812      	ldr	r2, [r2, #0]
 80080b0:	491c      	ldr	r1, [pc, #112]	; (8008124 <sim7600_usart_rx_check+0x110>)
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 ffea 	bl	800908c <memcpy>
        sim_buff_length += pos;
 80080b8:	4b19      	ldr	r3, [pc, #100]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b16      	ldr	r3, [pc, #88]	; (8008118 <sim7600_usart_rx_check+0x104>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4413      	add	r3, r2
 80080c2:	4a17      	ldr	r2, [pc, #92]	; (8008120 <sim7600_usart_rx_check+0x10c>)
 80080c4:	6013      	str	r3, [r2, #0]
      }
    }
    //old_pos = pos; /* Save current position as old */
    returnTmp = sim7600_handle_received_data();
 80080c6:	f000 f871 	bl	80081ac <sim7600_handle_received_data>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4a17      	ldr	r2, [pc, #92]	; (800812c <sim7600_usart_rx_check+0x118>)
 80080ce:	6013      	str	r3, [r2, #0]
    if(returnTmp < 0) //something wrong
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <sim7600_usart_rx_check+0x118>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da04      	bge.n	80080e2 <sim7600_usart_rx_check+0xce>
    {
    	old_pos = pos;
 80080d8:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <sim7600_usart_rx_check+0x104>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a0f      	ldr	r2, [pc, #60]	; (800811c <sim7600_usart_rx_check+0x108>)
 80080de:	6013      	str	r3, [r2, #0]
    	return;
 80080e0:	e015      	b.n	800810e <sim7600_usart_rx_check+0xfa>
    }
    // if(old_pos > (2*sim_dma_buffer_size))
    // {
    // 	old_pos = 0;
    // }
    old_pos += returnTmp;
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <sim7600_usart_rx_check+0x118>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <sim7600_usart_rx_check+0x108>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	4a0b      	ldr	r2, [pc, #44]	; (800811c <sim7600_usart_rx_check+0x108>)
 80080ee:	6013      	str	r3, [r2, #0]
    old_pos %= sim_dma_buffer_size; // ~ if(old_pos >= sim_dma_buffer_size) old_pos -= sim_dma_buffer_size;
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <sim7600_usart_rx_check+0x108>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <sim7600_usart_rx_check+0x11c>)
 80080f6:	fb83 1302 	smull	r1, r3, r3, r2
 80080fa:	12d9      	asrs	r1, r3, #11
 80080fc:	17d3      	asrs	r3, r2, #31
 80080fe:	1acb      	subs	r3, r1, r3
 8008100:	f241 3188 	movw	r1, #5000	; 0x1388
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	4a04      	ldr	r2, [pc, #16]	; (800811c <sim7600_usart_rx_check+0x108>)
 800810c:	6013      	str	r3, [r2, #0]
  /*if(ndtr_dma2 != ndtr_dma)
  {
	  printf("error");
  }*/
  //sim7600_resume_rx_uart_dma(ndtr_dma, old_pos);
}
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40026400 	.word	0x40026400
 8008114:	2000435c 	.word	0x2000435c
 8008118:	20004180 	.word	0x20004180
 800811c:	2000417c 	.word	0x2000417c
 8008120:	200057b4 	.word	0x200057b4
 8008124:	2000442c 	.word	0x2000442c
 8008128:	200082d4 	.word	0x200082d4
 800812c:	20004184 	.word	0x20004184
 8008130:	68db8bad 	.word	0x68db8bad

08008134 <check_normal_response>:
int errorSizeFrameNum = 0, errorSizeFrameNum2 = 0;
int errorSizeFrame;

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index
__STATIC_INLINE int check_normal_response(uint8_t* posOfSubStr, const char* response, int* sim_buff_index ) //macro
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  //check whether have \r\n at the end of this response
  posOfSubStr += strlen(response); //point to position right after the last character of response on sim_buff
 8008140:	68b8      	ldr	r0, [r7, #8]
 8008142:	f7f8 f845 	bl	80001d0 <strlen>
 8008146:	4602      	mov	r2, r0
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  //in the worst case the last character of response is last character of sim_buff
  // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
  uint8_t *pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 800814e:	4914      	ldr	r1, [pc, #80]	; (80081a0 <check_normal_response+0x6c>)
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f001 f847 	bl	80091e4 <strstr>
 8008156:	6178      	str	r0, [r7, #20]
  if (pointerTo_r_n != NULL)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <check_normal_response+0x3a>
  {
    //perfect sastified
    //change sim_buff_index
    *sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <check_normal_response+0x70>)
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	1c9a      	adds	r2, r3, #2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
    return 0;
 800816a:	2300      	movs	r3, #0
 800816c:	e013      	b.n	8008196 <check_normal_response+0x62>
  }
  else if (posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case, have enough bytes but can't sastified
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <check_normal_response+0x74>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4619      	mov	r1, r3
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <check_normal_response+0x70>)
 800817c:	440b      	add	r3, r1
 800817e:	429a      	cmp	r2, r3
 8008180:	d208      	bcs.n	8008194 <check_normal_response+0x60>
  {
    //data may be error-bit
    *sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <check_normal_response+0x70>)
 8008186:	1a9b      	subs	r3, r3, r2
 8008188:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
    return 1;
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <check_normal_response+0x62>
  }
  else
    //return sim_buff_index; don't have enough data
    return 2;
 8008194:	2302      	movs	r3, #2
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0800a3f8 	.word	0x0800a3f8
 80081a4:	200082d4 	.word	0x200082d4
 80081a8:	200057b4 	.word	0x200057b4

080081ac <sim7600_handle_received_data>:
                  //.. cmd check
};

//return num of bytes handled
int sim7600_handle_received_data()
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08c      	sub	sp, #48	; 0x30
 80081b0:	af00      	add	r7, sp, #0
  //handle received data

  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 80081b2:	4b9e      	ldr	r3, [pc, #632]	; (800842c <sim7600_handle_received_data+0x280>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a9e      	ldr	r2, [pc, #632]	; (8008430 <sim7600_handle_received_data+0x284>)
 80081b8:	2100      	movs	r1, #0
 80081ba:	54d1      	strb	r1, [r2, r3]
  uint8_t* posOfSubStr = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t* posOfSubStrSave = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
  int sim_buff_index = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	607b      	str	r3, [r7, #4]

  while (true)
  {
    posOfSubStr = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    posOfSubStrSave = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
    if(sim_buff_index >= sim_buff_length) return sim_buff_length;
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4b96      	ldr	r3, [pc, #600]	; (800842c <sim7600_handle_received_data+0x280>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	db02      	blt.n	80081e0 <sim7600_handle_received_data+0x34>
 80081da:	4b94      	ldr	r3, [pc, #592]	; (800842c <sim7600_handle_received_data+0x280>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	e21e      	b.n	800861e <sim7600_handle_received_data+0x472>
    if(*(sim_buff + sim_buff_index) == '\0') //ignore wrong data
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	461a      	mov	r2, r3
 80081e4:	4b92      	ldr	r3, [pc, #584]	; (8008430 <sim7600_handle_received_data+0x284>)
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <sim7600_handle_received_data+0x4a>
    {
    	sim_buff_index++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3301      	adds	r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
    	continue;
 80081f4:	e1ec      	b.n	80085d0 <sim7600_handle_received_data+0x424>

    //memcpy(printf_buff, sim_buff + sim_buff_index, 9);
    //printf("%s : %d", printf_buff, sim_buff_length);
    //check what response is appeared earliest

    int resultCheck = -1;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
    //first cmd response
    int checkCmdResLength;
    if (cmdSendStatus || sim7600_open_tcp_connectStatus || sim7600_open_udp_connectStatus || sim7600_open_netStatus
 80081fc:	4b8d      	ldr	r3, [pc, #564]	; (8008434 <sim7600_handle_received_data+0x288>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10f      	bne.n	8008224 <sim7600_handle_received_data+0x78>
 8008204:	4b8c      	ldr	r3, [pc, #560]	; (8008438 <sim7600_handle_received_data+0x28c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <sim7600_handle_received_data+0x78>
 800820c:	4b8b      	ldr	r3, [pc, #556]	; (800843c <sim7600_handle_received_data+0x290>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d107      	bne.n	8008224 <sim7600_handle_received_data+0x78>
 8008214:	4b8a      	ldr	r3, [pc, #552]	; (8008440 <sim7600_handle_received_data+0x294>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <sim7600_handle_received_data+0x78>
      || sim7600_send_packetStatus2)
 800821c:	4b89      	ldr	r3, [pc, #548]	; (8008444 <sim7600_handle_received_data+0x298>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d026      	beq.n	8008272 <sim7600_handle_received_data+0xc6>
    {
      if(res1 != NULL)
 8008224:	4b88      	ldr	r3, [pc, #544]	; (8008448 <sim7600_handle_received_data+0x29c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00d      	beq.n	8008248 <sim7600_handle_received_data+0x9c>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	461a      	mov	r2, r3
 8008230:	4b7f      	ldr	r3, [pc, #508]	; (8008430 <sim7600_handle_received_data+0x284>)
 8008232:	4413      	add	r3, r2
 8008234:	4a84      	ldr	r2, [pc, #528]	; (8008448 <sim7600_handle_received_data+0x29c>)
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f000 ffd2 	bl	80091e4 <strstr>
 8008240:	62f8      	str	r0, [r7, #44]	; 0x2c
        checkCmdResLength = res1Length;
 8008242:	4b82      	ldr	r3, [pc, #520]	; (800844c <sim7600_handle_received_data+0x2a0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	623b      	str	r3, [r7, #32]
      }
      if (posOfSubStr == NULL && res2 != NULL)
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d111      	bne.n	8008272 <sim7600_handle_received_data+0xc6>
 800824e:	4b80      	ldr	r3, [pc, #512]	; (8008450 <sim7600_handle_received_data+0x2a4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <sim7600_handle_received_data+0xc6>
      {
          posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	461a      	mov	r2, r3
 800825a:	4b75      	ldr	r3, [pc, #468]	; (8008430 <sim7600_handle_received_data+0x284>)
 800825c:	4413      	add	r3, r2
 800825e:	4a7c      	ldr	r2, [pc, #496]	; (8008450 <sim7600_handle_received_data+0x2a4>)
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f000 ffbd 	bl	80091e4 <strstr>
 800826a:	62f8      	str	r0, [r7, #44]	; 0x2c
          checkCmdResLength = res2Length;
 800826c:	4b79      	ldr	r3, [pc, #484]	; (8008454 <sim7600_handle_received_data+0x2a8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	623b      	str	r3, [r7, #32]
      }
    }
    if(posOfSubStr != NULL)
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <sim7600_handle_received_data+0xd4>
    {
      posOfSubStrSave = posOfSubStr;
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
      resultCheck = listResponseSize;
 800827c:	2307      	movs	r3, #7
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    //check in list
    for(int i = 0; i < listResponseSize; i++)
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	e024      	b.n	80082d0 <sim7600_handle_received_data+0x124>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, listResponse[i]);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	461a      	mov	r2, r3
 800828a:	4b69      	ldr	r3, [pc, #420]	; (8008430 <sim7600_handle_received_data+0x284>)
 800828c:	18d0      	adds	r0, r2, r3
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4a6f      	ldr	r2, [pc, #444]	; (8008458 <sim7600_handle_received_data+0x2ac>)
 800829a:	4413      	add	r3, r2
 800829c:	4619      	mov	r1, r3
 800829e:	f000 ffa1 	bl	80091e4 <strstr>
 80082a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(posOfSubStr != NULL)
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <sim7600_handle_received_data+0x11e>
      {
        if(posOfSubStrSave == NULL)
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <sim7600_handle_received_data+0x10e>
        {
          posOfSubStrSave = posOfSubStr;
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
          resultCheck = i;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
 80082b8:	e007      	b.n	80082ca <sim7600_handle_received_data+0x11e>
        }
        //else posOfSubStrSave = (posOfSubStr < posOfSubStrSave) ? posOfSubStr : posOfSubStrSave;
        else
        {
          if(posOfSubStr < posOfSubStrSave)
 80082ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	429a      	cmp	r2, r3
 80082c0:	d203      	bcs.n	80082ca <sim7600_handle_received_data+0x11e>
          {
            posOfSubStrSave = posOfSubStr;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	62bb      	str	r3, [r7, #40]	; 0x28
            resultCheck = i;
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i = 0; i < listResponseSize; i++)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	3301      	adds	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	ddd7      	ble.n	8008286 <sim7600_handle_received_data+0xda>
          }
        }
      }
    }

    int resultTmp = -1;
 80082d6:	f04f 33ff 	mov.w	r3, #4294967295
 80082da:	61bb      	str	r3, [r7, #24]
    if (resultCheck < 0){break;} // nothing
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da00      	bge.n	80082e4 <sim7600_handle_received_data+0x138>
 80082e2:	e176      	b.n	80085d2 <sim7600_handle_received_data+0x426>
    else if (resultCheck == 0) //udp received
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d164      	bne.n	80083b4 <sim7600_handle_received_data+0x208>
    {
      //check whether have \r\n at buffer
      posOfSubStrSave += strlen(listResponse[resultCheck]);                 //point to lenght of udp packet (right after ",1,")
 80082ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4a58      	ldr	r2, [pc, #352]	; (8008458 <sim7600_handle_received_data+0x2ac>)
 80082f6:	4413      	add	r3, r2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f7 ff69 	bl	80001d0 <strlen>
 80082fe:	4602      	mov	r2, r0
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	4413      	add	r3, r2
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t *pointerTo_r_n = strstr(posOfSubStrSave, "\r\n"); //point to '\r'
 8008306:	4955      	ldr	r1, [pc, #340]	; (800845c <sim7600_handle_received_data+0x2b0>)
 8008308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830a:	f000 ff6b 	bl	80091e4 <strstr>
 800830e:	60f8      	str	r0, [r7, #12]
      //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
      // ->  posOfSubStrSave point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
      if (pointerTo_r_n != NULL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03d      	beq.n	8008392 <sim7600_handle_received_data+0x1e6>
      {
        int lengthOfUdpPacket = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
        while (posOfSubStrSave != pointerTo_r_n) //make sure break when meet '\r'
 800831a:	e01c      	b.n	8008356 <sim7600_handle_received_data+0x1aa>
        {
          char numberTmp = (*posOfSubStrSave);
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	72fb      	strb	r3, [r7, #11]
          if (numberTmp >= '0' && numberTmp <= '9')
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	2b2f      	cmp	r3, #47	; 0x2f
 8008326:	d910      	bls.n	800834a <sim7600_handle_received_data+0x19e>
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	2b39      	cmp	r3, #57	; 0x39
 800832c:	d80d      	bhi.n	800834a <sim7600_handle_received_data+0x19e>
          {
            lengthOfUdpPacket = lengthOfUdpPacket * 10 + numberTmp - '0';
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	461a      	mov	r2, r3
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	4413      	add	r3, r2
 800833e:	3b30      	subs	r3, #48	; 0x30
 8008340:	617b      	str	r3, [r7, #20]
          else //data maybe bit-error
          {
            sim_buff_index = pointerTo_r_n - sim_buff + 2; // +2 since "\r\n"
            continue;
          }
          posOfSubStrSave++;
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	3301      	adds	r3, #1
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
 8008348:	e005      	b.n	8008356 <sim7600_handle_received_data+0x1aa>
            sim_buff_index = pointerTo_r_n - sim_buff + 2; // +2 since "\r\n"
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4a38      	ldr	r2, [pc, #224]	; (8008430 <sim7600_handle_received_data+0x284>)
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	3302      	adds	r3, #2
 8008352:	607b      	str	r3, [r7, #4]
            continue;
 8008354:	bf00      	nop
        while (posOfSubStrSave != pointerTo_r_n) //make sure break when meet '\r'
 8008356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	429a      	cmp	r2, r3
 800835c:	d1de      	bne.n	800831c <sim7600_handle_received_data+0x170>
        }
        posOfSubStrSave += 2;                                                 //point to data
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	3302      	adds	r3, #2
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
        if (posOfSubStrSave + lengthOfUdpPacket > sim_buff + sim_buff_length) // don't have enough data
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008368:	441a      	add	r2, r3
 800836a:	4b30      	ldr	r3, [pc, #192]	; (800842c <sim7600_handle_received_data+0x280>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	4b2f      	ldr	r3, [pc, #188]	; (8008430 <sim7600_handle_received_data+0x284>)
 8008372:	440b      	add	r3, r1
 8008374:	429a      	cmp	r2, r3
 8008376:	d901      	bls.n	800837c <sim7600_handle_received_data+0x1d0>
          return sim_buff_index;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	e150      	b.n	800861e <sim7600_handle_received_data+0x472>
        //else data is sastified
        sim7600_handle_udp_packet(posOfSubStrSave, lengthOfUdpPacket);
 800837c:	6979      	ldr	r1, [r7, #20]
 800837e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008380:	f000 f972 	bl	8008668 <sim7600_handle_udp_packet>
        sim_buff_index = posOfSubStrSave - sim_buff + lengthOfUdpPacket;
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	4a2a      	ldr	r2, [pc, #168]	; (8008430 <sim7600_handle_received_data+0x284>)
 8008388:	1a9a      	subs	r2, r3, r2
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	607b      	str	r3, [r7, #4]
        continue;
 8008390:	e11e      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
      else if (posOfSubStrSave + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,9999\r\n
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	1d9a      	adds	r2, r3, #6
 8008396:	4b25      	ldr	r3, [pc, #148]	; (800842c <sim7600_handle_received_data+0x280>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4619      	mov	r1, r3
 800839c:	4b24      	ldr	r3, [pc, #144]	; (8008430 <sim7600_handle_received_data+0x284>)
 800839e:	440b      	add	r3, r1
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d205      	bcs.n	80083b0 <sim7600_handle_received_data+0x204>
      {
        //data may be error-bit
        sim_buff_index = posOfSubStrSave - sim_buff + 6;
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	4a22      	ldr	r2, [pc, #136]	; (8008430 <sim7600_handle_received_data+0x284>)
 80083a8:	1a9b      	subs	r3, r3, r2
 80083aa:	3306      	adds	r3, #6
 80083ac:	607b      	str	r3, [r7, #4]
        continue;
 80083ae:	e10f      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
      else
        return sim_buff_index; //dont have enough data
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	e134      	b.n	800861e <sim7600_handle_received_data+0x472>
    }
    else if (resultCheck == 1) //1 net error
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d11d      	bne.n	80083f6 <sim7600_handle_received_data+0x24a>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4a24      	ldr	r2, [pc, #144]	; (8008458 <sim7600_handle_received_data+0x2ac>)
 80083c6:	4413      	add	r3, r2
 80083c8:	1d3a      	adds	r2, r7, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ce:	f7ff feb1 	bl	8008134 <check_normal_response>
 80083d2:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 80f4 	bne.w	80085c4 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_network_IsOpen = false;
 80083dc:	4b20      	ldr	r3, [pc, #128]	; (8008460 <sim7600_handle_received_data+0x2b4>)
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
        sim7600_udp_IsOpen = false;
 80083e2:	4b20      	ldr	r3, [pc, #128]	; (8008464 <sim7600_handle_received_data+0x2b8>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	701a      	strb	r2, [r3, #0]
        sim7600_tcp_IsOpen = false;
 80083e8:	4b1f      	ldr	r3, [pc, #124]	; (8008468 <sim7600_handle_received_data+0x2bc>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <sim7600_handle_received_data+0x2c0>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	701a      	strb	r2, [r3, #0]
        continue;
 80083f4:	e0ec      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 2) //2 udp closed
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d139      	bne.n	8008470 <sim7600_handle_received_data+0x2c4>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80083fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4a14      	ldr	r2, [pc, #80]	; (8008458 <sim7600_handle_received_data+0x2ac>)
 8008408:	4413      	add	r3, r2
 800840a:	1d3a      	adds	r2, r7, #4
 800840c:	4619      	mov	r1, r3
 800840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008410:	f7ff fe90 	bl	8008134 <check_normal_response>
 8008414:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 80d3 	bne.w	80085c4 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_udp_IsOpen = false;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <sim7600_handle_received_data+0x2b8>)
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <sim7600_handle_received_data+0x2c0>)
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
        continue;
 800842a:	e0d1      	b.n	80085d0 <sim7600_handle_received_data+0x424>
 800842c:	200057b4 	.word	0x200057b4
 8008430:	200082d4 	.word	0x200082d4
 8008434:	20004178 	.word	0x20004178
 8008438:	20004174 	.word	0x20004174
 800843c:	20004164 	.word	0x20004164
 8008440:	20004160 	.word	0x20004160
 8008444:	2000416c 	.word	0x2000416c
 8008448:	2000423c 	.word	0x2000423c
 800844c:	2000428c 	.word	0x2000428c
 8008450:	20004230 	.word	0x20004230
 8008454:	20004298 	.word	0x20004298
 8008458:	20000078 	.word	0x20000078
 800845c:	0800a3f8 	.word	0x0800a3f8
 8008460:	20004155 	.word	0x20004155
 8008464:	20004157 	.word	0x20004157
 8008468:	20004156 	.word	0x20004156
 800846c:	20004154 	.word	0x20004154
      }
    }
    else if (resultCheck == 3) //3 can't open udp since network
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	2b03      	cmp	r3, #3
 8008474:	d11a      	bne.n	80084ac <sim7600_handle_received_data+0x300>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4a69      	ldr	r2, [pc, #420]	; (8008628 <sim7600_handle_received_data+0x47c>)
 8008482:	4413      	add	r3, r2
 8008484:	1d3a      	adds	r2, r7, #4
 8008486:	4619      	mov	r1, r3
 8008488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848a:	f7ff fe53 	bl	8008134 <check_normal_response>
 800848e:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 8096 	bne.w	80085c4 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_network_IsOpen = false;
 8008498:	4b64      	ldr	r3, [pc, #400]	; (800862c <sim7600_handle_received_data+0x480>)
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
        sim7600_udp_IsOpen = false;
 800849e:	4b64      	ldr	r3, [pc, #400]	; (8008630 <sim7600_handle_received_data+0x484>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 80084a4:	4b63      	ldr	r3, [pc, #396]	; (8008634 <sim7600_handle_received_data+0x488>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
        continue;
 80084aa:	e091      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 4) //4 call
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d113      	bne.n	80084da <sim7600_handle_received_data+0x32e>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80084b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a5a      	ldr	r2, [pc, #360]	; (8008628 <sim7600_handle_received_data+0x47c>)
 80084be:	4413      	add	r3, r2
 80084c0:	1d3a      	adds	r2, r7, #4
 80084c2:	4619      	mov	r1, r3
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	f7ff fe35 	bl	8008134 <check_normal_response>
 80084ca:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d178      	bne.n	80085c4 <sim7600_handle_received_data+0x418>
      {
        sim7600_have_call = true;
 80084d2:	4b59      	ldr	r3, [pc, #356]	; (8008638 <sim7600_handle_received_data+0x48c>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]
        continue;
 80084d8:	e07a      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 5) //sms
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d110      	bne.n	8008502 <sim7600_handle_received_data+0x356>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 80084e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4a4f      	ldr	r2, [pc, #316]	; (8008628 <sim7600_handle_received_data+0x47c>)
 80084ec:	4413      	add	r3, r2
 80084ee:	1d3a      	adds	r2, r7, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f4:	f7ff fe1e 	bl	8008134 <check_normal_response>
 80084f8:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d161      	bne.n	80085c4 <sim7600_handle_received_data+0x418>
      {
        //reserved
        continue;
 8008500:	e066      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 6) //"\r\n>""
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	2b06      	cmp	r3, #6
 8008506:	d10c      	bne.n	8008522 <sim7600_handle_received_data+0x376>
    {
      if (sim7600_send_packetStatus1 == 1)
 8008508:	4b4c      	ldr	r3, [pc, #304]	; (800863c <sim7600_handle_received_data+0x490>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d159      	bne.n	80085c4 <sim7600_handle_received_data+0x418>
      {
        sim7600_send_packetStatus1 = 0;
 8008510:	4b4a      	ldr	r3, [pc, #296]	; (800863c <sim7600_handle_received_data+0x490>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
        sim_buff_index = posOfSubStrSave - sim_buff + 3; // +1 point right after "\r\n>"
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	4a49      	ldr	r2, [pc, #292]	; (8008640 <sim7600_handle_received_data+0x494>)
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	3303      	adds	r3, #3
 800851e:	607b      	str	r3, [r7, #4]
        continue;
 8008520:	e056      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
    }
    else //cmd check
    {
      //check whether have \r\n at the end of this response
      posOfSubStrSave += checkCmdResLength; //point to right after the last charater of response
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008526:	4413      	add	r3, r2
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t* pointerTo_r_n = strstr(posOfSubStrSave, "\r\n");
 800852a:	4946      	ldr	r1, [pc, #280]	; (8008644 <sim7600_handle_received_data+0x498>)
 800852c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852e:	f000 fe59 	bl	80091e4 <strstr>
 8008532:	6138      	str	r0, [r7, #16]
      if(pointerTo_r_n != NULL)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d032      	beq.n	80085a0 <sim7600_handle_received_data+0x3f4>
      {
        if (cmdSendStatus == 1)
 800853a:	4b43      	ldr	r3, [pc, #268]	; (8008648 <sim7600_handle_received_data+0x49c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d103      	bne.n	800854a <sim7600_handle_received_data+0x39e>
          cmdSendStatus = 0;
 8008542:	4b41      	ldr	r3, [pc, #260]	; (8008648 <sim7600_handle_received_data+0x49c>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e01e      	b.n	8008588 <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_tcp_connectStatus == 1)
 800854a:	4b40      	ldr	r3, [pc, #256]	; (800864c <sim7600_handle_received_data+0x4a0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d103      	bne.n	800855a <sim7600_handle_received_data+0x3ae>
          sim7600_open_tcp_connectStatus = 0;
 8008552:	4b3e      	ldr	r3, [pc, #248]	; (800864c <sim7600_handle_received_data+0x4a0>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	e016      	b.n	8008588 <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_udp_connectStatus == 1)
 800855a:	4b3d      	ldr	r3, [pc, #244]	; (8008650 <sim7600_handle_received_data+0x4a4>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d103      	bne.n	800856a <sim7600_handle_received_data+0x3be>
          sim7600_open_udp_connectStatus = 0;
 8008562:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <sim7600_handle_received_data+0x4a4>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e00e      	b.n	8008588 <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_netStatus == 1)
 800856a:	4b3a      	ldr	r3, [pc, #232]	; (8008654 <sim7600_handle_received_data+0x4a8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d103      	bne.n	800857a <sim7600_handle_received_data+0x3ce>
          sim7600_open_netStatus = 0;
 8008572:	4b38      	ldr	r3, [pc, #224]	; (8008654 <sim7600_handle_received_data+0x4a8>)
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	e006      	b.n	8008588 <sim7600_handle_received_data+0x3dc>
        else if (sim7600_send_packetStatus2 == 1)
 800857a:	4b37      	ldr	r3, [pc, #220]	; (8008658 <sim7600_handle_received_data+0x4ac>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d102      	bne.n	8008588 <sim7600_handle_received_data+0x3dc>
          sim7600_send_packetStatus2 = 0;
 8008582:	4b35      	ldr	r3, [pc, #212]	; (8008658 <sim7600_handle_received_data+0x4ac>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
        res1 = NULL;
 8008588:	4b34      	ldr	r3, [pc, #208]	; (800865c <sim7600_handle_received_data+0x4b0>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
        res2 = NULL;
 800858e:	4b34      	ldr	r3, [pc, #208]	; (8008660 <sim7600_handle_received_data+0x4b4>)
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
        //change sim_buff_index
        sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4a2a      	ldr	r2, [pc, #168]	; (8008640 <sim7600_handle_received_data+0x494>)
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	3302      	adds	r3, #2
 800859c:	607b      	str	r3, [r7, #4]
        continue;
 800859e:	e017      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
      else if(posOfSubStrSave + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80085a6:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <sim7600_handle_received_data+0x4b8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	4b24      	ldr	r3, [pc, #144]	; (8008640 <sim7600_handle_received_data+0x494>)
 80085ae:	440b      	add	r3, r1
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d205      	bcs.n	80085c0 <sim7600_handle_received_data+0x414>
      {
        //data may be error-bit
        sim_buff_index = posOfSubStrSave - sim_buff + max_data_length_of_response_r_n;
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	4a22      	ldr	r2, [pc, #136]	; (8008640 <sim7600_handle_received_data+0x494>)
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	3364      	adds	r3, #100	; 0x64
 80085bc:	607b      	str	r3, [r7, #4]
        continue;
 80085be:	e007      	b.n	80085d0 <sim7600_handle_received_data+0x424>
      }
      else //don't have enough data
        return sim_buff_index;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	e02c      	b.n	800861e <sim7600_handle_received_data+0x472>
    }

    //data maybe bit-error sim_buff_index = posOfSubStrSave - sim_buff + max_data_length_of_response_r_n;
    if(resultTmp == 1) continue;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d001      	beq.n	80085ce <sim7600_handle_received_data+0x422>
    //dont have enough data
    //else if(resultTmp == 2) return sim_buff_index;
    else return sim_buff_index;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	e027      	b.n	800861e <sim7600_handle_received_data+0x472>
    if(resultTmp == 1) continue;
 80085ce:	bf00      	nop
  {
 80085d0:	e5fa      	b.n	80081c8 <sim7600_handle_received_data+0x1c>
  }

  //discard garbage \r\n .. \r\n
  while(true)
  {
    if (sim_buff_index >= sim_buff_length)
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4b23      	ldr	r3, [pc, #140]	; (8008664 <sim7600_handle_received_data+0x4b8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	db02      	blt.n	80085e2 <sim7600_handle_received_data+0x436>
      return sim_buff_length;
 80085dc:	4b21      	ldr	r3, [pc, #132]	; (8008664 <sim7600_handle_received_data+0x4b8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	e01d      	b.n	800861e <sim7600_handle_received_data+0x472>

    posOfSubStr = strstr(sim_buff + sim_buff_index, "\r\n"); //first \r\n
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	461a      	mov	r2, r3
 80085e6:	4b16      	ldr	r3, [pc, #88]	; (8008640 <sim7600_handle_received_data+0x494>)
 80085e8:	4413      	add	r3, r2
 80085ea:	4916      	ldr	r1, [pc, #88]	; (8008644 <sim7600_handle_received_data+0x498>)
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fdf9 	bl	80091e4 <strstr>
 80085f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(posOfSubStr != NULL)
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00f      	beq.n	800861a <sim7600_handle_received_data+0x46e>
    {
      posOfSubStr = strstr(posOfSubStr + 2, "\r\n"); //second \r\n
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	3302      	adds	r3, #2
 80085fe:	4911      	ldr	r1, [pc, #68]	; (8008644 <sim7600_handle_received_data+0x498>)
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fdef 	bl	80091e4 <strstr>
 8008606:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(posOfSubStr != NULL) //detect \r\n...\r\n
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <sim7600_handle_received_data+0x46e>
      {
        sim_buff_index = posOfSubStr + 2 - sim_buff;
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	3302      	adds	r3, #2
 8008612:	4a0b      	ldr	r2, [pc, #44]	; (8008640 <sim7600_handle_received_data+0x494>)
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	607b      	str	r3, [r7, #4]
    if (sim_buff_index >= sim_buff_length)
 8008618:	e7db      	b.n	80085d2 <sim7600_handle_received_data+0x426>
        continue;
      }
    }
    break; //if can't find \r\n .. \r\n sastified
 800861a:	bf00      	nop
  }
  return sim_buff_index;
 800861c:	687b      	ldr	r3, [r7, #4]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3730      	adds	r7, #48	; 0x30
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000078 	.word	0x20000078
 800862c:	20004155 	.word	0x20004155
 8008630:	20004157 	.word	0x20004157
 8008634:	20004154 	.word	0x20004154
 8008638:	20004158 	.word	0x20004158
 800863c:	20004168 	.word	0x20004168
 8008640:	200082d4 	.word	0x200082d4
 8008644:	0800a3f8 	.word	0x0800a3f8
 8008648:	20004178 	.word	0x20004178
 800864c:	20004174 	.word	0x20004174
 8008650:	20004164 	.word	0x20004164
 8008654:	20004160 	.word	0x20004160
 8008658:	2000416c 	.word	0x2000416c
 800865c:	2000423c 	.word	0x2000423c
 8008660:	20004230 	.word	0x20004230
 8008664:	200057b4 	.word	0x200057b4

08008668 <sim7600_handle_udp_packet>:
bool IsPlaying = false;

int totalFrame = 0;

void sim7600_handle_udp_packet(uint8_t* udpPacket, int length)
{
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b089      	sub	sp, #36	; 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  //this var is maybe changed unexpected, so delcare  "a volatile pointer to a volatile variable"
  packetMP3HeaderStruct volatile * volatile packetMP3Header = (packetMP3HeaderStruct*)udpPacket;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60fb      	str	r3, [r7, #12]
  //check sum to confirm it is head of a packet
  if (packetMP3Header->checkSumHeader == sim7600_check_sum_data(udpPacket + 2, length - 2))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29c      	uxth	r4, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3b02      	subs	r3, #2
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f000 fa90 	bl	8008bac <sim7600_check_sum_data>
 800868c:	4603      	mov	r3, r0
 800868e:	429c      	cmp	r4, r3
 8008690:	f040 8192 	bne.w	80089b8 <sim7600_handle_udp_packet+0x350>
  {
    numOfPacketUDPReceived++;
 8008694:	4b65      	ldr	r3, [pc, #404]	; (800882c <sim7600_handle_udp_packet+0x1c4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	4a64      	ldr	r2, [pc, #400]	; (800882c <sim7600_handle_udp_packet+0x1c4>)
 800869c:	6013      	str	r3, [r2, #0]

    if (packetMP3Header->songID != songID) //new song
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80086a4:	4b62      	ldr	r3, [pc, #392]	; (8008830 <sim7600_handle_udp_packet+0x1c8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d04a      	beq.n	8008742 <sim7600_handle_udp_packet+0xda>
    {          
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 80086ac:	4b61      	ldr	r3, [pc, #388]	; (8008834 <sim7600_handle_udp_packet+0x1cc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f04f 31ff 	mov.w	r1, #4294967295
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fb fce5 	bl	8004084 <osSemaphoreWait>

      VS1003_ResetDecodeTime();
 80086ba:	f000 fc2d 	bl	8008f18 <VS1003_ResetDecodeTime>

    	//clear status frame -> to detect old frame when play
    	for(int i = 0; i < mp3PacketSize; i++) 
 80086be:	2300      	movs	r3, #0
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	e018      	b.n	80086f6 <sim7600_handle_udp_packet+0x8e>
      {
        mp3Packet[i].IsEmpty = true;
 80086c4:	4a5c      	ldr	r2, [pc, #368]	; (8008838 <sim7600_handle_udp_packet+0x1d0>)
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80086cc:	fb01 f303 	mul.w	r3, r1, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
        mp3Packet[i].ID = 0;
 80086da:	4a57      	ldr	r2, [pc, #348]	; (8008838 <sim7600_handle_udp_packet+0x1d0>)
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < mp3PacketSize; i++) 
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	3301      	adds	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	2b17      	cmp	r3, #23
 80086fa:	dde3      	ble.n	80086c4 <sim7600_handle_udp_packet+0x5c>
      }

      IsPlaying = true;
 80086fc:	4b4f      	ldr	r3, [pc, #316]	; (800883c <sim7600_handle_udp_packet+0x1d4>)
 80086fe:	2201      	movs	r2, #1
 8008700:	701a      	strb	r2, [r3, #0]

      songID = packetMP3Header->songID; 
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8008708:	4a49      	ldr	r2, [pc, #292]	; (8008830 <sim7600_handle_udp_packet+0x1c8>)
 800870a:	6013      	str	r3, [r2, #0]

      IDframeSaved = 0; //debug
 800870c:	4b4c      	ldr	r3, [pc, #304]	; (8008840 <sim7600_handle_udp_packet+0x1d8>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]

      totalFrame = 0;
 8008712:	4b4c      	ldr	r3, [pc, #304]	; (8008844 <sim7600_handle_udp_packet+0x1dc>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

      IDframePlayed = packetMP3Header->IDframe - 1; //to synchronize
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800871e:	3b01      	subs	r3, #1
 8008720:	4a49      	ldr	r2, [pc, #292]	; (8008848 <sim7600_handle_udp_packet+0x1e0>)
 8008722:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 8008724:	4b43      	ldr	r3, [pc, #268]	; (8008834 <sim7600_handle_udp_packet+0x1cc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	f7fb fcf9 	bl	8004120 <osSemaphoreRelease>
      //osThreadResumeAll();
    //****************************************************

      //put to task play mp3
      osMessagePut(play_mp3_queue_id, packetMP3Header->IDframe, osWaitForever); //wait before play
 800872e:	4b47      	ldr	r3, [pc, #284]	; (800884c <sim7600_handle_udp_packet+0x1e4>)
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	4619      	mov	r1, r3
 800873e:	f7fb fd4d 	bl	80041dc <osMessagePut>
    }

    if(!IsPlaying) //new play after loss alot of packets
 8008742:	4b3e      	ldr	r3, [pc, #248]	; (800883c <sim7600_handle_udp_packet+0x1d4>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f083 0301 	eor.w	r3, r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d054      	beq.n	80087fa <sim7600_handle_udp_packet+0x192>
    {
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 8008750:	4b38      	ldr	r3, [pc, #224]	; (8008834 <sim7600_handle_udp_packet+0x1cc>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f04f 31ff 	mov.w	r1, #4294967295
 8008758:	4618      	mov	r0, r3
 800875a:	f7fb fc93 	bl	8004084 <osSemaphoreWait>


      //clear status frame -> to detect old frame when play
    	for(int i = 0; i < mp3PacketSize; i++) 
 800875e:	2300      	movs	r3, #0
 8008760:	61bb      	str	r3, [r7, #24]
 8008762:	e02c      	b.n	80087be <sim7600_handle_udp_packet+0x156>
      {
        if(!mp3Packet[i].IsEmpty) conSotLai++;
 8008764:	4a34      	ldr	r2, [pc, #208]	; (8008838 <sim7600_handle_udp_packet+0x1d0>)
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800876c:	fb01 f303 	mul.w	r3, r1, r3
 8008770:	4413      	add	r3, r2
 8008772:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f083 0301 	eor.w	r3, r3, #1
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <sim7600_handle_udp_packet+0x124>
 8008782:	4b33      	ldr	r3, [pc, #204]	; (8008850 <sim7600_handle_udp_packet+0x1e8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	4a31      	ldr	r2, [pc, #196]	; (8008850 <sim7600_handle_udp_packet+0x1e8>)
 800878a:	6013      	str	r3, [r2, #0]
        mp3Packet[i].IsEmpty = true;
 800878c:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <sim7600_handle_udp_packet+0x1d0>)
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008794:	fb01 f303 	mul.w	r3, r1, r3
 8008798:	4413      	add	r3, r2
 800879a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800879e:	2201      	movs	r2, #1
 80087a0:	701a      	strb	r2, [r3, #0]
        mp3Packet[i].ID = 0;
 80087a2:	4a25      	ldr	r2, [pc, #148]	; (8008838 <sim7600_handle_udp_packet+0x1d0>)
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < mp3PacketSize; i++) 
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	3301      	adds	r3, #1
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2b17      	cmp	r3, #23
 80087c2:	ddcf      	ble.n	8008764 <sim7600_handle_udp_packet+0xfc>
      }
      totalFrame = 0;
 80087c4:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <sim7600_handle_udp_packet+0x1dc>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
      
      IsPlaying = true;
 80087ca:	4b1c      	ldr	r3, [pc, #112]	; (800883c <sim7600_handle_udp_packet+0x1d4>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	701a      	strb	r2, [r3, #0]
      IDframePlayed = packetMP3Header->IDframe - 1; //to synchronize
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a1b      	ldr	r2, [pc, #108]	; (8008848 <sim7600_handle_udp_packet+0x1e0>)
 80087da:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 80087dc:	4b15      	ldr	r3, [pc, #84]	; (8008834 <sim7600_handle_udp_packet+0x1cc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fb fc9d 	bl	8004120 <osSemaphoreRelease>
      //osThreadResumeAll();
    //****************************************************

      //put to task play mp3
      osMessagePut(play_mp3_queue_id, packetMP3Header->IDframe, osWaitForever); //wait before play
 80087e6:	4b19      	ldr	r3, [pc, #100]	; (800884c <sim7600_handle_udp_packet+0x1e4>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	4619      	mov	r1, r3
 80087f6:	f7fb fcf1 	bl	80041dc <osMessagePut>
    }

    
    //debug
    if (packetMP3Header->IDframe > IDframeSaved)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <sim7600_handle_udp_packet+0x1d8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	dd27      	ble.n	8008858 <sim7600_handle_udp_packet+0x1f0>
    {
      miss_frame += packetMP3Header->IDframe - IDframeSaved - 1;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <sim7600_handle_udp_packet+0x1d8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <sim7600_handle_udp_packet+0x1ec>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4413      	add	r3, r2
 800881c:	4a0d      	ldr	r2, [pc, #52]	; (8008854 <sim7600_handle_udp_packet+0x1ec>)
 800881e:	6013      	str	r3, [r2, #0]
      IDframeSaved = packetMP3Header->IDframe;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008826:	4a06      	ldr	r2, [pc, #24]	; (8008840 <sim7600_handle_udp_packet+0x1d8>)
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	e01a      	b.n	8008862 <sim7600_handle_udp_packet+0x1fa>
 800882c:	20004188 	.word	0x20004188
 8008830:	200041a0 	.word	0x200041a0
 8008834:	200057bc 	.word	0x200057bc
 8008838:	200057d8 	.word	0x200057d8
 800883c:	200041b0 	.word	0x200041b0
 8008840:	200041a8 	.word	0x200041a8
 8008844:	200041b4 	.word	0x200041b4
 8008848:	200041a4 	.word	0x200041a4
 800884c:	20004238 	.word	0x20004238
 8008850:	2000419c 	.word	0x2000419c
 8008854:	20004190 	.word	0x20004190
    }
    else
    {
      late_frame++;
 8008858:	4b5c      	ldr	r3, [pc, #368]	; (80089cc <sim7600_handle_udp_packet+0x364>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	4a5b      	ldr	r2, [pc, #364]	; (80089cc <sim7600_handle_udp_packet+0x364>)
 8008860:	6013      	str	r3, [r2, #0]
    }

    int index_mp3_packet = packetMP3Header->IDframe % mp3PacketSize;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008868:	4b59      	ldr	r3, [pc, #356]	; (80089d0 <sim7600_handle_udp_packet+0x368>)
 800886a:	fb83 1302 	smull	r1, r3, r3, r2
 800886e:	1099      	asrs	r1, r3, #2
 8008870:	17d3      	asrs	r3, r2, #31
 8008872:	1ac9      	subs	r1, r1, r3
 8008874:	460b      	mov	r3, r1
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	440b      	add	r3, r1
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	617b      	str	r3, [r7, #20]

    if(mp3Packet[index_mp3_packet].IsEmpty && packetMP3Header->IDframe > IDframePlayed)
 8008880:	4a54      	ldr	r2, [pc, #336]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 8089 	beq.w	80089ac <sim7600_handle_udp_packet+0x344>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80088a0:	4b4d      	ldr	r3, [pc, #308]	; (80089d8 <sim7600_handle_udp_packet+0x370>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	f340 8081 	ble.w	80089ac <sim7600_handle_udp_packet+0x344>
    {
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 80088aa:	4b4c      	ldr	r3, [pc, #304]	; (80089dc <sim7600_handle_udp_packet+0x374>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f04f 31ff 	mov.w	r1, #4294967295
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fb fbe6 	bl	8004084 <osSemaphoreWait>

      //clear garbage
      int adu_length = length - packetMP3HeaderLength;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3b0a      	subs	r3, #10
 80088bc:	613b      	str	r3, [r7, #16]
      memset(mp3Packet[index_mp3_packet].frames + adu_length, 0, mp3PacketFrameSize - adu_length);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
 80088c8:	4a42      	ldr	r2, [pc, #264]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 80088ca:	441a      	add	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	18d0      	adds	r0, r2, r3
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 80088d6:	461a      	mov	r2, r3
 80088d8:	2100      	movs	r1, #0
 80088da:	f000 fbe5 	bl	80090a8 <memset>
      memcpy(mp3Packet[index_mp3_packet].frames, packetMP3Header->frame, adu_length);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	4a3a      	ldr	r2, [pc, #232]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 80088ea:	1898      	adds	r0, r3, r2
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	330a      	adds	r3, #10
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4619      	mov	r1, r3
 80088f4:	f000 fbca 	bl	800908c <memcpy>
      mp3Packet[index_mp3_packet].ID = packetMP3Header->IDframe;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80088fe:	4935      	ldr	r1, [pc, #212]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8008906:	fb00 f303 	mul.w	r3, r0, r3
 800890a:	440b      	add	r3, r1
 800890c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008910:	601a      	str	r2, [r3, #0]
      //change bitrate to 144kbps
      mp3Packet[index_mp3_packet].frames[2] &= 0x0F;
 8008912:	4a30      	ldr	r2, [pc, #192]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	3302      	adds	r3, #2
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	b2d8      	uxtb	r0, r3
 800892a:	4a2a      	ldr	r2, [pc, #168]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008932:	fb01 f303 	mul.w	r3, r1, r3
 8008936:	4413      	add	r3, r2
 8008938:	3302      	adds	r3, #2
 800893a:	4602      	mov	r2, r0
 800893c:	701a      	strb	r2, [r3, #0]
      mp3Packet[index_mp3_packet].frames[2] |= 0xD0; //0b1101 0000
 800893e:	4a25      	ldr	r2, [pc, #148]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	3302      	adds	r3, #2
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8008954:	b2d8      	uxtb	r0, r3
 8008956:	4a1f      	ldr	r2, [pc, #124]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	3302      	adds	r3, #2
 8008966:	4602      	mov	r2, r0
 8008968:	701a      	strb	r2, [r3, #0]
      //clear backpoint of playbuff
      mp3Packet[index_mp3_packet].frames[4] = 0;
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]

      mp3Packet[index_mp3_packet].IsEmpty = false;
 800897e:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <sim7600_handle_udp_packet+0x36c>)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]

      totalFrame++;
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <sim7600_handle_udp_packet+0x378>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	4a11      	ldr	r2, [pc, #68]	; (80089e0 <sim7600_handle_udp_packet+0x378>)
 800899c:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <sim7600_handle_udp_packet+0x374>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fb fbbc 	bl	8004120 <osSemaphoreRelease>
    {
 80089a8:	bf00      	nop
  }
  else
  {
	  error_frame++; //debug
  }
}
 80089aa:	e00a      	b.n	80089c2 <sim7600_handle_udp_packet+0x35a>
      frame_out_of_order++;
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <sim7600_handle_udp_packet+0x37c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a0c      	ldr	r2, [pc, #48]	; (80089e4 <sim7600_handle_udp_packet+0x37c>)
 80089b4:	6013      	str	r3, [r2, #0]
}
 80089b6:	e004      	b.n	80089c2 <sim7600_handle_udp_packet+0x35a>
	  error_frame++; //debug
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <sim7600_handle_udp_packet+0x380>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3301      	adds	r3, #1
 80089be:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <sim7600_handle_udp_packet+0x380>)
 80089c0:	6013      	str	r3, [r2, #0]
}
 80089c2:	bf00      	nop
 80089c4:	3724      	adds	r7, #36	; 0x24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20004194 	.word	0x20004194
 80089d0:	2aaaaaab 	.word	0x2aaaaaab
 80089d4:	200057d8 	.word	0x200057d8
 80089d8:	200041a4 	.word	0x200041a4
 80089dc:	200057bc 	.word	0x200057bc
 80089e0:	200041b4 	.word	0x200041b4
 80089e4:	20004198 	.word	0x20004198
 80089e8:	2000418c 	.word	0x2000418c

080089ec <playMp3DMA>:
int differ;

//sign: 1 ~ beggin play with delay n frame , 2 ~ play immidiate frame after dma tc interrupt
uint8_t playBuff[mp3PacketFrameSize];
void playMp3DMA(int IDframeWillplay)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  static int playMp3PacketIndex = 0;
  if(IDframeWillplay > 0)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd23      	ble.n	8008a42 <playMp3DMA+0x56>
  {
    //********* critical part **************
    //osThreadSuspendAll();
    osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 80089fa:	4b60      	ldr	r3, [pc, #384]	; (8008b7c <playMp3DMA+0x190>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fb fb3e 	bl	8004084 <osSemaphoreWait>
    
    xQueueReset(play_mp3_queue_id);
 8008a08:	4b5d      	ldr	r3, [pc, #372]	; (8008b80 <playMp3DMA+0x194>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fb fd4c 	bl	80044ac <xQueueGenericReset>
    playMp3PacketIndex = IDframeWillplay % mp3PacketSize;
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4b5b      	ldr	r3, [pc, #364]	; (8008b84 <playMp3DMA+0x198>)
 8008a18:	fb83 2301 	smull	r2, r3, r3, r1
 8008a1c:	109a      	asrs	r2, r3, #2
 8008a1e:	17cb      	asrs	r3, r1, #31
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	4613      	mov	r3, r2
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	1aca      	subs	r2, r1, r3
 8008a2c:	4b56      	ldr	r3, [pc, #344]	; (8008b88 <playMp3DMA+0x19c>)
 8008a2e:	601a      	str	r2, [r3, #0]

    osSemaphoreRelease(BinSemPlayMp3Handle);
 8008a30:	4b52      	ldr	r3, [pc, #328]	; (8008b7c <playMp3DMA+0x190>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fb fb73 	bl	8004120 <osSemaphoreRelease>
    //osThreadResumeAll();
    //****************************************************

    osDelay(waitFrameBeforePlayNewSong * timePerFrame_ms); //8 frame delay
 8008a3a:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8008a3e:	f7fb fada 	bl	8003ff6 <osDelay>
  }

  if(totalFrame  >= 20)
 8008a42:	4b52      	ldr	r3, [pc, #328]	; (8008b8c <playMp3DMA+0x1a0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b13      	cmp	r3, #19
 8008a48:	dd02      	ble.n	8008a50 <playMp3DMA+0x64>
  {
	  totalFrame = 0;
 8008a4a:	4b50      	ldr	r3, [pc, #320]	; (8008b8c <playMp3DMA+0x1a0>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
  }
  if(IsPlaying)
 8008a50:	4b4f      	ldr	r3, [pc, #316]	; (8008b90 <playMp3DMA+0x1a4>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 808c 	beq.w	8008b72 <playMp3DMA+0x186>
    first iniatilize timer->CNT =  IDframePlayed
    */

    //********* critical part **************
    //osThreadSuspendAll();
    osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 8008a5a:	4b48      	ldr	r3, [pc, #288]	; (8008b7c <playMp3DMA+0x190>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb fb0e 	bl	8004084 <osSemaphoreWait>

    if(totalFrame < 1)
 8008a68:	4b48      	ldr	r3, [pc, #288]	; (8008b8c <playMp3DMA+0x1a0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dc06      	bgt.n	8008a7e <playMp3DMA+0x92>
    {
      totalFrame = 0;
 8008a70:	4b46      	ldr	r3, [pc, #280]	; (8008b8c <playMp3DMA+0x1a0>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
      IsPlaying = false;
 8008a76:	4b46      	ldr	r3, [pc, #280]	; (8008b90 <playMp3DMA+0x1a4>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e074      	b.n	8008b68 <playMp3DMA+0x17c>
    }
    else
    {
      if (mp3Packet[playMp3PacketIndex].IsEmpty == false && mp3Packet[playMp3PacketIndex].ID > IDframePlayed)
 8008a7e:	4b42      	ldr	r3, [pc, #264]	; (8008b88 <playMp3DMA+0x19c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a44      	ldr	r2, [pc, #272]	; (8008b94 <playMp3DMA+0x1a8>)
 8008a84:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f083 0301 	eor.w	r3, r3, #1
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d042      	beq.n	8008b24 <playMp3DMA+0x138>
 8008a9e:	4b3a      	ldr	r3, [pc, #232]	; (8008b88 <playMp3DMA+0x19c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a3c      	ldr	r2, [pc, #240]	; (8008b94 <playMp3DMA+0x1a8>)
 8008aa4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4b38      	ldr	r3, [pc, #224]	; (8008b98 <playMp3DMA+0x1ac>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	dd33      	ble.n	8008b24 <playMp3DMA+0x138>
      {
        memcpy(playBuff, mp3Packet[playMp3PacketIndex].frames, mp3PacketFrameSize);
 8008abc:	4b32      	ldr	r3, [pc, #200]	; (8008b88 <playMp3DMA+0x19c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008ac4:	fb02 f303 	mul.w	r3, r2, r3
 8008ac8:	4a32      	ldr	r2, [pc, #200]	; (8008b94 <playMp3DMA+0x1a8>)
 8008aca:	4413      	add	r3, r2
 8008acc:	4a33      	ldr	r2, [pc, #204]	; (8008b9c <playMp3DMA+0x1b0>)
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f000 fad8 	bl	800908c <memcpy>
        mp3Packet[playMp3PacketIndex].IsEmpty = true;
 8008adc:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <playMp3DMA+0x19c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2c      	ldr	r2, [pc, #176]	; (8008b94 <playMp3DMA+0x1a8>)
 8008ae2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008af0:	2201      	movs	r2, #1
 8008af2:	701a      	strb	r2, [r3, #0]
        IDframePlayed = mp3Packet[playMp3PacketIndex].ID;
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <playMp3DMA+0x19c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a26      	ldr	r2, [pc, #152]	; (8008b94 <playMp3DMA+0x1a8>)
 8008afa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a23      	ldr	r2, [pc, #140]	; (8008b98 <playMp3DMA+0x1ac>)
 8008b0c:	6013      	str	r3, [r2, #0]
        VS1003_Play_Data_DMA(playBuff, mp3PacketFrameSize);
 8008b0e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008b12:	4822      	ldr	r0, [pc, #136]	; (8008b9c <playMp3DMA+0x1b0>)
 8008b14:	f000 fa34 	bl	8008f80 <VS1003_Play_Data_DMA>
        totalFrame--;
 8008b18:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <playMp3DMA+0x1a0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <playMp3DMA+0x1a0>)
 8008b20:	6013      	str	r3, [r2, #0]
      {
 8008b22:	e006      	b.n	8008b32 <playMp3DMA+0x146>
      }
      else
      {
        VS1003_Play_1frameMute_DMA();
 8008b24:	f000 fa4e 	bl	8008fc4 <VS1003_Play_1frameMute_DMA>
        miss_adu++;
 8008b28:	4b1d      	ldr	r3, [pc, #116]	; (8008ba0 <playMp3DMA+0x1b4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	4a1c      	ldr	r2, [pc, #112]	; (8008ba0 <playMp3DMA+0x1b4>)
 8008b30:	6013      	str	r3, [r2, #0]
      }
      differ = IDframeSaved - IDframePlayed; //debug
 8008b32:	4b1c      	ldr	r3, [pc, #112]	; (8008ba4 <playMp3DMA+0x1b8>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <playMp3DMA+0x1ac>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ba8 <playMp3DMA+0x1bc>)
 8008b3e:	6013      	str	r3, [r2, #0]
      
      playMp3PacketIndex++;
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <playMp3DMA+0x19c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <playMp3DMA+0x19c>)
 8008b48:	6013      	str	r3, [r2, #0]
      playMp3PacketIndex %= mp3PacketSize;
 8008b4a:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <playMp3DMA+0x19c>)
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <playMp3DMA+0x198>)
 8008b50:	fb83 2301 	smull	r2, r3, r3, r1
 8008b54:	109a      	asrs	r2, r3, #2
 8008b56:	17cb      	asrs	r3, r1, #31
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	1aca      	subs	r2, r1, r3
 8008b64:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <playMp3DMA+0x19c>)
 8008b66:	601a      	str	r2, [r3, #0]
    }

    osSemaphoreRelease(BinSemPlayMp3Handle);
 8008b68:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <playMp3DMA+0x190>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb fad7 	bl	8004120 <osSemaphoreRelease>
    //osThreadResumeAll();
    //****************************************************
  }
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200057bc 	.word	0x200057bc
 8008b80:	20004238 	.word	0x20004238
 8008b84:	2aaaaaab 	.word	0x2aaaaaab
 8008b88:	200041bc 	.word	0x200041bc
 8008b8c:	200041b4 	.word	0x200041b4
 8008b90:	200041b0 	.word	0x200041b0
 8008b94:	200057d8 	.word	0x200057d8
 8008b98:	200041a4 	.word	0x200041a4
 8008b9c:	20008124 	.word	0x20008124
 8008ba0:	200041ac 	.word	0x200041ac
 8008ba4:	200041a8 	.word	0x200041a8
 8008ba8:	2000811c 	.word	0x2000811c

08008bac <sim7600_check_sum_data>:

uint16_t sim7600_check_sum_data(uint8_t *ptr, int length)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]

	while (length > 1) //cong het cac byte16 lai
 8008bba:	e00f      	b.n	8008bdc <sim7600_check_sum_data+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	3201      	adds	r2, #1
 8008bc6:	7812      	ldrb	r2, [r2, #0]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	607b      	str	r3, [r7, #4]
		length -= 2;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	3b02      	subs	r3, #2
 8008bda:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	dcec      	bgt.n	8008bbc <sim7600_check_sum_data+0x10>
	}
	if (length)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <sim7600_check_sum_data+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8008bf4:	e005      	b.n	8008c02 <sim7600_check_sum_data+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	4413      	add	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f5      	bne.n	8008bf6 <sim7600_check_sum_data+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	60fb      	str	r3, [r7, #12]
	//hoan vi byte thap byte cao
	return (uint16_t)checksum;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	b29b      	uxth	r3, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <sim7600_usart_IRQHandler>:
/**
 * \brief           usartSim7600 global interrupt handler
 */
int numOfIDLEdetect = 0;
void sim7600_usart_IRQHandler(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  //if (LL_USART_IsEnabledIT_IDLE(usartSim7600) && LL_USART_IsActiveFlag_IDLE(usartSim7600)) {
  //    LL_USART_ClearFlag_IDLE(usartSim7600);        /* Clear IDLE line flag */
  //   sim7600_usart_rx_check();                       /* Check for data to process */
  //}

  if ((usartSim7600->CR1 & USART_CR1_IDLEIE) == USART_CR1_IDLEIE && (usartSim7600->SR & USART_SR_IDLE) == (USART_SR_IDLE))
 8008c26:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <sim7600_usart_IRQHandler+0x58>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d11c      	bne.n	8008c6e <sim7600_usart_IRQHandler+0x4e>
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <sim7600_usart_IRQHandler+0x58>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0310 	and.w	r3, r3, #16
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d115      	bne.n	8008c6e <sim7600_usart_IRQHandler+0x4e>
  {
    // Clear IDLE line flag
    volatile uint32_t tmpreg;
    tmpreg = usartSim7600->SR;
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <sim7600_usart_IRQHandler+0x58>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8008c4a:	687b      	ldr	r3, [r7, #4]
    tmpreg = usartSim7600->DR;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <sim7600_usart_IRQHandler+0x58>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8008c54:	687b      	ldr	r3, [r7, #4]

    //for safe, because dma handle with DR, so after disabel dma, we will read to clear IDLE
    //tmpreg = usartSim7600->DR;
    //(void)tmpreg;

    osMessagePut(usart_rx_dma_queue_id, 1, 0);
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <sim7600_usart_IRQHandler+0x5c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fb fabc 	bl	80041dc <osMessagePut>

    numOfIDLEdetect++; //debug
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <sim7600_usart_IRQHandler+0x60>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <sim7600_usart_IRQHandler+0x60>)
 8008c6c:	6013      	str	r3, [r2, #0]
  }
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000000c 	.word	0x2000000c
 8008c7c:	20004294 	.word	0x20004294
 8008c80:	200041b8 	.word	0x200041b8

08008c84 <sim7600_change_baud>:

void sim7600_change_baud(uint32_t baudrate)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  LL_USART_Disable(USART1);
 8008c8c:	4807      	ldr	r0, [pc, #28]	; (8008cac <sim7600_change_baud+0x28>)
 8008c8e:	f7fe fa85 	bl	800719c <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <sim7600_change_baud+0x2c>)
 8008c98:	4804      	ldr	r0, [pc, #16]	; (8008cac <sim7600_change_baud+0x28>)
 8008c9a:	f7fe fab3 	bl	8007204 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 8008c9e:	4803      	ldr	r0, [pc, #12]	; (8008cac <sim7600_change_baud+0x28>)
 8008ca0:	f7fe fa6c 	bl	800717c <LL_USART_Enable>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40011000 	.word	0x40011000
 8008cb0:	0501bd00 	.word	0x0501bd00

08008cb4 <sim7600_restart>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_restart()
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  //suspend all task

  LL_USART_Disable(USART1);
 8008cb8:	483d      	ldr	r0, [pc, #244]	; (8008db0 <sim7600_restart+0xfc>)
 8008cba:	f7fe fa6f 	bl	800719c <LL_USART_Disable>
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8008cbe:	2102      	movs	r1, #2
 8008cc0:	483c      	ldr	r0, [pc, #240]	; (8008db4 <sim7600_restart+0x100>)
 8008cc2:	f7fe f845 	bl	8006d50 <LL_DMA_DisableStream>
  while(LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 0
 8008cc6:	bf00      	nop
 8008cc8:	2102      	movs	r1, #2
 8008cca:	483a      	ldr	r0, [pc, #232]	; (8008db4 <sim7600_restart+0x100>)
 8008ccc:	f7fe f860 	bl	8006d90 <LL_DMA_IsEnabledStream>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f8      	bne.n	8008cc8 <sim7600_restart+0x14>
  printf("%s", "rst\n");
 8008cd6:	4838      	ldr	r0, [pc, #224]	; (8008db8 <sim7600_restart+0x104>)
 8008cd8:	f000 fa5c 	bl	8009194 <puts>

  //int
  UDPsendStatus = 0;
 8008cdc:	4b37      	ldr	r3, [pc, #220]	; (8008dbc <sim7600_restart+0x108>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
  cmdSendStatus = 0;
 8008ce2:	4b37      	ldr	r3, [pc, #220]	; (8008dc0 <sim7600_restart+0x10c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
  sim7600_open_tcp_connectStatus = 0;
 8008ce8:	4b36      	ldr	r3, [pc, #216]	; (8008dc4 <sim7600_restart+0x110>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
  sim7600_open_udp_connectStatus = 0;
 8008cee:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <sim7600_restart+0x114>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
  sim7600_open_netStatus = 0;
 8008cf4:	4b35      	ldr	r3, [pc, #212]	; (8008dcc <sim7600_restart+0x118>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
  sim7600_send_packetStatus1 = 0;
 8008cfa:	4b35      	ldr	r3, [pc, #212]	; (8008dd0 <sim7600_restart+0x11c>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
  sim7600_send_packetStatus2 = 0;
 8008d00:	4b34      	ldr	r3, [pc, #208]	; (8008dd4 <sim7600_restart+0x120>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
  old_pos = 0;
 8008d06:	4b34      	ldr	r3, [pc, #208]	; (8008dd8 <sim7600_restart+0x124>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
  pos = 0;
 8008d0c:	4b33      	ldr	r3, [pc, #204]	; (8008ddc <sim7600_restart+0x128>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
  songID = 0;
 8008d12:	4b33      	ldr	r3, [pc, #204]	; (8008de0 <sim7600_restart+0x12c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

  //bool
  Sim7600BasicConfigSuccess = false;
 8008d18:	4b32      	ldr	r3, [pc, #200]	; (8008de4 <sim7600_restart+0x130>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
  sim7600_error = false;
 8008d1e:	4b32      	ldr	r3, [pc, #200]	; (8008de8 <sim7600_restart+0x134>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
  sim7600_network_IsOpen = false;
 8008d24:	4b31      	ldr	r3, [pc, #196]	; (8008dec <sim7600_restart+0x138>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	701a      	strb	r2, [r3, #0]
  sim7600_tcp_IsOpen = false;
 8008d2a:	4b31      	ldr	r3, [pc, #196]	; (8008df0 <sim7600_restart+0x13c>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
  sim7600_udp_IsOpen = false;
 8008d30:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <sim7600_restart+0x140>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
  sim7600_have_call = false;
 8008d36:	4b30      	ldr	r3, [pc, #192]	; (8008df8 <sim7600_restart+0x144>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
  IsPlaying = false;
 8008d3c:	4b2f      	ldr	r3, [pc, #188]	; (8008dfc <sim7600_restart+0x148>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]
  //init udp var
  // int i, limit = mp3PacketSize;
  // for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;

  if (restartSimstatus < max_num_restart_sim7600) //0-19
 8008d42:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <sim7600_restart+0x14c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b13      	cmp	r3, #19
 8008d48:	dc07      	bgt.n	8008d5a <sim7600_restart+0xa6>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 8008d4a:	f7fe fc9d 	bl	8007688 <sim7600_powerOFF>
    restartSimstatus++;
 8008d4e:	4b2c      	ldr	r3, [pc, #176]	; (8008e00 <sim7600_restart+0x14c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	4a2a      	ldr	r2, [pc, #168]	; (8008e00 <sim7600_restart+0x14c>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e013      	b.n	8008d82 <sim7600_restart+0xce>
  }
  else if (restartSimstatus < (max_num_restart_sim7600 + max_num_reset_sim7600)) // 20-21
 8008d5a:	4b29      	ldr	r3, [pc, #164]	; (8008e00 <sim7600_restart+0x14c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b15      	cmp	r3, #21
 8008d60:	dc09      	bgt.n	8008d76 <sim7600_restart+0xc2>
  {
    sim7600_reset();
 8008d62:	f7fe fcaf 	bl	80076c4 <sim7600_reset>
    sim7600_powerOFF();
 8008d66:	f7fe fc8f 	bl	8007688 <sim7600_powerOFF>
    restartSimstatus++;
 8008d6a:	4b25      	ldr	r3, [pc, #148]	; (8008e00 <sim7600_restart+0x14c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	4a23      	ldr	r2, [pc, #140]	; (8008e00 <sim7600_restart+0x14c>)
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	e005      	b.n	8008d82 <sim7600_restart+0xce>
  }
  else // >=22
  {
    //delay to wait
    sim7600_delay_ms(sleep_minutes_sim7600 * 60 * 1000); // sleep_minutes_sim7600 minutes
 8008d76:	4823      	ldr	r0, [pc, #140]	; (8008e04 <sim7600_restart+0x150>)
 8008d78:	f7fe fc5c 	bl	8007634 <sim7600_delay_ms>
    restartSimstatus = 0;
 8008d7c:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <sim7600_restart+0x14c>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
  }

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8008d82:	2102      	movs	r1, #2
 8008d84:	480b      	ldr	r0, [pc, #44]	; (8008db4 <sim7600_restart+0x100>)
 8008d86:	f7fd ffc3 	bl	8006d10 <LL_DMA_EnableStream>
	while(!LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 1
 8008d8a:	bf00      	nop
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	4809      	ldr	r0, [pc, #36]	; (8008db4 <sim7600_restart+0x100>)
 8008d90:	f7fd fffe 	bl	8006d90 <LL_DMA_IsEnabledStream>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f8      	beq.n	8008d8c <sim7600_restart+0xd8>

  //change baud rate to default
  sim7600_change_baud(Sim7600BaudDefaul); // in this function usart is enable again
 8008d9a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8008d9e:	f7ff ff71 	bl	8008c84 <sim7600_change_baud>
  LL_USART_Enable(USART1);
 8008da2:	4803      	ldr	r0, [pc, #12]	; (8008db0 <sim7600_restart+0xfc>)
 8008da4:	f7fe f9ea 	bl	800717c <LL_USART_Enable>

  //power on again
  sim7600_powerON();
 8008da8:	f7fe fc50 	bl	800764c <sim7600_powerON>

  //resume all task
}
 8008dac:	bf00      	nop
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40011000 	.word	0x40011000
 8008db4:	40026400 	.word	0x40026400
 8008db8:	0800a3fc 	.word	0x0800a3fc
 8008dbc:	2000415c 	.word	0x2000415c
 8008dc0:	20004178 	.word	0x20004178
 8008dc4:	20004174 	.word	0x20004174
 8008dc8:	20004164 	.word	0x20004164
 8008dcc:	20004160 	.word	0x20004160
 8008dd0:	20004168 	.word	0x20004168
 8008dd4:	2000416c 	.word	0x2000416c
 8008dd8:	2000417c 	.word	0x2000417c
 8008ddc:	20004180 	.word	0x20004180
 8008de0:	200041a0 	.word	0x200041a0
 8008de4:	20004159 	.word	0x20004159
 8008de8:	20004154 	.word	0x20004154
 8008dec:	20004155 	.word	0x20004155
 8008df0:	20004156 	.word	0x20004156
 8008df4:	20004157 	.word	0x20004157
 8008df8:	20004158 	.word	0x20004158
 8008dfc:	200041b0 	.word	0x200041b0
 8008e00:	20004150 	.word	0x20004150
 8008e04:	02932e00 	.word	0x02932e00

08008e08 <VS1003_SPI_WriteByte>:
}

/*******************************************************************************
*******************************************************************************/ 
static uint8_t VS1003_SPI_WriteByte( uint8_t TxData )
{	
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	uint8_t cmd[1] = {0, };
 8008e12:	2300      	movs	r3, #0
 8008e14:	733b      	strb	r3, [r7, #12]

	cmd[0] = TxData;
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	733b      	strb	r3, [r7, #12]
	res = HAL_SPI_Transmit(hspiVS1003, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8008e1a:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <VS1003_SPI_WriteByte+0x34>)
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	f107 010c 	add.w	r1, r7, #12
 8008e22:	f04f 33ff 	mov.w	r3, #4294967295
 8008e26:	2201      	movs	r2, #1
 8008e28:	f7f9 fbfb 	bl	8002622 <HAL_SPI_Transmit>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK);
		//printf("HAL_SPI_Transmit Error\r\n");

  return 0;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20009660 	.word	0x20009660

08008e40 <VS1003_Init>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_Init(void)
{		  
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  hspiVS1003 = &hspi2;
 8008e44:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <VS1003_Init+0x48>)
 8008e46:	4a11      	ldr	r2, [pc, #68]	; (8008e8c <VS1003_Init+0x4c>)
 8008e48:	601a      	str	r2, [r3, #0]
  MP3_Reset(0);
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2180      	movs	r1, #128	; 0x80
 8008e4e:	4810      	ldr	r0, [pc, #64]	; (8008e90 <VS1003_Init+0x50>)
 8008e50:	f7f9 fad8 	bl	8002404 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008e54:	2064      	movs	r0, #100	; 0x64
 8008e56:	f7f8 fcab 	bl	80017b0 <HAL_Delay>
  MP3_Reset(1);
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	2180      	movs	r1, #128	; 0x80
 8008e5e:	480c      	ldr	r0, [pc, #48]	; (8008e90 <VS1003_Init+0x50>)
 8008e60:	f7f9 fad0 	bl	8002404 <HAL_GPIO_WritePin>

  MP3_DCS(1);
 8008e64:	2201      	movs	r2, #1
 8008e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e6a:	4809      	ldr	r0, [pc, #36]	; (8008e90 <VS1003_Init+0x50>)
 8008e6c:	f7f9 faca 	bl	8002404 <HAL_GPIO_WritePin>
  MP3_CCS(0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e76:	4806      	ldr	r0, [pc, #24]	; (8008e90 <VS1003_Init+0x50>)
 8008e78:	f7f9 fac4 	bl	8002404 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 8008e7c:	200a      	movs	r0, #10
 8008e7e:	f7f8 fc97 	bl	80017b0 <HAL_Delay>
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20009660 	.word	0x20009660
 8008e8c:	200041d0 	.word	0x200041d0
 8008e90:	40021000 	.word	0x40021000

08008e94 <VS1003_WriteReg>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_WriteReg( uint8_t reg, uint16_t value )
{  
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	460a      	mov	r2, r1
 8008e9e:	71fb      	strb	r3, [r7, #7]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	80bb      	strh	r3, [r7, #4]
	while(  MP3_DREQ ==0 );           /* */
 8008ea4:	bf00      	nop
 8008ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eaa:	481a      	ldr	r0, [pc, #104]	; (8008f14 <VS1003_WriteReg+0x80>)
 8008eac:	f7f9 fa92 	bl	80023d4 <HAL_GPIO_ReadPin>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f7      	beq.n	8008ea6 <VS1003_WriteReg+0x12>

	//VS1003_SPI_SetSpeed( SPI_SPEED_LOW );
	MP3_DCS(1); 
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ebc:	4815      	ldr	r0, [pc, #84]	; (8008f14 <VS1003_WriteReg+0x80>)
 8008ebe:	f7f9 faa1 	bl	8002404 <HAL_GPIO_WritePin>
	MP3_CCS(0); 
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ec8:	4812      	ldr	r0, [pc, #72]	; (8008f14 <VS1003_WriteReg+0x80>)
 8008eca:	f7f9 fa9b 	bl	8002404 <HAL_GPIO_WritePin>
	VS1003_SPI_WriteByte(VS_WRITE_COMMAND); /*  VS1003 */
 8008ece:	2002      	movs	r0, #2
 8008ed0:	f7ff ff9a 	bl	8008e08 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(reg);             
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff96 	bl	8008e08 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value>>8);        
 8008edc:	88bb      	ldrh	r3, [r7, #4]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff8f 	bl	8008e08 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value);	 
 8008eea:	88bb      	ldrh	r3, [r7, #4]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff ff8a 	bl	8008e08 <VS1003_SPI_WriteByte>
	MP3_DCS(0); 
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008efa:	4806      	ldr	r0, [pc, #24]	; (8008f14 <VS1003_WriteReg+0x80>)
 8008efc:	f7f9 fa82 	bl	8002404 <HAL_GPIO_WritePin>
	MP3_CCS(1); 
 8008f00:	2201      	movs	r2, #1
 8008f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008f06:	4803      	ldr	r0, [pc, #12]	; (8008f14 <VS1003_WriteReg+0x80>)
 8008f08:	f7f9 fa7c 	bl	8002404 <HAL_GPIO_WritePin>
	//VS1003_SPI_SetSpeed( SPI_SPEED_HIGH );
} 
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40021000 	.word	0x40021000

08008f18 <VS1003_ResetDecodeTime>:
} 

/*******************************************************************************
*******************************************************************************/                       
void VS1003_ResetDecodeTime(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	2004      	movs	r0, #4
 8008f20:	f7ff ffb8 	bl	8008e94 <VS1003_WriteReg>
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000); /* */
 8008f24:	2100      	movs	r1, #0
 8008f26:	2004      	movs	r0, #4
 8008f28:	f7ff ffb4 	bl	8008e94 <VS1003_WriteReg>
}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <VS1003_SoftReset>:
} 

/*******************************************************************************
*******************************************************************************/
void VS1003_SoftReset(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
	uint8_t retry; 	
				 
	while(  MP3_DREQ ==0 );
 8008f34:	bf00      	nop
 8008f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f3a:	4810      	ldr	r0, [pc, #64]	; (8008f7c <VS1003_SoftReset+0x4c>)
 8008f3c:	f7f9 fa4a 	bl	80023d4 <HAL_GPIO_ReadPin>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0f7      	beq.n	8008f36 <VS1003_SoftReset+0x6>

	VS1003_WriteReg(SPI_MODE, (SM_SDINEW | SM_RESET));  /* */
 8008f46:	f640 0104 	movw	r1, #2052	; 0x804
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f7ff ffa2 	bl	8008e94 <VS1003_WriteReg>
	HAL_Delay(2);                        /* 1.35ms */
 8008f50:	2002      	movs	r0, #2
 8008f52:	f7f8 fc2d 	bl	80017b0 <HAL_Delay>
	
	while(  MP3_DREQ ==0 );
 8008f56:	bf00      	nop
 8008f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f5c:	4807      	ldr	r0, [pc, #28]	; (8008f7c <VS1003_SoftReset+0x4c>)
 8008f5e:	f7f9 fa39 	bl	80023d4 <HAL_GPIO_ReadPin>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f7      	beq.n	8008f58 <VS1003_SoftReset+0x28>
	// 		//printf("SPI_CLOCKF Set Error\r\n");
	// 		break; 
	// 	}
	// }

	VS1003_WriteReg(SPI_VOL, 0x4040);
 8008f68:	f244 0140 	movw	r1, #16448	; 0x4040
 8008f6c:	200b      	movs	r0, #11
 8008f6e:	f7ff ff91 	bl	8008e94 <VS1003_WriteReg>
	VS1003_ResetDecodeTime();
 8008f72:	f7ff ffd1 	bl	8008f18 <VS1003_ResetDecodeTime>
} 
 8008f76:	bf00      	nop
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	40021000 	.word	0x40021000

08008f80 <VS1003_Play_Data_DMA>:
	HAL_SPI_Transmit_DMA(hspiVS1003, szBeepMP3, sizeof(szBeepMP3));

}

void VS1003_Play_Data_DMA(uint8_t *data, int length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	MP3_CCS(1);
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008f90:	480a      	ldr	r0, [pc, #40]	; (8008fbc <VS1003_Play_Data_DMA+0x3c>)
 8008f92:	f7f9 fa37 	bl	8002404 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 8008f96:	2200      	movs	r2, #0
 8008f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f9c:	4807      	ldr	r0, [pc, #28]	; (8008fbc <VS1003_Play_Data_DMA+0x3c>)
 8008f9e:	f7f9 fa31 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, data, length);
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <VS1003_Play_Data_DMA+0x40>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f9 fc75 	bl	800289c <HAL_SPI_Transmit_DMA>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	20009660 	.word	0x20009660

08008fc4 <VS1003_Play_1frameMute_DMA>:

void VS1003_Play_1frameMute_DMA()
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
	MP3_CCS(1);
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fce:	4809      	ldr	r0, [pc, #36]	; (8008ff4 <VS1003_Play_1frameMute_DMA+0x30>)
 8008fd0:	f7f9 fa18 	bl	8002404 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fda:	4806      	ldr	r0, [pc, #24]	; (8008ff4 <VS1003_Play_1frameMute_DMA+0x30>)
 8008fdc:	f7f9 fa12 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, mute1framse, 24);
 8008fe0:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <VS1003_Play_1frameMute_DMA+0x34>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2218      	movs	r2, #24
 8008fe6:	4905      	ldr	r1, [pc, #20]	; (8008ffc <VS1003_Play_1frameMute_DMA+0x38>)
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f9 fc57 	bl	800289c <HAL_SPI_Transmit_DMA>
}
 8008fee:	bf00      	nop
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	20009660 	.word	0x20009660
 8008ffc:	20000104 	.word	0x20000104

08009000 <DREQ_VS1003_IRQhandler>:

void DREQ_VS1003_IRQhandler()
{
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
	if (!MP3_DREQ) //falling
 8009004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009008:	4809      	ldr	r0, [pc, #36]	; (8009030 <DREQ_VS1003_IRQhandler+0x30>)
 800900a:	f7f9 f9e3 	bl	80023d4 <HAL_GPIO_ReadPin>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <DREQ_VS1003_IRQhandler+0x20>
	    {
	      //pause DMA
	      HAL_SPI_DMAPause(hspiVS1003);
 8009014:	4b07      	ldr	r3, [pc, #28]	; (8009034 <DREQ_VS1003_IRQhandler+0x34>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f7f9 fcf5 	bl	8002a08 <HAL_SPI_DMAPause>
	    else //rising
	    {
	      //resume DMA
	      HAL_SPI_DMAResume(hspiVS1003);
	    }
}
 800901e:	e004      	b.n	800902a <DREQ_VS1003_IRQhandler+0x2a>
	      HAL_SPI_DMAResume(hspiVS1003);
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <DREQ_VS1003_IRQhandler+0x34>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f7f9 fd11 	bl	8002a4c <HAL_SPI_DMAResume>
}
 800902a:	bf00      	nop
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	40021000 	.word	0x40021000
 8009034:	20009660 	.word	0x20009660

08009038 <__errno>:
 8009038:	4b01      	ldr	r3, [pc, #4]	; (8009040 <__errno+0x8>)
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	2000011c 	.word	0x2000011c

08009044 <__libc_init_array>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4d0d      	ldr	r5, [pc, #52]	; (800907c <__libc_init_array+0x38>)
 8009048:	4c0d      	ldr	r4, [pc, #52]	; (8009080 <__libc_init_array+0x3c>)
 800904a:	1b64      	subs	r4, r4, r5
 800904c:	10a4      	asrs	r4, r4, #2
 800904e:	2600      	movs	r6, #0
 8009050:	42a6      	cmp	r6, r4
 8009052:	d109      	bne.n	8009068 <__libc_init_array+0x24>
 8009054:	4d0b      	ldr	r5, [pc, #44]	; (8009084 <__libc_init_array+0x40>)
 8009056:	4c0c      	ldr	r4, [pc, #48]	; (8009088 <__libc_init_array+0x44>)
 8009058:	f001 f864 	bl	800a124 <_init>
 800905c:	1b64      	subs	r4, r4, r5
 800905e:	10a4      	asrs	r4, r4, #2
 8009060:	2600      	movs	r6, #0
 8009062:	42a6      	cmp	r6, r4
 8009064:	d105      	bne.n	8009072 <__libc_init_array+0x2e>
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	f855 3b04 	ldr.w	r3, [r5], #4
 800906c:	4798      	blx	r3
 800906e:	3601      	adds	r6, #1
 8009070:	e7ee      	b.n	8009050 <__libc_init_array+0xc>
 8009072:	f855 3b04 	ldr.w	r3, [r5], #4
 8009076:	4798      	blx	r3
 8009078:	3601      	adds	r6, #1
 800907a:	e7f2      	b.n	8009062 <__libc_init_array+0x1e>
 800907c:	0800a4d0 	.word	0x0800a4d0
 8009080:	0800a4d0 	.word	0x0800a4d0
 8009084:	0800a4d0 	.word	0x0800a4d0
 8009088:	0800a4d4 	.word	0x0800a4d4

0800908c <memcpy>:
 800908c:	440a      	add	r2, r1
 800908e:	4291      	cmp	r1, r2
 8009090:	f100 33ff 	add.w	r3, r0, #4294967295
 8009094:	d100      	bne.n	8009098 <memcpy+0xc>
 8009096:	4770      	bx	lr
 8009098:	b510      	push	{r4, lr}
 800909a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090a2:	4291      	cmp	r1, r2
 80090a4:	d1f9      	bne.n	800909a <memcpy+0xe>
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <memset>:
 80090a8:	4402      	add	r2, r0
 80090aa:	4603      	mov	r3, r0
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d100      	bne.n	80090b2 <memset+0xa>
 80090b0:	4770      	bx	lr
 80090b2:	f803 1b01 	strb.w	r1, [r3], #1
 80090b6:	e7f9      	b.n	80090ac <memset+0x4>

080090b8 <_puts_r>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	460e      	mov	r6, r1
 80090bc:	4605      	mov	r5, r0
 80090be:	b118      	cbz	r0, 80090c8 <_puts_r+0x10>
 80090c0:	6983      	ldr	r3, [r0, #24]
 80090c2:	b90b      	cbnz	r3, 80090c8 <_puts_r+0x10>
 80090c4:	f000 fa80 	bl	80095c8 <__sinit>
 80090c8:	69ab      	ldr	r3, [r5, #24]
 80090ca:	68ac      	ldr	r4, [r5, #8]
 80090cc:	b913      	cbnz	r3, 80090d4 <_puts_r+0x1c>
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 fa7a 	bl	80095c8 <__sinit>
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <_puts_r+0xd0>)
 80090d6:	429c      	cmp	r4, r3
 80090d8:	d120      	bne.n	800911c <_puts_r+0x64>
 80090da:	686c      	ldr	r4, [r5, #4]
 80090dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090de:	07db      	lsls	r3, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_puts_r+0x36>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	0598      	lsls	r0, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_puts_r+0x36>
 80090e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ea:	f000 fb0b 	bl	8009704 <__retarget_lock_acquire_recursive>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	0719      	lsls	r1, r3, #28
 80090f2:	d51d      	bpl.n	8009130 <_puts_r+0x78>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b1db      	cbz	r3, 8009130 <_puts_r+0x78>
 80090f8:	3e01      	subs	r6, #1
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009100:	3b01      	subs	r3, #1
 8009102:	60a3      	str	r3, [r4, #8]
 8009104:	bb39      	cbnz	r1, 8009156 <_puts_r+0x9e>
 8009106:	2b00      	cmp	r3, #0
 8009108:	da38      	bge.n	800917c <_puts_r+0xc4>
 800910a:	4622      	mov	r2, r4
 800910c:	210a      	movs	r1, #10
 800910e:	4628      	mov	r0, r5
 8009110:	f000 f880 	bl	8009214 <__swbuf_r>
 8009114:	3001      	adds	r0, #1
 8009116:	d011      	beq.n	800913c <_puts_r+0x84>
 8009118:	250a      	movs	r5, #10
 800911a:	e011      	b.n	8009140 <_puts_r+0x88>
 800911c:	4b1b      	ldr	r3, [pc, #108]	; (800918c <_puts_r+0xd4>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d101      	bne.n	8009126 <_puts_r+0x6e>
 8009122:	68ac      	ldr	r4, [r5, #8]
 8009124:	e7da      	b.n	80090dc <_puts_r+0x24>
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <_puts_r+0xd8>)
 8009128:	429c      	cmp	r4, r3
 800912a:	bf08      	it	eq
 800912c:	68ec      	ldreq	r4, [r5, #12]
 800912e:	e7d5      	b.n	80090dc <_puts_r+0x24>
 8009130:	4621      	mov	r1, r4
 8009132:	4628      	mov	r0, r5
 8009134:	f000 f8c0 	bl	80092b8 <__swsetup_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	d0dd      	beq.n	80090f8 <_puts_r+0x40>
 800913c:	f04f 35ff 	mov.w	r5, #4294967295
 8009140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009142:	07da      	lsls	r2, r3, #31
 8009144:	d405      	bmi.n	8009152 <_puts_r+0x9a>
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	059b      	lsls	r3, r3, #22
 800914a:	d402      	bmi.n	8009152 <_puts_r+0x9a>
 800914c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914e:	f000 fada 	bl	8009706 <__retarget_lock_release_recursive>
 8009152:	4628      	mov	r0, r5
 8009154:	bd70      	pop	{r4, r5, r6, pc}
 8009156:	2b00      	cmp	r3, #0
 8009158:	da04      	bge.n	8009164 <_puts_r+0xac>
 800915a:	69a2      	ldr	r2, [r4, #24]
 800915c:	429a      	cmp	r2, r3
 800915e:	dc06      	bgt.n	800916e <_puts_r+0xb6>
 8009160:	290a      	cmp	r1, #10
 8009162:	d004      	beq.n	800916e <_puts_r+0xb6>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	7019      	strb	r1, [r3, #0]
 800916c:	e7c5      	b.n	80090fa <_puts_r+0x42>
 800916e:	4622      	mov	r2, r4
 8009170:	4628      	mov	r0, r5
 8009172:	f000 f84f 	bl	8009214 <__swbuf_r>
 8009176:	3001      	adds	r0, #1
 8009178:	d1bf      	bne.n	80090fa <_puts_r+0x42>
 800917a:	e7df      	b.n	800913c <_puts_r+0x84>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	250a      	movs	r5, #10
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	6022      	str	r2, [r4, #0]
 8009184:	701d      	strb	r5, [r3, #0]
 8009186:	e7db      	b.n	8009140 <_puts_r+0x88>
 8009188:	0800a454 	.word	0x0800a454
 800918c:	0800a474 	.word	0x0800a474
 8009190:	0800a434 	.word	0x0800a434

08009194 <puts>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <puts+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f7ff bf8d 	b.w	80090b8 <_puts_r>
 800919e:	bf00      	nop
 80091a0:	2000011c 	.word	0x2000011c

080091a4 <siprintf>:
 80091a4:	b40e      	push	{r1, r2, r3}
 80091a6:	b500      	push	{lr}
 80091a8:	b09c      	sub	sp, #112	; 0x70
 80091aa:	ab1d      	add	r3, sp, #116	; 0x74
 80091ac:	9002      	str	r0, [sp, #8]
 80091ae:	9006      	str	r0, [sp, #24]
 80091b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091b4:	4809      	ldr	r0, [pc, #36]	; (80091dc <siprintf+0x38>)
 80091b6:	9107      	str	r1, [sp, #28]
 80091b8:	9104      	str	r1, [sp, #16]
 80091ba:	4909      	ldr	r1, [pc, #36]	; (80091e0 <siprintf+0x3c>)
 80091bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c0:	9105      	str	r1, [sp, #20]
 80091c2:	6800      	ldr	r0, [r0, #0]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	a902      	add	r1, sp, #8
 80091c8:	f000 fc08 	bl	80099dc <_svfiprintf_r>
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	b01c      	add	sp, #112	; 0x70
 80091d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d8:	b003      	add	sp, #12
 80091da:	4770      	bx	lr
 80091dc:	2000011c 	.word	0x2000011c
 80091e0:	ffff0208 	.word	0xffff0208

080091e4 <strstr>:
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e6:	780c      	ldrb	r4, [r1, #0]
 80091e8:	b164      	cbz	r4, 8009204 <strstr+0x20>
 80091ea:	4603      	mov	r3, r0
 80091ec:	781a      	ldrb	r2, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	1c5e      	adds	r6, r3, #1
 80091f2:	b90a      	cbnz	r2, 80091f8 <strstr+0x14>
 80091f4:	4610      	mov	r0, r2
 80091f6:	e005      	b.n	8009204 <strstr+0x20>
 80091f8:	4294      	cmp	r4, r2
 80091fa:	d108      	bne.n	800920e <strstr+0x2a>
 80091fc:	460d      	mov	r5, r1
 80091fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009202:	b902      	cbnz	r2, 8009206 <strstr+0x22>
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009206:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800920a:	4297      	cmp	r7, r2
 800920c:	d0f7      	beq.n	80091fe <strstr+0x1a>
 800920e:	4633      	mov	r3, r6
 8009210:	e7ec      	b.n	80091ec <strstr+0x8>
	...

08009214 <__swbuf_r>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	460e      	mov	r6, r1
 8009218:	4614      	mov	r4, r2
 800921a:	4605      	mov	r5, r0
 800921c:	b118      	cbz	r0, 8009226 <__swbuf_r+0x12>
 800921e:	6983      	ldr	r3, [r0, #24]
 8009220:	b90b      	cbnz	r3, 8009226 <__swbuf_r+0x12>
 8009222:	f000 f9d1 	bl	80095c8 <__sinit>
 8009226:	4b21      	ldr	r3, [pc, #132]	; (80092ac <__swbuf_r+0x98>)
 8009228:	429c      	cmp	r4, r3
 800922a:	d12b      	bne.n	8009284 <__swbuf_r+0x70>
 800922c:	686c      	ldr	r4, [r5, #4]
 800922e:	69a3      	ldr	r3, [r4, #24]
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	071a      	lsls	r2, r3, #28
 8009236:	d52f      	bpl.n	8009298 <__swbuf_r+0x84>
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	b36b      	cbz	r3, 8009298 <__swbuf_r+0x84>
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	1ac0      	subs	r0, r0, r3
 8009242:	6963      	ldr	r3, [r4, #20]
 8009244:	b2f6      	uxtb	r6, r6
 8009246:	4283      	cmp	r3, r0
 8009248:	4637      	mov	r7, r6
 800924a:	dc04      	bgt.n	8009256 <__swbuf_r+0x42>
 800924c:	4621      	mov	r1, r4
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f926 	bl	80094a0 <_fflush_r>
 8009254:	bb30      	cbnz	r0, 80092a4 <__swbuf_r+0x90>
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	3b01      	subs	r3, #1
 800925a:	60a3      	str	r3, [r4, #8]
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	701e      	strb	r6, [r3, #0]
 8009264:	6963      	ldr	r3, [r4, #20]
 8009266:	3001      	adds	r0, #1
 8009268:	4283      	cmp	r3, r0
 800926a:	d004      	beq.n	8009276 <__swbuf_r+0x62>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	07db      	lsls	r3, r3, #31
 8009270:	d506      	bpl.n	8009280 <__swbuf_r+0x6c>
 8009272:	2e0a      	cmp	r6, #10
 8009274:	d104      	bne.n	8009280 <__swbuf_r+0x6c>
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	f000 f911 	bl	80094a0 <_fflush_r>
 800927e:	b988      	cbnz	r0, 80092a4 <__swbuf_r+0x90>
 8009280:	4638      	mov	r0, r7
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <__swbuf_r+0x9c>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <__swbuf_r+0x7a>
 800928a:	68ac      	ldr	r4, [r5, #8]
 800928c:	e7cf      	b.n	800922e <__swbuf_r+0x1a>
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <__swbuf_r+0xa0>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68ec      	ldreq	r4, [r5, #12]
 8009296:	e7ca      	b.n	800922e <__swbuf_r+0x1a>
 8009298:	4621      	mov	r1, r4
 800929a:	4628      	mov	r0, r5
 800929c:	f000 f80c 	bl	80092b8 <__swsetup_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0cb      	beq.n	800923c <__swbuf_r+0x28>
 80092a4:	f04f 37ff 	mov.w	r7, #4294967295
 80092a8:	e7ea      	b.n	8009280 <__swbuf_r+0x6c>
 80092aa:	bf00      	nop
 80092ac:	0800a454 	.word	0x0800a454
 80092b0:	0800a474 	.word	0x0800a474
 80092b4:	0800a434 	.word	0x0800a434

080092b8 <__swsetup_r>:
 80092b8:	4b32      	ldr	r3, [pc, #200]	; (8009384 <__swsetup_r+0xcc>)
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	681d      	ldr	r5, [r3, #0]
 80092be:	4606      	mov	r6, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	b125      	cbz	r5, 80092ce <__swsetup_r+0x16>
 80092c4:	69ab      	ldr	r3, [r5, #24]
 80092c6:	b913      	cbnz	r3, 80092ce <__swsetup_r+0x16>
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 f97d 	bl	80095c8 <__sinit>
 80092ce:	4b2e      	ldr	r3, [pc, #184]	; (8009388 <__swsetup_r+0xd0>)
 80092d0:	429c      	cmp	r4, r3
 80092d2:	d10f      	bne.n	80092f4 <__swsetup_r+0x3c>
 80092d4:	686c      	ldr	r4, [r5, #4]
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092dc:	0719      	lsls	r1, r3, #28
 80092de:	d42c      	bmi.n	800933a <__swsetup_r+0x82>
 80092e0:	06dd      	lsls	r5, r3, #27
 80092e2:	d411      	bmi.n	8009308 <__swsetup_r+0x50>
 80092e4:	2309      	movs	r3, #9
 80092e6:	6033      	str	r3, [r6, #0]
 80092e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
 80092f2:	e03e      	b.n	8009372 <__swsetup_r+0xba>
 80092f4:	4b25      	ldr	r3, [pc, #148]	; (800938c <__swsetup_r+0xd4>)
 80092f6:	429c      	cmp	r4, r3
 80092f8:	d101      	bne.n	80092fe <__swsetup_r+0x46>
 80092fa:	68ac      	ldr	r4, [r5, #8]
 80092fc:	e7eb      	b.n	80092d6 <__swsetup_r+0x1e>
 80092fe:	4b24      	ldr	r3, [pc, #144]	; (8009390 <__swsetup_r+0xd8>)
 8009300:	429c      	cmp	r4, r3
 8009302:	bf08      	it	eq
 8009304:	68ec      	ldreq	r4, [r5, #12]
 8009306:	e7e6      	b.n	80092d6 <__swsetup_r+0x1e>
 8009308:	0758      	lsls	r0, r3, #29
 800930a:	d512      	bpl.n	8009332 <__swsetup_r+0x7a>
 800930c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800930e:	b141      	cbz	r1, 8009322 <__swsetup_r+0x6a>
 8009310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009314:	4299      	cmp	r1, r3
 8009316:	d002      	beq.n	800931e <__swsetup_r+0x66>
 8009318:	4630      	mov	r0, r6
 800931a:	f000 fa59 	bl	80097d0 <_free_r>
 800931e:	2300      	movs	r3, #0
 8009320:	6363      	str	r3, [r4, #52]	; 0x34
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	2300      	movs	r3, #0
 800932c:	6063      	str	r3, [r4, #4]
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f043 0308 	orr.w	r3, r3, #8
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	b94b      	cbnz	r3, 8009352 <__swsetup_r+0x9a>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009348:	d003      	beq.n	8009352 <__swsetup_r+0x9a>
 800934a:	4621      	mov	r1, r4
 800934c:	4630      	mov	r0, r6
 800934e:	f000 f9ff 	bl	8009750 <__smakebuf_r>
 8009352:	89a0      	ldrh	r0, [r4, #12]
 8009354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009358:	f010 0301 	ands.w	r3, r0, #1
 800935c:	d00a      	beq.n	8009374 <__swsetup_r+0xbc>
 800935e:	2300      	movs	r3, #0
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	6963      	ldr	r3, [r4, #20]
 8009364:	425b      	negs	r3, r3
 8009366:	61a3      	str	r3, [r4, #24]
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	b943      	cbnz	r3, 800937e <__swsetup_r+0xc6>
 800936c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009370:	d1ba      	bne.n	80092e8 <__swsetup_r+0x30>
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	0781      	lsls	r1, r0, #30
 8009376:	bf58      	it	pl
 8009378:	6963      	ldrpl	r3, [r4, #20]
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	e7f4      	b.n	8009368 <__swsetup_r+0xb0>
 800937e:	2000      	movs	r0, #0
 8009380:	e7f7      	b.n	8009372 <__swsetup_r+0xba>
 8009382:	bf00      	nop
 8009384:	2000011c 	.word	0x2000011c
 8009388:	0800a454 	.word	0x0800a454
 800938c:	0800a474 	.word	0x0800a474
 8009390:	0800a434 	.word	0x0800a434

08009394 <__sflush_r>:
 8009394:	898a      	ldrh	r2, [r1, #12]
 8009396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939a:	4605      	mov	r5, r0
 800939c:	0710      	lsls	r0, r2, #28
 800939e:	460c      	mov	r4, r1
 80093a0:	d458      	bmi.n	8009454 <__sflush_r+0xc0>
 80093a2:	684b      	ldr	r3, [r1, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dc05      	bgt.n	80093b4 <__sflush_r+0x20>
 80093a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc02      	bgt.n	80093b4 <__sflush_r+0x20>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	d0f9      	beq.n	80093ae <__sflush_r+0x1a>
 80093ba:	2300      	movs	r3, #0
 80093bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093c0:	682f      	ldr	r7, [r5, #0]
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	d032      	beq.n	800942c <__sflush_r+0x98>
 80093c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	075a      	lsls	r2, r3, #29
 80093cc:	d505      	bpl.n	80093da <__sflush_r+0x46>
 80093ce:	6863      	ldr	r3, [r4, #4]
 80093d0:	1ac0      	subs	r0, r0, r3
 80093d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093d4:	b10b      	cbz	r3, 80093da <__sflush_r+0x46>
 80093d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093d8:	1ac0      	subs	r0, r0, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	4602      	mov	r2, r0
 80093de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b0      	blx	r6
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	d106      	bne.n	80093fa <__sflush_r+0x66>
 80093ec:	6829      	ldr	r1, [r5, #0]
 80093ee:	291d      	cmp	r1, #29
 80093f0:	d82c      	bhi.n	800944c <__sflush_r+0xb8>
 80093f2:	4a2a      	ldr	r2, [pc, #168]	; (800949c <__sflush_r+0x108>)
 80093f4:	40ca      	lsrs	r2, r1
 80093f6:	07d6      	lsls	r6, r2, #31
 80093f8:	d528      	bpl.n	800944c <__sflush_r+0xb8>
 80093fa:	2200      	movs	r2, #0
 80093fc:	6062      	str	r2, [r4, #4]
 80093fe:	04d9      	lsls	r1, r3, #19
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	6022      	str	r2, [r4, #0]
 8009404:	d504      	bpl.n	8009410 <__sflush_r+0x7c>
 8009406:	1c42      	adds	r2, r0, #1
 8009408:	d101      	bne.n	800940e <__sflush_r+0x7a>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b903      	cbnz	r3, 8009410 <__sflush_r+0x7c>
 800940e:	6560      	str	r0, [r4, #84]	; 0x54
 8009410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009412:	602f      	str	r7, [r5, #0]
 8009414:	2900      	cmp	r1, #0
 8009416:	d0ca      	beq.n	80093ae <__sflush_r+0x1a>
 8009418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__sflush_r+0x92>
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f9d5 	bl	80097d0 <_free_r>
 8009426:	2000      	movs	r0, #0
 8009428:	6360      	str	r0, [r4, #52]	; 0x34
 800942a:	e7c1      	b.n	80093b0 <__sflush_r+0x1c>
 800942c:	6a21      	ldr	r1, [r4, #32]
 800942e:	2301      	movs	r3, #1
 8009430:	4628      	mov	r0, r5
 8009432:	47b0      	blx	r6
 8009434:	1c41      	adds	r1, r0, #1
 8009436:	d1c7      	bne.n	80093c8 <__sflush_r+0x34>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0c4      	beq.n	80093c8 <__sflush_r+0x34>
 800943e:	2b1d      	cmp	r3, #29
 8009440:	d001      	beq.n	8009446 <__sflush_r+0xb2>
 8009442:	2b16      	cmp	r3, #22
 8009444:	d101      	bne.n	800944a <__sflush_r+0xb6>
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	e7b1      	b.n	80093ae <__sflush_r+0x1a>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	e7ad      	b.n	80093b0 <__sflush_r+0x1c>
 8009454:	690f      	ldr	r7, [r1, #16]
 8009456:	2f00      	cmp	r7, #0
 8009458:	d0a9      	beq.n	80093ae <__sflush_r+0x1a>
 800945a:	0793      	lsls	r3, r2, #30
 800945c:	680e      	ldr	r6, [r1, #0]
 800945e:	bf08      	it	eq
 8009460:	694b      	ldreq	r3, [r1, #20]
 8009462:	600f      	str	r7, [r1, #0]
 8009464:	bf18      	it	ne
 8009466:	2300      	movne	r3, #0
 8009468:	eba6 0807 	sub.w	r8, r6, r7
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	f1b8 0f00 	cmp.w	r8, #0
 8009472:	dd9c      	ble.n	80093ae <__sflush_r+0x1a>
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009478:	4643      	mov	r3, r8
 800947a:	463a      	mov	r2, r7
 800947c:	4628      	mov	r0, r5
 800947e:	47b0      	blx	r6
 8009480:	2800      	cmp	r0, #0
 8009482:	dc06      	bgt.n	8009492 <__sflush_r+0xfe>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	e78e      	b.n	80093b0 <__sflush_r+0x1c>
 8009492:	4407      	add	r7, r0
 8009494:	eba8 0800 	sub.w	r8, r8, r0
 8009498:	e7e9      	b.n	800946e <__sflush_r+0xda>
 800949a:	bf00      	nop
 800949c:	20400001 	.word	0x20400001

080094a0 <_fflush_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	690b      	ldr	r3, [r1, #16]
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b913      	cbnz	r3, 80094b0 <_fflush_r+0x10>
 80094aa:	2500      	movs	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	b118      	cbz	r0, 80094ba <_fflush_r+0x1a>
 80094b2:	6983      	ldr	r3, [r0, #24]
 80094b4:	b90b      	cbnz	r3, 80094ba <_fflush_r+0x1a>
 80094b6:	f000 f887 	bl	80095c8 <__sinit>
 80094ba:	4b14      	ldr	r3, [pc, #80]	; (800950c <_fflush_r+0x6c>)
 80094bc:	429c      	cmp	r4, r3
 80094be:	d11b      	bne.n	80094f8 <_fflush_r+0x58>
 80094c0:	686c      	ldr	r4, [r5, #4]
 80094c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0ef      	beq.n	80094aa <_fflush_r+0xa>
 80094ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094cc:	07d0      	lsls	r0, r2, #31
 80094ce:	d404      	bmi.n	80094da <_fflush_r+0x3a>
 80094d0:	0599      	lsls	r1, r3, #22
 80094d2:	d402      	bmi.n	80094da <_fflush_r+0x3a>
 80094d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d6:	f000 f915 	bl	8009704 <__retarget_lock_acquire_recursive>
 80094da:	4628      	mov	r0, r5
 80094dc:	4621      	mov	r1, r4
 80094de:	f7ff ff59 	bl	8009394 <__sflush_r>
 80094e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094e4:	07da      	lsls	r2, r3, #31
 80094e6:	4605      	mov	r5, r0
 80094e8:	d4e0      	bmi.n	80094ac <_fflush_r+0xc>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	059b      	lsls	r3, r3, #22
 80094ee:	d4dd      	bmi.n	80094ac <_fflush_r+0xc>
 80094f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f2:	f000 f908 	bl	8009706 <__retarget_lock_release_recursive>
 80094f6:	e7d9      	b.n	80094ac <_fflush_r+0xc>
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <_fflush_r+0x70>)
 80094fa:	429c      	cmp	r4, r3
 80094fc:	d101      	bne.n	8009502 <_fflush_r+0x62>
 80094fe:	68ac      	ldr	r4, [r5, #8]
 8009500:	e7df      	b.n	80094c2 <_fflush_r+0x22>
 8009502:	4b04      	ldr	r3, [pc, #16]	; (8009514 <_fflush_r+0x74>)
 8009504:	429c      	cmp	r4, r3
 8009506:	bf08      	it	eq
 8009508:	68ec      	ldreq	r4, [r5, #12]
 800950a:	e7da      	b.n	80094c2 <_fflush_r+0x22>
 800950c:	0800a454 	.word	0x0800a454
 8009510:	0800a474 	.word	0x0800a474
 8009514:	0800a434 	.word	0x0800a434

08009518 <std>:
 8009518:	2300      	movs	r3, #0
 800951a:	b510      	push	{r4, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	e9c0 3300 	strd	r3, r3, [r0]
 8009522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009526:	6083      	str	r3, [r0, #8]
 8009528:	8181      	strh	r1, [r0, #12]
 800952a:	6643      	str	r3, [r0, #100]	; 0x64
 800952c:	81c2      	strh	r2, [r0, #14]
 800952e:	6183      	str	r3, [r0, #24]
 8009530:	4619      	mov	r1, r3
 8009532:	2208      	movs	r2, #8
 8009534:	305c      	adds	r0, #92	; 0x5c
 8009536:	f7ff fdb7 	bl	80090a8 <memset>
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <std+0x38>)
 800953c:	6263      	str	r3, [r4, #36]	; 0x24
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <std+0x3c>)
 8009540:	62a3      	str	r3, [r4, #40]	; 0x28
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x40>)
 8009544:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <std+0x44>)
 8009548:	6224      	str	r4, [r4, #32]
 800954a:	6323      	str	r3, [r4, #48]	; 0x30
 800954c:	bd10      	pop	{r4, pc}
 800954e:	bf00      	nop
 8009550:	08009f25 	.word	0x08009f25
 8009554:	08009f47 	.word	0x08009f47
 8009558:	08009f7f 	.word	0x08009f7f
 800955c:	08009fa3 	.word	0x08009fa3

08009560 <_cleanup_r>:
 8009560:	4901      	ldr	r1, [pc, #4]	; (8009568 <_cleanup_r+0x8>)
 8009562:	f000 b8af 	b.w	80096c4 <_fwalk_reent>
 8009566:	bf00      	nop
 8009568:	080094a1 	.word	0x080094a1

0800956c <__sfmoreglue>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	1e4a      	subs	r2, r1, #1
 8009570:	2568      	movs	r5, #104	; 0x68
 8009572:	4355      	muls	r5, r2
 8009574:	460e      	mov	r6, r1
 8009576:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800957a:	f000 f979 	bl	8009870 <_malloc_r>
 800957e:	4604      	mov	r4, r0
 8009580:	b140      	cbz	r0, 8009594 <__sfmoreglue+0x28>
 8009582:	2100      	movs	r1, #0
 8009584:	e9c0 1600 	strd	r1, r6, [r0]
 8009588:	300c      	adds	r0, #12
 800958a:	60a0      	str	r0, [r4, #8]
 800958c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009590:	f7ff fd8a 	bl	80090a8 <memset>
 8009594:	4620      	mov	r0, r4
 8009596:	bd70      	pop	{r4, r5, r6, pc}

08009598 <__sfp_lock_acquire>:
 8009598:	4801      	ldr	r0, [pc, #4]	; (80095a0 <__sfp_lock_acquire+0x8>)
 800959a:	f000 b8b3 	b.w	8009704 <__retarget_lock_acquire_recursive>
 800959e:	bf00      	nop
 80095a0:	2000966c 	.word	0x2000966c

080095a4 <__sfp_lock_release>:
 80095a4:	4801      	ldr	r0, [pc, #4]	; (80095ac <__sfp_lock_release+0x8>)
 80095a6:	f000 b8ae 	b.w	8009706 <__retarget_lock_release_recursive>
 80095aa:	bf00      	nop
 80095ac:	2000966c 	.word	0x2000966c

080095b0 <__sinit_lock_acquire>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__sinit_lock_acquire+0x8>)
 80095b2:	f000 b8a7 	b.w	8009704 <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	20009667 	.word	0x20009667

080095bc <__sinit_lock_release>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__sinit_lock_release+0x8>)
 80095be:	f000 b8a2 	b.w	8009706 <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	20009667 	.word	0x20009667

080095c8 <__sinit>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	4604      	mov	r4, r0
 80095cc:	f7ff fff0 	bl	80095b0 <__sinit_lock_acquire>
 80095d0:	69a3      	ldr	r3, [r4, #24]
 80095d2:	b11b      	cbz	r3, 80095dc <__sinit+0x14>
 80095d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d8:	f7ff bff0 	b.w	80095bc <__sinit_lock_release>
 80095dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095e0:	6523      	str	r3, [r4, #80]	; 0x50
 80095e2:	4b13      	ldr	r3, [pc, #76]	; (8009630 <__sinit+0x68>)
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <__sinit+0x6c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ea:	42a3      	cmp	r3, r4
 80095ec:	bf04      	itt	eq
 80095ee:	2301      	moveq	r3, #1
 80095f0:	61a3      	streq	r3, [r4, #24]
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 f820 	bl	8009638 <__sfp>
 80095f8:	6060      	str	r0, [r4, #4]
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 f81c 	bl	8009638 <__sfp>
 8009600:	60a0      	str	r0, [r4, #8]
 8009602:	4620      	mov	r0, r4
 8009604:	f000 f818 	bl	8009638 <__sfp>
 8009608:	2200      	movs	r2, #0
 800960a:	60e0      	str	r0, [r4, #12]
 800960c:	2104      	movs	r1, #4
 800960e:	6860      	ldr	r0, [r4, #4]
 8009610:	f7ff ff82 	bl	8009518 <std>
 8009614:	68a0      	ldr	r0, [r4, #8]
 8009616:	2201      	movs	r2, #1
 8009618:	2109      	movs	r1, #9
 800961a:	f7ff ff7d 	bl	8009518 <std>
 800961e:	68e0      	ldr	r0, [r4, #12]
 8009620:	2202      	movs	r2, #2
 8009622:	2112      	movs	r1, #18
 8009624:	f7ff ff78 	bl	8009518 <std>
 8009628:	2301      	movs	r3, #1
 800962a:	61a3      	str	r3, [r4, #24]
 800962c:	e7d2      	b.n	80095d4 <__sinit+0xc>
 800962e:	bf00      	nop
 8009630:	0800a430 	.word	0x0800a430
 8009634:	08009561 	.word	0x08009561

08009638 <__sfp>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	4607      	mov	r7, r0
 800963c:	f7ff ffac 	bl	8009598 <__sfp_lock_acquire>
 8009640:	4b1e      	ldr	r3, [pc, #120]	; (80096bc <__sfp+0x84>)
 8009642:	681e      	ldr	r6, [r3, #0]
 8009644:	69b3      	ldr	r3, [r6, #24]
 8009646:	b913      	cbnz	r3, 800964e <__sfp+0x16>
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff ffbd 	bl	80095c8 <__sinit>
 800964e:	3648      	adds	r6, #72	; 0x48
 8009650:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009654:	3b01      	subs	r3, #1
 8009656:	d503      	bpl.n	8009660 <__sfp+0x28>
 8009658:	6833      	ldr	r3, [r6, #0]
 800965a:	b30b      	cbz	r3, 80096a0 <__sfp+0x68>
 800965c:	6836      	ldr	r6, [r6, #0]
 800965e:	e7f7      	b.n	8009650 <__sfp+0x18>
 8009660:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009664:	b9d5      	cbnz	r5, 800969c <__sfp+0x64>
 8009666:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <__sfp+0x88>)
 8009668:	60e3      	str	r3, [r4, #12]
 800966a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800966e:	6665      	str	r5, [r4, #100]	; 0x64
 8009670:	f000 f847 	bl	8009702 <__retarget_lock_init_recursive>
 8009674:	f7ff ff96 	bl	80095a4 <__sfp_lock_release>
 8009678:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800967c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009680:	6025      	str	r5, [r4, #0]
 8009682:	61a5      	str	r5, [r4, #24]
 8009684:	2208      	movs	r2, #8
 8009686:	4629      	mov	r1, r5
 8009688:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800968c:	f7ff fd0c 	bl	80090a8 <memset>
 8009690:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009694:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009698:	4620      	mov	r0, r4
 800969a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800969c:	3468      	adds	r4, #104	; 0x68
 800969e:	e7d9      	b.n	8009654 <__sfp+0x1c>
 80096a0:	2104      	movs	r1, #4
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7ff ff62 	bl	800956c <__sfmoreglue>
 80096a8:	4604      	mov	r4, r0
 80096aa:	6030      	str	r0, [r6, #0]
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1d5      	bne.n	800965c <__sfp+0x24>
 80096b0:	f7ff ff78 	bl	80095a4 <__sfp_lock_release>
 80096b4:	230c      	movs	r3, #12
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	e7ee      	b.n	8009698 <__sfp+0x60>
 80096ba:	bf00      	nop
 80096bc:	0800a430 	.word	0x0800a430
 80096c0:	ffff0001 	.word	0xffff0001

080096c4 <_fwalk_reent>:
 80096c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c8:	4606      	mov	r6, r0
 80096ca:	4688      	mov	r8, r1
 80096cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096d0:	2700      	movs	r7, #0
 80096d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096d6:	f1b9 0901 	subs.w	r9, r9, #1
 80096da:	d505      	bpl.n	80096e8 <_fwalk_reent+0x24>
 80096dc:	6824      	ldr	r4, [r4, #0]
 80096de:	2c00      	cmp	r4, #0
 80096e0:	d1f7      	bne.n	80096d2 <_fwalk_reent+0xe>
 80096e2:	4638      	mov	r0, r7
 80096e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e8:	89ab      	ldrh	r3, [r5, #12]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d907      	bls.n	80096fe <_fwalk_reent+0x3a>
 80096ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f2:	3301      	adds	r3, #1
 80096f4:	d003      	beq.n	80096fe <_fwalk_reent+0x3a>
 80096f6:	4629      	mov	r1, r5
 80096f8:	4630      	mov	r0, r6
 80096fa:	47c0      	blx	r8
 80096fc:	4307      	orrs	r7, r0
 80096fe:	3568      	adds	r5, #104	; 0x68
 8009700:	e7e9      	b.n	80096d6 <_fwalk_reent+0x12>

08009702 <__retarget_lock_init_recursive>:
 8009702:	4770      	bx	lr

08009704 <__retarget_lock_acquire_recursive>:
 8009704:	4770      	bx	lr

08009706 <__retarget_lock_release_recursive>:
 8009706:	4770      	bx	lr

08009708 <__swhatbuf_r>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	460e      	mov	r6, r1
 800970c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009710:	2900      	cmp	r1, #0
 8009712:	b096      	sub	sp, #88	; 0x58
 8009714:	4614      	mov	r4, r2
 8009716:	461d      	mov	r5, r3
 8009718:	da07      	bge.n	800972a <__swhatbuf_r+0x22>
 800971a:	2300      	movs	r3, #0
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	89b3      	ldrh	r3, [r6, #12]
 8009720:	061a      	lsls	r2, r3, #24
 8009722:	d410      	bmi.n	8009746 <__swhatbuf_r+0x3e>
 8009724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009728:	e00e      	b.n	8009748 <__swhatbuf_r+0x40>
 800972a:	466a      	mov	r2, sp
 800972c:	f000 fc60 	bl	8009ff0 <_fstat_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	dbf2      	blt.n	800971a <__swhatbuf_r+0x12>
 8009734:	9a01      	ldr	r2, [sp, #4]
 8009736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800973a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800973e:	425a      	negs	r2, r3
 8009740:	415a      	adcs	r2, r3
 8009742:	602a      	str	r2, [r5, #0]
 8009744:	e7ee      	b.n	8009724 <__swhatbuf_r+0x1c>
 8009746:	2340      	movs	r3, #64	; 0x40
 8009748:	2000      	movs	r0, #0
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	b016      	add	sp, #88	; 0x58
 800974e:	bd70      	pop	{r4, r5, r6, pc}

08009750 <__smakebuf_r>:
 8009750:	898b      	ldrh	r3, [r1, #12]
 8009752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009754:	079d      	lsls	r5, r3, #30
 8009756:	4606      	mov	r6, r0
 8009758:	460c      	mov	r4, r1
 800975a:	d507      	bpl.n	800976c <__smakebuf_r+0x1c>
 800975c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	2301      	movs	r3, #1
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	b002      	add	sp, #8
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	ab01      	add	r3, sp, #4
 800976e:	466a      	mov	r2, sp
 8009770:	f7ff ffca 	bl	8009708 <__swhatbuf_r>
 8009774:	9900      	ldr	r1, [sp, #0]
 8009776:	4605      	mov	r5, r0
 8009778:	4630      	mov	r0, r6
 800977a:	f000 f879 	bl	8009870 <_malloc_r>
 800977e:	b948      	cbnz	r0, 8009794 <__smakebuf_r+0x44>
 8009780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d4ef      	bmi.n	8009768 <__smakebuf_r+0x18>
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	f043 0302 	orr.w	r3, r3, #2
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	e7e3      	b.n	800975c <__smakebuf_r+0xc>
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <__smakebuf_r+0x7c>)
 8009796:	62b3      	str	r3, [r6, #40]	; 0x28
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	6020      	str	r0, [r4, #0]
 800979c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	9b00      	ldr	r3, [sp, #0]
 80097a4:	6163      	str	r3, [r4, #20]
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	6120      	str	r0, [r4, #16]
 80097aa:	b15b      	cbz	r3, 80097c4 <__smakebuf_r+0x74>
 80097ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 fc2f 	bl	800a014 <_isatty_r>
 80097b6:	b128      	cbz	r0, 80097c4 <__smakebuf_r+0x74>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	89a0      	ldrh	r0, [r4, #12]
 80097c6:	4305      	orrs	r5, r0
 80097c8:	81a5      	strh	r5, [r4, #12]
 80097ca:	e7cd      	b.n	8009768 <__smakebuf_r+0x18>
 80097cc:	08009561 	.word	0x08009561

080097d0 <_free_r>:
 80097d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d2:	2900      	cmp	r1, #0
 80097d4:	d048      	beq.n	8009868 <_free_r+0x98>
 80097d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097da:	9001      	str	r0, [sp, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f1a1 0404 	sub.w	r4, r1, #4
 80097e2:	bfb8      	it	lt
 80097e4:	18e4      	addlt	r4, r4, r3
 80097e6:	f000 fc51 	bl	800a08c <__malloc_lock>
 80097ea:	4a20      	ldr	r2, [pc, #128]	; (800986c <_free_r+0x9c>)
 80097ec:	9801      	ldr	r0, [sp, #4]
 80097ee:	6813      	ldr	r3, [r2, #0]
 80097f0:	4615      	mov	r5, r2
 80097f2:	b933      	cbnz	r3, 8009802 <_free_r+0x32>
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	6014      	str	r4, [r2, #0]
 80097f8:	b003      	add	sp, #12
 80097fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097fe:	f000 bc4b 	b.w	800a098 <__malloc_unlock>
 8009802:	42a3      	cmp	r3, r4
 8009804:	d90b      	bls.n	800981e <_free_r+0x4e>
 8009806:	6821      	ldr	r1, [r4, #0]
 8009808:	1862      	adds	r2, r4, r1
 800980a:	4293      	cmp	r3, r2
 800980c:	bf04      	itt	eq
 800980e:	681a      	ldreq	r2, [r3, #0]
 8009810:	685b      	ldreq	r3, [r3, #4]
 8009812:	6063      	str	r3, [r4, #4]
 8009814:	bf04      	itt	eq
 8009816:	1852      	addeq	r2, r2, r1
 8009818:	6022      	streq	r2, [r4, #0]
 800981a:	602c      	str	r4, [r5, #0]
 800981c:	e7ec      	b.n	80097f8 <_free_r+0x28>
 800981e:	461a      	mov	r2, r3
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	b10b      	cbz	r3, 8009828 <_free_r+0x58>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d9fa      	bls.n	800981e <_free_r+0x4e>
 8009828:	6811      	ldr	r1, [r2, #0]
 800982a:	1855      	adds	r5, r2, r1
 800982c:	42a5      	cmp	r5, r4
 800982e:	d10b      	bne.n	8009848 <_free_r+0x78>
 8009830:	6824      	ldr	r4, [r4, #0]
 8009832:	4421      	add	r1, r4
 8009834:	1854      	adds	r4, r2, r1
 8009836:	42a3      	cmp	r3, r4
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	d1dd      	bne.n	80097f8 <_free_r+0x28>
 800983c:	681c      	ldr	r4, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	6053      	str	r3, [r2, #4]
 8009842:	4421      	add	r1, r4
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	e7d7      	b.n	80097f8 <_free_r+0x28>
 8009848:	d902      	bls.n	8009850 <_free_r+0x80>
 800984a:	230c      	movs	r3, #12
 800984c:	6003      	str	r3, [r0, #0]
 800984e:	e7d3      	b.n	80097f8 <_free_r+0x28>
 8009850:	6825      	ldr	r5, [r4, #0]
 8009852:	1961      	adds	r1, r4, r5
 8009854:	428b      	cmp	r3, r1
 8009856:	bf04      	itt	eq
 8009858:	6819      	ldreq	r1, [r3, #0]
 800985a:	685b      	ldreq	r3, [r3, #4]
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	bf04      	itt	eq
 8009860:	1949      	addeq	r1, r1, r5
 8009862:	6021      	streq	r1, [r4, #0]
 8009864:	6054      	str	r4, [r2, #4]
 8009866:	e7c7      	b.n	80097f8 <_free_r+0x28>
 8009868:	b003      	add	sp, #12
 800986a:	bd30      	pop	{r4, r5, pc}
 800986c:	200041c0 	.word	0x200041c0

08009870 <_malloc_r>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	1ccd      	adds	r5, r1, #3
 8009874:	f025 0503 	bic.w	r5, r5, #3
 8009878:	3508      	adds	r5, #8
 800987a:	2d0c      	cmp	r5, #12
 800987c:	bf38      	it	cc
 800987e:	250c      	movcc	r5, #12
 8009880:	2d00      	cmp	r5, #0
 8009882:	4606      	mov	r6, r0
 8009884:	db01      	blt.n	800988a <_malloc_r+0x1a>
 8009886:	42a9      	cmp	r1, r5
 8009888:	d903      	bls.n	8009892 <_malloc_r+0x22>
 800988a:	230c      	movs	r3, #12
 800988c:	6033      	str	r3, [r6, #0]
 800988e:	2000      	movs	r0, #0
 8009890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009892:	f000 fbfb 	bl	800a08c <__malloc_lock>
 8009896:	4921      	ldr	r1, [pc, #132]	; (800991c <_malloc_r+0xac>)
 8009898:	680a      	ldr	r2, [r1, #0]
 800989a:	4614      	mov	r4, r2
 800989c:	b99c      	cbnz	r4, 80098c6 <_malloc_r+0x56>
 800989e:	4f20      	ldr	r7, [pc, #128]	; (8009920 <_malloc_r+0xb0>)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	b923      	cbnz	r3, 80098ae <_malloc_r+0x3e>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 fb2c 	bl	8009f04 <_sbrk_r>
 80098ac:	6038      	str	r0, [r7, #0]
 80098ae:	4629      	mov	r1, r5
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 fb27 	bl	8009f04 <_sbrk_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d123      	bne.n	8009902 <_malloc_r+0x92>
 80098ba:	230c      	movs	r3, #12
 80098bc:	6033      	str	r3, [r6, #0]
 80098be:	4630      	mov	r0, r6
 80098c0:	f000 fbea 	bl	800a098 <__malloc_unlock>
 80098c4:	e7e3      	b.n	800988e <_malloc_r+0x1e>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1b5b      	subs	r3, r3, r5
 80098ca:	d417      	bmi.n	80098fc <_malloc_r+0x8c>
 80098cc:	2b0b      	cmp	r3, #11
 80098ce:	d903      	bls.n	80098d8 <_malloc_r+0x68>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	441c      	add	r4, r3
 80098d4:	6025      	str	r5, [r4, #0]
 80098d6:	e004      	b.n	80098e2 <_malloc_r+0x72>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	42a2      	cmp	r2, r4
 80098dc:	bf0c      	ite	eq
 80098de:	600b      	streq	r3, [r1, #0]
 80098e0:	6053      	strne	r3, [r2, #4]
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 fbd8 	bl	800a098 <__malloc_unlock>
 80098e8:	f104 000b 	add.w	r0, r4, #11
 80098ec:	1d23      	adds	r3, r4, #4
 80098ee:	f020 0007 	bic.w	r0, r0, #7
 80098f2:	1ac2      	subs	r2, r0, r3
 80098f4:	d0cc      	beq.n	8009890 <_malloc_r+0x20>
 80098f6:	1a1b      	subs	r3, r3, r0
 80098f8:	50a3      	str	r3, [r4, r2]
 80098fa:	e7c9      	b.n	8009890 <_malloc_r+0x20>
 80098fc:	4622      	mov	r2, r4
 80098fe:	6864      	ldr	r4, [r4, #4]
 8009900:	e7cc      	b.n	800989c <_malloc_r+0x2c>
 8009902:	1cc4      	adds	r4, r0, #3
 8009904:	f024 0403 	bic.w	r4, r4, #3
 8009908:	42a0      	cmp	r0, r4
 800990a:	d0e3      	beq.n	80098d4 <_malloc_r+0x64>
 800990c:	1a21      	subs	r1, r4, r0
 800990e:	4630      	mov	r0, r6
 8009910:	f000 faf8 	bl	8009f04 <_sbrk_r>
 8009914:	3001      	adds	r0, #1
 8009916:	d1dd      	bne.n	80098d4 <_malloc_r+0x64>
 8009918:	e7cf      	b.n	80098ba <_malloc_r+0x4a>
 800991a:	bf00      	nop
 800991c:	200041c0 	.word	0x200041c0
 8009920:	200041c4 	.word	0x200041c4

08009924 <__ssputs_r>:
 8009924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009928:	688e      	ldr	r6, [r1, #8]
 800992a:	429e      	cmp	r6, r3
 800992c:	4682      	mov	sl, r0
 800992e:	460c      	mov	r4, r1
 8009930:	4690      	mov	r8, r2
 8009932:	461f      	mov	r7, r3
 8009934:	d838      	bhi.n	80099a8 <__ssputs_r+0x84>
 8009936:	898a      	ldrh	r2, [r1, #12]
 8009938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800993c:	d032      	beq.n	80099a4 <__ssputs_r+0x80>
 800993e:	6825      	ldr	r5, [r4, #0]
 8009940:	6909      	ldr	r1, [r1, #16]
 8009942:	eba5 0901 	sub.w	r9, r5, r1
 8009946:	6965      	ldr	r5, [r4, #20]
 8009948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800994c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009950:	3301      	adds	r3, #1
 8009952:	444b      	add	r3, r9
 8009954:	106d      	asrs	r5, r5, #1
 8009956:	429d      	cmp	r5, r3
 8009958:	bf38      	it	cc
 800995a:	461d      	movcc	r5, r3
 800995c:	0553      	lsls	r3, r2, #21
 800995e:	d531      	bpl.n	80099c4 <__ssputs_r+0xa0>
 8009960:	4629      	mov	r1, r5
 8009962:	f7ff ff85 	bl	8009870 <_malloc_r>
 8009966:	4606      	mov	r6, r0
 8009968:	b950      	cbnz	r0, 8009980 <__ssputs_r+0x5c>
 800996a:	230c      	movs	r3, #12
 800996c:	f8ca 3000 	str.w	r3, [sl]
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009980:	6921      	ldr	r1, [r4, #16]
 8009982:	464a      	mov	r2, r9
 8009984:	f7ff fb82 	bl	800908c <memcpy>
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800998e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	6126      	str	r6, [r4, #16]
 8009996:	6165      	str	r5, [r4, #20]
 8009998:	444e      	add	r6, r9
 800999a:	eba5 0509 	sub.w	r5, r5, r9
 800999e:	6026      	str	r6, [r4, #0]
 80099a0:	60a5      	str	r5, [r4, #8]
 80099a2:	463e      	mov	r6, r7
 80099a4:	42be      	cmp	r6, r7
 80099a6:	d900      	bls.n	80099aa <__ssputs_r+0x86>
 80099a8:	463e      	mov	r6, r7
 80099aa:	4632      	mov	r2, r6
 80099ac:	6820      	ldr	r0, [r4, #0]
 80099ae:	4641      	mov	r1, r8
 80099b0:	f000 fb52 	bl	800a058 <memmove>
 80099b4:	68a3      	ldr	r3, [r4, #8]
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	1b9b      	subs	r3, r3, r6
 80099ba:	4432      	add	r2, r6
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	6022      	str	r2, [r4, #0]
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7db      	b.n	800997c <__ssputs_r+0x58>
 80099c4:	462a      	mov	r2, r5
 80099c6:	f000 fb6d 	bl	800a0a4 <_realloc_r>
 80099ca:	4606      	mov	r6, r0
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1e1      	bne.n	8009994 <__ssputs_r+0x70>
 80099d0:	6921      	ldr	r1, [r4, #16]
 80099d2:	4650      	mov	r0, sl
 80099d4:	f7ff fefc 	bl	80097d0 <_free_r>
 80099d8:	e7c7      	b.n	800996a <__ssputs_r+0x46>
	...

080099dc <_svfiprintf_r>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	4698      	mov	r8, r3
 80099e2:	898b      	ldrh	r3, [r1, #12]
 80099e4:	061b      	lsls	r3, r3, #24
 80099e6:	b09d      	sub	sp, #116	; 0x74
 80099e8:	4607      	mov	r7, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	4614      	mov	r4, r2
 80099ee:	d50e      	bpl.n	8009a0e <_svfiprintf_r+0x32>
 80099f0:	690b      	ldr	r3, [r1, #16]
 80099f2:	b963      	cbnz	r3, 8009a0e <_svfiprintf_r+0x32>
 80099f4:	2140      	movs	r1, #64	; 0x40
 80099f6:	f7ff ff3b 	bl	8009870 <_malloc_r>
 80099fa:	6028      	str	r0, [r5, #0]
 80099fc:	6128      	str	r0, [r5, #16]
 80099fe:	b920      	cbnz	r0, 8009a0a <_svfiprintf_r+0x2e>
 8009a00:	230c      	movs	r3, #12
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	e0d1      	b.n	8009bae <_svfiprintf_r+0x1d2>
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	616b      	str	r3, [r5, #20]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9309      	str	r3, [sp, #36]	; 0x24
 8009a12:	2320      	movs	r3, #32
 8009a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a1c:	2330      	movs	r3, #48	; 0x30
 8009a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bc8 <_svfiprintf_r+0x1ec>
 8009a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a26:	f04f 0901 	mov.w	r9, #1
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	469a      	mov	sl, r3
 8009a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a32:	b10a      	cbz	r2, 8009a38 <_svfiprintf_r+0x5c>
 8009a34:	2a25      	cmp	r2, #37	; 0x25
 8009a36:	d1f9      	bne.n	8009a2c <_svfiprintf_r+0x50>
 8009a38:	ebba 0b04 	subs.w	fp, sl, r4
 8009a3c:	d00b      	beq.n	8009a56 <_svfiprintf_r+0x7a>
 8009a3e:	465b      	mov	r3, fp
 8009a40:	4622      	mov	r2, r4
 8009a42:	4629      	mov	r1, r5
 8009a44:	4638      	mov	r0, r7
 8009a46:	f7ff ff6d 	bl	8009924 <__ssputs_r>
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	f000 80aa 	beq.w	8009ba4 <_svfiprintf_r+0x1c8>
 8009a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a52:	445a      	add	r2, fp
 8009a54:	9209      	str	r2, [sp, #36]	; 0x24
 8009a56:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80a2 	beq.w	8009ba4 <_svfiprintf_r+0x1c8>
 8009a60:	2300      	movs	r3, #0
 8009a62:	f04f 32ff 	mov.w	r2, #4294967295
 8009a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6a:	f10a 0a01 	add.w	sl, sl, #1
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	9307      	str	r3, [sp, #28]
 8009a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a76:	931a      	str	r3, [sp, #104]	; 0x68
 8009a78:	4654      	mov	r4, sl
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a80:	4851      	ldr	r0, [pc, #324]	; (8009bc8 <_svfiprintf_r+0x1ec>)
 8009a82:	f7f6 fbad 	bl	80001e0 <memchr>
 8009a86:	9a04      	ldr	r2, [sp, #16]
 8009a88:	b9d8      	cbnz	r0, 8009ac2 <_svfiprintf_r+0xe6>
 8009a8a:	06d0      	lsls	r0, r2, #27
 8009a8c:	bf44      	itt	mi
 8009a8e:	2320      	movmi	r3, #32
 8009a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a94:	0711      	lsls	r1, r2, #28
 8009a96:	bf44      	itt	mi
 8009a98:	232b      	movmi	r3, #43	; 0x2b
 8009a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa4:	d015      	beq.n	8009ad2 <_svfiprintf_r+0xf6>
 8009aa6:	9a07      	ldr	r2, [sp, #28]
 8009aa8:	4654      	mov	r4, sl
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f04f 0c0a 	mov.w	ip, #10
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab6:	3b30      	subs	r3, #48	; 0x30
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	d94e      	bls.n	8009b5a <_svfiprintf_r+0x17e>
 8009abc:	b1b0      	cbz	r0, 8009aec <_svfiprintf_r+0x110>
 8009abe:	9207      	str	r2, [sp, #28]
 8009ac0:	e014      	b.n	8009aec <_svfiprintf_r+0x110>
 8009ac2:	eba0 0308 	sub.w	r3, r0, r8
 8009ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8009aca:	4313      	orrs	r3, r2
 8009acc:	9304      	str	r3, [sp, #16]
 8009ace:	46a2      	mov	sl, r4
 8009ad0:	e7d2      	b.n	8009a78 <_svfiprintf_r+0x9c>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	1d19      	adds	r1, r3, #4
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	9103      	str	r1, [sp, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bfbb      	ittet	lt
 8009ade:	425b      	neglt	r3, r3
 8009ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae4:	9307      	strge	r3, [sp, #28]
 8009ae6:	9307      	strlt	r3, [sp, #28]
 8009ae8:	bfb8      	it	lt
 8009aea:	9204      	strlt	r2, [sp, #16]
 8009aec:	7823      	ldrb	r3, [r4, #0]
 8009aee:	2b2e      	cmp	r3, #46	; 0x2e
 8009af0:	d10c      	bne.n	8009b0c <_svfiprintf_r+0x130>
 8009af2:	7863      	ldrb	r3, [r4, #1]
 8009af4:	2b2a      	cmp	r3, #42	; 0x2a
 8009af6:	d135      	bne.n	8009b64 <_svfiprintf_r+0x188>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	1d1a      	adds	r2, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	9203      	str	r2, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfb8      	it	lt
 8009b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b08:	3402      	adds	r4, #2
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bd8 <_svfiprintf_r+0x1fc>
 8009b10:	7821      	ldrb	r1, [r4, #0]
 8009b12:	2203      	movs	r2, #3
 8009b14:	4650      	mov	r0, sl
 8009b16:	f7f6 fb63 	bl	80001e0 <memchr>
 8009b1a:	b140      	cbz	r0, 8009b2e <_svfiprintf_r+0x152>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	eba0 000a 	sub.w	r0, r0, sl
 8009b22:	fa03 f000 	lsl.w	r0, r3, r0
 8009b26:	9b04      	ldr	r3, [sp, #16]
 8009b28:	4303      	orrs	r3, r0
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	4826      	ldr	r0, [pc, #152]	; (8009bcc <_svfiprintf_r+0x1f0>)
 8009b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b38:	2206      	movs	r2, #6
 8009b3a:	f7f6 fb51 	bl	80001e0 <memchr>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d038      	beq.n	8009bb4 <_svfiprintf_r+0x1d8>
 8009b42:	4b23      	ldr	r3, [pc, #140]	; (8009bd0 <_svfiprintf_r+0x1f4>)
 8009b44:	bb1b      	cbnz	r3, 8009b8e <_svfiprintf_r+0x1b2>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	f023 0307 	bic.w	r3, r3, #7
 8009b4e:	3308      	adds	r3, #8
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b54:	4433      	add	r3, r6
 8009b56:	9309      	str	r3, [sp, #36]	; 0x24
 8009b58:	e767      	b.n	8009a2a <_svfiprintf_r+0x4e>
 8009b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b5e:	460c      	mov	r4, r1
 8009b60:	2001      	movs	r0, #1
 8009b62:	e7a5      	b.n	8009ab0 <_svfiprintf_r+0xd4>
 8009b64:	2300      	movs	r3, #0
 8009b66:	3401      	adds	r4, #1
 8009b68:	9305      	str	r3, [sp, #20]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f04f 0c0a 	mov.w	ip, #10
 8009b70:	4620      	mov	r0, r4
 8009b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b76:	3a30      	subs	r2, #48	; 0x30
 8009b78:	2a09      	cmp	r2, #9
 8009b7a:	d903      	bls.n	8009b84 <_svfiprintf_r+0x1a8>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0c5      	beq.n	8009b0c <_svfiprintf_r+0x130>
 8009b80:	9105      	str	r1, [sp, #20]
 8009b82:	e7c3      	b.n	8009b0c <_svfiprintf_r+0x130>
 8009b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b88:	4604      	mov	r4, r0
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e7f0      	b.n	8009b70 <_svfiprintf_r+0x194>
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <_svfiprintf_r+0x1f8>)
 8009b96:	a904      	add	r1, sp, #16
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f3af 8000 	nop.w
 8009b9e:	1c42      	adds	r2, r0, #1
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	d1d6      	bne.n	8009b52 <_svfiprintf_r+0x176>
 8009ba4:	89ab      	ldrh	r3, [r5, #12]
 8009ba6:	065b      	lsls	r3, r3, #25
 8009ba8:	f53f af2c 	bmi.w	8009a04 <_svfiprintf_r+0x28>
 8009bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bae:	b01d      	add	sp, #116	; 0x74
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <_svfiprintf_r+0x1f8>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f000 f87a 	bl	8009cb8 <_printf_i>
 8009bc4:	e7eb      	b.n	8009b9e <_svfiprintf_r+0x1c2>
 8009bc6:	bf00      	nop
 8009bc8:	0800a494 	.word	0x0800a494
 8009bcc:	0800a49e 	.word	0x0800a49e
 8009bd0:	00000000 	.word	0x00000000
 8009bd4:	08009925 	.word	0x08009925
 8009bd8:	0800a49a 	.word	0x0800a49a

08009bdc <_printf_common>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	4616      	mov	r6, r2
 8009be2:	4699      	mov	r9, r3
 8009be4:	688a      	ldr	r2, [r1, #8]
 8009be6:	690b      	ldr	r3, [r1, #16]
 8009be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	bfb8      	it	lt
 8009bf0:	4613      	movlt	r3, r2
 8009bf2:	6033      	str	r3, [r6, #0]
 8009bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	b10a      	cbz	r2, 8009c02 <_printf_common+0x26>
 8009bfe:	3301      	adds	r3, #1
 8009c00:	6033      	str	r3, [r6, #0]
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	0699      	lsls	r1, r3, #26
 8009c06:	bf42      	ittt	mi
 8009c08:	6833      	ldrmi	r3, [r6, #0]
 8009c0a:	3302      	addmi	r3, #2
 8009c0c:	6033      	strmi	r3, [r6, #0]
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	f015 0506 	ands.w	r5, r5, #6
 8009c14:	d106      	bne.n	8009c24 <_printf_common+0x48>
 8009c16:	f104 0a19 	add.w	sl, r4, #25
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	6832      	ldr	r2, [r6, #0]
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	42ab      	cmp	r3, r5
 8009c22:	dc26      	bgt.n	8009c72 <_printf_common+0x96>
 8009c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c28:	1e13      	subs	r3, r2, #0
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	bf18      	it	ne
 8009c2e:	2301      	movne	r3, #1
 8009c30:	0692      	lsls	r2, r2, #26
 8009c32:	d42b      	bmi.n	8009c8c <_printf_common+0xb0>
 8009c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d01e      	beq.n	8009c80 <_printf_common+0xa4>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	68e5      	ldr	r5, [r4, #12]
 8009c46:	6832      	ldr	r2, [r6, #0]
 8009c48:	f003 0306 	and.w	r3, r3, #6
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	bf08      	it	eq
 8009c50:	1aad      	subeq	r5, r5, r2
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	6922      	ldr	r2, [r4, #16]
 8009c56:	bf0c      	ite	eq
 8009c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c5c:	2500      	movne	r5, #0
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	bfc4      	itt	gt
 8009c62:	1a9b      	subgt	r3, r3, r2
 8009c64:	18ed      	addgt	r5, r5, r3
 8009c66:	2600      	movs	r6, #0
 8009c68:	341a      	adds	r4, #26
 8009c6a:	42b5      	cmp	r5, r6
 8009c6c:	d11a      	bne.n	8009ca4 <_printf_common+0xc8>
 8009c6e:	2000      	movs	r0, #0
 8009c70:	e008      	b.n	8009c84 <_printf_common+0xa8>
 8009c72:	2301      	movs	r3, #1
 8009c74:	4652      	mov	r2, sl
 8009c76:	4649      	mov	r1, r9
 8009c78:	4638      	mov	r0, r7
 8009c7a:	47c0      	blx	r8
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d103      	bne.n	8009c88 <_printf_common+0xac>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	3501      	adds	r5, #1
 8009c8a:	e7c6      	b.n	8009c1a <_printf_common+0x3e>
 8009c8c:	18e1      	adds	r1, r4, r3
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	2030      	movs	r0, #48	; 0x30
 8009c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c96:	4422      	add	r2, r4
 8009c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	e7c7      	b.n	8009c34 <_printf_common+0x58>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c0      	blx	r8
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d0e6      	beq.n	8009c80 <_printf_common+0xa4>
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	e7d9      	b.n	8009c6a <_printf_common+0x8e>
	...

08009cb8 <_printf_i>:
 8009cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	7e27      	ldrb	r7, [r4, #24]
 8009cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009cc4:	2f78      	cmp	r7, #120	; 0x78
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	469a      	mov	sl, r3
 8009cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cce:	d807      	bhi.n	8009ce0 <_printf_i+0x28>
 8009cd0:	2f62      	cmp	r7, #98	; 0x62
 8009cd2:	d80a      	bhi.n	8009cea <_printf_i+0x32>
 8009cd4:	2f00      	cmp	r7, #0
 8009cd6:	f000 80d8 	beq.w	8009e8a <_printf_i+0x1d2>
 8009cda:	2f58      	cmp	r7, #88	; 0x58
 8009cdc:	f000 80a3 	beq.w	8009e26 <_printf_i+0x16e>
 8009ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ce8:	e03a      	b.n	8009d60 <_printf_i+0xa8>
 8009cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cee:	2b15      	cmp	r3, #21
 8009cf0:	d8f6      	bhi.n	8009ce0 <_printf_i+0x28>
 8009cf2:	a001      	add	r0, pc, #4	; (adr r0, 8009cf8 <_printf_i+0x40>)
 8009cf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009cf8:	08009d51 	.word	0x08009d51
 8009cfc:	08009d65 	.word	0x08009d65
 8009d00:	08009ce1 	.word	0x08009ce1
 8009d04:	08009ce1 	.word	0x08009ce1
 8009d08:	08009ce1 	.word	0x08009ce1
 8009d0c:	08009ce1 	.word	0x08009ce1
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009ce1 	.word	0x08009ce1
 8009d18:	08009ce1 	.word	0x08009ce1
 8009d1c:	08009ce1 	.word	0x08009ce1
 8009d20:	08009ce1 	.word	0x08009ce1
 8009d24:	08009e71 	.word	0x08009e71
 8009d28:	08009d95 	.word	0x08009d95
 8009d2c:	08009e53 	.word	0x08009e53
 8009d30:	08009ce1 	.word	0x08009ce1
 8009d34:	08009ce1 	.word	0x08009ce1
 8009d38:	08009e93 	.word	0x08009e93
 8009d3c:	08009ce1 	.word	0x08009ce1
 8009d40:	08009d95 	.word	0x08009d95
 8009d44:	08009ce1 	.word	0x08009ce1
 8009d48:	08009ce1 	.word	0x08009ce1
 8009d4c:	08009e5b 	.word	0x08009e5b
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	1d1a      	adds	r2, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	600a      	str	r2, [r1, #0]
 8009d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0a3      	b.n	8009eac <_printf_i+0x1f4>
 8009d64:	6825      	ldr	r5, [r4, #0]
 8009d66:	6808      	ldr	r0, [r1, #0]
 8009d68:	062e      	lsls	r6, r5, #24
 8009d6a:	f100 0304 	add.w	r3, r0, #4
 8009d6e:	d50a      	bpl.n	8009d86 <_printf_i+0xce>
 8009d70:	6805      	ldr	r5, [r0, #0]
 8009d72:	600b      	str	r3, [r1, #0]
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	da03      	bge.n	8009d80 <_printf_i+0xc8>
 8009d78:	232d      	movs	r3, #45	; 0x2d
 8009d7a:	426d      	negs	r5, r5
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d80:	485e      	ldr	r0, [pc, #376]	; (8009efc <_printf_i+0x244>)
 8009d82:	230a      	movs	r3, #10
 8009d84:	e019      	b.n	8009dba <_printf_i+0x102>
 8009d86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d8a:	6805      	ldr	r5, [r0, #0]
 8009d8c:	600b      	str	r3, [r1, #0]
 8009d8e:	bf18      	it	ne
 8009d90:	b22d      	sxthne	r5, r5
 8009d92:	e7ef      	b.n	8009d74 <_printf_i+0xbc>
 8009d94:	680b      	ldr	r3, [r1, #0]
 8009d96:	6825      	ldr	r5, [r4, #0]
 8009d98:	1d18      	adds	r0, r3, #4
 8009d9a:	6008      	str	r0, [r1, #0]
 8009d9c:	0628      	lsls	r0, r5, #24
 8009d9e:	d501      	bpl.n	8009da4 <_printf_i+0xec>
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	e002      	b.n	8009daa <_printf_i+0xf2>
 8009da4:	0669      	lsls	r1, r5, #25
 8009da6:	d5fb      	bpl.n	8009da0 <_printf_i+0xe8>
 8009da8:	881d      	ldrh	r5, [r3, #0]
 8009daa:	4854      	ldr	r0, [pc, #336]	; (8009efc <_printf_i+0x244>)
 8009dac:	2f6f      	cmp	r7, #111	; 0x6f
 8009dae:	bf0c      	ite	eq
 8009db0:	2308      	moveq	r3, #8
 8009db2:	230a      	movne	r3, #10
 8009db4:	2100      	movs	r1, #0
 8009db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dba:	6866      	ldr	r6, [r4, #4]
 8009dbc:	60a6      	str	r6, [r4, #8]
 8009dbe:	2e00      	cmp	r6, #0
 8009dc0:	bfa2      	ittt	ge
 8009dc2:	6821      	ldrge	r1, [r4, #0]
 8009dc4:	f021 0104 	bicge.w	r1, r1, #4
 8009dc8:	6021      	strge	r1, [r4, #0]
 8009dca:	b90d      	cbnz	r5, 8009dd0 <_printf_i+0x118>
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	d04d      	beq.n	8009e6c <_printf_i+0x1b4>
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8009dda:	5dc7      	ldrb	r7, [r0, r7]
 8009ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009de0:	462f      	mov	r7, r5
 8009de2:	42bb      	cmp	r3, r7
 8009de4:	460d      	mov	r5, r1
 8009de6:	d9f4      	bls.n	8009dd2 <_printf_i+0x11a>
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d10b      	bne.n	8009e04 <_printf_i+0x14c>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	07df      	lsls	r7, r3, #31
 8009df0:	d508      	bpl.n	8009e04 <_printf_i+0x14c>
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	6861      	ldr	r1, [r4, #4]
 8009df6:	4299      	cmp	r1, r3
 8009df8:	bfde      	ittt	le
 8009dfa:	2330      	movle	r3, #48	; 0x30
 8009dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e04:	1b92      	subs	r2, r2, r6
 8009e06:	6122      	str	r2, [r4, #16]
 8009e08:	f8cd a000 	str.w	sl, [sp]
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	aa03      	add	r2, sp, #12
 8009e10:	4621      	mov	r1, r4
 8009e12:	4640      	mov	r0, r8
 8009e14:	f7ff fee2 	bl	8009bdc <_printf_common>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d14c      	bne.n	8009eb6 <_printf_i+0x1fe>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	b004      	add	sp, #16
 8009e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e26:	4835      	ldr	r0, [pc, #212]	; (8009efc <_printf_i+0x244>)
 8009e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	680e      	ldr	r6, [r1, #0]
 8009e30:	061f      	lsls	r7, r3, #24
 8009e32:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e36:	600e      	str	r6, [r1, #0]
 8009e38:	d514      	bpl.n	8009e64 <_printf_i+0x1ac>
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	bf44      	itt	mi
 8009e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e42:	6023      	strmi	r3, [r4, #0]
 8009e44:	b91d      	cbnz	r5, 8009e4e <_printf_i+0x196>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	f023 0320 	bic.w	r3, r3, #32
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	2310      	movs	r3, #16
 8009e50:	e7b0      	b.n	8009db4 <_printf_i+0xfc>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f043 0320 	orr.w	r3, r3, #32
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	2378      	movs	r3, #120	; 0x78
 8009e5c:	4828      	ldr	r0, [pc, #160]	; (8009f00 <_printf_i+0x248>)
 8009e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e62:	e7e3      	b.n	8009e2c <_printf_i+0x174>
 8009e64:	065e      	lsls	r6, r3, #25
 8009e66:	bf48      	it	mi
 8009e68:	b2ad      	uxthmi	r5, r5
 8009e6a:	e7e6      	b.n	8009e3a <_printf_i+0x182>
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	e7bb      	b.n	8009de8 <_printf_i+0x130>
 8009e70:	680b      	ldr	r3, [r1, #0]
 8009e72:	6826      	ldr	r6, [r4, #0]
 8009e74:	6960      	ldr	r0, [r4, #20]
 8009e76:	1d1d      	adds	r5, r3, #4
 8009e78:	600d      	str	r5, [r1, #0]
 8009e7a:	0635      	lsls	r5, r6, #24
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	d501      	bpl.n	8009e84 <_printf_i+0x1cc>
 8009e80:	6018      	str	r0, [r3, #0]
 8009e82:	e002      	b.n	8009e8a <_printf_i+0x1d2>
 8009e84:	0671      	lsls	r1, r6, #25
 8009e86:	d5fb      	bpl.n	8009e80 <_printf_i+0x1c8>
 8009e88:	8018      	strh	r0, [r3, #0]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6123      	str	r3, [r4, #16]
 8009e8e:	4616      	mov	r6, r2
 8009e90:	e7ba      	b.n	8009e08 <_printf_i+0x150>
 8009e92:	680b      	ldr	r3, [r1, #0]
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	600a      	str	r2, [r1, #0]
 8009e98:	681e      	ldr	r6, [r3, #0]
 8009e9a:	6862      	ldr	r2, [r4, #4]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7f6 f99e 	bl	80001e0 <memchr>
 8009ea4:	b108      	cbz	r0, 8009eaa <_printf_i+0x1f2>
 8009ea6:	1b80      	subs	r0, r0, r6
 8009ea8:	6060      	str	r0, [r4, #4]
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb4:	e7a8      	b.n	8009e08 <_printf_i+0x150>
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	4632      	mov	r2, r6
 8009eba:	4649      	mov	r1, r9
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	47d0      	blx	sl
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d0ab      	beq.n	8009e1c <_printf_i+0x164>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	079b      	lsls	r3, r3, #30
 8009ec8:	d413      	bmi.n	8009ef2 <_printf_i+0x23a>
 8009eca:	68e0      	ldr	r0, [r4, #12]
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	bfb8      	it	lt
 8009ed2:	4618      	movlt	r0, r3
 8009ed4:	e7a4      	b.n	8009e20 <_printf_i+0x168>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4632      	mov	r2, r6
 8009eda:	4649      	mov	r1, r9
 8009edc:	4640      	mov	r0, r8
 8009ede:	47d0      	blx	sl
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d09b      	beq.n	8009e1c <_printf_i+0x164>
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	9903      	ldr	r1, [sp, #12]
 8009eea:	1a5b      	subs	r3, r3, r1
 8009eec:	42ab      	cmp	r3, r5
 8009eee:	dcf2      	bgt.n	8009ed6 <_printf_i+0x21e>
 8009ef0:	e7eb      	b.n	8009eca <_printf_i+0x212>
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	f104 0619 	add.w	r6, r4, #25
 8009ef8:	e7f5      	b.n	8009ee6 <_printf_i+0x22e>
 8009efa:	bf00      	nop
 8009efc:	0800a4a5 	.word	0x0800a4a5
 8009f00:	0800a4b6 	.word	0x0800a4b6

08009f04 <_sbrk_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d06      	ldr	r5, [pc, #24]	; (8009f20 <_sbrk_r+0x1c>)
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	f7f7 fb9a 	bl	8001648 <_sbrk>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_sbrk_r+0x1a>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_sbrk_r+0x1a>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	20009670 	.word	0x20009670

08009f24 <__sread>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	460c      	mov	r4, r1
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	f000 f8e0 	bl	800a0f0 <_read_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	bfab      	itete	ge
 8009f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f36:	89a3      	ldrhlt	r3, [r4, #12]
 8009f38:	181b      	addge	r3, r3, r0
 8009f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f3e:	bfac      	ite	ge
 8009f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f42:	81a3      	strhlt	r3, [r4, #12]
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <__swrite>:
 8009f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	461f      	mov	r7, r3
 8009f4c:	898b      	ldrh	r3, [r1, #12]
 8009f4e:	05db      	lsls	r3, r3, #23
 8009f50:	4605      	mov	r5, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	4616      	mov	r6, r2
 8009f56:	d505      	bpl.n	8009f64 <__swrite+0x1e>
 8009f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f000 f868 	bl	800a034 <_lseek_r>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	4632      	mov	r2, r6
 8009f72:	463b      	mov	r3, r7
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7a:	f000 b817 	b.w	8009fac <_write_r>

08009f7e <__sseek>:
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	460c      	mov	r4, r1
 8009f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f86:	f000 f855 	bl	800a034 <_lseek_r>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	bf15      	itete	ne
 8009f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f9a:	81a3      	strheq	r3, [r4, #12]
 8009f9c:	bf18      	it	ne
 8009f9e:	81a3      	strhne	r3, [r4, #12]
 8009fa0:	bd10      	pop	{r4, pc}

08009fa2 <__sclose>:
 8009fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa6:	f000 b813 	b.w	8009fd0 <_close_r>
	...

08009fac <_write_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d07      	ldr	r5, [pc, #28]	; (8009fcc <_write_r+0x20>)
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f6 fe52 	bl	8000c64 <_write>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_write_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_write_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20009670 	.word	0x20009670

08009fd0 <_close_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	; (8009fec <_close_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f7 faff 	bl	80015de <_close>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_close_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_close_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20009670 	.word	0x20009670

08009ff0 <_fstat_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	; (800a010 <_fstat_r+0x20>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f7f7 fafa 	bl	80015f6 <_fstat>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d102      	bne.n	800a00c <_fstat_r+0x1c>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	b103      	cbz	r3, 800a00c <_fstat_r+0x1c>
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	20009670 	.word	0x20009670

0800a014 <_isatty_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d06      	ldr	r5, [pc, #24]	; (800a030 <_isatty_r+0x1c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f7 faf9 	bl	8001616 <_isatty>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_isatty_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_isatty_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20009670 	.word	0x20009670

0800a034 <_lseek_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_lseek_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f7 faf2 	bl	800162c <_lseek>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_lseek_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_lseek_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20009670 	.word	0x20009670

0800a058 <memmove>:
 800a058:	4288      	cmp	r0, r1
 800a05a:	b510      	push	{r4, lr}
 800a05c:	eb01 0402 	add.w	r4, r1, r2
 800a060:	d902      	bls.n	800a068 <memmove+0x10>
 800a062:	4284      	cmp	r4, r0
 800a064:	4623      	mov	r3, r4
 800a066:	d807      	bhi.n	800a078 <memmove+0x20>
 800a068:	1e43      	subs	r3, r0, #1
 800a06a:	42a1      	cmp	r1, r4
 800a06c:	d008      	beq.n	800a080 <memmove+0x28>
 800a06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a076:	e7f8      	b.n	800a06a <memmove+0x12>
 800a078:	4402      	add	r2, r0
 800a07a:	4601      	mov	r1, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d100      	bne.n	800a082 <memmove+0x2a>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08a:	e7f7      	b.n	800a07c <memmove+0x24>

0800a08c <__malloc_lock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_lock+0x8>)
 800a08e:	f7ff bb39 	b.w	8009704 <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	20009668 	.word	0x20009668

0800a098 <__malloc_unlock>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__malloc_unlock+0x8>)
 800a09a:	f7ff bb34 	b.w	8009706 <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	20009668 	.word	0x20009668

0800a0a4 <_realloc_r>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	4614      	mov	r4, r2
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	b921      	cbnz	r1, 800a0b8 <_realloc_r+0x14>
 800a0ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	f7ff bbdc 	b.w	8009870 <_malloc_r>
 800a0b8:	b922      	cbnz	r2, 800a0c4 <_realloc_r+0x20>
 800a0ba:	f7ff fb89 	bl	80097d0 <_free_r>
 800a0be:	4625      	mov	r5, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c4:	f000 f826 	bl	800a114 <_malloc_usable_size_r>
 800a0c8:	42a0      	cmp	r0, r4
 800a0ca:	d20f      	bcs.n	800a0ec <_realloc_r+0x48>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7ff fbce 	bl	8009870 <_malloc_r>
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d0f2      	beq.n	800a0c0 <_realloc_r+0x1c>
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4622      	mov	r2, r4
 800a0de:	f7fe ffd5 	bl	800908c <memcpy>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7ff fb73 	bl	80097d0 <_free_r>
 800a0ea:	e7e9      	b.n	800a0c0 <_realloc_r+0x1c>
 800a0ec:	4635      	mov	r5, r6
 800a0ee:	e7e7      	b.n	800a0c0 <_realloc_r+0x1c>

0800a0f0 <_read_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_read_r+0x20>)
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f7 fa50 	bl	80015a4 <_read>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_read_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_read_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20009670 	.word	0x20009670

0800a114 <_malloc_usable_size_r>:
 800a114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a118:	1f18      	subs	r0, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfbc      	itt	lt
 800a11e:	580b      	ldrlt	r3, [r1, r0]
 800a120:	18c0      	addlt	r0, r0, r3
 800a122:	4770      	bx	lr

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
