
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800aeb0  0800aeb0  0001aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b240  0800b240  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b248  0800b248  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b248  0800b248  0001b248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000954c  20000180  0800b3d0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200096cc  0800b3d0  000296cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f161  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c9  00000000  00000000  0003f311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00043ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  00045508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027252  00000000  00000000  00046d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a39d  00000000  00000000  0006dfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2bfc  00000000  00000000  0008835f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016af5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0016afb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000180 	.word	0x20000180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae98 	.word	0x0800ae98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000184 	.word	0x20000184
 80001cc:	0800ae98 	.word	0x0800ae98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000019c 	.word	0x2000019c
 80005a8:	200001f0 	.word	0x200001f0

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e6:	e000      	b.n	80006ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <LL_RCC_HSE_Enable+0x1c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <LL_RCC_HSE_Enable+0x1c>)
 8000716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LL_RCC_HSE_IsReady+0x24>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f023 0203 	bic.w	r2, r3, #3
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	608b      	str	r3, [r1, #8]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_RCC_GetSysClkSource+0x18>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 030c 	and.w	r3, r3, #12
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_RCC_SetAHBPrescaler+0x24>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <LL_RCC_SetAHBPrescaler+0x24>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40023800 	.word	0x40023800

080007c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	608b      	str	r3, [r1, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40023800 	.word	0x40023800

080007e8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_RCC_SetAPB2Prescaler+0x24>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <LL_RCC_SetAPB2Prescaler+0x24>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	608b      	str	r3, [r1, #8]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40023800 	.word	0x40023800

08000810 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <LL_RCC_PLL_Enable+0x1c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <LL_RCC_PLL_Enable+0x1c>)
 800081a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <LL_RCC_PLL_IsReady+0x24>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800086c:	4013      	ands	r3, r2
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4311      	orrs	r1, r2
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	0192      	lsls	r2, r2, #6
 8000878:	430a      	orrs	r2, r1
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800087c:	4313      	orrs	r3, r2
 800087e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	4313      	orrs	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40023800 	.word	0x40023800
 80008a0:	ffbf8000 	.word	0xffbf8000

080008a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	40023800 	.word	0x40023800

080008d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	40023800 	.word	0x40023800

08000904 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <LL_SYSCFG_SetEXTISource+0x58>)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3302      	adds	r3, #2
 8000916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	0c1b      	lsrs	r3, r3, #16
 800091e:	43db      	mvns	r3, r3
 8000920:	ea02 0103 	and.w	r1, r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	0c1b      	lsrs	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	fa93 f3a3 	rbit	r3, r3
 8000930:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	fab3 f383 	clz	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	fa03 f202 	lsl.w	r2, r3, r2
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <LL_SYSCFG_SetEXTISource+0x58>)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	430a      	orrs	r2, r1
 800094a:	3302      	adds	r3, #2
 800094c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40013800 	.word	0x40013800

08000960 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0207 	bic.w	r2, r3, #7
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40023c00 	.word	0x40023c00

08000988 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <LL_FLASH_GetLatency+0x18>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0307 	and.w	r3, r3, #7
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80009b4:	4904      	ldr	r1, [pc, #16]	; (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40007000 	.word	0x40007000

080009cc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	615a      	str	r2, [r3, #20]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa93 f3a3 	rbit	r3, r3
 8000a32:	613b      	str	r3, [r7, #16]
  return result;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	fab3 f383 	clz	r3, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2103      	movs	r1, #3
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	401a      	ands	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	61bb      	str	r3, [r7, #24]
  return result;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	601a      	str	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b089      	sub	sp, #36	; 0x24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa93 f3a3 	rbit	r3, r3
 8000a90:	613b      	str	r3, [r7, #16]
  return result;
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	fab3 f383 	clz	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	fa93 f3a3 	rbit	r3, r3
 8000ab0:	61bb      	str	r3, [r7, #24]
  return result;
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	fab3 f383 	clz	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	60da      	str	r2, [r3, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3724      	adds	r7, #36	; 0x24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	619a      	str	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	041a      	lsls	r2, r3, #16
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	619a      	str	r2, [r3, #24]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	4013      	ands	r3, r2
 8000b24:	041a      	lsls	r2, r3, #16
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43d9      	mvns	r1, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <sim7600_pause_rx_uart_dma>:
extern USART_TypeDef* usartSim7600;

//int numOfDisableDMA = 0;
//signal 0: use from IDLE interrupt, 1: use from DMA TC/HT interrutp
__STATIC_INLINE void sim7600_pause_rx_uart_dma()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
//		while(LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 0
	 //LL_USART_DisableDMAReq_RX(USART1);
	//LL_USART_Disable(USART1);
	 //LL_USART_DisableDMAReq_RX(USART1); //debug
	//LL_USART_DisableRTSHWFlowCtrl(USART1);
	Sim_CTS(1);
 8000b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <sim7600_pause_rx_uart_dma+0x14>)
 8000b4a:	f7ff ffc3 	bl	8000ad4 <LL_GPIO_SetOutputPin>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020000 	.word	0x40020000

08000b58 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e009      	b.n	8000b7e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fda3 	bl	80006be <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf1      	blt.n	8000b6a <_write+0x12>
	}
	return len;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b0ac      	sub	sp, #176	; 0xb0
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fe57 	bl	8001848 <HAL_Init>

  /* USER CODE BEGIN Init */
  eStatusPlayMp3 = ON;
 8000b9a:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <main+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f8c6 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 fa42 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba8:	f000 fa30 	bl	800100c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000bac:	f000 f9de 	bl	8000f6c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000bb0:	f000 f908 	bl	8000dc4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bb4:	f000 f93c 	bl	8000e30 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bb8:	f000 f98a 	bl	8000ed0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //osMessageGet(queue_id, millisec)
  VS1003_Init();
 8000bbc:	f008 fe88 	bl	80098d0 <VS1003_Init>
  VS1003_SoftReset();
 8000bc0:	f008 fefe 	bl	80099c0 <VS1003_SoftReset>
  HAL_TIM_Base_Start(&htim3);
 8000bc4:	484b      	ldr	r0, [pc, #300]	; (8000cf4 <main+0x164>)
 8000bc6:	f002 f987 	bl	8002ed8 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000bca:	4b4b      	ldr	r3, [pc, #300]	; (8000cf8 <main+0x168>)
 8000bcc:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fc94 	bl	8004512 <osThreadCreate>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a43      	ldr	r2, [pc, #268]	; (8000cfc <main+0x16c>)
 8000bee:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, StartTask02, osPriorityHigh, 0, 128);
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <main+0x170>)
 8000bf2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000c04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fc81 	bl	8004512 <osThreadCreate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a3c      	ldr	r2, [pc, #240]	; (8000d04 <main+0x174>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(sim7600Error, sim7600ErrorTask, osPriorityAboveNormal, 0, 128);
 8000c16:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <main+0x178>)
 8000c18:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000c1c:	461d      	mov	r5, r3
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sim7600ErrorHandle = osThreadCreate(osThread(sim7600Error), NULL);
 8000c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fc6e 	bl	8004512 <osThreadCreate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <main+0x17c>)
 8000c3a:	6013      	str	r3, [r2, #0]

  osMessageQDef(rxUASRTQueue, 20, uint8_t);
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <main+0x180>)
 8000c3e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart_rx_dma_queue_id = osMessageCreate(osMessageQ(rxUASRTQueue), NULL);
 8000c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fd82 	bl	8004758 <osMessageCreate>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <main+0x184>)
 8000c58:	6013      	str	r3, [r2, #0]

  osThreadDef(usart_rx_dma, usart_rx_dmaTask, osPriorityRealtime, 0, 128);
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <main+0x188>)
 8000c5c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c60:	461d      	mov	r5, r3
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_rx_dmaHandle = osThreadCreate(osThread(usart_rx_dma), NULL);
 8000c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fc4c 	bl	8004512 <osThreadCreate>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <main+0x18c>)
 8000c7e:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(usart_rx_dmaHandle);

  osThreadDef(startPlayMp3, startPlayMp3Task, osPriorityRealtime, 0, 128);
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <main+0x190>)
 8000c82:	f107 0414 	add.w	r4, r7, #20
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  startPlayMp3Handle = osThreadCreate(osThread(startPlayMp3), NULL);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fc39 	bl	8004512 <osThreadCreate>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <main+0x194>)
 8000ca4:	6013      	str	r3, [r2, #0]

  osMessageQDef(playMp3Queue, 2, uint32_t);
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <main+0x198>)
 8000ca8:	1d3c      	adds	r4, r7, #4
 8000caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  play_mp3_queue_id = osMessageCreate(osMessageQ(playMp3Queue), NULL);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fd4f 	bl	8004758 <osMessageCreate>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <main+0x19c>)
 8000cbe:	6013      	str	r3, [r2, #0]

  //osThreadSuspend(defaultTaskHandle);
  osThreadSuspend(blinkTaskHandle);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <main+0x174>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fe23 	bl	8004910 <osThreadSuspend>
  osThreadSuspend(sim7600ErrorHandle);
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <main+0x17c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fe1e 	bl	8004910 <osThreadSuspend>
  osThreadSuspend(usart_rx_dmaHandle);
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <main+0x18c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fe19 	bl	8004910 <osThreadSuspend>
  osThreadSuspend(startPlayMp3Handle);
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <main+0x194>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fe14 	bl	8004910 <osThreadSuspend>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ce8:	f003 fc0c 	bl	8004504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <main+0x15c>
 8000cee:	bf00      	nop
 8000cf0:	20004250 	.word	0x20004250
 8000cf4:	20004254 	.word	0x20004254
 8000cf8:	0800aef8 	.word	0x0800aef8
 8000cfc:	200041d8 	.word	0x200041d8
 8000d00:	0800af14 	.word	0x0800af14
 8000d04:	200041dc 	.word	0x200041dc
 8000d08:	0800af30 	.word	0x0800af30
 8000d0c:	2000423c 	.word	0x2000423c
 8000d10:	0800af4c 	.word	0x0800af4c
 8000d14:	200042a4 	.word	0x200042a4
 8000d18:	0800af5c 	.word	0x0800af5c
 8000d1c:	200042a0 	.word	0x200042a0
 8000d20:	0800af78 	.word	0x0800af78
 8000d24:	20004244 	.word	0x20004244
 8000d28:	0800af94 	.word	0x0800af94
 8000d2c:	20004248 	.word	0x20004248

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000d34:	2005      	movs	r0, #5
 8000d36:	f7ff fe13 	bl	8000960 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff fe24 	bl	8000988 <LL_FLASH_GetLatency>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	d1fa      	bne.n	8000d3c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d4a:	f7ff fe2b 	bl	80009a4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000d4e:	f7ff fcdd 	bl	800070c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d52:	bf00      	nop
 8000d54:	f7ff fcea 	bl	800072c <LL_RCC_HSE_IsReady>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d1fa      	bne.n	8000d54 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	22a8      	movs	r2, #168	; 0xa8
 8000d62:	2104      	movs	r1, #4
 8000d64:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d68:	f7ff fd76 	bl	8000858 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d6c:	f7ff fd50 	bl	8000810 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d70:	bf00      	nop
 8000d72:	f7ff fd5d 	bl	8000830 <LL_RCC_PLL_IsReady>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d1fa      	bne.n	8000d72 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fd0b 	bl	8000798 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000d82:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d86:	f7ff fd1b 	bl	80007c0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000d8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d8e:	f7ff fd2b 	bl	80007e8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fcde 	bl	8000754 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d98:	bf00      	nop
 8000d9a:	f7ff fcef 	bl	800077c <LL_RCC_GetSysClkSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d1fa      	bne.n	8000d9a <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <SystemClock_Config+0x90>)
 8000da6:	f003 fb73 	bl	8004490 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fbc2 	bl	8001534 <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000db6:	f000 fab3 	bl	8001320 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	0a037a00 	.word	0x0a037a00

08000dc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MX_SPI2_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000df8:	2230      	movs	r2, #48	; 0x30
 8000dfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000e10:	220a      	movs	r2, #10
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_SPI2_Init+0x64>)
 8000e16:	f001 fbef 	bl	80025f8 <HAL_SPI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e20:	f000 fa7e 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200041e0 	.word	0x200041e0
 8000e2c:	40003800 	.word	0x40003800

08000e30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <MX_TIM1_Init+0x9c>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e54:	22a7      	movs	r2, #167	; 0xa7
 8000e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e7a:	f001 ffdd 	bl	8002e38 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 fa4c 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000e96:	f002 fa2e 	bl	80032f6 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ea0:	f000 fa3e 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM1_Init+0x98>)
 8000eb2:	f002 fc47 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ebc:	f000 fa30 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200042b0 	.word	0x200042b0
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_TIM3_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000ef4:	2253      	movs	r2, #83	; 0x53
 8000ef6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f14:	f001 ff90 	bl	8002e38 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 f9ff 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f30:	f002 f9e1 	bl	80032f6 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f9f1 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f4c:	f002 fbfa 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 f9e3 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20004254 	.word	0x20004254
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000f96:	2010      	movs	r0, #16
 8000f98:	f7ff fc9c 	bl	80008d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fc81 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000fa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <MX_USART1_UART_Init+0x98>)
 8000fc2:	f002 fe6d 	bl	8003ca0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000fc6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fd8:	230c      	movs	r3, #12
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_USART1_UART_Init+0x9c>)
 8000fec:	f003 f9d0 	bl	8004390 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART1_UART_Init+0x9c>)
 8000ff2:	f7ff fcfb 	bl	80009ec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART1_UART_Init+0x9c>)
 8000ff8:	f7ff fce8 	bl	80009cc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3738      	adds	r7, #56	; 0x38
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020000 	.word	0x40020000
 8001008:	40011000 	.word	0x40011000

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001010:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001014:	f7ff fc46 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 15, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	210f      	movs	r1, #15
 800101c:	200f      	movs	r0, #15
 800101e:	f000 fd31 	bl	8001a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 fd4a 	bl	8001abc <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800104c:	2080      	movs	r0, #128	; 0x80
 800104e:	f7ff fc29 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001052:	2004      	movs	r0, #4
 8001054:	f7ff fc26 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff fc23 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800105e:	2010      	movs	r0, #16
 8001060:	f7ff fc20 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff fc1d 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <MX_GPIO_Init+0x11c>)
 800106e:	f7ff fd31 	bl	8000ad4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 8001072:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8001076:	4835      	ldr	r0, [pc, #212]	; (800114c <MX_GPIO_Init+0x120>)
 8001078:	f7ff fd2c 	bl	8000ad4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	4833      	ldr	r0, [pc, #204]	; (8001150 <MX_GPIO_Init+0x124>)
 8001082:	f7ff fd35 	bl	8000af0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001086:	23c0      	movs	r3, #192	; 0xc0
 8001088:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800108a:	2301      	movs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	482a      	ldr	r0, [pc, #168]	; (8001148 <MX_GPIO_Init+0x11c>)
 80010a0:	f002 fdfe 	bl	8003ca0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 80010a4:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 80010a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4823      	ldr	r0, [pc, #140]	; (800114c <MX_GPIO_Init+0x120>)
 80010c0:	f002 fdee 	bl	8003ca0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <MX_GPIO_Init+0x124>)
 80010e0:	f002 fdde 	bl	8003ca0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE9);
 80010e4:	491b      	ldr	r1, [pc, #108]	; (8001154 <MX_GPIO_Init+0x128>)
 80010e6:	2004      	movs	r0, #4
 80010e8:	f7ff fc0c 	bl	8000904 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80010fa:	2303      	movs	r3, #3
 80010fc:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fc46 	bl	8003994 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOE, LL_GPIO_PIN_9, LL_GPIO_PULL_NO);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <MX_GPIO_Init+0x120>)
 8001110:	f7ff fcb1 	bl	8000a76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_GPIO_Init+0x120>)
 800111c:	f7ff fc7c 	bl	8000a18 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001120:	f7ff fa44 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8001124:	4603      	mov	r3, r0
 8001126:	2200      	movs	r2, #0
 8001128:	210f      	movs	r1, #15
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa94 	bl	8000658 <NVIC_EncodePriority>
 8001130:	4603      	mov	r3, r0
 8001132:	4619      	mov	r1, r3
 8001134:	2017      	movs	r0, #23
 8001136:	f7ff fa65 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800113a:	2017      	movs	r0, #23
 800113c:	f7ff fa44 	bl	80005c8 <__NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020000 	.word	0x40020000
 800114c:	40021000 	.word	0x40021000
 8001150:	40020400 	.word	0x40020400
 8001154:	00f00002 	.word	0x00f00002

08001158 <HAL_SPI_TxCpltCallback>:
//    numOfDMAInterrupt++;
//    /* Implement other events when needed */
//}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_SPI_TxCpltCallback+0x28>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d107      	bne.n	8001178 <HAL_SPI_TxCpltCallback+0x20>
  {
    //VS1003_PlayBeep_DMA();
    osMessagePut(play_mp3_queue_id, 0, osWaitForever); //play immidiate
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_SPI_TxCpltCallback+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fb18 	bl	80047a8 <osMessagePut>
  }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200041e0 	.word	0x200041e0
 8001184:	20004248 	.word	0x20004248

08001188 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	sim7600_usart_IRQHandler();
 800118c:	f008 fa6a 	bl	8009664 <sim7600_usart_IRQHandler>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <sim7600ErrorTask>:

void sim7600ErrorTask(void const * argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //printf("%c", 'e');
    osDelay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a0:	f003 fa0f 	bl	80045c2 <osDelay>
    sim7600_handle_error();
 80011a4:	f007 fb48 	bl	8008838 <sim7600_handle_error>
    //VS1003_PlayBeep();
    LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <sim7600ErrorTask+0x20>)
 80011ac:	f7ff fcaf 	bl	8000b0e <LL_GPIO_TogglePin>
    osDelay(1000);
 80011b0:	e7f4      	b.n	800119c <sim7600ErrorTask+0x8>
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000

080011b8 <usart_rx_dmaTask>:
  }
}

void usart_rx_dmaTask(void const * argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6178      	str	r0, [r7, #20]
    // {
    //   //osMessageGet(usart_rx_dma_queue_id, 1000);
    // 	osDelay(50);
    // }
    //osDelay(100);
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <usart_rx_dmaTask+0x20>)
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	463b      	mov	r3, r7
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fb2c 	bl	8004828 <osMessageGet>
    sim7600_usart_rx_check();
 80011d0:	f007 fc18 	bl	8008a04 <sim7600_usart_rx_check>
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 80011d4:	e7f4      	b.n	80011c0 <usart_rx_dmaTask+0x8>
 80011d6:	bf00      	nop
 80011d8:	200042a4 	.word	0x200042a4

080011dc <startPlayMp3Task>:
  }
}

osEvent playMp3QueueEvent;
void startPlayMp3Task(void const * argument)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6178      	str	r0, [r7, #20]
  for(;;)
  {
    playMp3QueueEvent = osMessageGet(play_mp3_queue_id, osWaitForever);
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <startPlayMp3Task+0x30>)
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	4c09      	ldr	r4, [pc, #36]	; (8001210 <startPlayMp3Task+0x34>)
 80011ea:	463b      	mov	r3, r7
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fb19 	bl	8004828 <osMessageGet>
 80011f6:	463b      	mov	r3, r7
 80011f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    playMp3DMA(playMp3QueueEvent.value.v);
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <startPlayMp3Task+0x34>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	f008 f913 	bl	8009430 <playMp3DMA>
    playMp3QueueEvent = osMessageGet(play_mp3_queue_id, osWaitForever);
 800120a:	e7eb      	b.n	80011e4 <startPlayMp3Task+0x8>
 800120c:	20004248 	.word	0x20004248
 8001210:	2000435c 	.word	0x2000435c

08001214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //osThreadSuspend(sim7600ErrorHandle); // suspend all other thread
  //Init_LL_GetTick();
  sim7600_init();
 800121c:	f006 ff86 	bl	800812c <sim7600_init>
  osThreadResume(blinkTaskHandle);
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <StartDefaultTask+0x58>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fb7f 	bl	8004928 <osThreadResume>
  osThreadResume(sim7600ErrorHandle);
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <StartDefaultTask+0x5c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fb7a 	bl	8004928 <osThreadResume>
  osThreadResume(usart_rx_dmaHandle);
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <StartDefaultTask+0x60>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fb75 	bl	8004928 <osThreadResume>
  osThreadResume(startPlayMp3Handle);
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <StartDefaultTask+0x64>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fb70 	bl	8004928 <osThreadResume>
  if(!sim7600_config()) sim7600_error = true;
 8001248:	f007 f874 	bl	8008334 <sim7600_config>
 800124c:	4603      	mov	r3, r0
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <StartDefaultTask+0x4a>
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <StartDefaultTask+0x68>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
  //osThreadResumeAll();
  //osThreadResume(blinkTaskHandle);
  //osThreadResume(sim7600ErrorHandle);
  //osThreadResume(usart_rx_dmaHandle);
  
  osThreadTerminate(NULL);
 800125e:	2000      	movs	r0, #0
 8001260:	f003 f9a3 	bl	80045aa <osThreadTerminate>

  //osThreadTerminate(defaultTaskHandle);
  /* USER CODE END 5 */
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200041dc 	.word	0x200041dc
 8001270:	2000423c 	.word	0x2000423c
 8001274:	200042a0 	.word	0x200042a0
 8001278:	20004244 	.word	0x20004244
 800127c:	20004154 	.word	0x20004154

08001280 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  static int StartTask02_num = 0;
  for(;;)
  {
	//LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
    osDelay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f003 f999 	bl	80045c2 <osDelay>

    if(sim7600_udp_IsOpen)
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <StartTask02+0x4c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f7      	beq.n	8001288 <StartTask02+0x8>
    {
    	StartTask02_num++;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <StartTask02+0x50>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <StartTask02+0x50>)
 80012a0:	6013      	str	r3, [r2, #0]
    	//if(StartTask02_num % 5 == 0 || StartTask02_num < 30) sim7600_keepAlive_udp();
    	if((StartTask02_num % 5 == 0) || (StartTask02_num < 5)) sim7600_keepAlive_udp();
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <StartTask02+0x50>)
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <StartTask02+0x54>)
 80012a8:	fb83 2301 	smull	r2, r3, r3, r1
 80012ac:	105a      	asrs	r2, r3, #1
 80012ae:	17cb      	asrs	r3, r1, #31
 80012b0:	1ad2      	subs	r2, r2, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	1aca      	subs	r2, r1, r3
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d003      	beq.n	80012c6 <StartTask02+0x46>
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <StartTask02+0x50>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	dce0      	bgt.n	8001288 <StartTask02+0x8>
 80012c6:	f007 fa81 	bl	80087cc <sim7600_keepAlive_udp>
    osDelay(1000);
 80012ca:	e7dd      	b.n	8001288 <StartTask02+0x8>
 80012cc:	20004157 	.word	0x20004157
 80012d0:	200003f4 	.word	0x200003f4
 80012d4:	66666667 	.word	0x66666667

080012d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d101      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ea:	f000 facf 	bl	800188c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d109      	bne.n	800130c <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	  HAL_TIM_Base_Stop_IT(&htim1);
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012fa:	f001 fec5 	bl	8003088 <HAL_TIM_Base_Stop_IT>
	  sim7600_pause_rx_uart_dma();
 80012fe:	f7ff fc1f 	bl	8000b40 <sim7600_pause_rx_uart_dma>
	  timerUART_DMA_expired++;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800130a:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010000 	.word	0x40010000
 8001318:	200042b0 	.word	0x200042b0
 800131c:	200003f0 	.word	0x200003f0

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_MspInit+0x54>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_MspInit+0x54>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x54>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_MspInit+0x54>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_MspInit+0x54>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_MspInit+0x54>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	210f      	movs	r1, #15
 800136e:	f06f 0001 	mvn.w	r0, #1
 8001372:	f000 fb87 	bl	8001a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <HAL_SPI_MspInit+0x11c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d178      	bne.n	8001498 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_SPI_MspInit+0x120>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800140a:	2305      	movs	r3, #5
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4824      	ldr	r0, [pc, #144]	; (80014a8 <HAL_SPI_MspInit+0x124>)
 8001416:	f000 fecf 	bl	80021b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142c:	2305      	movs	r3, #5
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <HAL_SPI_MspInit+0x128>)
 8001438:	f000 febe 	bl	80021b8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_SPI_MspInit+0x130>)
 8001440:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001474:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 800147e:	f000 fb2b 	bl	8001ad8 <HAL_DMA_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001488:	f7ff ff4a 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001490:	649a      	str	r2, [r3, #72]	; 0x48
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_SPI_MspInit+0x12c>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40003800 	.word	0x40003800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020400 	.word	0x40020400
 80014b0:	200042fc 	.word	0x200042fc
 80014b4:	40026070 	.word	0x40026070

080014b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_TIM_Base_MspInit+0x70>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d116      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 13, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210d      	movs	r1, #13
 80014ea:	2019      	movs	r0, #25
 80014ec:	f000 faca 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f000 fae3 	bl	8001abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014f6:	e012      	b.n	800151e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_TIM_Base_MspInit+0x78>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_TIM_Base_MspInit+0x74>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010000 	.word	0x40010000
 800152c:	40023800 	.word	0x40023800
 8001530:	40000400 	.word	0x40000400

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	201c      	movs	r0, #28
 800154a:	f000 fa9b 	bl	8001a84 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800154e:	201c      	movs	r0, #28
 8001550:	f000 fab4 	bl	8001abc <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_InitTick+0xa8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_InitTick+0xa8>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_InitTick+0xa8>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001570:	f107 0210 	add.w	r2, r7, #16
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f80a 	bl	8002594 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001580:	f000 fff4 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <HAL_InitTick+0xac>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3b01      	subs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0xb0>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_InitTick+0xb0>)
 80015a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_InitTick+0xb0>)
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_InitTick+0xb0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_InitTick+0xb0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <HAL_InitTick+0xb0>)
 80015bc:	f001 fc3c 	bl	8002e38 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <HAL_InitTick+0xb0>)
 80015c8:	f001 fcee 	bl	8002fa8 <HAL_TIM_Base_Start_IT>
 80015cc:	4603      	mov	r3, r0
 80015ce:	e000      	b.n	80015d2 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	20004368 	.word	0x20004368

080015e8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4013      	ands	r3, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40013c00 	.word	0x40013c00

08001614 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6153      	str	r3, [r2, #20]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40013c00 	.word	0x40013c00

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Stream4_IRQHandler+0x10>)
 8001666:	f000 fb3d 	bl	8001ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200042fc 	.word	0x200042fc

08001674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800167c:	f7ff ffb4 	bl	80015e8 <LL_EXTI_IsActiveFlag_0_31>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <EXTI9_5_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 8001686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800168a:	f7ff ffc3 	bl	8001614 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    DREQ_VS1003_IRQhandler();
 800168e:	f008 f9ff 	bl	8009a90 <DREQ_VS1003_IRQhandler>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800169e:	f001 fd22 	bl	80030e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200042b0 	.word	0x200042b0

080016ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM2_IRQHandler+0x10>)
 80016b2:	f001 fd18 	bl	80030e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20004368 	.word	0x20004368

080016c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
	}

return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f008 f998 	bl	8009ac8 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20020000 	.word	0x20020000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	200003f8 	.word	0x200003f8
 80017cc:	200096d0 	.word	0x200096d0

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffd7 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f008 f957 	bl	8009ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff f9b3 	bl	8000b90 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001838:	0800b250 	.word	0x0800b250
  ldr r2, =_sbss
 800183c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001840:	200096cc 	.word	0x200096cc

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f8fc 	bl	8001a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fe5c 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fd56 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200043b0 	.word	0x200043b0

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200043b0 	.word	0x200043b0

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000004 	.word	0x20000004

08001914 <__NVIC_SetPriorityGrouping>:
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff4c 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a96:	f7ff ff61 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	6978      	ldr	r0, [r7, #20]
 8001aa2:	f7ff ffb1 	bl	8001a08 <NVIC_EncodePriority>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff80 	bl	80019b4 <__NVIC_SetPriority>
}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff54 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff fee6 	bl	80018b4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e099      	b.n	8001c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b14:	e00f      	b.n	8001b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b16:	f7ff fecd 	bl	80018b4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d908      	bls.n	8001b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e078      	b.n	8001c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1e8      	bne.n	8001b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_DMA_Init+0x158>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d107      	bne.n	8001ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f023 0307 	bic.w	r3, r3, #7
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d117      	bne.n	8001bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00e      	beq.n	8001bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fa6f 	bl	80020c0 <DMA_CheckFifoParam>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e016      	b.n	8001c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa26 	bl	8002054 <DMA_CalcBaseAndBitshift>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	223f      	movs	r2, #63	; 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	f010803f 	.word	0xf010803f

08001c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_DMA_Start_IT+0x26>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e040      	b.n	8001cdc <HAL_DMA_Start_IT+0xa8>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d12f      	bne.n	8001cce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f9b8 	bl	8001ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	223f      	movs	r2, #63	; 0x3f
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0216 	orr.w	r2, r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e005      	b.n	8001cda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_DMA_IRQHandler+0x258>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_DMA_IRQHandler+0x25c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2208      	movs	r2, #8
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2201      	movs	r2, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2201      	movs	r2, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2204      	movs	r2, #4
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d043      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03c      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2210      	movs	r2, #16
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
 8001e12:	e01f      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e016      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0208 	bic.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2220      	movs	r2, #32
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 808e 	beq.w	8001f82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8086 	beq.w	8001f82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d136      	bne.n	8001efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0216 	bic.w	r2, r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x1da>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
 8001ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	223f      	movs	r2, #63	; 0x3f
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d07d      	beq.n	8001fee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
        }
        return;
 8001efa:	e078      	b.n	8001fee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01c      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d030      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e02b      	b.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d027      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e022      	b.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0210 	bic.w	r2, r2, #16
 8001f60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d032      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d022      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d307      	bcc.n	8001fca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f2      	bne.n	8001fae <HAL_DMA_IRQHandler+0x2ca>
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fee:	bf00      	nop
    }
  }
}
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop

08001ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d108      	bne.n	8002038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002036:	e007      	b.n	8002048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3b10      	subs	r3, #16
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <DMA_CalcBaseAndBitshift+0x68>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d909      	bls.n	8002096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	1d1a      	adds	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	659a      	str	r2, [r3, #88]	; 0x58
 8002094:	e007      	b.n	80020a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	aaaaaaab 	.word	0xaaaaaaab
 80020bc:	0800b198 	.word	0x0800b198

080020c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11f      	bne.n	800211a <DMA_CheckFifoParam+0x5a>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d856      	bhi.n	800218e <DMA_CheckFifoParam+0xce>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <DMA_CheckFifoParam+0x28>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	0800210b 	.word	0x0800210b
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	0800218f 	.word	0x0800218f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d046      	beq.n	8002192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002108:	e043      	b.n	8002192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002112:	d140      	bne.n	8002196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e03d      	b.n	8002196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d121      	bne.n	8002168 <DMA_CheckFifoParam+0xa8>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d837      	bhi.n	800219a <DMA_CheckFifoParam+0xda>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <DMA_CheckFifoParam+0x70>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002141 	.word	0x08002141
 8002134:	08002147 	.word	0x08002147
 8002138:	08002141 	.word	0x08002141
 800213c:	08002159 	.word	0x08002159
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e030      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d025      	beq.n	800219e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002156:	e022      	b.n	800219e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002166:	e01c      	b.n	80021a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d903      	bls.n	8002176 <DMA_CheckFifoParam+0xb6>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d003      	beq.n	800217c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002174:	e018      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      break;
 800217a:	e015      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e00b      	b.n	80021a6 <DMA_CheckFifoParam+0xe6>
      break;
 800218e:	bf00      	nop
 8002190:	e00a      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e008      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e006      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e004      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
    }
  } 
  
  return status; 
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e16b      	b.n	80024ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 815a 	bne.w	80024a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80b4 	beq.w	80024a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_GPIO_Init+0x30c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a5b      	ldr	r2, [pc, #364]	; (80024c8 <HAL_GPIO_Init+0x310>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x226>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x222>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a50      	ldr	r2, [pc, #320]	; (80024d4 <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x21e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x21a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_GPIO_Init+0x324>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x216>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x212>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x20e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4b      	ldr	r2, [pc, #300]	; (80024e8 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x20a>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00e      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c2:	2308      	movs	r3, #8
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x228>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x310>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002422:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x334>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_GPIO_Init+0x334>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x334>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_GPIO_Init+0x334>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f ae90 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021c00 	.word	0x40021c00
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e001      	b.n	8002512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800253c:	e003      	b.n	8002546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	041a      	lsls	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000000 	.word	0x20000000

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	0800b190 	.word	0x0800b190

08002594 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	220f      	movs	r2, #15
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetClockConfig+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07b      	b.n	8002702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261a:	d009      	beq.n	8002630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
 8002622:	e005      	b.n	8002630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fe9a 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0104 	and.w	r1, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f003 0210 	and.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_SPI_Transmit+0x22>
 8002728:	2302      	movs	r3, #2
 800272a:	e126      	b.n	800297a <HAL_SPI_Transmit+0x270>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002734:	f7ff f8be 	bl	80018b4 <HAL_GetTick>
 8002738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d002      	beq.n	8002750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800274e:	e10b      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_Transmit+0x52>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002760:	e102      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a8:	d10f      	bne.n	80027ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d007      	beq.n	80027e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f0:	d14b      	bne.n	800288a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0xf6>
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13e      	bne.n	800287e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002824:	e02b      	b.n	800287e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d112      	bne.n	800285a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	86da      	strh	r2, [r3, #54]	; 0x36
 8002858:	e011      	b.n	800287e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800285a:	f7ff f82b 	bl	80018b4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d803      	bhi.n	8002872 <HAL_SPI_Transmit+0x168>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d102      	bne.n	8002878 <HAL_SPI_Transmit+0x16e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800287c:	e074      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ce      	bne.n	8002826 <HAL_SPI_Transmit+0x11c>
 8002888:	e04c      	b.n	8002924 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0x18e>
 8002892:	8afb      	ldrh	r3, [r7, #22]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d140      	bne.n	800291a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028be:	e02c      	b.n	800291a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d113      	bne.n	80028f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028f4:	e011      	b.n	800291a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f6:	f7fe ffdd 	bl	80018b4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d803      	bhi.n	800290e <HAL_SPI_Transmit+0x204>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d102      	bne.n	8002914 <HAL_SPI_Transmit+0x20a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002918:	e026      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1cd      	bne.n	80028c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa43 	bl	8002db4 <SPI_EndRxTxTransaction>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e000      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002978:	7ffb      	ldrb	r3, [r7, #31]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_SPI_Transmit_DMA+0x20>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e09b      	b.n	8002adc <HAL_SPI_Transmit_DMA+0x158>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d002      	beq.n	80029be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
 80029ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029bc:	e089      	b.n	8002ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit_DMA+0x46>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ce:	e080      	b.n	8002ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a16:	d10f      	bne.n	8002a38 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_SPI_Transmit_DMA+0x160>)
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_SPI_Transmit_DMA+0x164>)
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_SPI_Transmit_DMA+0x168>)
 8002a4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	2200      	movs	r2, #0
 8002a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4619      	mov	r1, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a70:	f7ff f8e0 	bl	8001c34 <HAL_DMA_Start_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002a92:	e01e      	b.n	8002ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d007      	beq.n	8002ab2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0202 	orr.w	r2, r2, #2
 8002ad0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	08002c49 	.word	0x08002c49
 8002ae8:	08002ba1 	.word	0x08002ba1
 8002aec:	08002c65 	.word	0x08002c65

08002af0 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_DMAPause+0x16>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e010      	b.n	8002b28 <HAL_SPI_DMAPause+0x38>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0203 	bic.w	r2, r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_SPI_DMAResume+0x16>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e010      	b.n	8002b6c <HAL_SPI_DMAResume+0x38>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0203 	orr.w	r2, r2, #3
 8002b60:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bae:	f7fe fe81 	bl	80018b4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d03b      	beq.n	8002c3c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0220 	bic.w	r2, r2, #32
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0202 	bic.w	r2, r2, #2
 8002be2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	2164      	movs	r1, #100	; 0x64
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f000 f8e3 	bl	8002db4 <SPI_EndRxTxTransaction>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c34:	6978      	ldr	r0, [r7, #20]
 8002c36:	f7ff ffa9 	bl	8002b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c3a:	e002      	b.n	8002c42 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	f7fe fa8b 	bl	8001158 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ff8e 	bl	8002b78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0203 	bic.w	r2, r2, #3
 8002c80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f7ff ff78 	bl	8002b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cb4:	f7fe fdfe 	bl	80018b4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cc4:	f7fe fdf6 	bl	80018b4 <HAL_GetTick>
 8002cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	015b      	lsls	r3, r3, #5
 8002cd0:	0d1b      	lsrs	r3, r3, #20
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cda:	e054      	b.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d050      	beq.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce4:	f7fe fde6 	bl	80018b4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d902      	bls.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d13d      	bne.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d12:	d111      	bne.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1c:	d004      	beq.n	8002d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d107      	bne.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d10f      	bne.n	8002d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e017      	b.n	8002da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	bf0c      	ite	eq
 8002d96:	2301      	moveq	r3, #1
 8002d98:	2300      	movne	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d19b      	bne.n	8002cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <SPI_EndRxTxTransaction+0x7c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <SPI_EndRxTxTransaction+0x80>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0d5b      	lsrs	r3, r3, #21
 8002dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d112      	bne.n	8002e06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff ff5a 	bl	8002ca4 <SPI_WaitFlagStateUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00f      	b.n	8002e26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d0f2      	beq.n	8002e06 <SPI_EndRxTxTransaction+0x52>
 8002e20:	e000      	b.n	8002e24 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e22:	bf00      	nop
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000
 8002e34:	165e9f81 	.word	0x165e9f81

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fb2a 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fb2a 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e046      	b.n	8002f7e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_TIM_Base_Start+0xb4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d01d      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_TIM_Base_Start+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_TIM_Base_Start+0xbc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_TIM_Base_Start+0xc0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_TIM_Base_Start+0xc4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_Base_Start+0xc8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_Base_Start+0x70>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_TIM_Base_Start+0xcc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d010      	beq.n	8002f7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	e007      	b.n	8002f7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40001800 	.word	0x40001800

08002fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e04e      	b.n	800305e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a23      	ldr	r2, [pc, #140]	; (800306c <HAL_TIM_Base_Start_IT+0xc4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d022      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d01d      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_TIM_Base_Start_IT+0xd0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_TIM_Base_Start_IT+0xd4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_TIM_Base_Start_IT+0xd8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x80>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a18      	ldr	r2, [pc, #96]	; (8003084 <HAL_TIM_Base_Start_IT+0xdc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d111      	bne.n	800304c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b06      	cmp	r3, #6
 8003038:	d010      	beq.n	800305c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	e007      	b.n	800305c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40010400 	.word	0x40010400
 8003080:	40014000 	.word	0x40014000
 8003084:	40001800 	.word	0x40001800

08003088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <HAL_TIM_Base_Stop_IT+0x48>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	f240 4344 	movw	r3, #1092	; 0x444
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_Base_Stop_IT+0x48>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d122      	bne.n	8003142 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d11b      	bne.n	8003142 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0202 	mvn.w	r2, #2
 8003112:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9b2 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 800312e:	e005      	b.n	800313c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f9a4 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9b5 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d122      	bne.n	8003196 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d11b      	bne.n	8003196 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0204 	mvn.w	r2, #4
 8003166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f988 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 8003182:	e005      	b.n	8003190 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f97a 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f98b 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d122      	bne.n	80031ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f06f 0208 	mvn.w	r2, #8
 80031ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2204      	movs	r2, #4
 80031c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f95e 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 80031d6:	e005      	b.n	80031e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f950 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f961 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d122      	bne.n	800323e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d11b      	bne.n	800323e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0210 	mvn.w	r2, #16
 800320e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2208      	movs	r2, #8
 8003214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f934 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 800322a:	e005      	b.n	8003238 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f926 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f937 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0201 	mvn.w	r2, #1
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fe f837 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fadd 	bl	8003850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d10e      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8fc 	bl	80034ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d10e      	bne.n	80032ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d107      	bne.n	80032ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 0220 	mvn.w	r2, #32
 80032e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 faa7 	bl	800383c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_TIM_ConfigClockSource+0x18>
 800330a:	2302      	movs	r3, #2
 800330c:	e0b3      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x180>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800332c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003334:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d03e      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0xd0>
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	f200 8087 	bhi.w	800345e <HAL_TIM_ConfigClockSource+0x168>
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	f000 8085 	beq.w	8003462 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d87f      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 800335e:	2b70      	cmp	r3, #112	; 0x70
 8003360:	d01a      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xa2>
 8003362:	2b70      	cmp	r3, #112	; 0x70
 8003364:	d87b      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 8003366:	2b60      	cmp	r3, #96	; 0x60
 8003368:	d050      	beq.n	800340c <HAL_TIM_ConfigClockSource+0x116>
 800336a:	2b60      	cmp	r3, #96	; 0x60
 800336c:	d877      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 800336e:	2b50      	cmp	r3, #80	; 0x50
 8003370:	d03c      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xf6>
 8003372:	2b50      	cmp	r3, #80	; 0x50
 8003374:	d873      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d058      	beq.n	800342c <HAL_TIM_ConfigClockSource+0x136>
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d86f      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 800337e:	2b30      	cmp	r3, #48	; 0x30
 8003380:	d064      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x156>
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d86b      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 8003386:	2b20      	cmp	r3, #32
 8003388:	d060      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x156>
 800338a:	2b20      	cmp	r3, #32
 800338c:	d867      	bhi.n	800345e <HAL_TIM_ConfigClockSource+0x168>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d05c      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x156>
 8003392:	2b10      	cmp	r3, #16
 8003394:	d05a      	beq.n	800344c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003396:	e062      	b.n	800345e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f000 f9ac 	bl	8003704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
      break;
 80033c4:	e04e      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f000 f995 	bl	8003704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e8:	609a      	str	r2, [r3, #8]
      break;
 80033ea:	e03b      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	461a      	mov	r2, r3
 80033fa:	f000 f909 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2150      	movs	r1, #80	; 0x50
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f962 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 800340a:	e02b      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	461a      	mov	r2, r3
 800341a:	f000 f928 	bl	800366e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2160      	movs	r1, #96	; 0x60
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f952 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 800342a:	e01b      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	461a      	mov	r2, r3
 800343a:	f000 f8e9 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f942 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 800344a:	e00b      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f939 	bl	80036ce <TIM_ITRx_SetConfig>
        break;
 800345c:	e002      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d00f      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <TIM_Base_SetConfig+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003530:	d027      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <TIM_Base_SetConfig+0x118>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d023      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <TIM_Base_SetConfig+0x11c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <TIM_Base_SetConfig+0x120>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <TIM_Base_SetConfig+0x128>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <TIM_Base_SetConfig+0x12c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0x130>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0x134>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a24      	ldr	r2, [pc, #144]	; (8003608 <TIM_Base_SetConfig+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <TIM_Base_SetConfig+0x13c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0xf8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40010400 	.word	0x40010400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800
 8003604:	40001800 	.word	0x40001800
 8003608:	40001c00 	.word	0x40001c00
 800360c:	40002000 	.word	0x40002000

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 0307 	orr.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e05a      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d01d      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40001800 	.word	0x40001800

0800383c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_EXTI_EnableIT_0_31>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <LL_EXTI_EnableIT_0_31+0x20>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4904      	ldr	r1, [pc, #16]	; (8003884 <LL_EXTI_EnableIT_0_31+0x20>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40013c00 	.word	0x40013c00

08003888 <LL_EXTI_DisableIT_0_31>:
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <LL_EXTI_DisableIT_0_31+0x24>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	43db      	mvns	r3, r3
 8003898:	4904      	ldr	r1, [pc, #16]	; (80038ac <LL_EXTI_DisableIT_0_31+0x24>)
 800389a:	4013      	ands	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40013c00 	.word	0x40013c00

080038b0 <LL_EXTI_EnableEvent_0_31>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <LL_EXTI_DisableEvent_0_31>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	4904      	ldr	r1, [pc, #16]	; (80038f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40013c00 	.word	0x40013c00

080038fc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	4904      	ldr	r1, [pc, #16]	; (800391c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40013c00 	.word	0x40013c00

08003920 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	43db      	mvns	r3, r3
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003932:	4013      	ands	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40013c00 	.word	0x40013c00

08003948 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40013c00 	.word	0x40013c00

0800396c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	43db      	mvns	r3, r3
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800397e:	4013      	ands	r3, r2
 8003980:	60cb      	str	r3, [r1, #12]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40013c00 	.word	0x40013c00

08003994 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d065      	beq.n	8003a74 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d06c      	beq.n	8003a8a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	795b      	ldrb	r3, [r3, #5]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d01c      	beq.n	80039f2 <LL_EXTI_Init+0x5e>
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	dc25      	bgt.n	8003a08 <LL_EXTI_Init+0x74>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <LL_EXTI_Init+0x32>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d00b      	beq.n	80039dc <LL_EXTI_Init+0x48>
 80039c4:	e020      	b.n	8003a08 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff82 	bl	80038d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff45 	bl	8003864 <LL_EXTI_EnableIT_0_31>
          break;
 80039da:	e018      	b.n	8003a0e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff51 	bl	8003888 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff60 	bl	80038b0 <LL_EXTI_EnableEvent_0_31>
          break;
 80039f0:	e00d      	b.n	8003a0e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff34 	bl	8003864 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff55 	bl	80038b0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003a06:	e002      	b.n	8003a0e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	799b      	ldrb	r3, [r3, #6]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d039      	beq.n	8003a8a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	799b      	ldrb	r3, [r3, #6]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d01c      	beq.n	8003a58 <LL_EXTI_Init+0xc4>
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	dc25      	bgt.n	8003a6e <LL_EXTI_Init+0xda>
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d002      	beq.n	8003a2c <LL_EXTI_Init+0x98>
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d00b      	beq.n	8003a42 <LL_EXTI_Init+0xae>
 8003a2a:	e020      	b.n	8003a6e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff9b 	bl	800396c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff5e 	bl	80038fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003a40:	e024      	b.n	8003a8c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff6a 	bl	8003920 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff79 	bl	8003948 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a56:	e019      	b.n	8003a8c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff4d 	bl	80038fc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff6e 	bl	8003948 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a6c:	e00e      	b.n	8003a8c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
            break;
 8003a72:	e00b      	b.n	8003a8c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff05 	bl	8003888 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff26 	bl	80038d4 <LL_EXTI_DisableEvent_0_31>
 8003a88:	e000      	b.n	8003a8c <LL_EXTI_Init+0xf8>
      }
 8003a8a:	bf00      	nop
  }
  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <LL_GPIO_SetPinMode>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b089      	sub	sp, #36	; 0x24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	613b      	str	r3, [r7, #16]
  return result;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2103      	movs	r1, #3
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	3724      	adds	r7, #36	; 0x24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_GPIO_SetPinOutputType>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	401a      	ands	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	605a      	str	r2, [r3, #4]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_GPIO_SetPinSpeed>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	613b      	str	r3, [r7, #16]
  return result;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	61bb      	str	r3, [r7, #24]
  return result;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_GPIO_SetPinPull>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b089      	sub	sp, #36	; 0x24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	613b      	str	r3, [r7, #16]
  return result;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2103      	movs	r1, #3
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3724      	adds	r7, #36	; 0x24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_GPIO_SetAFPin_0_7>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	613b      	str	r3, [r7, #16]
  return result;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	210f      	movs	r1, #15
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	61bb      	str	r3, [r7, #24]
  return result;
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_GPIO_SetAFPin_8_15>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b089      	sub	sp, #36	; 0x24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	613b      	str	r3, [r7, #16]
  return result;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	210f      	movs	r1, #15
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	61bb      	str	r3, [r7, #24]
  return result;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c94:	bf00      	nop
 8003c96:	3724      	adds	r7, #36	; 0x24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	613b      	str	r3, [r7, #16]
  return result;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003cca:	e050      	b.n	8003d6e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d042      	beq.n	8003d68 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d003      	beq.n	8003cf2 <LL_GPIO_Init+0x52>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d10d      	bne.n	8003d0e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff12 	bl	8003b24 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	461a      	mov	r2, r3
 8003d06:	69b9      	ldr	r1, [r7, #24]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fef3 	bl	8003af4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	461a      	mov	r2, r3
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff33 	bl	8003b82 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d11a      	bne.n	8003d5a <LL_GPIO_Init+0xba>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	60bb      	str	r3, [r7, #8]
  return result;
 8003d30:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b07      	cmp	r3, #7
 8003d3a:	d807      	bhi.n	8003d4c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	461a      	mov	r2, r3
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff4b 	bl	8003be0 <LL_GPIO_SetAFPin_0_7>
 8003d4a:	e006      	b.n	8003d5a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	461a      	mov	r2, r3
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff72 	bl	8003c3e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe97 	bl	8003a96 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1a7      	bne.n	8003ccc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <LL_RCC_GetSysClkSource>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <LL_RCC_GetSysClkSource+0x18>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <LL_RCC_GetAHBPrescaler>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <LL_RCC_GetAHBPrescaler+0x18>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <LL_RCC_GetAPB1Prescaler>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <LL_RCC_GetAPB2Prescaler>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <LL_RCC_PLL_GetMainSource+0x18>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <LL_RCC_PLL_GetN+0x18>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40023800 	.word	0x40023800

08003e30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <LL_RCC_PLL_GetP+0x18>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <LL_RCC_PLL_GetDivider+0x18>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e70:	f000 f820 	bl	8003eb4 <RCC_GetSystemClockFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f840 	bl	8003f04 <RCC_GetHCLKClockFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f84e 	bl	8003f30 <RCC_GetPCLK1ClockFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f85a 	bl	8003f58 <RCC_GetPCLK2ClockFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60da      	str	r2, [r3, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003ebe:	f7ff ff63 	bl	8003d88 <LL_RCC_GetSysClkSource>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d00c      	beq.n	8003ee2 <RCC_GetSystemClockFreq+0x2e>
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d80f      	bhi.n	8003eec <RCC_GetSystemClockFreq+0x38>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <RCC_GetSystemClockFreq+0x22>
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d003      	beq.n	8003edc <RCC_GetSystemClockFreq+0x28>
 8003ed4:	e00a      	b.n	8003eec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <RCC_GetSystemClockFreq+0x48>)
 8003ed8:	607b      	str	r3, [r7, #4]
      break;
 8003eda:	e00a      	b.n	8003ef2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <RCC_GetSystemClockFreq+0x4c>)
 8003ede:	607b      	str	r3, [r7, #4]
      break;
 8003ee0:	e007      	b.n	8003ef2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003ee2:	2008      	movs	r0, #8
 8003ee4:	f000 f84c 	bl	8003f80 <RCC_PLL_GetFreqDomain_SYS>
 8003ee8:	6078      	str	r0, [r7, #4]
      break;
 8003eea:	e002      	b.n	8003ef2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <RCC_GetSystemClockFreq+0x48>)
 8003eee:	607b      	str	r3, [r7, #4]
      break;
 8003ef0:	bf00      	nop
  }

  return frequency;
 8003ef2:	687b      	ldr	r3, [r7, #4]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003f0c:	f7ff ff4a 	bl	8003da4 <LL_RCC_GetAHBPrescaler>
 8003f10:	4603      	mov	r3, r0
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <RCC_GetHCLKClockFreq+0x28>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	40d3      	lsrs	r3, r2
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0800b180 	.word	0x0800b180

08003f30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f38:	f7ff ff42 	bl	8003dc0 <LL_RCC_GetAPB1Prescaler>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	0a9b      	lsrs	r3, r3, #10
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <RCC_GetPCLK1ClockFreq+0x24>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	40d3      	lsrs	r3, r2
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0800b190 	.word	0x0800b190

08003f58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f60:	f7ff ff3c 	bl	8003ddc <LL_RCC_GetAPB2Prescaler>
 8003f64:	4603      	mov	r3, r0
 8003f66:	0b5b      	lsrs	r3, r3, #13
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <RCC_GetPCLK2ClockFreq+0x24>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	40d3      	lsrs	r3, r2
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	0800b190 	.word	0x0800b190

08003f80 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f94:	f7ff ff30 	bl	8003df8 <LL_RCC_PLL_GetMainSource>
 8003f98:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d003      	beq.n	8003fb0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003fa8:	e005      	b.n	8003fb6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003fac:	617b      	str	r3, [r7, #20]
      break;
 8003fae:	e005      	b.n	8003fbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003fb2:	617b      	str	r3, [r7, #20]
      break;
 8003fb4:	e002      	b.n	8003fbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003fb8:	617b      	str	r3, [r7, #20]
      break;
 8003fba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d113      	bne.n	8003fea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fc2:	f7ff ff43 	bl	8003e4c <LL_RCC_PLL_GetDivider>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fbb3 f4f2 	udiv	r4, r3, r2
 8003fce:	f7ff ff21 	bl	8003e14 <LL_RCC_PLL_GetN>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	fb03 f404 	mul.w	r4, r3, r4
 8003fd8:	f7ff ff2a 	bl	8003e30 <LL_RCC_PLL_GetP>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fe8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003fea:	693b      	ldr	r3, [r7, #16]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	007a1200 	.word	0x007a1200

08003ffc <LL_USART_IsEnabled>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_USART_SetStopBitsLength>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_USART_SetHWFlowCtrl>:
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	615a      	str	r2, [r3, #20]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_USART_SetBaudRate>:
{
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	b09f      	sub	sp, #124	; 0x7c
 8004076:	af00      	add	r7, sp, #0
 8004078:	6778      	str	r0, [r7, #116]	; 0x74
 800407a:	6739      	str	r1, [r7, #112]	; 0x70
 800407c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	f040 80bc 	bne.w	8004202 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800408a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800408c:	461c      	mov	r4, r3
 800408e:	f04f 0500 	mov.w	r5, #0
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	eb12 0a02 	adds.w	sl, r2, r2
 800409a:	eb43 0b03 	adc.w	fp, r3, r3
 800409e:	4652      	mov	r2, sl
 80040a0:	465b      	mov	r3, fp
 80040a2:	1912      	adds	r2, r2, r4
 80040a4:	eb45 0303 	adc.w	r3, r5, r3
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	00d9      	lsls	r1, r3, #3
 80040b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b6:	00d0      	lsls	r0, r2, #3
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	1911      	adds	r1, r2, r4
 80040be:	6639      	str	r1, [r7, #96]	; 0x60
 80040c0:	416b      	adcs	r3, r5
 80040c2:	667b      	str	r3, [r7, #100]	; 0x64
 80040c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c6:	461a      	mov	r2, r3
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	6339      	str	r1, [r7, #48]	; 0x30
 80040d0:	415b      	adcs	r3, r3
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
 80040d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040dc:	f7fc f8d0 	bl	8000280 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4ba9      	ldr	r3, [pc, #676]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	b29e      	uxth	r6, r3
 80040f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f4:	461c      	mov	r4, r3
 80040f6:	f04f 0500 	mov.w	r5, #0
 80040fa:	4622      	mov	r2, r4
 80040fc:	462b      	mov	r3, r5
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	62b9      	str	r1, [r7, #40]	; 0x28
 8004102:	415b      	adcs	r3, r3
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410a:	1912      	adds	r2, r2, r4
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	f04f 0000 	mov.w	r0, #0
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	00d9      	lsls	r1, r3, #3
 800411a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800411e:	00d0      	lsls	r0, r2, #3
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	1911      	adds	r1, r2, r4
 8004126:	65b9      	str	r1, [r7, #88]	; 0x58
 8004128:	416b      	adcs	r3, r5
 800412a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	1891      	adds	r1, r2, r2
 8004136:	6239      	str	r1, [r7, #32]
 8004138:	415b      	adcs	r3, r3
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004140:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004144:	f7fc f89c 	bl	8000280 <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4b8f      	ldr	r3, [pc, #572]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 800414e:	fba3 1302 	umull	r1, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2164      	movs	r1, #100	; 0x64
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	3332      	adds	r3, #50	; 0x32
 8004160:	4a8a      	ldr	r2, [pc, #552]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	b29b      	uxth	r3, r3
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	b29b      	uxth	r3, r3
 800416e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004172:	b29b      	uxth	r3, r3
 8004174:	4433      	add	r3, r6
 8004176:	b29e      	uxth	r6, r3
 8004178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800417a:	4618      	mov	r0, r3
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	1894      	adds	r4, r2, r2
 8004186:	61bc      	str	r4, [r7, #24]
 8004188:	415b      	adcs	r3, r3
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004190:	1812      	adds	r2, r2, r0
 8004192:	eb41 0303 	adc.w	r3, r1, r3
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	f04f 0500 	mov.w	r5, #0
 800419e:	00dd      	lsls	r5, r3, #3
 80041a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041a4:	00d4      	lsls	r4, r2, #3
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	1814      	adds	r4, r2, r0
 80041ac:	653c      	str	r4, [r7, #80]	; 0x50
 80041ae:	414b      	adcs	r3, r1
 80041b0:	657b      	str	r3, [r7, #84]	; 0x54
 80041b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b4:	461a      	mov	r2, r3
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	6139      	str	r1, [r7, #16]
 80041be:	415b      	adcs	r3, r3
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041ca:	f7fc f859 	bl	8000280 <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4b6e      	ldr	r3, [pc, #440]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 80041d4:	fba3 1302 	umull	r1, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	2164      	movs	r1, #100	; 0x64
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3332      	adds	r3, #50	; 0x32
 80041e6:	4a69      	ldr	r2, [pc, #420]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4433      	add	r3, r6
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	e0be      	b.n	8004380 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004204:	461c      	mov	r4, r3
 8004206:	f04f 0500 	mov.w	r5, #0
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	eb12 0802 	adds.w	r8, r2, r2
 8004212:	eb43 0903 	adc.w	r9, r3, r3
 8004216:	4642      	mov	r2, r8
 8004218:	464b      	mov	r3, r9
 800421a:	1912      	adds	r2, r2, r4
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	00d9      	lsls	r1, r3, #3
 800422a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800422e:	00d0      	lsls	r0, r2, #3
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	1911      	adds	r1, r2, r4
 8004236:	64b9      	str	r1, [r7, #72]	; 0x48
 8004238:	416b      	adcs	r3, r5
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423e:	4618      	mov	r0, r3
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	008b      	lsls	r3, r1, #2
 800424e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004252:	0082      	lsls	r2, r0, #2
 8004254:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004258:	f7fc f812 	bl	8000280 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4b4a      	ldr	r3, [pc, #296]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 8004262:	fba3 2302 	umull	r2, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	b29b      	uxth	r3, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	b29e      	uxth	r6, r3
 800426e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004270:	4618      	mov	r0, r3
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	1894      	adds	r4, r2, r2
 800427c:	60bc      	str	r4, [r7, #8]
 800427e:	415b      	adcs	r3, r3
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004286:	1812      	adds	r2, r2, r0
 8004288:	eb41 0303 	adc.w	r3, r1, r3
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	f04f 0500 	mov.w	r5, #0
 8004294:	00dd      	lsls	r5, r3, #3
 8004296:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800429a:	00d4      	lsls	r4, r2, #3
 800429c:	4622      	mov	r2, r4
 800429e:	462b      	mov	r3, r5
 80042a0:	1814      	adds	r4, r2, r0
 80042a2:	643c      	str	r4, [r7, #64]	; 0x40
 80042a4:	414b      	adcs	r3, r1
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042aa:	4618      	mov	r0, r3
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042be:	0082      	lsls	r2, r0, #2
 80042c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80042c4:	f7fb ffdc 	bl	8000280 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 80042ce:	fba3 1302 	umull	r1, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2164      	movs	r1, #100	; 0x64
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a2a      	ldr	r2, [pc, #168]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4433      	add	r3, r6
 80042f2:	b29e      	uxth	r6, r3
 80042f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f6:	4618      	mov	r0, r3
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	1894      	adds	r4, r2, r2
 8004302:	603c      	str	r4, [r7, #0]
 8004304:	415b      	adcs	r3, r3
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430c:	1812      	adds	r2, r2, r0
 800430e:	eb41 0303 	adc.w	r3, r1, r3
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	f04f 0500 	mov.w	r5, #0
 800431a:	00dd      	lsls	r5, r3, #3
 800431c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004320:	00d4      	lsls	r4, r2, #3
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	1814      	adds	r4, r2, r0
 8004328:	63bc      	str	r4, [r7, #56]	; 0x38
 800432a:	414b      	adcs	r3, r1
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004330:	4618      	mov	r0, r3
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	008b      	lsls	r3, r1, #2
 8004340:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004344:	0082      	lsls	r2, r0, #2
 8004346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800434a:	f7fb ff99 	bl	8000280 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	; 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	; 0x32
 8004366:	4a09      	ldr	r2, [pc, #36]	; (800438c <LL_USART_SetBaudRate+0x31c>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	b29b      	uxth	r3, r3
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	b29b      	uxth	r3, r3
 8004376:	4433      	add	r3, r6
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	377c      	adds	r7, #124	; 0x7c
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fe2a 	bl	8003ffc <LL_USART_IsEnabled>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d15e      	bne.n	800446c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043b6:	f023 030c 	bic.w	r3, r3, #12
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	6851      	ldr	r1, [r2, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	6912      	ldr	r2, [r2, #16]
 80043c8:	4311      	orrs	r1, r2
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	6992      	ldr	r2, [r2, #24]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fe21 	bl	8004024 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fe2e 	bl	800404a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80043ee:	f107 0308 	add.w	r3, r7, #8
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fd38 	bl	8003e68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <LL_USART_Init+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d102      	bne.n	8004406 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e021      	b.n	800444a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <LL_USART_Init+0xec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d102      	bne.n	8004414 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e01a      	b.n	800444a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <LL_USART_Init+0xf0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d102      	bne.n	8004422 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e013      	b.n	800444a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <LL_USART_Init+0xf4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d102      	bne.n	8004430 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e00c      	b.n	800444a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <LL_USART_Init+0xf8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d102      	bne.n	800443e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e005      	b.n	800444a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <LL_USART_Init+0xfc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff fe02 	bl	8004070 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800446c:	7ffb      	ldrb	r3, [r7, #31]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40011000 	.word	0x40011000
 800447c:	40004400 	.word	0x40004400
 8004480:	40004800 	.word	0x40004800
 8004484:	40011400 	.word	0x40011400
 8004488:	40004c00 	.word	0x40004c00
 800448c:	40005000 	.word	0x40005000

08004490 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <LL_SetSystemCoreClock+0x1c>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	2b84      	cmp	r3, #132	; 0x84
 80044c4:	d005      	beq.n	80044d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	3303      	adds	r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e6:	f3ef 8305 	mrs	r3, IPSR
 80044ea:	607b      	str	r3, [r7, #4]
  return(result);
 80044ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004508:	f001 fdc4 	bl	8006094 <vTaskStartScheduler>
  
  return osOK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}

08004512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004514:	b089      	sub	sp, #36	; 0x24
 8004516:	af04      	add	r7, sp, #16
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <osThreadCreate+0x54>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01c      	beq.n	8004566 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685c      	ldr	r4, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681d      	ldr	r5, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691e      	ldr	r6, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffb6 	bl	80044b0 <makeFreeRtosPriority>
 8004544:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454e:	9202      	str	r2, [sp, #8]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	9100      	str	r1, [sp, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4632      	mov	r2, r6
 8004558:	4629      	mov	r1, r5
 800455a:	4620      	mov	r0, r4
 800455c:	f001 f9ae 	bl	80058bc <xTaskCreateStatic>
 8004560:	4603      	mov	r3, r0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e01c      	b.n	80045a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685c      	ldr	r4, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004572:	b29e      	uxth	r6, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff ff98 	bl	80044b0 <makeFreeRtosPriority>
 8004580:	4602      	mov	r2, r0
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	9200      	str	r2, [sp, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4632      	mov	r2, r6
 800458e:	4629      	mov	r1, r5
 8004590:	4620      	mov	r0, r4
 8004592:	f001 f9f0 	bl	8005976 <xTaskCreate>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d001      	beq.n	80045a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045a0:	68fb      	ldr	r3, [r7, #12]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045aa <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f001 fb16 	bl	8005be4 <vTaskDelete>
  return osOK;
 80045b8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <osDelay+0x16>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	e000      	b.n	80045da <osDelay+0x18>
 80045d8:	2301      	movs	r3, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 fb92 	bl	8005d04 <vTaskDelay>
  
  return osOK;
 80045e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af02      	add	r7, sp, #8
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00f      	beq.n	800461c <osSemaphoreCreate+0x32>
    if (count == 1) {
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10a      	bne.n	8004618 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2203      	movs	r2, #3
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	2001      	movs	r0, #1
 8004610:	f000 fac8 	bl	8004ba4 <xQueueGenericCreateStatic>
 8004614:	4603      	mov	r3, r0
 8004616:	e016      	b.n	8004646 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	e014      	b.n	8004646 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d110      	bne.n	8004644 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004622:	2203      	movs	r2, #3
 8004624:	2100      	movs	r1, #0
 8004626:	2001      	movs	r0, #1
 8004628:	f000 fb34 	bl	8004c94 <xQueueGenericCreate>
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <osSemaphoreCreate+0x56>
 8004634:	2300      	movs	r3, #0
 8004636:	2200      	movs	r2, #0
 8004638:	2100      	movs	r1, #0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fb84 	bl	8004d48 <xQueueGenericSend>
      return sema;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	e000      	b.n	8004646 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004644:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	e03a      	b.n	80046de <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d103      	bne.n	800467c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e009      	b.n	8004690 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <osSemaphoreWait+0x40>
      ticks = 1;
 800468c:	2301      	movs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004690:	f7ff ff26 	bl	80044e0 <inHandlerMode>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d017      	beq.n	80046ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	461a      	mov	r2, r3
 80046a0:	2100      	movs	r1, #0
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 ff62 	bl	800556c <xQueueReceiveFromISR>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80046ae:	23ff      	movs	r3, #255	; 0xff
 80046b0:	e015      	b.n	80046de <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d011      	beq.n	80046dc <osSemaphoreWait+0x8c>
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <osSemaphoreWait+0x98>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	e008      	b.n	80046dc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fe41 	bl	8005354 <xQueueSemaphoreTake>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80046d8:	23ff      	movs	r3, #255	; 0xff
 80046da:	e000      	b.n	80046de <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80046fc:	f7ff fef0 	bl	80044e0 <inHandlerMode>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fcb4 	bl	800507a <xQueueGiveFromISR>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004718:	23ff      	movs	r3, #255	; 0xff
 800471a:	e017      	b.n	800474c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <osSemaphoreRelease+0x5e>
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <osSemaphoreRelease+0x68>)
 8004724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	e00a      	b.n	800474a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004734:	2300      	movs	r3, #0
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb04 	bl	8004d48 <xQueueGenericSend>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004746:	23ff      	movs	r3, #255	; 0xff
 8004748:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b085      	sub	sp, #20
 800475c:	af02      	add	r7, sp, #8
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <osMessageCreate+0x36>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2400      	movs	r4, #0
 8004784:	9400      	str	r4, [sp, #0]
 8004786:	f000 fa0d 	bl	8004ba4 <xQueueGenericCreateStatic>
 800478a:	4603      	mov	r3, r0
 800478c:	e008      	b.n	80047a0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	4619      	mov	r1, r3
 800479a:	f000 fa7b 	bl	8004c94 <xQueueGenericCreate>
 800479e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd90      	pop	{r4, r7, pc}

080047a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <osMessagePut+0x1e>
    ticks = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80047c6:	f7ff fe8b 	bl	80044e0 <inHandlerMode>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80047d0:	f107 0210 	add.w	r2, r7, #16
 80047d4:	f107 0108 	add.w	r1, r7, #8
 80047d8:	2300      	movs	r3, #0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fbb2 	bl	8004f44 <xQueueGenericSendFromISR>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <osMessagePut+0x42>
      return osErrorOS;
 80047e6:	23ff      	movs	r3, #255	; 0xff
 80047e8:	e018      	b.n	800481c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <osMessagePut+0x72>
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <osMessagePut+0x7c>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	e00b      	b.n	800481a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004802:	f107 0108 	add.w	r1, r7, #8
 8004806:	2300      	movs	r3, #0
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fa9c 	bl	8004d48 <xQueueGenericSend>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d001      	beq.n	800481a <osMessagePut+0x72>
      return osErrorOS;
 8004816:	23ff      	movs	r3, #255	; 0xff
 8004818:	e000      	b.n	800481c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b08b      	sub	sp, #44	; 0x2c
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	617b      	str	r3, [r7, #20]
    return event;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	461c      	mov	r4, r3
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004856:	e054      	b.n	8004902 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004858:	2300      	movs	r3, #0
 800485a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d103      	bne.n	8004870 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	e009      	b.n	8004884 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d006      	beq.n	8004884 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <osMessageGet+0x5c>
      ticks = 1;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004884:	f7ff fe2c 	bl	80044e0 <inHandlerMode>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01c      	beq.n	80048c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800488e:	f107 0220 	add.w	r2, r7, #32
 8004892:	f107 0314 	add.w	r3, r7, #20
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	68b8      	ldr	r0, [r7, #8]
 800489c:	f000 fe66 	bl	800556c <xQueueReceiveFromISR>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80048a6:	2310      	movs	r3, #16
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e001      	b.n	80048b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01d      	beq.n	80048f2 <osMessageGet+0xca>
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <osMessageGet+0xe4>)
 80048b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	e014      	b.n	80048f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	3304      	adds	r3, #4
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	4619      	mov	r1, r3
 80048d2:	68b8      	ldr	r0, [r7, #8]
 80048d4:	f000 fc5e 	bl	8005194 <xQueueReceive>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80048de:	2310      	movs	r3, #16
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e006      	b.n	80048f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <osMessageGet+0xc6>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <osMessageGet+0xc8>
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	461c      	mov	r4, r3
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	372c      	adds	r7, #44	; 0x2c
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 fa27 	bl	8005d6c <vTaskSuspend>
  
  return osOK;
 800491e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8004930:	f7ff fdd6 	bl	80044e0 <inHandlerMode>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fb38 	bl	8005fb0 <xTaskResumeFromISR>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10b      	bne.n	800495e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <osThreadResume+0x40>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	e002      	b.n	800495e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 facb 	bl	8005ef4 <vTaskResume>
  }
  return osOK;
 800495e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f103 0208 	add.w	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f103 0208 	add.w	r2, r3, #8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d103      	bne.n	8004a2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e00c      	b.n	8004a48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3308      	adds	r3, #8
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e002      	b.n	8004a3c <vListInsert+0x2e>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d2f6      	bcs.n	8004a36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6852      	ldr	r2, [r2, #4]
 8004aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d103      	bne.n	8004ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	1e5a      	subs	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004afe:	f002 fa19 	bl	8006f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	441a      	add	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	22ff      	movs	r2, #255	; 0xff
 8004b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d114      	bne.n	8004b7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01a      	beq.n	8004b92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3310      	adds	r3, #16
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fcd9 	bl	8006518 <xTaskRemoveFromEventList>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <xQueueGenericReset+0xcc>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	e009      	b.n	8004b92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3310      	adds	r3, #16
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fef2 	bl	800496c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff feed 	bl	800496c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b92:	f002 f9ff 	bl	8006f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b96:	2301      	movs	r3, #1
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08e      	sub	sp, #56	; 0x38
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <xQueueGenericCreateStatic+0x52>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <xQueueGenericCreateStatic+0x56>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <xQueueGenericCreateStatic+0x58>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	623b      	str	r3, [r7, #32]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <xQueueGenericCreateStatic+0x7e>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <xQueueGenericCreateStatic+0x82>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <xQueueGenericCreateStatic+0x84>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	61fb      	str	r3, [r7, #28]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c42:	2348      	movs	r3, #72	; 0x48
 8004c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b48      	cmp	r3, #72	; 0x48
 8004c4a:	d00a      	beq.n	8004c62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	61bb      	str	r3, [r7, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f83f 	bl	8004d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3730      	adds	r7, #48	; 0x30
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	613b      	str	r3, [r7, #16]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3348      	adds	r3, #72	; 0x48
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f002 fa53 	bl	8007178 <pvPortMalloc>
 8004cd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d011      	beq.n	8004cfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3348      	adds	r3, #72	; 0x48
 8004ce2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cec:	79fa      	ldrb	r2, [r7, #7]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f805 	bl	8004d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
	}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d36:	2101      	movs	r1, #1
 8004d38:	69b8      	ldr	r0, [r7, #24]
 8004d3a:	f7ff fecb 	bl	8004ad4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	; 0x38
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d56:	2300      	movs	r3, #0
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <xQueueGenericSend+0x32>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <xQueueGenericSend+0x40>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <xQueueGenericSend+0x44>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <xQueueGenericSend+0x46>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <xQueueGenericSend+0x60>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d103      	bne.n	8004db6 <xQueueGenericSend+0x6e>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <xQueueGenericSend+0x72>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <xQueueGenericSend+0x74>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	623b      	str	r3, [r7, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dd6:	f001 fd5b 	bl	8006890 <xTaskGetSchedulerState>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <xQueueGenericSend+0x9e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <xQueueGenericSend+0xa2>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <xQueueGenericSend+0xa4>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <xQueueGenericSend+0xbe>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	61fb      	str	r3, [r7, #28]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e06:	f002 f895 	bl	8006f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <xQueueGenericSend+0xd4>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d129      	bne.n	8004e70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e22:	f000 fc3b 	bl	800569c <prvCopyDataToQueue>
 8004e26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	3324      	adds	r3, #36	; 0x24
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 fb6f 	bl	8006518 <xTaskRemoveFromEventList>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <xQueueGenericSend+0x1f8>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	e00a      	b.n	8004e68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e58:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <xQueueGenericSend+0x1f8>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e68:	f002 f894 	bl	8006f94 <vPortExitCritical>
				return pdPASS;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e063      	b.n	8004f38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e76:	f002 f88d 	bl	8006f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e05c      	b.n	8004f38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e84:	f107 0314 	add.w	r3, r7, #20
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fba7 	bl	80065dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e92:	f002 f87f 	bl	8006f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e96:	f001 f95d 	bl	8006154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e9a:	f002 f84b 	bl	8006f34 <vPortEnterCritical>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <xQueueGenericSend+0x16c>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x182>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eca:	f002 f863 	bl	8006f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ece:	1d3a      	adds	r2, r7, #4
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fb96 	bl	8006608 <xTaskCheckForTimeOut>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d124      	bne.n	8004f2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee4:	f000 fcd2 	bl	800588c <prvIsQueueFull>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 faea 	bl	80064d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004efe:	f000 fc5d 	bl	80057bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f02:	f001 f935 	bl	8006170 <xTaskResumeAll>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f af7c 	bne.w	8004e06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <xQueueGenericSend+0x1f8>)
 8004f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	e772      	b.n	8004e06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f22:	f000 fc4b 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f26:	f001 f923 	bl	8006170 <xTaskResumeAll>
 8004f2a:	e76c      	b.n	8004e06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f2e:	f000 fc45 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f32:	f001 f91d 	bl	8006170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3738      	adds	r7, #56	; 0x38
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b090      	sub	sp, #64	; 0x40
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <xQueueGenericSendFromISR+0x3c>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <xQueueGenericSendFromISR+0x40>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <xQueueGenericSendFromISR+0x42>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSendFromISR+0x6a>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <xQueueGenericSendFromISR+0x6e>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericSendFromISR+0x70>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	623b      	str	r3, [r7, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fce:	f002 f893 	bl	80070f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	61fa      	str	r2, [r7, #28]
 8004fe8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <xQueueGenericSendFromISR+0xbc>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d12f      	bne.n	8005060 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005016:	f000 fb41 	bl	800569c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800501a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d112      	bne.n	800504a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d016      	beq.n	800505a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fa71 	bl	8006518 <xTaskRemoveFromEventList>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800504a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800504e:	3301      	adds	r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	b25a      	sxtb	r2, r3
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800505a:	2301      	movs	r3, #1
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800505e:	e001      	b.n	8005064 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005060:	2300      	movs	r3, #0
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800506e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005072:	4618      	mov	r0, r3
 8005074:	3740      	adds	r7, #64	; 0x40
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b08e      	sub	sp, #56	; 0x38
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	623b      	str	r3, [r7, #32]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fb      	str	r3, [r7, #28]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <xQueueGiveFromISR+0x58>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <xQueueGiveFromISR+0x5c>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGiveFromISR+0x5e>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61bb      	str	r3, [r7, #24]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f2:	f002 f801 	bl	80070f8 <vPortValidateInterruptPriority>
	__asm volatile
 80050f6:	f3ef 8211 	mrs	r2, BASEPRI
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800510e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511e:	429a      	cmp	r2, r3
 8005120:	d22b      	bcs.n	800517a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d112      	bne.n	8005164 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	3324      	adds	r3, #36	; 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f9e4 	bl	8006518 <xTaskRemoveFromEventList>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e007      	b.n	8005174 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005168:	3301      	adds	r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	b25a      	sxtb	r2, r3
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
 8005178:	e001      	b.n	800517e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f383 8811 	msr	BASEPRI, r3
}
 8005188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800518c:	4618      	mov	r0, r3
 800518e:	3738      	adds	r7, #56	; 0x38
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <xQueueReceive+0x30>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	623b      	str	r3, [r7, #32]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <xQueueReceive+0x3e>
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <xQueueReceive+0x42>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueReceive+0x44>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueReceive+0x5e>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	61fb      	str	r3, [r7, #28]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f2:	f001 fb4d 	bl	8006890 <xTaskGetSchedulerState>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <xQueueReceive+0x6e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <xQueueReceive+0x72>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueReceive+0x74>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueReceive+0x8e>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61bb      	str	r3, [r7, #24]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005222:	f001 fe87 	bl	8006f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01f      	beq.n	8005272 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005236:	f000 fa9b 	bl	8005770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	3310      	adds	r3, #16
 800524e:	4618      	mov	r0, r3
 8005250:	f001 f962 	bl	8006518 <xTaskRemoveFromEventList>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525a:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <xQueueReceive+0x1bc>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526a:	f001 fe93 	bl	8006f94 <vPortExitCritical>
				return pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	e069      	b.n	8005346 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005278:	f001 fe8c 	bl	8006f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800527c:	2300      	movs	r3, #0
 800527e:	e062      	b.n	8005346 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005286:	f107 0310 	add.w	r3, r7, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f001 f9a6 	bl	80065dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005294:	f001 fe7e 	bl	8006f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005298:	f000 ff5c 	bl	8006154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800529c:	f001 fe4a 	bl	8006f34 <vPortEnterCritical>
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d103      	bne.n	80052b6 <xQueueReceive+0x122>
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d103      	bne.n	80052cc <xQueueReceive+0x138>
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052cc:	f001 fe62 	bl	8006f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d0:	1d3a      	adds	r2, r7, #4
 80052d2:	f107 0310 	add.w	r3, r7, #16
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 f995 	bl	8006608 <xTaskCheckForTimeOut>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d123      	bne.n	800532c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e6:	f000 fabb 	bl	8005860 <prvIsQueueEmpty>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f8e9 	bl	80064d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005300:	f000 fa5c 	bl	80057bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005304:	f000 ff34 	bl	8006170 <xTaskResumeAll>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d189      	bne.n	8005222 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800530e:	4b10      	ldr	r3, [pc, #64]	; (8005350 <xQueueReceive+0x1bc>)
 8005310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	e780      	b.n	8005222 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005322:	f000 fa4b 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005326:	f000 ff23 	bl	8006170 <xTaskResumeAll>
 800532a:	e77a      	b.n	8005222 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800532c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532e:	f000 fa45 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005332:	f000 ff1d 	bl	8006170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005338:	f000 fa92 	bl	8005860 <prvIsQueueEmpty>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	f43f af6f 	beq.w	8005222 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005344:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005346:	4618      	mov	r0, r3
 8005348:	3730      	adds	r7, #48	; 0x30
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fb      	str	r3, [r7, #28]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a4:	f001 fa74 	bl	8006890 <xTaskGetSchedulerState>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <xQueueSemaphoreTake+0x60>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <xQueueSemaphoreTake+0x64>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <xQueueSemaphoreTake+0x66>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61bb      	str	r3, [r7, #24]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d4:	f001 fdae 	bl	8006f34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d024      	beq.n	800542e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80053f4:	f001 fbf4 	bl	8006be0 <pvTaskIncrementMutexHeldCount>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00f      	beq.n	8005426 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	3310      	adds	r3, #16
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f884 	bl	8006518 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005416:	4b54      	ldr	r3, [pc, #336]	; (8005568 <xQueueSemaphoreTake+0x214>)
 8005418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005426:	f001 fdb5 	bl	8006f94 <vPortExitCritical>
				return pdPASS;
 800542a:	2301      	movs	r3, #1
 800542c:	e097      	b.n	800555e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d111      	bne.n	8005458 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	617b      	str	r3, [r7, #20]
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005450:	f001 fda0 	bl	8006f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005454:	2300      	movs	r3, #0
 8005456:	e082      	b.n	800555e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800545e:	f107 030c 	add.w	r3, r7, #12
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f8ba 	bl	80065dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800546c:	f001 fd92 	bl	8006f94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005470:	f000 fe70 	bl	8006154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005474:	f001 fd5e 	bl	8006f34 <vPortEnterCritical>
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800547e:	b25b      	sxtb	r3, r3
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d103      	bne.n	800548e <xQueueSemaphoreTake+0x13a>
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005494:	b25b      	sxtb	r3, r3
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d103      	bne.n	80054a4 <xQueueSemaphoreTake+0x150>
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a4:	f001 fd76 	bl	8006f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054a8:	463a      	mov	r2, r7
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f8a9 	bl	8006608 <xTaskCheckForTimeOut>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d132      	bne.n	8005522 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054be:	f000 f9cf 	bl	8005860 <prvIsQueueEmpty>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d026      	beq.n	8005516 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80054d0:	f001 fd30 	bl	8006f34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 f9f7 	bl	80068cc <xTaskPriorityInherit>
 80054de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80054e0:	f001 fd58 	bl	8006f94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	3324      	adds	r3, #36	; 0x24
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 ffef 	bl	80064d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054f4:	f000 f962 	bl	80057bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054f8:	f000 fe3a 	bl	8006170 <xTaskResumeAll>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f af68 	bne.w	80053d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005504:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xQueueSemaphoreTake+0x214>)
 8005506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	e75e      	b.n	80053d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005518:	f000 f950 	bl	80057bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551c:	f000 fe28 	bl	8006170 <xTaskResumeAll>
 8005520:	e758      	b.n	80053d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005524:	f000 f94a 	bl	80057bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005528:	f000 fe22 	bl	8006170 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800552c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800552e:	f000 f997 	bl	8005860 <prvIsQueueEmpty>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f43f af4d 	beq.w	80053d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005540:	f001 fcf8 	bl	8006f34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005546:	f000 f891 	bl	800566c <prvGetDisinheritPriorityAfterTimeout>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fab6 	bl	8006ac4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005558:	f001 fd1c 	bl	8006f94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800555c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800555e:	4618      	mov	r0, r3
 8005560:	3738      	adds	r7, #56	; 0x38
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	623b      	str	r3, [r7, #32]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <xQueueReceiveFromISR+0x3a>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <xQueueReceiveFromISR+0x3e>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueReceiveFromISR+0x40>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61fb      	str	r3, [r7, #28]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c6:	f001 fd97 	bl	80070f8 <vPortValidateInterruptPriority>
	__asm volatile
 80055ca:	f3ef 8211 	mrs	r2, BASEPRI
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	61ba      	str	r2, [r7, #24]
 80055e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02f      	beq.n	8005652 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005600:	f000 f8b6 	bl	8005770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	1e5a      	subs	r2, r3, #1
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800560c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d112      	bne.n	800563c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	3310      	adds	r3, #16
 8005622:	4618      	mov	r0, r3
 8005624:	f000 ff78 	bl	8006518 <xTaskRemoveFromEventList>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800563c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005640:	3301      	adds	r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	b25a      	sxtb	r2, r3
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	e001      	b.n	8005656 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005652:	2300      	movs	r3, #0
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	613b      	str	r3, [r7, #16]
	__asm volatile
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f383 8811 	msr	BASEPRI, r3
}
 8005660:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005664:	4618      	mov	r0, r3
 8005666:	3738      	adds	r7, #56	; 0x38
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1c3 0307 	rsb	r3, r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e001      	b.n	800568e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800568e:	68fb      	ldr	r3, [r7, #12]
	}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d14d      	bne.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 f976 	bl	80069b8 <xTaskPriorityDisinherit>
 80056cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	e043      	b.n	800575e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d119      	bne.n	8005710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6858      	ldr	r0, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	461a      	mov	r2, r3
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	f004 fa18 	bl	8009b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d32b      	bcc.n	800575e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	e026      	b.n	800575e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68d8      	ldr	r0, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	461a      	mov	r2, r3
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	f004 f9fe 	bl	8009b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	425b      	negs	r3, r3
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d207      	bcs.n	800574c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	425b      	negs	r3, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d105      	bne.n	800575e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3b01      	subs	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005766:	697b      	ldr	r3, [r7, #20]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	d303      	bcc.n	80057a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68d9      	ldr	r1, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	6838      	ldr	r0, [r7, #0]
 80057b0:	f004 f9b4 	bl	8009b1c <memcpy>
	}
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057c4:	f001 fbb6 	bl	8006f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d0:	e011      	b.n	80057f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3324      	adds	r3, #36	; 0x24
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fe9a 	bl	8006518 <xTaskRemoveFromEventList>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057ea:	f000 ff6f 	bl	80066cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dce9      	bgt.n	80057d2 <prvUnlockQueue+0x16>
 80057fe:	e000      	b.n	8005802 <prvUnlockQueue+0x46>
					break;
 8005800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800580a:	f001 fbc3 	bl	8006f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800580e:	f001 fb91 	bl	8006f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800581a:	e011      	b.n	8005840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fe75 	bl	8006518 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005834:	f000 ff4a 	bl	80066cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	3b01      	subs	r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dce9      	bgt.n	800581c <prvUnlockQueue+0x60>
 8005848:	e000      	b.n	800584c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800584a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005854:	f001 fb9e 	bl	8006f94 <vPortExitCritical>
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005868:	f001 fb64 	bl	8006f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e001      	b.n	800587e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800587e:	f001 fb89 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005894:	f001 fb4e 	bl	8006f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d102      	bne.n	80058aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e001      	b.n	80058ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ae:	f001 fb71 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	; 0x38
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xTaskCreateStatic+0x46>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	61fb      	str	r3, [r7, #28]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005902:	2354      	movs	r3, #84	; 0x54
 8005904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b54      	cmp	r3, #84	; 0x54
 800590a:	d00a      	beq.n	8005922 <xTaskCreateStatic+0x66>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	61bb      	str	r3, [r7, #24]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005922:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01e      	beq.n	8005968 <xTaskCreateStatic+0xac>
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005938:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005942:	2300      	movs	r3, #0
 8005944:	9303      	str	r3, [sp, #12]
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	9302      	str	r3, [sp, #8]
 800594a:	f107 0314 	add.w	r3, r7, #20
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f850 	bl	8005a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005962:	f000 f8d5 	bl	8005b10 <prvAddNewTaskToReadyList>
 8005966:	e001      	b.n	800596c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800596c:	697b      	ldr	r3, [r7, #20]
	}
 800596e:	4618      	mov	r0, r3
 8005970:	3728      	adds	r7, #40	; 0x28
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005976:	b580      	push	{r7, lr}
 8005978:	b08c      	sub	sp, #48	; 0x30
 800597a:	af04      	add	r7, sp, #16
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fbf4 	bl	8007178 <pvPortMalloc>
 8005990:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00e      	beq.n	80059b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005998:	2054      	movs	r0, #84	; 0x54
 800599a:	f001 fbed 	bl	8007178 <pvPortMalloc>
 800599e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
 80059ac:	e005      	b.n	80059ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f001 fcae 	bl	8007310 <vPortFree>
 80059b4:	e001      	b.n	80059ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9303      	str	r3, [sp, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	9302      	str	r3, [sp, #8]
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f80e 	bl	8005a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059e4:	69f8      	ldr	r0, [r7, #28]
 80059e6:	f000 f893 	bl	8005b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059ea:	2301      	movs	r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	e002      	b.n	80059f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
 80059f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059f6:	69bb      	ldr	r3, [r7, #24]
	}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f023 0307 	bic.w	r3, r3, #7
 8005a26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	617b      	str	r3, [r7, #20]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01f      	beq.n	8005a8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e012      	b.n	8005a7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	3334      	adds	r3, #52	; 0x34
 8005a64:	460a      	mov	r2, r1
 8005a66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d006      	beq.n	8005a82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b0f      	cmp	r3, #15
 8005a7e:	d9e9      	bls.n	8005a54 <prvInitialiseNewTask+0x54>
 8005a80:	e000      	b.n	8005a84 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a8c:	e003      	b.n	8005a96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	2b06      	cmp	r3, #6
 8005a9a:	d901      	bls.n	8005aa0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a9c:	2306      	movs	r3, #6
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	2200      	movs	r2, #0
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe ff78 	bl	80049ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	3318      	adds	r3, #24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe ff73 	bl	80049ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	f1c3 0207 	rsb	r2, r3, #7
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2200      	movs	r2, #0
 8005ae0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68f9      	ldr	r1, [r7, #12]
 8005aee:	69b8      	ldr	r0, [r7, #24]
 8005af0:	f001 f8f0 	bl	8006cd4 <pxPortInitialiseStack>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b06:	bf00      	nop
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b18:	f001 fa0c 	bl	8006f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <prvAddNewTaskToReadyList+0xb8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <prvAddNewTaskToReadyList+0xb8>)
 8005b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b26:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <prvAddNewTaskToReadyList+0xbc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b2e:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <prvAddNewTaskToReadyList+0xbc>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <prvAddNewTaskToReadyList+0xb8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d110      	bne.n	8005b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b3c:	f000 fdea 	bl	8006714 <prvInitialiseTaskLists>
 8005b40:	e00d      	b.n	8005b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b42:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <prvAddNewTaskToReadyList+0xc0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b4a:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <prvAddNewTaskToReadyList+0xbc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d802      	bhi.n	8005b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <prvAddNewTaskToReadyList+0xbc>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b5e:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <prvAddNewTaskToReadyList+0xc4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <prvAddNewTaskToReadyList+0xc4>)
 8005b66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <prvAddNewTaskToReadyList+0xc8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <prvAddNewTaskToReadyList+0xc8>)
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <prvAddNewTaskToReadyList+0xcc>)
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7fe ff18 	bl	80049c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b96:	f001 f9fd 	bl	8006f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <prvAddNewTaskToReadyList+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00e      	beq.n	8005bc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvAddNewTaskToReadyList+0xbc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d207      	bcs.n	8005bc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <prvAddNewTaskToReadyList+0xd0>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	200004fc 	.word	0x200004fc
 8005bcc:	200003fc 	.word	0x200003fc
 8005bd0:	20000508 	.word	0x20000508
 8005bd4:	20000518 	.word	0x20000518
 8005bd8:	20000504 	.word	0x20000504
 8005bdc:	20000400 	.word	0x20000400
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005bec:	f001 f9a2 	bl	8006f34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <vTaskDelete+0x18>
 8005bf6:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <vTaskDelete+0xf8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	e000      	b.n	8005bfe <vTaskDelete+0x1a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe ff3b 	bl	8004a80 <uxListRemove>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d115      	bne.n	8005c3c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4932      	ldr	r1, [pc, #200]	; (8005ce0 <vTaskDelete+0xfc>)
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <vTaskDelete+0x58>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43da      	mvns	r2, r3
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <vTaskDelete+0x100>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4013      	ands	r3, r2
 8005c38:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <vTaskDelete+0x100>)
 8005c3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3318      	adds	r3, #24
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe ff19 	bl	8004a80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <vTaskDelete+0x104>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <vTaskDelete+0x104>)
 8005c56:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005c58:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <vTaskDelete+0xf8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d10b      	bne.n	8005c7a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4820      	ldr	r0, [pc, #128]	; (8005cec <vTaskDelete+0x108>)
 8005c6a:	f7fe feac 	bl	80049c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005c6e:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <vTaskDelete+0x10c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <vTaskDelete+0x10c>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e009      	b.n	8005c8e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <vTaskDelete+0x110>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <vTaskDelete+0x110>)
 8005c82:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fdb3 	bl	80067f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005c8a:	f000 fde1 	bl	8006850 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005c8e:	f001 f981 	bl	8006f94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <vTaskDelete+0x114>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01b      	beq.n	8005cd2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <vTaskDelete+0xf8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d116      	bne.n	8005cd2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005ca4:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <vTaskDelete+0x118>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <vTaskDelete+0xde>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	60bb      	str	r3, [r7, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <vTaskDelete+0x11c>)
 8005cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200003fc 	.word	0x200003fc
 8005ce0:	20000400 	.word	0x20000400
 8005ce4:	20000504 	.word	0x20000504
 8005ce8:	20000518 	.word	0x20000518
 8005cec:	200004d0 	.word	0x200004d0
 8005cf0:	200004e4 	.word	0x200004e4
 8005cf4:	200004fc 	.word	0x200004fc
 8005cf8:	20000508 	.word	0x20000508
 8005cfc:	20000524 	.word	0x20000524
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d017      	beq.n	8005d46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d16:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <vTaskDelay+0x60>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <vTaskDelay+0x30>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60bb      	str	r3, [r7, #8]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d34:	f000 fa0e 	bl	8006154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d38:	2100      	movs	r1, #0
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 ff64 	bl	8006c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d40:	f000 fa16 	bl	8006170 <xTaskResumeAll>
 8005d44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d107      	bne.n	8005d5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <vTaskDelay+0x64>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000524 	.word	0x20000524
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005d74:	f001 f8de 	bl	8006f34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <vTaskSuspend+0x18>
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	; (8005e70 <vTaskSuspend+0x104>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	e000      	b.n	8005d86 <vTaskSuspend+0x1a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fe77 	bl	8004a80 <uxListRemove>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4935      	ldr	r1, [pc, #212]	; (8005e74 <vTaskSuspend+0x108>)
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <vTaskSuspend+0x58>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	2201      	movs	r2, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43da      	mvns	r2, r3
 8005dba:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <vTaskSuspend+0x10c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <vTaskSuspend+0x10c>)
 8005dc2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fe55 	bl	8004a80 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4827      	ldr	r0, [pc, #156]	; (8005e7c <vTaskSuspend+0x110>)
 8005dde:	f7fe fdf2 	bl	80049c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d103      	bne.n	8005df6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005df6:	f001 f8cd 	bl	8006f94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005dfa:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <vTaskSuspend+0x114>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005e02:	f001 f897 	bl	8006f34 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005e06:	f000 fd23 	bl	8006850 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005e0a:	f001 f8c3 	bl	8006f94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <vTaskSuspend+0x104>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d127      	bne.n	8005e68 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005e18:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <vTaskSuspend+0x114>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <vTaskSuspend+0x118>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <vTaskSuspend+0xd2>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60bb      	str	r3, [r7, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <vTaskSuspend+0x11c>)
 8005e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e4e:	e00b      	b.n	8005e68 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <vTaskSuspend+0x110>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <vTaskSuspend+0x120>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d103      	bne.n	8005e64 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <vTaskSuspend+0x104>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
	}
 8005e62:	e001      	b.n	8005e68 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005e64:	f000 fad8 	bl	8006418 <vTaskSwitchContext>
	}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200003fc 	.word	0x200003fc
 8005e74:	20000400 	.word	0x20000400
 8005e78:	20000504 	.word	0x20000504
 8005e7c:	200004e8 	.word	0x200004e8
 8005e80:	20000508 	.word	0x20000508
 8005e84:	20000524 	.word	0x20000524
 8005e88:	e000ed04 	.word	0xe000ed04
 8005e8c:	200004fc 	.word	0x200004fc

08005e90 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <prvTaskIsTaskSuspended+0x5c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10a      	bne.n	8005edc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <prvTaskIsTaskSuspended+0x60>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d005      	beq.n	8005edc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005edc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005ede:	4618      	mov	r0, r3
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	200004e8 	.word	0x200004e8
 8005ef0:	200004bc 	.word	0x200004bc

08005ef4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <vTaskResume+0x28>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005f1c:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <vTaskResume+0xac>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d037      	beq.n	8005f96 <vTaskResume+0xa2>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d034      	beq.n	8005f96 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005f2c:	f001 f802 	bl	8006f34 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff ffad 	bl	8005e90 <prvTaskIsTaskSuspended>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02a      	beq.n	8005f92 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fd9d 	bl	8004a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <vTaskResume+0xb0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <vTaskResume+0xb0>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <vTaskResume+0xb4>)
 8005f66:	441a      	add	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7fe fd29 	bl	80049c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <vTaskResume+0xac>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d307      	bcc.n	8005f92 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <vTaskResume+0xb8>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005f92:	f000 ffff 	bl	8006f94 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	200003fc 	.word	0x200003fc
 8005fa4:	20000504 	.word	0x20000504
 8005fa8:	20000400 	.word	0x20000400
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <xTaskResumeFromISR+0x2c>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61bb      	str	r3, [r7, #24]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fdc:	f001 f88c 	bl	80070f8 <vPortValidateInterruptPriority>
	__asm volatile
 8005fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	617a      	str	r2, [r7, #20]
 8005ff6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ff8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ffa:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005ffc:	6a38      	ldr	r0, [r7, #32]
 8005ffe:	f7ff ff47 	bl	8005e90 <prvTaskIsTaskSuspended>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d02f      	beq.n	8006068 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <xTaskResumeFromISR+0xd0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d125      	bne.n	800605c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4b1b      	ldr	r3, [pc, #108]	; (8006084 <xTaskResumeFromISR+0xd4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	429a      	cmp	r2, r3
 800601c:	d301      	bcc.n	8006022 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	3304      	adds	r3, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fd2a 	bl	8004a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <xTaskResumeFromISR+0xd8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4313      	orrs	r3, r2
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <xTaskResumeFromISR+0xd8>)
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <xTaskResumeFromISR+0xdc>)
 800604c:	441a      	add	r2, r3
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fe fcb6 	bl	80049c6 <vListInsertEnd>
 800605a:	e005      	b.n	8006068 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	3318      	adds	r3, #24
 8006060:	4619      	mov	r1, r3
 8006062:	480b      	ldr	r0, [pc, #44]	; (8006090 <xTaskResumeFromISR+0xe0>)
 8006064:	f7fe fcaf 	bl	80049c6 <vListInsertEnd>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f383 8811 	msr	BASEPRI, r3
}
 8006072:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000524 	.word	0x20000524
 8006084:	200003fc 	.word	0x200003fc
 8006088:	20000504 	.word	0x20000504
 800608c:	20000400 	.word	0x20000400
 8006090:	200004bc 	.word	0x200004bc

08006094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060a2:	463a      	mov	r2, r7
 80060a4:	1d39      	adds	r1, r7, #4
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fa fa64 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	9202      	str	r2, [sp, #8]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	460a      	mov	r2, r1
 80060c2:	491e      	ldr	r1, [pc, #120]	; (800613c <vTaskStartScheduler+0xa8>)
 80060c4:	481e      	ldr	r0, [pc, #120]	; (8006140 <vTaskStartScheduler+0xac>)
 80060c6:	f7ff fbf9 	bl	80058bc <xTaskCreateStatic>
 80060ca:	4603      	mov	r3, r0
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <vTaskStartScheduler+0xb0>)
 80060ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060d0:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <vTaskStartScheduler+0xb0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e001      	b.n	80060e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d116      	bne.n	8006116 <vTaskStartScheduler+0x82>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	613b      	str	r3, [r7, #16]
}
 80060fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <vTaskStartScheduler+0xb4>)
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <vTaskStartScheduler+0xb8>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800610a:	4b11      	ldr	r3, [pc, #68]	; (8006150 <vTaskStartScheduler+0xbc>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006110:	f000 fe6e 	bl	8006df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006114:	e00e      	b.n	8006134 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d10a      	bne.n	8006134 <vTaskStartScheduler+0xa0>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60fb      	str	r3, [r7, #12]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <vTaskStartScheduler+0x9e>
}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	0800afa4 	.word	0x0800afa4
 8006140:	080066e5 	.word	0x080066e5
 8006144:	20000520 	.word	0x20000520
 8006148:	2000051c 	.word	0x2000051c
 800614c:	20000508 	.word	0x20000508
 8006150:	20000500 	.word	0x20000500

08006154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <vTaskSuspendAll+0x18>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	4a03      	ldr	r2, [pc, #12]	; (800616c <vTaskSuspendAll+0x18>)
 8006160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	20000524 	.word	0x20000524

08006170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <xTaskResumeAll+0x114>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <xTaskResumeAll+0x2c>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	603b      	str	r3, [r7, #0]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800619c:	f000 feca 	bl	8006f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a0:	4b38      	ldr	r3, [pc, #224]	; (8006284 <xTaskResumeAll+0x114>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	4a37      	ldr	r2, [pc, #220]	; (8006284 <xTaskResumeAll+0x114>)
 80061a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061aa:	4b36      	ldr	r3, [pc, #216]	; (8006284 <xTaskResumeAll+0x114>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d161      	bne.n	8006276 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b2:	4b35      	ldr	r3, [pc, #212]	; (8006288 <xTaskResumeAll+0x118>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d05d      	beq.n	8006276 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ba:	e02e      	b.n	800621a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061bc:	4b33      	ldr	r3, [pc, #204]	; (800628c <xTaskResumeAll+0x11c>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3318      	adds	r3, #24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fc59 	bl	8004a80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fc54 	bl	8004a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	2201      	movs	r2, #1
 80061de:	409a      	lsls	r2, r3
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <xTaskResumeAll+0x120>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <xTaskResumeAll+0x120>)
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4a27      	ldr	r2, [pc, #156]	; (8006294 <xTaskResumeAll+0x124>)
 80061f8:	441a      	add	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe fbe0 	bl	80049c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <xTaskResumeAll+0x128>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006214:	4b21      	ldr	r3, [pc, #132]	; (800629c <xTaskResumeAll+0x12c>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800621a:	4b1c      	ldr	r3, [pc, #112]	; (800628c <xTaskResumeAll+0x11c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1cc      	bne.n	80061bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006228:	f000 fb12 	bl	8006850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800622c:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <xTaskResumeAll+0x130>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d010      	beq.n	800625a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006238:	f000 f836 	bl	80062a8 <xTaskIncrementTick>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <xTaskResumeAll+0x12c>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3b01      	subs	r3, #1
 800624c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f1      	bne.n	8006238 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <xTaskResumeAll+0x130>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <xTaskResumeAll+0x12c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006262:	2301      	movs	r3, #1
 8006264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <xTaskResumeAll+0x134>)
 8006268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f000 fe8d 	bl	8006f94 <vPortExitCritical>

	return xAlreadyYielded;
 800627a:	68bb      	ldr	r3, [r7, #8]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000524 	.word	0x20000524
 8006288:	200004fc 	.word	0x200004fc
 800628c:	200004bc 	.word	0x200004bc
 8006290:	20000504 	.word	0x20000504
 8006294:	20000400 	.word	0x20000400
 8006298:	200003fc 	.word	0x200003fc
 800629c:	20000510 	.word	0x20000510
 80062a0:	2000050c 	.word	0x2000050c
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b2:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <xTaskIncrementTick+0x144>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 808e 	bne.w	80063d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062bc:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <xTaskIncrementTick+0x148>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062c4:	4a4a      	ldr	r2, [pc, #296]	; (80063f0 <xTaskIncrementTick+0x148>)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d120      	bne.n	8006312 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062d0:	4b48      	ldr	r3, [pc, #288]	; (80063f4 <xTaskIncrementTick+0x14c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	603b      	str	r3, [r7, #0]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <xTaskIncrementTick+0x46>
 80062f0:	4b40      	ldr	r3, [pc, #256]	; (80063f4 <xTaskIncrementTick+0x14c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	4b40      	ldr	r3, [pc, #256]	; (80063f8 <xTaskIncrementTick+0x150>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3e      	ldr	r2, [pc, #248]	; (80063f4 <xTaskIncrementTick+0x14c>)
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4a3e      	ldr	r2, [pc, #248]	; (80063f8 <xTaskIncrementTick+0x150>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <xTaskIncrementTick+0x154>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	4a3c      	ldr	r2, [pc, #240]	; (80063fc <xTaskIncrementTick+0x154>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	f000 fa9f 	bl	8006850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006312:	4b3b      	ldr	r3, [pc, #236]	; (8006400 <xTaskIncrementTick+0x158>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	d348      	bcc.n	80063ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631c:	4b35      	ldr	r3, [pc, #212]	; (80063f4 <xTaskIncrementTick+0x14c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	4b36      	ldr	r3, [pc, #216]	; (8006400 <xTaskIncrementTick+0x158>)
 8006328:	f04f 32ff 	mov.w	r2, #4294967295
 800632c:	601a      	str	r2, [r3, #0]
					break;
 800632e:	e03e      	b.n	80063ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <xTaskIncrementTick+0x14c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d203      	bcs.n	8006350 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006348:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <xTaskIncrementTick+0x158>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800634e:	e02e      	b.n	80063ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fb93 	bl	8004a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3318      	adds	r3, #24
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fb8a 	bl	8004a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	2201      	movs	r2, #1
 8006372:	409a      	lsls	r2, r3
 8006374:	4b23      	ldr	r3, [pc, #140]	; (8006404 <xTaskIncrementTick+0x15c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4313      	orrs	r3, r2
 800637a:	4a22      	ldr	r2, [pc, #136]	; (8006404 <xTaskIncrementTick+0x15c>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <xTaskIncrementTick+0x160>)
 800638c:	441a      	add	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7fe fb16 	bl	80049c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4b1b      	ldr	r3, [pc, #108]	; (800640c <xTaskIncrementTick+0x164>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3b9      	bcc.n	800631c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ac:	e7b6      	b.n	800631c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ae:	4b17      	ldr	r3, [pc, #92]	; (800640c <xTaskIncrementTick+0x164>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4914      	ldr	r1, [pc, #80]	; (8006408 <xTaskIncrementTick+0x160>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d901      	bls.n	80063ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <xTaskIncrementTick+0x168>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e004      	b.n	80063e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063d8:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <xTaskIncrementTick+0x16c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a0d      	ldr	r2, [pc, #52]	; (8006414 <xTaskIncrementTick+0x16c>)
 80063e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000524 	.word	0x20000524
 80063f0:	20000500 	.word	0x20000500
 80063f4:	200004b4 	.word	0x200004b4
 80063f8:	200004b8 	.word	0x200004b8
 80063fc:	20000514 	.word	0x20000514
 8006400:	2000051c 	.word	0x2000051c
 8006404:	20000504 	.word	0x20000504
 8006408:	20000400 	.word	0x20000400
 800640c:	200003fc 	.word	0x200003fc
 8006410:	20000510 	.word	0x20000510
 8006414:	2000050c 	.word	0x2000050c

08006418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <vTaskSwitchContext+0xa4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <vTaskSwitchContext+0xa8>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800642c:	e03f      	b.n	80064ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <vTaskSwitchContext+0xa8>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <vTaskSwitchContext+0xac>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	fab3 f383 	clz	r3, r3
 8006440:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	f1c3 031f 	rsb	r3, r3, #31
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	491f      	ldr	r1, [pc, #124]	; (80064c8 <vTaskSwitchContext+0xb0>)
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <vTaskSwitchContext+0x5c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <vTaskSwitchContext+0x5a>
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <vTaskSwitchContext+0xb0>)
 8006480:	4413      	add	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	3308      	adds	r3, #8
 8006496:	429a      	cmp	r2, r3
 8006498:	d104      	bne.n	80064a4 <vTaskSwitchContext+0x8c>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4a08      	ldr	r2, [pc, #32]	; (80064cc <vTaskSwitchContext+0xb4>)
 80064ac:	6013      	str	r3, [r2, #0]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20000524 	.word	0x20000524
 80064c0:	20000510 	.word	0x20000510
 80064c4:	20000504 	.word	0x20000504
 80064c8:	20000400 	.word	0x20000400
 80064cc:	200003fc 	.word	0x200003fc

080064d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f6:	4b07      	ldr	r3, [pc, #28]	; (8006514 <vTaskPlaceOnEventList+0x44>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3318      	adds	r3, #24
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe fa85 	bl	8004a0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006504:	2101      	movs	r1, #1
 8006506:	6838      	ldr	r0, [r7, #0]
 8006508:	f000 fb7e 	bl	8006c08 <prvAddCurrentTaskToDelayedList>
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200003fc 	.word	0x200003fc

08006518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60fb      	str	r3, [r7, #12]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	3318      	adds	r3, #24
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fa99 	bl	8004a80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654e:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <xTaskRemoveFromEventList+0xac>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11c      	bne.n	8006590 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3304      	adds	r3, #4
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fa90 	bl	8004a80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	2201      	movs	r2, #1
 8006566:	409a      	lsls	r2, r3
 8006568:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <xTaskRemoveFromEventList+0xb0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <xTaskRemoveFromEventList+0xb0>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4a13      	ldr	r2, [pc, #76]	; (80065cc <xTaskRemoveFromEventList+0xb4>)
 8006580:	441a      	add	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3304      	adds	r3, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7fe fa1c 	bl	80049c6 <vListInsertEnd>
 800658e:	e005      	b.n	800659c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3318      	adds	r3, #24
 8006594:	4619      	mov	r1, r3
 8006596:	480e      	ldr	r0, [pc, #56]	; (80065d0 <xTaskRemoveFromEventList+0xb8>)
 8006598:	f7fe fa15 	bl	80049c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <xTaskRemoveFromEventList+0xbc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d905      	bls.n	80065b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <xTaskRemoveFromEventList+0xc0>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e001      	b.n	80065ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065ba:	697b      	ldr	r3, [r7, #20]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000524 	.word	0x20000524
 80065c8:	20000504 	.word	0x20000504
 80065cc:	20000400 	.word	0x20000400
 80065d0:	200004bc 	.word	0x200004bc
 80065d4:	200003fc 	.word	0x200003fc
 80065d8:	20000510 	.word	0x20000510

080065dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <vTaskInternalSetTimeOutState+0x24>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <vTaskInternalSetTimeOutState+0x28>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	605a      	str	r2, [r3, #4]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000514 	.word	0x20000514
 8006604:	20000500 	.word	0x20000500

08006608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	613b      	str	r3, [r7, #16]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800664a:	f000 fc73 	bl	8006f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <xTaskCheckForTimeOut+0xbc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d102      	bne.n	800666e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e023      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <xTaskCheckForTimeOut+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d007      	beq.n	800668a <xTaskCheckForTimeOut+0x82>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e015      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d20b      	bcs.n	80066ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff9b 	bl	80065dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	e004      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066b6:	f000 fc6d 	bl	8006f94 <vPortExitCritical>

	return xReturn;
 80066ba:	69fb      	ldr	r3, [r7, #28]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000500 	.word	0x20000500
 80066c8:	20000514 	.word	0x20000514

080066cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <vTaskMissedYield+0x14>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000510 	.word	0x20000510

080066e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066ec:	f000 f852 	bl	8006794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <prvIdleTask+0x28>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d9f9      	bls.n	80066ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <prvIdleTask+0x2c>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006708:	e7f0      	b.n	80066ec <prvIdleTask+0x8>
 800670a:	bf00      	nop
 800670c:	20000400 	.word	0x20000400
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	e00c      	b.n	800673a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <prvInitialiseTaskLists+0x60>)
 800672c:	4413      	add	r3, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe f91c 	bl	800496c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b06      	cmp	r3, #6
 800673e:	d9ef      	bls.n	8006720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006740:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006742:	f7fe f913 	bl	800496c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006746:	480d      	ldr	r0, [pc, #52]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006748:	f7fe f910 	bl	800496c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800674c:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x6c>)
 800674e:	f7fe f90d 	bl	800496c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006752:	480c      	ldr	r0, [pc, #48]	; (8006784 <prvInitialiseTaskLists+0x70>)
 8006754:	f7fe f90a 	bl	800496c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006758:	480b      	ldr	r0, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x74>)
 800675a:	f7fe f907 	bl	800496c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvInitialiseTaskLists+0x78>)
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvInitialiseTaskLists+0x7c>)
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000400 	.word	0x20000400
 8006778:	2000048c 	.word	0x2000048c
 800677c:	200004a0 	.word	0x200004a0
 8006780:	200004bc 	.word	0x200004bc
 8006784:	200004d0 	.word	0x200004d0
 8006788:	200004e8 	.word	0x200004e8
 800678c:	200004b4 	.word	0x200004b4
 8006790:	200004b8 	.word	0x200004b8

08006794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679a:	e019      	b.n	80067d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800679c:	f000 fbca 	bl	8006f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <prvCheckTasksWaitingTermination+0x50>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe f967 	bl	8004a80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067c6:	f000 fbe5 	bl	8006f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f810 	bl	80067f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e1      	bne.n	800679c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200004d0 	.word	0x200004d0
 80067e8:	200004fc 	.word	0x200004fc
 80067ec:	200004e4 	.word	0x200004e4

080067f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fd82 	bl	8007310 <vPortFree>
				vPortFree( pxTCB );
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fd7f 	bl	8007310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006812:	e018      	b.n	8006846 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681a:	2b01      	cmp	r3, #1
 800681c:	d103      	bne.n	8006826 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fd76 	bl	8007310 <vPortFree>
	}
 8006824:	e00f      	b.n	8006846 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682c:	2b02      	cmp	r3, #2
 800682e:	d00a      	beq.n	8006846 <prvDeleteTCB+0x56>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <prvDeleteTCB+0x54>
	}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvResetNextTaskUnblockTime+0x38>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <prvResetNextTaskUnblockTime+0x3c>)
 8006862:	f04f 32ff 	mov.w	r2, #4294967295
 8006866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006868:	e008      	b.n	800687c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <prvResetNextTaskUnblockTime+0x38>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a04      	ldr	r2, [pc, #16]	; (800688c <prvResetNextTaskUnblockTime+0x3c>)
 800687a:	6013      	str	r3, [r2, #0]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	200004b4 	.word	0x200004b4
 800688c:	2000051c 	.word	0x2000051c

08006890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <xTaskGetSchedulerState+0x34>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800689e:	2301      	movs	r3, #1
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	e008      	b.n	80068b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a4:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <xTaskGetSchedulerState+0x38>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068ac:	2302      	movs	r3, #2
 80068ae:	607b      	str	r3, [r7, #4]
 80068b0:	e001      	b.n	80068b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068b6:	687b      	ldr	r3, [r7, #4]
	}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20000508 	.word	0x20000508
 80068c8:	20000524 	.word	0x20000524

080068cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d05e      	beq.n	80069a0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	4b31      	ldr	r3, [pc, #196]	; (80069ac <xTaskPriorityInherit+0xe0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d24e      	bcs.n	800698e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	db06      	blt.n	8006906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f8:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <xTaskPriorityInherit+0xe0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	f1c3 0207 	rsb	r2, r3, #7
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6959      	ldr	r1, [r3, #20]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <xTaskPriorityInherit+0xe4>)
 8006918:	4413      	add	r3, r2
 800691a:	4299      	cmp	r1, r3
 800691c:	d12f      	bne.n	800697e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	3304      	adds	r3, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe f8ac 	bl	8004a80 <uxListRemove>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	2201      	movs	r2, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43da      	mvns	r2, r3
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <xTaskPriorityInherit+0xe8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <xTaskPriorityInherit+0xe8>)
 8006942:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <xTaskPriorityInherit+0xe0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	2201      	movs	r2, #1
 8006954:	409a      	lsls	r2, r3
 8006956:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <xTaskPriorityInherit+0xe8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <xTaskPriorityInherit+0xe8>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <xTaskPriorityInherit+0xe4>)
 800696e:	441a      	add	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe f825 	bl	80049c6 <vListInsertEnd>
 800697c:	e004      	b.n	8006988 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <xTaskPriorityInherit+0xe0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e008      	b.n	80069a0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <xTaskPriorityInherit+0xe0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d201      	bcs.n	80069a0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069a0:	68fb      	ldr	r3, [r7, #12]
	}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200003fc 	.word	0x200003fc
 80069b0:	20000400 	.word	0x20000400
 80069b4:	20000504 	.word	0x20000504

080069b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d06e      	beq.n	8006aac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069ce:	4b3a      	ldr	r3, [pc, #232]	; (8006ab8 <xTaskPriorityDisinherit+0x100>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d00a      	beq.n	80069ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d044      	beq.n	8006aac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d140      	bne.n	8006aac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe f826 	bl	8004a80 <uxListRemove>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d115      	bne.n	8006a66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	491f      	ldr	r1, [pc, #124]	; (8006abc <xTaskPriorityDisinherit+0x104>)
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskPriorityDisinherit+0xae>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	2201      	movs	r2, #1
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43da      	mvns	r2, r3
 8006a5c:	4b18      	ldr	r3, [pc, #96]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4013      	ands	r3, r2
 8006a62:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	f1c3 0207 	rsb	r2, r3, #7
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	2201      	movs	r2, #1
 8006a80:	409a      	lsls	r2, r3
 8006a82:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <xTaskPriorityDisinherit+0x108>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4a08      	ldr	r2, [pc, #32]	; (8006abc <xTaskPriorityDisinherit+0x104>)
 8006a9a:	441a      	add	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f7fd ff8f 	bl	80049c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aac:	697b      	ldr	r3, [r7, #20]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200003fc 	.word	0x200003fc
 8006abc:	20000400 	.word	0x20000400
 8006ac0:	20000504 	.word	0x20000504

08006ac4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d077      	beq.n	8006bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d902      	bls.n	8006b0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e002      	b.n	8006b10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d058      	beq.n	8006bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d153      	bne.n	8006bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b24:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d10a      	bne.n	8006b44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60bb      	str	r3, [r7, #8]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db04      	blt.n	8006b62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f1c3 0207 	rsb	r2, r3, #7
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	6959      	ldr	r1, [r3, #20]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4a19      	ldr	r2, [pc, #100]	; (8006bd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b72:	4413      	add	r3, r2
 8006b74:	4299      	cmp	r1, r3
 8006b76:	d129      	bne.n	8006bcc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fd ff7f 	bl	8004a80 <uxListRemove>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43da      	mvns	r2, r3
 8006b94:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a06      	ldr	r2, [pc, #24]	; (8006bd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006bbe:	441a      	add	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fd fefd 	bl	80049c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bcc:	bf00      	nop
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200003fc 	.word	0x200003fc
 8006bd8:	20000400 	.word	0x20000400
 8006bdc:	20000504 	.word	0x20000504

08006be0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006bf6:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
	}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	200003fc 	.word	0x200003fc

08006c08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c12:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c18:	4b28      	ldr	r3, [pc, #160]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fd ff2e 	bl	8004a80 <uxListRemove>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c2a:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	2201      	movs	r2, #1
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43da      	mvns	r2, r3
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d10a      	bne.n	8006c60 <prvAddCurrentTaskToDelayedList+0x58>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	481a      	ldr	r0, [pc, #104]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c5a:	f7fd feb4 	bl	80049c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c5e:	e026      	b.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d209      	bcs.n	8006c8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c78:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fd fec2 	bl	8004a0e <vListInsert>
}
 8006c8a:	e010      	b.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7fd feb8 	bl	8004a0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d202      	bcs.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ca8:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6013      	str	r3, [r2, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000500 	.word	0x20000500
 8006cbc:	200003fc 	.word	0x200003fc
 8006cc0:	20000504 	.word	0x20000504
 8006cc4:	200004e8 	.word	0x200004e8
 8006cc8:	200004b8 	.word	0x200004b8
 8006ccc:	200004b4 	.word	0x200004b4
 8006cd0:	2000051c 	.word	0x2000051c

08006cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <pxPortInitialiseStack+0x64>)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b14      	subs	r3, #20
 8006d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f06f 0202 	mvn.w	r2, #2
 8006d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3b20      	subs	r3, #32
 8006d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	08006d3d 	.word	0x08006d3d

08006d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d46:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <prvTaskExitError+0x54>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d00a      	beq.n	8006d66 <prvTaskExitError+0x2a>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <prvTaskExitError+0x28>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d7a:	bf00      	nop
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0fc      	beq.n	8006d7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000008 	.word	0x20000008
	...

08006da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006dc8:	4808      	ldr	r0, [pc, #32]	; (8006dec <prvPortStartFirstTask+0x24>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8814 	msr	CONTROL, r0
 8006dda:	b662      	cpsie	i
 8006ddc:	b661      	cpsie	f
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	df00      	svc	0
 8006de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dea:	bf00      	nop
 8006dec:	e000ed08 	.word	0xe000ed08

08006df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006df6:	4b46      	ldr	r3, [pc, #280]	; (8006f10 <xPortStartScheduler+0x120>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <xPortStartScheduler+0x124>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d10a      	bne.n	8006e16 <xPortStartScheduler+0x26>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <xPortStartScheduler+0x120>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3f      	ldr	r2, [pc, #252]	; (8006f18 <xPortStartScheduler+0x128>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10a      	bne.n	8006e36 <xPortStartScheduler+0x46>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e36:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <xPortStartScheduler+0x12c>)
 8006e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	22ff      	movs	r2, #255	; 0xff
 8006e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <xPortStartScheduler+0x130>)
 8006e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e64:	e009      	b.n	8006e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e66:	4b2f      	ldr	r3, [pc, #188]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d0ef      	beq.n	8006e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f1c3 0307 	rsb	r3, r3, #7
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d00a      	beq.n	8006ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ea8:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <xPortStartScheduler+0x134>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eba:	4a1a      	ldr	r2, [pc, #104]	; (8006f24 <xPortStartScheduler+0x134>)
 8006ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <xPortStartScheduler+0x138>)
 8006ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ede:	f000 f8dd 	bl	800709c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <xPortStartScheduler+0x13c>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ee8:	f000 f8fc 	bl	80070e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xPortStartScheduler+0x140>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0f      	ldr	r2, [pc, #60]	; (8006f30 <xPortStartScheduler+0x140>)
 8006ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ef8:	f7ff ff66 	bl	8006dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006efc:	f7ff fa8c 	bl	8006418 <vTaskSwitchContext>
	prvTaskExitError();
 8006f00:	f7ff ff1c 	bl	8006d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	e000ed00 	.word	0xe000ed00
 8006f14:	410fc271 	.word	0x410fc271
 8006f18:	410fc270 	.word	0x410fc270
 8006f1c:	e000e400 	.word	0xe000e400
 8006f20:	20000528 	.word	0x20000528
 8006f24:	2000052c 	.word	0x2000052c
 8006f28:	e000ed20 	.word	0xe000ed20
 8006f2c:	20000008 	.word	0x20000008
 8006f30:	e000ef34 	.word	0xe000ef34

08006f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
}
 8006f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	4a0d      	ldr	r2, [pc, #52]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <vPortEnterCritical+0x58>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10f      	bne.n	8006f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <vPortEnterCritical+0x5c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	603b      	str	r3, [r7, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <vPortEnterCritical+0x4a>
	}
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	20000008 	.word	0x20000008
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <vPortExitCritical+0x50>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <vPortExitCritical+0x24>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	607b      	str	r3, [r7, #4]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <vPortExitCritical+0x50>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <vPortExitCritical+0x42>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f383 8811 	msr	BASEPRI, r3
}
 8006fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000008 	.word	0x20000008
	...

08006ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ff0:	f3ef 8009 	mrs	r0, PSP
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <pxCurrentTCBConst>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f01e 0f10 	tst.w	lr, #16
 8007000:	bf08      	it	eq
 8007002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	6010      	str	r0, [r2, #0]
 800700c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007014:	f380 8811 	msr	BASEPRI, r0
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f7ff f9fa 	bl	8006418 <vTaskSwitchContext>
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f380 8811 	msr	BASEPRI, r0
 800702c:	bc09      	pop	{r0, r3}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007036:	f01e 0f10 	tst.w	lr, #16
 800703a:	bf08      	it	eq
 800703c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007040:	f380 8809 	msr	PSP, r0
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst>:
 8007050:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007072:	f7ff f919 	bl	80062a8 <xTaskIncrementTick>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <SysTick_Handler+0x40>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f383 8811 	msr	BASEPRI, r3
}
 800708e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070a0:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <vPortSetupTimerInterrupt+0x34>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <vPortSetupTimerInterrupt+0x38>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <vPortSetupTimerInterrupt+0x3c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <vPortSetupTimerInterrupt+0x40>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <vPortSetupTimerInterrupt+0x44>)
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070be:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <vPortSetupTimerInterrupt+0x34>)
 80070c0:	2207      	movs	r2, #7
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000e010 	.word	0xe000e010
 80070d4:	e000e018 	.word	0xe000e018
 80070d8:	20000000 	.word	0x20000000
 80070dc:	10624dd3 	.word	0x10624dd3
 80070e0:	e000e014 	.word	0xe000e014

080070e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070f4 <vPortEnableVFP+0x10>
 80070e8:	6801      	ldr	r1, [r0, #0]
 80070ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ee:	6001      	str	r1, [r0, #0]
 80070f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070f2:	bf00      	nop
 80070f4:	e000ed88 	.word	0xe000ed88

080070f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070fe:	f3ef 8305 	mrs	r3, IPSR
 8007102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d914      	bls.n	8007134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <vPortValidateInterruptPriority+0x70>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <vPortValidateInterruptPriority+0x74>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	7afa      	ldrb	r2, [r7, #11]
 800711a:	429a      	cmp	r2, r3
 800711c:	d20a      	bcs.n	8007134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <vPortValidateInterruptPriority+0x78>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800713c:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <vPortValidateInterruptPriority+0x7c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d90a      	bls.n	800715a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	603b      	str	r3, [r7, #0]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <vPortValidateInterruptPriority+0x60>
	}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	e000e3f0 	.word	0xe000e3f0
 800716c:	20000528 	.word	0x20000528
 8007170:	e000ed0c 	.word	0xe000ed0c
 8007174:	2000052c 	.word	0x2000052c

08007178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007184:	f7fe ffe6 	bl	8006154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007188:	4b5b      	ldr	r3, [pc, #364]	; (80072f8 <pvPortMalloc+0x180>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007190:	f000 f920 	bl	80073d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007194:	4b59      	ldr	r3, [pc, #356]	; (80072fc <pvPortMalloc+0x184>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8093 	bne.w	80072c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01d      	beq.n	80071e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071a8:	2208      	movs	r2, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d014      	beq.n	80071e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	3308      	adds	r3, #8
 80071c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <pvPortMalloc+0x6c>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	617b      	str	r3, [r7, #20]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d06e      	beq.n	80072c8 <pvPortMalloc+0x150>
 80071ea:	4b45      	ldr	r3, [pc, #276]	; (8007300 <pvPortMalloc+0x188>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d869      	bhi.n	80072c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071f4:	4b43      	ldr	r3, [pc, #268]	; (8007304 <pvPortMalloc+0x18c>)
 80071f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <pvPortMalloc+0x18c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071fe:	e004      	b.n	800720a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d903      	bls.n	800721c <pvPortMalloc+0xa4>
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f1      	bne.n	8007200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800721c:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <pvPortMalloc+0x180>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	429a      	cmp	r2, r3
 8007224:	d050      	beq.n	80072c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2208      	movs	r2, #8
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	2308      	movs	r3, #8
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	d91f      	bls.n	8007288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <pvPortMalloc+0xf8>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	613b      	str	r3, [r7, #16]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007282:	69b8      	ldr	r0, [r7, #24]
 8007284:	f000 f908 	bl	8007498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007288:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <pvPortMalloc+0x188>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <pvPortMalloc+0x188>)
 8007294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <pvPortMalloc+0x188>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <pvPortMalloc+0x190>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d203      	bcs.n	80072aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <pvPortMalloc+0x188>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a18      	ldr	r2, [pc, #96]	; (8007308 <pvPortMalloc+0x190>)
 80072a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <pvPortMalloc+0x184>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <pvPortMalloc+0x194>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	4a11      	ldr	r2, [pc, #68]	; (800730c <pvPortMalloc+0x194>)
 80072c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072c8:	f7fe ff52 	bl	8006170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <pvPortMalloc+0x174>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60fb      	str	r3, [r7, #12]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <pvPortMalloc+0x172>
	return pvReturn;
 80072ec:	69fb      	ldr	r3, [r7, #28]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3728      	adds	r7, #40	; 0x28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20004138 	.word	0x20004138
 80072fc:	2000414c 	.word	0x2000414c
 8007300:	2000413c 	.word	0x2000413c
 8007304:	20004130 	.word	0x20004130
 8007308:	20004140 	.word	0x20004140
 800730c:	20004144 	.word	0x20004144

08007310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d04d      	beq.n	80073be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007322:	2308      	movs	r3, #8
 8007324:	425b      	negs	r3, r3
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <vPortFree+0xb8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <vPortFree+0x44>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <vPortFree+0x62>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	60bb      	str	r3, [r7, #8]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <vPortFree+0xb8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01e      	beq.n	80073be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11a      	bne.n	80073be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <vPortFree+0xb8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	43db      	mvns	r3, r3
 8007392:	401a      	ands	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007398:	f7fe fedc 	bl	8006154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <vPortFree+0xbc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <vPortFree+0xbc>)
 80073a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f000 f874 	bl	8007498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <vPortFree+0xc0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vPortFree+0xc0>)
 80073b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073ba:	f7fe fed9 	bl	8006170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	2000414c 	.word	0x2000414c
 80073cc:	2000413c 	.word	0x2000413c
 80073d0:	20004148 	.word	0x20004148

080073d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073e0:	4b27      	ldr	r3, [pc, #156]	; (8007480 <prvHeapInit+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3307      	adds	r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <prvHeapInit+0xac>)
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <prvHeapInit+0xb0>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <prvHeapInit+0xb0>)
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007420:	2208      	movs	r2, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <prvHeapInit+0xb4>)
 8007434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <prvHeapInit+0xb4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <prvHeapInit+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvHeapInit+0xb4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <prvHeapInit+0xb8>)
 8007462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a09      	ldr	r2, [pc, #36]	; (8007490 <prvHeapInit+0xbc>)
 800746a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <prvHeapInit+0xc0>)
 800746e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000530 	.word	0x20000530
 8007484:	20004130 	.word	0x20004130
 8007488:	20004138 	.word	0x20004138
 800748c:	20004140 	.word	0x20004140
 8007490:	2000413c 	.word	0x2000413c
 8007494:	2000414c 	.word	0x2000414c

08007498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074a0:	4b28      	ldr	r3, [pc, #160]	; (8007544 <prvInsertBlockIntoFreeList+0xac>)
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <prvInsertBlockIntoFreeList+0x14>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d8f7      	bhi.n	80074a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d108      	bne.n	80074da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d118      	bne.n	8007520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d00d      	beq.n	8007516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	441a      	add	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e008      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <prvInsertBlockIntoFreeList+0xb0>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e003      	b.n	8007528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d002      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20004130 	.word	0x20004130
 8007548:	20004138 	.word	0x20004138

0800754c <__NVIC_GetPriorityGrouping>:
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <__NVIC_GetPriorityGrouping+0x18>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	0a1b      	lsrs	r3, r3, #8
 8007556:	f003 0307 	and.w	r3, r3, #7
}
 800755a:	4618      	mov	r0, r3
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <__NVIC_EnableIRQ>:
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	db0b      	blt.n	8007592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	f003 021f 	and.w	r2, r3, #31
 8007580:	4907      	ldr	r1, [pc, #28]	; (80075a0 <__NVIC_EnableIRQ+0x38>)
 8007582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	2001      	movs	r0, #1
 800758a:	fa00 f202 	lsl.w	r2, r0, r2
 800758e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e100 	.word	0xe000e100

080075a4 <__NVIC_SetPriority>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	6039      	str	r1, [r7, #0]
 80075ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db0a      	blt.n	80075ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	490c      	ldr	r1, [pc, #48]	; (80075f0 <__NVIC_SetPriority+0x4c>)
 80075be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c2:	0112      	lsls	r2, r2, #4
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	440b      	add	r3, r1
 80075c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075cc:	e00a      	b.n	80075e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4908      	ldr	r1, [pc, #32]	; (80075f4 <__NVIC_SetPriority+0x50>)
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	3b04      	subs	r3, #4
 80075dc:	0112      	lsls	r2, r2, #4
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	440b      	add	r3, r1
 80075e2:	761a      	strb	r2, [r3, #24]
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	e000e100 	.word	0xe000e100
 80075f4:	e000ed00 	.word	0xe000ed00

080075f8 <NVIC_EncodePriority>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f1c3 0307 	rsb	r3, r3, #7
 8007612:	2b04      	cmp	r3, #4
 8007614:	bf28      	it	cs
 8007616:	2304      	movcs	r3, #4
 8007618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3304      	adds	r3, #4
 800761e:	2b06      	cmp	r3, #6
 8007620:	d902      	bls.n	8007628 <NVIC_EncodePriority+0x30>
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	3b03      	subs	r3, #3
 8007626:	e000      	b.n	800762a <NVIC_EncodePriority+0x32>
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	43da      	mvns	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	401a      	ands	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007640:	f04f 31ff 	mov.w	r1, #4294967295
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	43d9      	mvns	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007650:	4313      	orrs	r3, r2
}
 8007652:	4618      	mov	r0, r3
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <LL_DMA_EnableStream+0x3c>)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4413      	add	r3, r2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4908      	ldr	r1, [pc, #32]	; (800769c <LL_DMA_EnableStream+0x3c>)
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	440a      	add	r2, r1
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	4611      	mov	r1, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	440a      	add	r2, r1
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	6013      	str	r3, [r2, #0]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	0800b1a0 	.word	0x0800b1a0

080076a0 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80076aa:	4a0c      	ldr	r2, [pc, #48]	; (80076dc <LL_DMA_DisableStream+0x3c>)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4413      	add	r3, r2
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4908      	ldr	r1, [pc, #32]	; (80076dc <LL_DMA_DisableStream+0x3c>)
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	440a      	add	r2, r1
 80076c0:	7812      	ldrb	r2, [r2, #0]
 80076c2:	4611      	mov	r1, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	440a      	add	r2, r1
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	0800b1a0 	.word	0x0800b1a0

080076e0 <LL_DMA_IsEnabledStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80076ea:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <LL_DMA_IsEnabledStream+0x34>)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b01      	cmp	r3, #1
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2300      	movne	r3, #0
 8007706:	b2db      	uxtb	r3, r3
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	0800b1a0 	.word	0x0800b1a0

08007718 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8007724:	4a0d      	ldr	r2, [pc, #52]	; (800775c <LL_DMA_SetDataTransferDirection+0x44>)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4413      	add	r3, r2
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4413      	add	r3, r2
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007738:	4908      	ldr	r1, [pc, #32]	; (800775c <LL_DMA_SetDataTransferDirection+0x44>)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	440b      	add	r3, r1
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4619      	mov	r1, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	440b      	add	r3, r1
 8007746:	4619      	mov	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4313      	orrs	r3, r2
 800774c:	600b      	str	r3, [r1, #0]
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	0800b1a0 	.word	0x0800b1a0

08007760 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800776c:	4a0d      	ldr	r2, [pc, #52]	; (80077a4 <LL_DMA_SetMode+0x44>)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8007780:	4908      	ldr	r1, [pc, #32]	; (80077a4 <LL_DMA_SetMode+0x44>)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	440b      	add	r3, r1
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4619      	mov	r1, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	440b      	add	r3, r1
 800778e:	4619      	mov	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]
}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	0800b1a0 	.word	0x0800b1a0

080077a8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80077b4:	4a0d      	ldr	r2, [pc, #52]	; (80077ec <LL_DMA_SetPeriphIncMode+0x44>)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077c8:	4908      	ldr	r1, [pc, #32]	; (80077ec <LL_DMA_SetPeriphIncMode+0x44>)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	440b      	add	r3, r1
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	440b      	add	r3, r1
 80077d6:	4619      	mov	r1, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4313      	orrs	r3, r2
 80077dc:	600b      	str	r3, [r1, #0]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	0800b1a0 	.word	0x0800b1a0

080077f0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80077fc:	4a0d      	ldr	r2, [pc, #52]	; (8007834 <LL_DMA_SetMemoryIncMode+0x44>)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007810:	4908      	ldr	r1, [pc, #32]	; (8007834 <LL_DMA_SetMemoryIncMode+0x44>)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	440b      	add	r3, r1
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	440b      	add	r3, r1
 800781e:	4619      	mov	r1, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4313      	orrs	r3, r2
 8007824:	600b      	str	r3, [r1, #0]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	0800b1a0 	.word	0x0800b1a0

08007838 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8007844:	4a0d      	ldr	r2, [pc, #52]	; (800787c <LL_DMA_SetPeriphSize+0x44>)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007858:	4908      	ldr	r1, [pc, #32]	; (800787c <LL_DMA_SetPeriphSize+0x44>)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	440b      	add	r3, r1
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	4619      	mov	r1, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	440b      	add	r3, r1
 8007866:	4619      	mov	r1, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4313      	orrs	r3, r2
 800786c:	600b      	str	r3, [r1, #0]
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	0800b1a0 	.word	0x0800b1a0

08007880 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800788c:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <LL_DMA_SetMemorySize+0x44>)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4413      	add	r3, r2
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80078a0:	4908      	ldr	r1, [pc, #32]	; (80078c4 <LL_DMA_SetMemorySize+0x44>)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	440b      	add	r3, r1
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	440b      	add	r3, r1
 80078ae:	4619      	mov	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	600b      	str	r3, [r1, #0]
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	0800b1a0 	.word	0x0800b1a0

080078c8 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <LL_DMA_SetStreamPriorityLevel+0x44>)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078e8:	4908      	ldr	r1, [pc, #32]	; (800790c <LL_DMA_SetStreamPriorityLevel+0x44>)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	440b      	add	r3, r1
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	4619      	mov	r1, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	440b      	add	r3, r1
 80078f6:	4619      	mov	r1, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	0800b1a0 	.word	0x0800b1a0

08007910 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800791c:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <LL_DMA_SetDataLength+0x44>)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	4908      	ldr	r1, [pc, #32]	; (8007954 <LL_DMA_SetDataLength+0x44>)
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	440a      	add	r2, r1
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	4611      	mov	r1, r2
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	440a      	add	r2, r1
 800793e:	4611      	mov	r1, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4313      	orrs	r3, r2
 8007944:	604b      	str	r3, [r1, #4]
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	0800b1a0 	.word	0x0800b1a0

08007958 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8007962:	4a07      	ldr	r2, [pc, #28]	; (8007980 <LL_DMA_GetDataLength+0x28>)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	4413      	add	r3, r2
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	b29b      	uxth	r3, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	0800b1a0 	.word	0x0800b1a0

08007984 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8007990:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <LL_DMA_SetChannelSelection+0x44>)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4413      	add	r3, r2
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80079a4:	4908      	ldr	r1, [pc, #32]	; (80079c8 <LL_DMA_SetChannelSelection+0x44>)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	440b      	add	r3, r1
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	440b      	add	r3, r1
 80079b2:	4619      	mov	r1, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	0800b1a0 	.word	0x0800b1a0

080079cc <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80079d6:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <LL_DMA_DisableFifoMode+0x3c>)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	4413      	add	r3, r2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	4908      	ldr	r1, [pc, #32]	; (8007a08 <LL_DMA_DisableFifoMode+0x3c>)
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	440a      	add	r2, r1
 80079ec:	7812      	ldrb	r2, [r2, #0]
 80079ee:	4611      	mov	r1, r2
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	440a      	add	r2, r1
 80079f4:	f023 0304 	bic.w	r3, r3, #4
 80079f8:	6153      	str	r3, [r2, #20]
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	0800b1a0 	.word	0x0800b1a0

08007a0c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007a18:	4a07      	ldr	r2, [pc, #28]	; (8007a38 <LL_DMA_SetMemoryAddress+0x2c>)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60d3      	str	r3, [r2, #12]
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	0800b1a0 	.word	0x0800b1a0

08007a3c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007a48:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <LL_DMA_SetPeriphAddress+0x2c>)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6093      	str	r3, [r2, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	0800b1a0 	.word	0x0800b1a0

08007a6c <LL_AHB1_GRP1_EnableClock>:
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007a74:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a78:	4907      	ldr	r1, [pc, #28]	; (8007a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007a80:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4013      	ands	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
}
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40023800 	.word	0x40023800

08007a9c <LL_APB2_GRP1_EnableClock>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aa8:	4907      	ldr	r1, [pc, #28]	; (8007ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	40023800 	.word	0x40023800

08007acc <LL_USART_Enable>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <LL_USART_Disable>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	60da      	str	r2, [r3, #12]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <LL_USART_IsEnabled>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b20:	bf0c      	ite	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	2300      	movne	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <LL_USART_DisableRTSHWFlowCtrl>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	615a      	str	r2, [r3, #20]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <LL_USART_EnableCTSHWFlowCtrl>:
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	615a      	str	r2, [r3, #20]
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_USART_SetBaudRate>:
{
 8007b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	b09f      	sub	sp, #124	; 0x7c
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6778      	str	r0, [r7, #116]	; 0x74
 8007b7e:	6739      	str	r1, [r7, #112]	; 0x70
 8007b80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b82:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8a:	f040 80bc 	bne.w	8007d06 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b90:	461c      	mov	r4, r3
 8007b92:	f04f 0500 	mov.w	r5, #0
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	eb12 0a02 	adds.w	sl, r2, r2
 8007b9e:	eb43 0b03 	adc.w	fp, r3, r3
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	1912      	adds	r2, r2, r4
 8007ba8:	eb45 0303 	adc.w	r3, r5, r3
 8007bac:	f04f 0000 	mov.w	r0, #0
 8007bb0:	f04f 0100 	mov.w	r1, #0
 8007bb4:	00d9      	lsls	r1, r3, #3
 8007bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bba:	00d0      	lsls	r0, r2, #3
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	1911      	adds	r1, r2, r4
 8007bc2:	6639      	str	r1, [r7, #96]	; 0x60
 8007bc4:	416b      	adcs	r3, r5
 8007bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8007bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	1891      	adds	r1, r2, r2
 8007bd2:	6339      	str	r1, [r7, #48]	; 0x30
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007be0:	f7f8 fb4e 	bl	8000280 <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4ba9      	ldr	r3, [pc, #676]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007bea:	fba3 2302 	umull	r2, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	b29e      	uxth	r6, r3
 8007bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bf8:	461c      	mov	r4, r3
 8007bfa:	f04f 0500 	mov.w	r5, #0
 8007bfe:	4622      	mov	r2, r4
 8007c00:	462b      	mov	r3, r5
 8007c02:	1891      	adds	r1, r2, r2
 8007c04:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c06:	415b      	adcs	r3, r3
 8007c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c0e:	1912      	adds	r2, r2, r4
 8007c10:	eb45 0303 	adc.w	r3, r5, r3
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	f04f 0100 	mov.w	r1, #0
 8007c1c:	00d9      	lsls	r1, r3, #3
 8007c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c22:	00d0      	lsls	r0, r2, #3
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	1911      	adds	r1, r2, r4
 8007c2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c2c:	416b      	adcs	r3, r5
 8007c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c32:	461a      	mov	r2, r3
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	1891      	adds	r1, r2, r2
 8007c3a:	6239      	str	r1, [r7, #32]
 8007c3c:	415b      	adcs	r3, r3
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c44:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c48:	f7f8 fb1a 	bl	8000280 <__aeabi_uldivmod>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4b8f      	ldr	r3, [pc, #572]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007c52:	fba3 1302 	umull	r1, r3, r3, r2
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	2164      	movs	r1, #100	; 0x64
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	3332      	adds	r3, #50	; 0x32
 8007c64:	4a8a      	ldr	r2, [pc, #552]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007c66:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4433      	add	r3, r6
 8007c7a:	b29e      	uxth	r6, r3
 8007c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	1894      	adds	r4, r2, r2
 8007c8a:	61bc      	str	r4, [r7, #24]
 8007c8c:	415b      	adcs	r3, r3
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c94:	1812      	adds	r2, r2, r0
 8007c96:	eb41 0303 	adc.w	r3, r1, r3
 8007c9a:	f04f 0400 	mov.w	r4, #0
 8007c9e:	f04f 0500 	mov.w	r5, #0
 8007ca2:	00dd      	lsls	r5, r3, #3
 8007ca4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ca8:	00d4      	lsls	r4, r2, #3
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	1814      	adds	r4, r2, r0
 8007cb0:	653c      	str	r4, [r7, #80]	; 0x50
 8007cb2:	414b      	adcs	r3, r1
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	1891      	adds	r1, r2, r2
 8007cc0:	6139      	str	r1, [r7, #16]
 8007cc2:	415b      	adcs	r3, r3
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cce:	f7f8 fad7 	bl	8000280 <__aeabi_uldivmod>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4b6e      	ldr	r3, [pc, #440]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	2164      	movs	r1, #100	; 0x64
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	3332      	adds	r3, #50	; 0x32
 8007cea:	4a69      	ldr	r2, [pc, #420]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4433      	add	r3, r6
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d02:	609a      	str	r2, [r3, #8]
}
 8007d04:	e0be      	b.n	8007e84 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d08:	461c      	mov	r4, r3
 8007d0a:	f04f 0500 	mov.w	r5, #0
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	eb12 0802 	adds.w	r8, r2, r2
 8007d16:	eb43 0903 	adc.w	r9, r3, r3
 8007d1a:	4642      	mov	r2, r8
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	1912      	adds	r2, r2, r4
 8007d20:	eb45 0303 	adc.w	r3, r5, r3
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	00d9      	lsls	r1, r3, #3
 8007d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d32:	00d0      	lsls	r0, r2, #3
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	1911      	adds	r1, r2, r4
 8007d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d3c:	416b      	adcs	r3, r5
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d42:	4618      	mov	r0, r3
 8007d44:	f04f 0100 	mov.w	r1, #0
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d56:	0082      	lsls	r2, r0, #2
 8007d58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d5c:	f7f8 fa90 	bl	8000280 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4b4a      	ldr	r3, [pc, #296]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007d66:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	b29e      	uxth	r6, r3
 8007d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d74:	4618      	mov	r0, r3
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	1894      	adds	r4, r2, r2
 8007d80:	60bc      	str	r4, [r7, #8]
 8007d82:	415b      	adcs	r3, r3
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d8a:	1812      	adds	r2, r2, r0
 8007d8c:	eb41 0303 	adc.w	r3, r1, r3
 8007d90:	f04f 0400 	mov.w	r4, #0
 8007d94:	f04f 0500 	mov.w	r5, #0
 8007d98:	00dd      	lsls	r5, r3, #3
 8007d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d9e:	00d4      	lsls	r4, r2, #3
 8007da0:	4622      	mov	r2, r4
 8007da2:	462b      	mov	r3, r5
 8007da4:	1814      	adds	r4, r2, r0
 8007da6:	643c      	str	r4, [r7, #64]	; 0x40
 8007da8:	414b      	adcs	r3, r1
 8007daa:	647b      	str	r3, [r7, #68]	; 0x44
 8007dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dae:	4618      	mov	r0, r3
 8007db0:	f04f 0100 	mov.w	r1, #0
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	008b      	lsls	r3, r1, #2
 8007dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dc2:	0082      	lsls	r2, r0, #2
 8007dc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dc8:	f7f8 fa5a 	bl	8000280 <__aeabi_uldivmod>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4b2f      	ldr	r3, [pc, #188]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2164      	movs	r1, #100	; 0x64
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	3332      	adds	r3, #50	; 0x32
 8007de4:	4a2a      	ldr	r2, [pc, #168]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4433      	add	r3, r6
 8007df6:	b29e      	uxth	r6, r3
 8007df8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f04f 0100 	mov.w	r1, #0
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	1894      	adds	r4, r2, r2
 8007e06:	603c      	str	r4, [r7, #0]
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e10:	1812      	adds	r2, r2, r0
 8007e12:	eb41 0303 	adc.w	r3, r1, r3
 8007e16:	f04f 0400 	mov.w	r4, #0
 8007e1a:	f04f 0500 	mov.w	r5, #0
 8007e1e:	00dd      	lsls	r5, r3, #3
 8007e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e24:	00d4      	lsls	r4, r2, #3
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	1814      	adds	r4, r2, r0
 8007e2c:	63bc      	str	r4, [r7, #56]	; 0x38
 8007e2e:	414b      	adcs	r3, r1
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e34:	4618      	mov	r0, r3
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e48:	0082      	lsls	r2, r0, #2
 8007e4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e4e:	f7f8 fa17 	bl	8000280 <__aeabi_uldivmod>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007e58:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	2164      	movs	r1, #100	; 0x64
 8007e60:	fb01 f303 	mul.w	r3, r1, r3
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	3332      	adds	r3, #50	; 0x32
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <LL_USART_SetBaudRate+0x31c>)
 8007e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	4433      	add	r3, r6
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e82:	609a      	str	r2, [r3, #8]
}
 8007e84:	bf00      	nop
 8007e86:	377c      	adds	r7, #124	; 0x7c
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	bf00      	nop
 8007e90:	51eb851f 	.word	0x51eb851f

08007e94 <LL_USART_ConfigAsyncMode>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	615a      	str	r2, [r3, #20]
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	bf0c      	ite	eq
 8007efa:	2301      	moveq	r3, #1
 8007efc:	2300      	movne	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f043 0210 	orr.w	r2, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60da      	str	r2, [r3, #12]
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f043 0220 	orr.w	r2, r3, #32
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60da      	str	r2, [r3, #12]
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	615a      	str	r2, [r3, #20]
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	605a      	str	r2, [r3, #4]
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <LL_GPIO_SetOutputPin>:
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	619a      	str	r2, [r3, #24]
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <LL_GPIO_ResetOutputPin>:
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	041a      	lsls	r2, r3, #16
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	619a      	str	r2, [r3, #24]
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <sim7600_resume_rx_uart_dma>:

extern uint8_t* sim_dma_buffer_pointer; //circle buffer

__STATIC_INLINE void sim7600_resume_rx_uart_dma()
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
//		ndtr_tmp = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
//		ndtr_tmp = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
//		ndtr_tmp = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
//	}

    Sim_CTS(0);
 8007fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fcc:	4802      	ldr	r0, [pc, #8]	; (8007fd8 <sim7600_resume_rx_uart_dma+0x14>)
 8007fce:	f7ff ffea 	bl	8007fa6 <LL_GPIO_ResetOutputPin>
    //LL_USART_EnableRTSHWFlowCtrl(USART1);


}
 8007fd2:	bf00      	nop
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40020000 	.word	0x40020000

08007fdc <sim7600_delay_ms>:

__STATIC_INLINE void sim7600_delay_ms(int _ms)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	osDelay(_ms);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fc faeb 	bl	80045c2 <osDelay>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <sim7600_powerON>:
mp3PacketStruct mp3Packet[mp3PacketSize];

//init gpio, uart, dma(no fifo, byte->byte)

void sim7600_powerON()
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	480c      	ldr	r0, [pc, #48]	; (800802c <sim7600_powerON+0x38>)
 8007ffc:	f7ff ffc5 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8008000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008004:	f7ff ffea 	bl	8007fdc <sim7600_delay_ms>

  Sim_PWR(0);
 8008008:	2101      	movs	r1, #1
 800800a:	4808      	ldr	r0, [pc, #32]	; (800802c <sim7600_powerON+0x38>)
 800800c:	f7ff ffcb 	bl	8007fa6 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(500);
 8008010:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008014:	f7ff ffe2 	bl	8007fdc <sim7600_delay_ms>

  Sim_PWR(1);
 8008018:	2101      	movs	r1, #1
 800801a:	4804      	ldr	r0, [pc, #16]	; (800802c <sim7600_powerON+0x38>)
 800801c:	f7ff ffb5 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(20000);
 8008020:	f644 6020 	movw	r0, #20000	; 0x4e20
 8008024:	f7ff ffda 	bl	8007fdc <sim7600_delay_ms>
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40021000 	.word	0x40021000

08008030 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 8008034:	2101      	movs	r1, #1
 8008036:	480c      	ldr	r0, [pc, #48]	; (8008068 <sim7600_powerOFF+0x38>)
 8008038:	f7ff ffa7 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 800803c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008040:	f7ff ffcc 	bl	8007fdc <sim7600_delay_ms>

  Sim_PWR(0);
 8008044:	2101      	movs	r1, #1
 8008046:	4808      	ldr	r0, [pc, #32]	; (8008068 <sim7600_powerOFF+0x38>)
 8008048:	f7ff ffad 	bl	8007fa6 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(4000);
 800804c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008050:	f7ff ffc4 	bl	8007fdc <sim7600_delay_ms>

  Sim_PWR(1);
 8008054:	2101      	movs	r1, #1
 8008056:	4804      	ldr	r0, [pc, #16]	; (8008068 <sim7600_powerOFF+0x38>)
 8008058:	f7ff ff97 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(20000); // ~ 3 minutes
 800805c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8008060:	f7ff ffbc 	bl	8007fdc <sim7600_delay_ms>
}
 8008064:	bf00      	nop
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40021000 	.word	0x40021000

0800806c <sim7600_reset>:

void sim7600_reset()
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  Sim_RST(1);
 8008070:	2104      	movs	r1, #4
 8008072:	480c      	ldr	r0, [pc, #48]	; (80080a4 <sim7600_reset+0x38>)
 8008074:	f7ff ff89 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8008078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800807c:	f7ff ffae 	bl	8007fdc <sim7600_delay_ms>

  Sim_RST(0);
 8008080:	2104      	movs	r1, #4
 8008082:	4808      	ldr	r0, [pc, #32]	; (80080a4 <sim7600_reset+0x38>)
 8008084:	f7ff ff8f 	bl	8007fa6 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(350);
 8008088:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800808c:	f7ff ffa6 	bl	8007fdc <sim7600_delay_ms>

  Sim_RST(1);
 8008090:	2104      	movs	r1, #4
 8008092:	4804      	ldr	r0, [pc, #16]	; (80080a4 <sim7600_reset+0x38>)
 8008094:	f7ff ff79 	bl	8007f8a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(2000);
 8008098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800809c:	f7ff ff9e 	bl	8007fdc <sim7600_delay_ms>
}
 80080a0:	bf00      	nop
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40021000 	.word	0x40021000

080080a8 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ae:	463b      	mov	r3, r7
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	609a      	str	r2, [r3, #8]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	611a      	str	r2, [r3, #16]
 80080bc:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80080be:	2010      	movs	r0, #16
 80080c0:	f7ff fcd4 	bl	8007a6c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80080c4:	2001      	movs	r0, #1
 80080c6:	f7ff fcd1 	bl	8007a6c <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_SetOutputPin(GPIOE, pwrSIM_Pin | rstSIM_Pin);
 80080ca:	2105      	movs	r1, #5
 80080cc:	4815      	ldr	r0, [pc, #84]	; (8008124 <sim7600_gpio_init+0x7c>)
 80080ce:	f7ff ff5c 	bl	8007f8a <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 80080d2:	2305      	movs	r3, #5
 80080d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80080d6:	2301      	movs	r3, #1
 80080d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80080da:	2300      	movs	r3, #0
 80080dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80080e2:	2301      	movs	r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080e6:	463b      	mov	r3, r7
 80080e8:	4619      	mov	r1, r3
 80080ea:	480e      	ldr	r0, [pc, #56]	; (8008124 <sim7600_gpio_init+0x7c>)
 80080ec:	f7fb fdd8 	bl	8003ca0 <LL_GPIO_Init>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_ResetOutputPin(CTS_SIM_GPIO_Port, CTS_SIM_Pin);
 80080f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080f4:	480c      	ldr	r0, [pc, #48]	; (8008128 <sim7600_gpio_init+0x80>)
 80080f6:	f7ff ff56 	bl	8007fa6 <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = CTS_SIM_Pin;
 80080fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008100:	2301      	movs	r3, #1
 8008102:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008104:	2303      	movs	r3, #3
 8008106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CTS_SIM_GPIO_Port, &GPIO_InitStruct);
 8008110:	463b      	mov	r3, r7
 8008112:	4619      	mov	r1, r3
 8008114:	4804      	ldr	r0, [pc, #16]	; (8008128 <sim7600_gpio_init+0x80>)
 8008116:	f7fb fdc3 	bl	8003ca0 <LL_GPIO_Init>
}
 800811a:	bf00      	nop
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	40020000 	.word	0x40020000

0800812c <sim7600_init>:

void sim7600_init()
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b092      	sub	sp, #72	; 0x48
 8008130:	af00      	add	r7, sp, #0
  //init udp var
  // int i, limit = mp3PacketSize;
  // for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;

  sim_buff[sim_buff_size] = '\0'; //initialize last bytes to ensure end of string (with strstr at handle receive data)
 8008132:	4b77      	ldr	r3, [pc, #476]	; (8008310 <sim7600_init+0x1e4>)
 8008134:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008138:	3308      	adds	r3, #8
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]

  //init semaphore to be ensure tx uart (share resource) use properly (place at main.c)
  osSemaphoreDef(BinSemsim7600UartTx);
 800813e:	2300      	movs	r3, #0
 8008140:	643b      	str	r3, [r7, #64]	; 0x40
 8008142:	2300      	movs	r3, #0
 8008144:	647b      	str	r3, [r7, #68]	; 0x44
  BinSemsim7600UartTxHandle = osSemaphoreCreate(osSemaphore(BinSemsim7600UartTx), 1);
 8008146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800814a:	2101      	movs	r1, #1
 800814c:	4618      	mov	r0, r3
 800814e:	f7fc fa4c 	bl	80045ea <osSemaphoreCreate>
 8008152:	4603      	mov	r3, r0
 8008154:	4a6f      	ldr	r2, [pc, #444]	; (8008314 <sim7600_init+0x1e8>)
 8008156:	6013      	str	r3, [r2, #0]

  //semaphore to make sure that response is check properly
  osSemaphoreDef(BinSemPlayMp3);
 8008158:	2300      	movs	r3, #0
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemPlayMp3Handle = osSemaphoreCreate(osSemaphore(BinSemPlayMp3), 1);
 8008160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008164:	2101      	movs	r1, #1
 8008166:	4618      	mov	r0, r3
 8008168:	f7fc fa3f 	bl	80045ea <osSemaphoreCreate>
 800816c:	4603      	mov	r3, r0
 800816e:	4a6a      	ldr	r2, [pc, #424]	; (8008318 <sim7600_init+0x1ec>)
 8008170:	6013      	str	r3, [r2, #0]

  sim7600_gpio_init();
 8008172:	f7ff ff99 	bl	80080a8 <sim7600_gpio_init>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008176:	f107 0320 	add.w	r3, r7, #32
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	605a      	str	r2, [r3, #4]
 8008180:	609a      	str	r2, [r3, #8]
 8008182:	60da      	str	r2, [r3, #12]
 8008184:	611a      	str	r2, [r3, #16]
 8008186:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	605a      	str	r2, [r3, #4]
 8008190:	609a      	str	r2, [r3, #8]
 8008192:	60da      	str	r2, [r3, #12]
 8008194:	611a      	str	r2, [r3, #16]
 8008196:	615a      	str	r2, [r3, #20]
 8008198:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800819a:	2010      	movs	r0, #16
 800819c:	f7ff fc7e 	bl	8007a9c <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80081a0:	2001      	movs	r0, #1
 80081a2:	f7ff fc63 	bl	8007a6c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80081a6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80081aa:	f7ff fc5f 	bl	8007a6c <LL_AHB1_GRP1_EnableClock>
       * USART1 GPIO Configuration
       *
       * PA9   ------> USART1_TX
       * PA10   ------> USART1_RX
       */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 80081ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80081b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081b4:	2302      	movs	r3, #2
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80081b8:	2303      	movs	r3, #3
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80081c0:	2301      	movs	r3, #1
 80081c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 80081c4:	2307      	movs	r3, #7
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c8:	f107 0320 	add.w	r3, r7, #32
 80081cc:	4619      	mov	r1, r3
 80081ce:	4853      	ldr	r0, [pc, #332]	; (800831c <sim7600_init+0x1f0>)
 80081d0:	f7fb fd66 	bl	8003ca0 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80081d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081d8:	2102      	movs	r1, #2
 80081da:	4851      	ldr	r0, [pc, #324]	; (8008320 <sim7600_init+0x1f4>)
 80081dc:	f7ff fbd2 	bl	8007984 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80081e0:	2200      	movs	r2, #0
 80081e2:	2102      	movs	r1, #2
 80081e4:	484e      	ldr	r0, [pc, #312]	; (8008320 <sim7600_init+0x1f4>)
 80081e6:	f7ff fa97 	bl	8007718 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 80081ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081ee:	2102      	movs	r1, #2
 80081f0:	484b      	ldr	r0, [pc, #300]	; (8008320 <sim7600_init+0x1f4>)
 80081f2:	f7ff fb69 	bl	80078c8 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 80081f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081fa:	2102      	movs	r1, #2
 80081fc:	4848      	ldr	r0, [pc, #288]	; (8008320 <sim7600_init+0x1f4>)
 80081fe:	f7ff faaf 	bl	8007760 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8008202:	2200      	movs	r2, #0
 8008204:	2102      	movs	r1, #2
 8008206:	4846      	ldr	r0, [pc, #280]	; (8008320 <sim7600_init+0x1f4>)
 8008208:	f7ff face 	bl	80077a8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800820c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008210:	2102      	movs	r1, #2
 8008212:	4843      	ldr	r0, [pc, #268]	; (8008320 <sim7600_init+0x1f4>)
 8008214:	f7ff faec 	bl	80077f0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8008218:	2200      	movs	r2, #0
 800821a:	2102      	movs	r1, #2
 800821c:	4840      	ldr	r0, [pc, #256]	; (8008320 <sim7600_init+0x1f4>)
 800821e:	f7ff fb0b 	bl	8007838 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8008222:	2200      	movs	r2, #0
 8008224:	2102      	movs	r1, #2
 8008226:	483e      	ldr	r0, [pc, #248]	; (8008320 <sim7600_init+0x1f4>)
 8008228:	f7ff fb2a 	bl	8007880 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 800822c:	2102      	movs	r1, #2
 800822e:	483c      	ldr	r0, [pc, #240]	; (8008320 <sim7600_init+0x1f4>)
 8008230:	f7ff fbcc 	bl	80079cc <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8008234:	4a3b      	ldr	r2, [pc, #236]	; (8008324 <sim7600_init+0x1f8>)
 8008236:	2102      	movs	r1, #2
 8008238:	4839      	ldr	r0, [pc, #228]	; (8008320 <sim7600_init+0x1f4>)
 800823a:	f7ff fbff 	bl	8007a3c <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buffer);
 800823e:	4b3a      	ldr	r3, [pc, #232]	; (8008328 <sim7600_init+0x1fc>)
 8008240:	461a      	mov	r2, r3
 8008242:	2102      	movs	r1, #2
 8008244:	4836      	ldr	r0, [pc, #216]	; (8008320 <sim7600_init+0x1f4>)
 8008246:	f7ff fbe1 	bl	8007a0c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buffer_size);
 800824a:	f241 3288 	movw	r2, #5000	; 0x1388
 800824e:	2102      	movs	r1, #2
 8008250:	4833      	ldr	r0, [pc, #204]	; (8008320 <sim7600_init+0x1f4>)
 8008252:	f7ff fb5d 	bl	8007910 <LL_DMA_SetDataLength>
  /* DMA interrupt init */
  //NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
  //NVIC_EnableIRQ(DMA2_Stream2_IRQn);

  /* USART configuration */
  USART_InitStruct.BaudRate = Sim7600BaudDefaul;
 8008256:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800825a:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800825c:	2300      	movs	r3, #0
 800825e:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008268:	230c      	movs	r3, #12
 800826a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8008274:	1d3b      	adds	r3, r7, #4
 8008276:	4619      	mov	r1, r3
 8008278:	482c      	ldr	r0, [pc, #176]	; (800832c <sim7600_init+0x200>)
 800827a:	f7fc f889 	bl	8004390 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800827e:	482b      	ldr	r0, [pc, #172]	; (800832c <sim7600_init+0x200>)
 8008280:	f7ff fe08 	bl	8007e94 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 8008284:	4829      	ldr	r0, [pc, #164]	; (800832c <sim7600_init+0x200>)
 8008286:	f7ff fe61 	bl	8007f4c <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 800828a:	4828      	ldr	r0, [pc, #160]	; (800832c <sim7600_init+0x200>)
 800828c:	f7ff fe3e 	bl	8007f0c <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_RXNE(USART1);
 8008290:	4826      	ldr	r0, [pc, #152]	; (800832c <sim7600_init+0x200>)
 8008292:	f7ff fe4b 	bl	8007f2c <LL_USART_EnableIT_RXNE>
  LL_USART_DisableRTSHWFlowCtrl(USART1);
 8008296:	4825      	ldr	r0, [pc, #148]	; (800832c <sim7600_init+0x200>)
 8008298:	f7ff fc4c 	bl	8007b34 <LL_USART_DisableRTSHWFlowCtrl>
  LL_USART_EnableCTSHWFlowCtrl(USART1);
 800829c:	4823      	ldr	r0, [pc, #140]	; (800832c <sim7600_init+0x200>)
 800829e:	f7ff fc59 	bl	8007b54 <LL_USART_EnableCTSHWFlowCtrl>

  /* USART interrupt */
  //priority high (6) after spi and dma for vs1003
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 14, 0));
 80082a2:	f7ff f953 	bl	800754c <__NVIC_GetPriorityGrouping>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2200      	movs	r2, #0
 80082aa:	210e      	movs	r1, #14
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff f9a3 	bl	80075f8 <NVIC_EncodePriority>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	2025      	movs	r0, #37	; 0x25
 80082b8:	f7ff f974 	bl	80075a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80082bc:	2025      	movs	r0, #37	; 0x25
 80082be:	f7ff f953 	bl	8007568 <__NVIC_EnableIRQ>

  // Clear IDLE line flag
  volatile uint32_t tmpreg;
  tmpreg = usartSim7600->SR;
 80082c2:	4b1b      	ldr	r3, [pc, #108]	; (8008330 <sim7600_init+0x204>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	603b      	str	r3, [r7, #0]
  (void)tmpreg;
 80082ca:	683b      	ldr	r3, [r7, #0]
  tmpreg = usartSim7600->DR;
 80082cc:	4b18      	ldr	r3, [pc, #96]	; (8008330 <sim7600_init+0x204>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	603b      	str	r3, [r7, #0]
  (void)tmpreg;
 80082d4:	683b      	ldr	r3, [r7, #0]

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80082d6:	2102      	movs	r1, #2
 80082d8:	4811      	ldr	r0, [pc, #68]	; (8008320 <sim7600_init+0x1f4>)
 80082da:	f7ff f9c1 	bl	8007660 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 80082de:	4813      	ldr	r0, [pc, #76]	; (800832c <sim7600_init+0x200>)
 80082e0:	f7ff fbf4 	bl	8007acc <LL_USART_Enable>

  //wait until USART DMA is ready
  while(!LL_USART_IsEnabled(USART1) || !LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2));
 80082e4:	bf00      	nop
 80082e6:	4811      	ldr	r0, [pc, #68]	; (800832c <sim7600_init+0x200>)
 80082e8:	f7ff fc10 	bl	8007b0c <LL_USART_IsEnabled>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f9      	beq.n	80082e6 <sim7600_init+0x1ba>
 80082f2:	2102      	movs	r1, #2
 80082f4:	480a      	ldr	r0, [pc, #40]	; (8008320 <sim7600_init+0x1f4>)
 80082f6:	f7ff f9f3 	bl	80076e0 <LL_DMA_IsEnabledStream>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0f2      	beq.n	80082e6 <sim7600_init+0x1ba>

  //power off to debug (don't need to plug out sim7600)
  sim7600_powerOFF();
 8008300:	f7ff fe96 	bl	8008030 <sim7600_powerOFF>

  //power on sim7600
  sim7600_powerON();
 8008304:	f7ff fe76 	bl	8007ff4 <sim7600_powerON>
}
 8008308:	bf00      	nop
 800830a:	3748      	adds	r7, #72	; 0x48
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	2000832c 	.word	0x2000832c
 8008314:	2000582c 	.word	0x2000582c
 8008318:	20005814 	.word	0x20005814
 800831c:	40020000 	.word	0x40020000
 8008320:	40026400 	.word	0x40026400
 8008324:	40011004 	.word	0x40011004
 8008328:	20004484 	.word	0x20004484
 800832c:	40011000 	.word	0x40011000
 8008330:	2000000c 	.word	0x2000000c

08008334 <sim7600_config>:

bool Sim7600BasicConfigSuccess = false;

bool sim7600_config()
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  //osThreadResume(usart_rx_dmaHandle);

  Sim7600BasicConfigSuccess = false;
 8008338:	4b58      	ldr	r3, [pc, #352]	; (800849c <sim7600_config+0x168>)
 800833a:	2200      	movs	r2, #0
 800833c:	701a      	strb	r2, [r3, #0]
  //config until success (connect to server)

  //echo cmd off
  if (!sim7600_send_cmd("ATE0\r\n", "OK", "", 500))
 800833e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008342:	4a57      	ldr	r2, [pc, #348]	; (80084a0 <sim7600_config+0x16c>)
 8008344:	4957      	ldr	r1, [pc, #348]	; (80084a4 <sim7600_config+0x170>)
 8008346:	4858      	ldr	r0, [pc, #352]	; (80084a8 <sim7600_config+0x174>)
 8008348:	f000 fad4 	bl	80088f4 <sim7600_send_cmd>
 800834c:	4603      	mov	r3, r0
 800834e:	f083 0301 	eor.w	r3, r3, #1
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <sim7600_config+0x28>
    return false;
 8008358:	2300      	movs	r3, #0
 800835a:	e09d      	b.n	8008498 <sim7600_config+0x164>
  restartSimstatus = 0; //reset
 800835c:	4b53      	ldr	r3, [pc, #332]	; (80084ac <sim7600_config+0x178>)
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]

  //flow control AT+IFC=0,2 (CTS at sim , and RTS at stm32) at pin pe1
  if (!sim7600_send_cmd("AT+IFC=2,2\r\n", "OK", "", 500))
 8008362:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008366:	4a4e      	ldr	r2, [pc, #312]	; (80084a0 <sim7600_config+0x16c>)
 8008368:	494e      	ldr	r1, [pc, #312]	; (80084a4 <sim7600_config+0x170>)
 800836a:	4851      	ldr	r0, [pc, #324]	; (80084b0 <sim7600_config+0x17c>)
 800836c:	f000 fac2 	bl	80088f4 <sim7600_send_cmd>
 8008370:	4603      	mov	r3, r0
 8008372:	f083 0301 	eor.w	r3, r3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <sim7600_config+0x4c>
    return false;
 800837c:	2300      	movs	r3, #0
 800837e:	e08b      	b.n	8008498 <sim7600_config+0x164>

  //change to main baudrate
  sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", Sim7600BaudMain);
 8008380:	4a4c      	ldr	r2, [pc, #304]	; (80084b4 <sim7600_config+0x180>)
 8008382:	494d      	ldr	r1, [pc, #308]	; (80084b8 <sim7600_config+0x184>)
 8008384:	484d      	ldr	r0, [pc, #308]	; (80084bc <sim7600_config+0x188>)
 8008386:	f001 fc6d 	bl	8009c64 <siprintf>
  if (!sim7600_send_cmd(sim7600_cmd_buff, "OK", "", 500))
 800838a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800838e:	4a44      	ldr	r2, [pc, #272]	; (80084a0 <sim7600_config+0x16c>)
 8008390:	4944      	ldr	r1, [pc, #272]	; (80084a4 <sim7600_config+0x170>)
 8008392:	484a      	ldr	r0, [pc, #296]	; (80084bc <sim7600_config+0x188>)
 8008394:	f000 faae 	bl	80088f4 <sim7600_send_cmd>
 8008398:	4603      	mov	r3, r0
 800839a:	f083 0301 	eor.w	r3, r3, #1
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <sim7600_config+0x74>
    return false;
 80083a4:	2300      	movs	r3, #0
 80083a6:	e077      	b.n	8008498 <sim7600_config+0x164>
  sim7600_change_baud(Sim7600BaudMain);
 80083a8:	4842      	ldr	r0, [pc, #264]	; (80084b4 <sim7600_config+0x180>)
 80083aa:	f001 f9b3 	bl	8009714 <sim7600_change_baud>
  IsBaudrate3Mbps = true;
 80083ae:	4b44      	ldr	r3, [pc, #272]	; (80084c0 <sim7600_config+0x18c>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]

  //check sim
  if (!sim7600_send_cmd("at+ciccid\r\n", "OK", "", 500))
 80083b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083b8:	4a39      	ldr	r2, [pc, #228]	; (80084a0 <sim7600_config+0x16c>)
 80083ba:	493a      	ldr	r1, [pc, #232]	; (80084a4 <sim7600_config+0x170>)
 80083bc:	4841      	ldr	r0, [pc, #260]	; (80084c4 <sim7600_config+0x190>)
 80083be:	f000 fa99 	bl	80088f4 <sim7600_send_cmd>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f083 0301 	eor.w	r3, r3, #1
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <sim7600_config+0x9e>
    return false;
 80083ce:	2300      	movs	r3, #0
 80083d0:	e062      	b.n	8008498 <sim7600_config+0x164>
  if (!sim7600_send_cmd("at+csq\r\n", "OK", "", 500))
 80083d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083d6:	4a32      	ldr	r2, [pc, #200]	; (80084a0 <sim7600_config+0x16c>)
 80083d8:	4932      	ldr	r1, [pc, #200]	; (80084a4 <sim7600_config+0x170>)
 80083da:	483b      	ldr	r0, [pc, #236]	; (80084c8 <sim7600_config+0x194>)
 80083dc:	f000 fa8a 	bl	80088f4 <sim7600_send_cmd>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f083 0301 	eor.w	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <sim7600_config+0xbc>
    return false;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e053      	b.n	8008498 <sim7600_config+0x164>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_send_cmd("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", "", 500))
 80083f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <sim7600_config+0x16c>)
 80083f6:	492b      	ldr	r1, [pc, #172]	; (80084a4 <sim7600_config+0x170>)
 80083f8:	4834      	ldr	r0, [pc, #208]	; (80084cc <sim7600_config+0x198>)
 80083fa:	f000 fa7b 	bl	80088f4 <sim7600_send_cmd>
 80083fe:	4603      	mov	r3, r0
 8008400:	f083 0301 	eor.w	r3, r3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <sim7600_config+0xda>
    return false;
 800840a:	2300      	movs	r3, #0
 800840c:	e044      	b.n	8008498 <sim7600_config+0x164>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 12000(max)
  if (!sim7600_send_cmd("AT+CIPCCFG=10,0,0,1,1,0,3000\r\n", "OK", "", 500))
 800840e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008412:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <sim7600_config+0x16c>)
 8008414:	4923      	ldr	r1, [pc, #140]	; (80084a4 <sim7600_config+0x170>)
 8008416:	482e      	ldr	r0, [pc, #184]	; (80084d0 <sim7600_config+0x19c>)
 8008418:	f000 fa6c 	bl	80088f4 <sim7600_send_cmd>
 800841c:	4603      	mov	r3, r0
 800841e:	f083 0301 	eor.w	r3, r3, #1
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <sim7600_config+0xf8>
    return false;
 8008428:	2300      	movs	r3, #0
 800842a:	e035      	b.n	8008498 <sim7600_config+0x164>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPHEAD=1\r\n", "OK", "", 500))
 800842c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <sim7600_config+0x16c>)
 8008432:	491c      	ldr	r1, [pc, #112]	; (80084a4 <sim7600_config+0x170>)
 8008434:	4827      	ldr	r0, [pc, #156]	; (80084d4 <sim7600_config+0x1a0>)
 8008436:	f000 fa5d 	bl	80088f4 <sim7600_send_cmd>
 800843a:	4603      	mov	r3, r0
 800843c:	f083 0301 	eor.w	r3, r3, #1
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <sim7600_config+0x116>
    return false;
 8008446:	2300      	movs	r3, #0
 8008448:	e026      	b.n	8008498 <sim7600_config+0x164>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPSRIP=0\r\n", "OK", "", 500))
 800844a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800844e:	4a14      	ldr	r2, [pc, #80]	; (80084a0 <sim7600_config+0x16c>)
 8008450:	4914      	ldr	r1, [pc, #80]	; (80084a4 <sim7600_config+0x170>)
 8008452:	4821      	ldr	r0, [pc, #132]	; (80084d8 <sim7600_config+0x1a4>)
 8008454:	f000 fa4e 	bl	80088f4 <sim7600_send_cmd>
 8008458:	4603      	mov	r3, r0
 800845a:	f083 0301 	eor.w	r3, r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <sim7600_config+0x134>
    return false;
 8008464:	2300      	movs	r3, #0
 8008466:	e017      	b.n	8008498 <sim7600_config+0x164>

  Sim7600BasicConfigSuccess = true;
 8008468:	4b0c      	ldr	r3, [pc, #48]	; (800849c <sim7600_config+0x168>)
 800846a:	2201      	movs	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]

  //open net
  if (!sim7600_open_network())
 800846e:	f000 f86b 	bl	8008548 <sim7600_open_network>
 8008472:	4603      	mov	r3, r0
 8008474:	f083 0301 	eor.w	r3, r3, #1
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <sim7600_config+0x14e>
    return false;
 800847e:	2300      	movs	r3, #0
 8008480:	e00a      	b.n	8008498 <sim7600_config+0x164>

  //open udp connect
  //create UDP connect socket at link 1, local port (mot important) 8080
  //AT+CIPOPEN=1,"UDP",,,8080 : \r\n+CIPOPEN: 1,0 or \r\n+CIPOPEN: 1,4
  if (!sim7600_open_udp_connect())
 8008482:	f000 f8b5 	bl	80085f0 <sim7600_open_udp_connect>
 8008486:	4603      	mov	r3, r0
 8008488:	f083 0301 	eor.w	r3, r3, #1
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <sim7600_config+0x162>
    return false;
 8008492:	2300      	movs	r3, #0
 8008494:	e000      	b.n	8008498 <sim7600_config+0x164>
  //open TCP socket with domain
  // if (!sim7600_open_tcp_connect())
  //   return false;

  //success config
  return true;
 8008496:	2301      	movs	r3, #1
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	2000415a 	.word	0x2000415a
 80084a0:	0800afac 	.word	0x0800afac
 80084a4:	0800afb0 	.word	0x0800afb0
 80084a8:	0800afb4 	.word	0x0800afb4
 80084ac:	20004150 	.word	0x20004150
 80084b0:	0800afbc 	.word	0x0800afbc
 80084b4:	002dc6c0 	.word	0x002dc6c0
 80084b8:	0800afcc 	.word	0x0800afcc
 80084bc:	200043bc 	.word	0x200043bc
 80084c0:	20004159 	.word	0x20004159
 80084c4:	0800afd8 	.word	0x0800afd8
 80084c8:	0800afe4 	.word	0x0800afe4
 80084cc:	0800aff0 	.word	0x0800aff0
 80084d0:	0800b014 	.word	0x0800b014
 80084d4:	0800b034 	.word	0x0800b034
 80084d8:	0800b044 	.word	0x0800b044

080084dc <sim7600_update_response>:
//param bool openWithIPv4
//return: 0-success, 1:TCP error(net is good but can't connect). 2:error need to start
//

void sim7600_update_response(const char* _res1, const char* _res2)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  res1Length = strlen(_res1);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f7 fe72 	bl	80001d0 <strlen>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	4b11      	ldr	r3, [pc, #68]	; (8008538 <sim7600_update_response+0x5c>)
 80084f2:	601a      	str	r2, [r3, #0]
  res2Length = strlen(_res2);
 80084f4:	6838      	ldr	r0, [r7, #0]
 80084f6:	f7f7 fe6b 	bl	80001d0 <strlen>
 80084fa:	4603      	mov	r3, r0
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <sim7600_update_response+0x60>)
 8008500:	601a      	str	r2, [r3, #0]
  if(res1Length > 0)  res1 = _res1;
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <sim7600_update_response+0x5c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd03      	ble.n	8008512 <sim7600_update_response+0x36>
 800850a:	4a0d      	ldr	r2, [pc, #52]	; (8008540 <sim7600_update_response+0x64>)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	e002      	b.n	8008518 <sim7600_update_response+0x3c>
  else res1 = NULL;
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <sim7600_update_response+0x64>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
  if(res2Length > 0) res2 = _res2;
 8008518:	4b08      	ldr	r3, [pc, #32]	; (800853c <sim7600_update_response+0x60>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd03      	ble.n	8008528 <sim7600_update_response+0x4c>
 8008520:	4a08      	ldr	r2, [pc, #32]	; (8008544 <sim7600_update_response+0x68>)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6013      	str	r3, [r2, #0]
  else res2 = NULL;
}
 8008526:	e002      	b.n	800852e <sim7600_update_response+0x52>
  else res2 = NULL;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <sim7600_update_response+0x68>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	2000429c 	.word	0x2000429c
 800853c:	200042a8 	.word	0x200042a8
 8008540:	2000424c 	.word	0x2000424c
 8008544:	20004240 	.word	0x20004240

08008548 <sim7600_open_network>:

int sim7600_open_netStatus = 0; // 0 : success, 1 : send cmd
bool sim7600_open_network()
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 800854e:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <sim7600_open_network+0x8c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f04f 31ff 	mov.w	r1, #4294967295
 8008556:	4618      	mov	r0, r3
 8008558:	f7fc f87a 	bl	8004650 <osSemaphoreWait>

  sim7600_update_response("OK", "Network is already opened");
 800855c:	491e      	ldr	r1, [pc, #120]	; (80085d8 <sim7600_open_network+0x90>)
 800855e:	481f      	ldr	r0, [pc, #124]	; (80085dc <sim7600_open_network+0x94>)
 8008560:	f7ff ffbc 	bl	80084dc <sim7600_update_response>

  sim7600_usart_send_string("AT+NETOPEN\r\n");
 8008564:	481e      	ldr	r0, [pc, #120]	; (80085e0 <sim7600_open_network+0x98>)
 8008566:	f000 fa0b 	bl	8008980 <sim7600_usart_send_string>

  sim7600_open_netStatus = 1;
 800856a:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <sim7600_open_network+0x9c>)
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008570:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <sim7600_open_network+0x8c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f7fc f8b9 	bl	80046ec <osSemaphoreRelease>

  int try = 24; // ~ 12s
 800857a:	2318      	movs	r3, #24
 800857c:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(500);
 800857e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008582:	f7ff fd2b 	bl	8007fdc <sim7600_delay_ms>
    if (sim7600_open_netStatus == 0)
 8008586:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <sim7600_open_network+0x9c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <sim7600_open_network+0x4e>
    {
      sim7600_network_IsOpen = true;
 800858e:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <sim7600_open_network+0xa0>)
 8008590:	2201      	movs	r2, #1
 8008592:	701a      	strb	r2, [r3, #0]
      break;
 8008594:	e005      	b.n	80085a2 <sim7600_open_network+0x5a>
    }
  } while (--try);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3b01      	subs	r3, #1
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1ed      	bne.n	800857e <sim7600_open_network+0x36>

  sim7600_open_netStatus = 0;
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <sim7600_open_network+0x9c>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

  sim7600_error = !sim7600_network_IsOpen;
 80085a8:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <sim7600_open_network+0xa0>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bf14      	ite	ne
 80085b0:	2301      	movne	r3, #1
 80085b2:	2300      	moveq	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f083 0301 	eor.w	r3, r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <sim7600_open_network+0xa4>)
 80085c4:	701a      	strb	r2, [r3, #0]

  return sim7600_network_IsOpen;
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <sim7600_open_network+0xa0>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	2000582c 	.word	0x2000582c
 80085d8:	0800b054 	.word	0x0800b054
 80085dc:	0800afb0 	.word	0x0800afb0
 80085e0:	0800b070 	.word	0x0800b070
 80085e4:	20004160 	.word	0x20004160
 80085e8:	20004155 	.word	0x20004155
 80085ec:	20004154 	.word	0x20004154

080085f0 <sim7600_open_udp_connect>:

int sim7600_open_udp_connectStatus = 0; // 1 : send cmd, 0 : success
bool sim7600_open_udp_connect()
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 80085f6:	4b22      	ldr	r3, [pc, #136]	; (8008680 <sim7600_open_udp_connect+0x90>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f04f 31ff 	mov.w	r1, #4294967295
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fc f826 	bl	8004650 <osSemaphoreWait>

  sim7600_update_response("+CIPOPEN: 1,0", "+CIPOPEN: 1,4");
 8008604:	491f      	ldr	r1, [pc, #124]	; (8008684 <sim7600_open_udp_connect+0x94>)
 8008606:	4820      	ldr	r0, [pc, #128]	; (8008688 <sim7600_open_udp_connect+0x98>)
 8008608:	f7ff ff68 	bl	80084dc <sim7600_update_response>

  sim7600_usart_send_string("AT+CIPOPEN=1,\"UDP\",,,8080\r\n");
 800860c:	481f      	ldr	r0, [pc, #124]	; (800868c <sim7600_open_udp_connect+0x9c>)
 800860e:	f000 f9b7 	bl	8008980 <sim7600_usart_send_string>

  sim7600_open_udp_connectStatus = 1;
 8008612:	4b1f      	ldr	r3, [pc, #124]	; (8008690 <sim7600_open_udp_connect+0xa0>)
 8008614:	2201      	movs	r2, #1
 8008616:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008618:	4b19      	ldr	r3, [pc, #100]	; (8008680 <sim7600_open_udp_connect+0x90>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f7fc f865 	bl	80046ec <osSemaphoreRelease>

  int try = 24; // ~ 12s
 8008622:	2318      	movs	r3, #24
 8008624:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(500);
 8008626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800862a:	f7ff fcd7 	bl	8007fdc <sim7600_delay_ms>
    if (sim7600_open_udp_connectStatus == 0)
 800862e:	4b18      	ldr	r3, [pc, #96]	; (8008690 <sim7600_open_udp_connect+0xa0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <sim7600_open_udp_connect+0x54>
    {
      sim7600_udp_IsOpen = true;
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <sim7600_open_udp_connect+0xa4>)
 8008638:	2201      	movs	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
      sim7600_tcp_led_status(1);
 800863c:	2140      	movs	r1, #64	; 0x40
 800863e:	4816      	ldr	r0, [pc, #88]	; (8008698 <sim7600_open_udp_connect+0xa8>)
 8008640:	f7ff fcb1 	bl	8007fa6 <LL_GPIO_ResetOutputPin>
    }
  } while (--try);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3b01      	subs	r3, #1
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1ea      	bne.n	8008626 <sim7600_open_udp_connect+0x36>

  sim7600_open_udp_connectStatus = 0;
 8008650:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <sim7600_open_udp_connect+0xa0>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

  sim7600_error = !sim7600_udp_IsOpen;
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <sim7600_open_udp_connect+0xa4>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	bf14      	ite	ne
 800865e:	2301      	movne	r3, #1
 8008660:	2300      	moveq	r3, #0
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f083 0301 	eor.w	r3, r3, #1
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	b2da      	uxtb	r2, r3
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <sim7600_open_udp_connect+0xac>)
 8008672:	701a      	strb	r2, [r3, #0]

  return sim7600_udp_IsOpen;
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <sim7600_open_udp_connect+0xa4>)
 8008676:	781b      	ldrb	r3, [r3, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	2000582c 	.word	0x2000582c
 8008684:	0800b080 	.word	0x0800b080
 8008688:	0800b090 	.word	0x0800b090
 800868c:	0800b0a0 	.word	0x0800b0a0
 8008690:	20004164 	.word	0x20004164
 8008694:	20004157 	.word	0x20004157
 8008698:	40020000 	.word	0x40020000
 800869c:	20004154 	.word	0x20004154

080086a0 <sim7600_send_packet_ip>:
  return send_ip_packet_success;
}*/

//send packet, type:1 - UDP , type:0 - TCP
bool sim7600_send_packet_ip(int type, uint8_t* data, int data_length)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  if(type == 1) // udp
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d109      	bne.n	80086c6 <sim7600_send_packet_ip+0x26>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 80086b2:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <sim7600_send_packet_ip+0x100>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4b3a      	ldr	r3, [pc, #232]	; (80087a4 <sim7600_send_packet_ip+0x104>)
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	493a      	ldr	r1, [pc, #232]	; (80087a8 <sim7600_send_packet_ip+0x108>)
 80086be:	483b      	ldr	r0, [pc, #236]	; (80087ac <sim7600_send_packet_ip+0x10c>)
 80086c0:	f001 fad0 	bl	8009c64 <siprintf>
 80086c4:	e00d      	b.n	80086e2 <sim7600_send_packet_ip+0x42>
  }
  else if(type == 0) //tcp
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d105      	bne.n	80086d8 <sim7600_send_packet_ip+0x38>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	4938      	ldr	r1, [pc, #224]	; (80087b0 <sim7600_send_packet_ip+0x110>)
 80086d0:	4836      	ldr	r0, [pc, #216]	; (80087ac <sim7600_send_packet_ip+0x10c>)
 80086d2:	f001 fac7 	bl	8009c64 <siprintf>
 80086d6:	e004      	b.n	80086e2 <sim7600_send_packet_ip+0x42>
  }
  else //ssl AT+CCHSEND=0,2
  {
	  sprintf(sim7600_cmd_buff, "AT+CCHSEND=0,%d\r", data_length);
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4936      	ldr	r1, [pc, #216]	; (80087b4 <sim7600_send_packet_ip+0x114>)
 80086dc:	4833      	ldr	r0, [pc, #204]	; (80087ac <sim7600_send_packet_ip+0x10c>)
 80086de:	f001 fac1 	bl	8009c64 <siprintf>
  }

  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 80086e2:	4b35      	ldr	r3, [pc, #212]	; (80087b8 <sim7600_send_packet_ip+0x118>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f04f 31ff 	mov.w	r1, #4294967295
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fb ffb0 	bl	8004650 <osSemaphoreWait>

  sim7600_usart_send_string(sim7600_cmd_buff);
 80086f0:	482e      	ldr	r0, [pc, #184]	; (80087ac <sim7600_send_packet_ip+0x10c>)
 80086f2:	f000 f945 	bl	8008980 <sim7600_usart_send_string>
  sim7600_send_packetStatus1 = 1;
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <sim7600_send_packet_ip+0x11c>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 80086fc:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <sim7600_send_packet_ip+0x118>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fb fff3 	bl	80046ec <osSemaphoreRelease>

  bool send_ip_packet_success = false;
 8008706:	2300      	movs	r3, #0
 8008708:	75fb      	strb	r3, [r7, #23]
  int try = 5;
 800870a:	2305      	movs	r3, #5
 800870c:	613b      	str	r3, [r7, #16]

  do
  {
    sim7600_delay_ms(100);
 800870e:	2064      	movs	r0, #100	; 0x64
 8008710:	f7ff fc64 	bl	8007fdc <sim7600_delay_ms>
    if(sim7600_send_packetStatus1 == 0) //success
 8008714:	4b29      	ldr	r3, [pc, #164]	; (80087bc <sim7600_send_packet_ip+0x11c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <sim7600_send_packet_ip+0x82>
    {
      send_ip_packet_success = true;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]
      break;
 8008720:	e005      	b.n	800872e <sim7600_send_packet_ip+0x8e>
    }
  } while (--try);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	3b01      	subs	r3, #1
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1ef      	bne.n	800870e <sim7600_send_packet_ip+0x6e>

  sim7600_send_packetStatus1 = 0;
 800872e:	4b23      	ldr	r3, [pc, #140]	; (80087bc <sim7600_send_packet_ip+0x11c>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]


  if(send_ip_packet_success)
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d02d      	beq.n	8008796 <sim7600_send_packet_ip+0xf6>
  {
    send_ip_packet_success = false; //reset
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]

    try = 60; // ~ 6s, since timeout set up for AT+CIPSEND is 5s
 800873e:	233c      	movs	r3, #60	; 0x3c
 8008740:	613b      	str	r3, [r7, #16]

    //send data
    //wait to aquire to update res
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <sim7600_send_packet_ip+0x118>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f04f 31ff 	mov.w	r1, #4294967295
 800874a:	4618      	mov	r0, r3
 800874c:	f7fb ff80 	bl	8004650 <osSemaphoreWait>

    sim7600_update_response("OK", "");
 8008750:	491b      	ldr	r1, [pc, #108]	; (80087c0 <sim7600_send_packet_ip+0x120>)
 8008752:	481c      	ldr	r0, [pc, #112]	; (80087c4 <sim7600_send_packet_ip+0x124>)
 8008754:	f7ff fec2 	bl	80084dc <sim7600_update_response>
    sim7600_usart_send_byte(data, data_length);
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	68b8      	ldr	r0, [r7, #8]
 800875c:	f000 f920 	bl	80089a0 <sim7600_usart_send_byte>
    sim7600_send_packetStatus2 = 1;
 8008760:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <sim7600_send_packet_ip+0x128>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]

    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <sim7600_send_packet_ip+0x118>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f7fb ffbe 	bl	80046ec <osSemaphoreRelease>

    do
    {
      sim7600_delay_ms(100);
 8008770:	2064      	movs	r0, #100	; 0x64
 8008772:	f7ff fc33 	bl	8007fdc <sim7600_delay_ms>
      if(sim7600_send_packetStatus2 == 0) //success
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <sim7600_send_packet_ip+0x128>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <sim7600_send_packet_ip+0xe4>
      {
        send_ip_packet_success = true;
 800877e:	2301      	movs	r3, #1
 8008780:	75fb      	strb	r3, [r7, #23]
        break;
 8008782:	e005      	b.n	8008790 <sim7600_send_packet_ip+0xf0>
      }
    } while (--try);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	3b01      	subs	r3, #1
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ef      	bne.n	8008770 <sim7600_send_packet_ip+0xd0>

    sim7600_send_packetStatus2 = 0;
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <sim7600_send_packet_ip+0x128>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
  }

  return send_ip_packet_success;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000074 	.word	0x20000074
 80087a4:	20000010 	.word	0x20000010
 80087a8:	0800b0bc 	.word	0x0800b0bc
 80087ac:	200043bc 	.word	0x200043bc
 80087b0:	0800b0d8 	.word	0x0800b0d8
 80087b4:	0800b0ec 	.word	0x0800b0ec
 80087b8:	2000582c 	.word	0x2000582c
 80087bc:	20004168 	.word	0x20004168
 80087c0:	0800afac 	.word	0x0800afac
 80087c4:	0800afb0 	.word	0x0800afb0
 80087c8:	2000416c 	.word	0x2000416c

080087cc <sim7600_keepAlive_udp>:

int keep_alive_udp_error = 0;
void sim7600_keepAlive_udp()
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  //static firstSendNum = 10;

  //send udp, tcp keep alive every 30s
  if(sim7600_udp_IsOpen)
 80087d0:	4b14      	ldr	r3, [pc, #80]	; (8008824 <sim7600_keepAlive_udp+0x58>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d016      	beq.n	8008806 <sim7600_keepAlive_udp+0x3a>
  {
    if(!sim7600_send_packet_ip(1, "00000002", 8)) keep_alive_udp_error++;
 80087d8:	2208      	movs	r2, #8
 80087da:	4913      	ldr	r1, [pc, #76]	; (8008828 <sim7600_keepAlive_udp+0x5c>)
 80087dc:	2001      	movs	r0, #1
 80087de:	f7ff ff5f 	bl	80086a0 <sim7600_send_packet_ip>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f083 0301 	eor.w	r3, r3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <sim7600_keepAlive_udp+0x2e>
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <sim7600_keepAlive_udp+0x60>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	4a0d      	ldr	r2, [pc, #52]	; (800882c <sim7600_keepAlive_udp+0x60>)
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e005      	b.n	8008806 <sim7600_keepAlive_udp+0x3a>
    else 
    {
      keep_alive_udp_error = 0;
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <sim7600_keepAlive_udp+0x60>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
      printf("request udp done\n");
 8008800:	480b      	ldr	r0, [pc, #44]	; (8008830 <sim7600_keepAlive_udp+0x64>)
 8008802:	f001 fa27 	bl	8009c54 <puts>
    }
  }
  //after 2 time
  if(keep_alive_udp_error >= 10)
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <sim7600_keepAlive_udp+0x60>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b09      	cmp	r3, #9
 800880c:	dd08      	ble.n	8008820 <sim7600_keepAlive_udp+0x54>
  {
    keep_alive_udp_error = 0; // reset
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <sim7600_keepAlive_udp+0x60>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
    sim7600_udp_IsOpen = false;
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <sim7600_keepAlive_udp+0x58>)
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
    sim7600_error= true;
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <sim7600_keepAlive_udp+0x68>)
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]
  }
}
 8008820:	bf00      	nop
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20004157 	.word	0x20004157
 8008828:	0800b100 	.word	0x0800b100
 800882c:	20004170 	.word	0x20004170
 8008830:	0800b10c 	.word	0x0800b10c
 8008834:	20004154 	.word	0x20004154

08008838 <sim7600_handle_error>:
}

//this function run in seperate task have highest priority
//error occur when network or tcp connect is close
void sim7600_handle_error()
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  if(sim7600_have_call)
 800883c:	4b25      	ldr	r3, [pc, #148]	; (80088d4 <sim7600_handle_error+0x9c>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d011      	beq.n	8008868 <sim7600_handle_error+0x30>
  {
    sim7600_have_call = false;
 8008844:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <sim7600_handle_error+0x9c>)
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]

    //wait to aquire to send, wait until
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 800884a:	4b23      	ldr	r3, [pc, #140]	; (80088d8 <sim7600_handle_error+0xa0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f04f 31ff 	mov.w	r1, #4294967295
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fefc 	bl	8004650 <osSemaphoreWait>
    sim7600_usart_send_string("AT+CHUP\r\n");
 8008858:	4820      	ldr	r0, [pc, #128]	; (80088dc <sim7600_handle_error+0xa4>)
 800885a:	f000 f891 	bl	8008980 <sim7600_usart_send_string>
    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 800885e:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <sim7600_handle_error+0xa0>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7fb ff42 	bl	80046ec <osSemaphoreRelease>
  }
  if (sim7600_error)
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <sim7600_handle_error+0xa8>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d02f      	beq.n	80088d0 <sim7600_handle_error+0x98>
  {
    //turn of led
    sim7600_tcp_led_status(0);
 8008870:	2140      	movs	r1, #64	; 0x40
 8008872:	481c      	ldr	r0, [pc, #112]	; (80088e4 <sim7600_handle_error+0xac>)
 8008874:	f7ff fb89 	bl	8007f8a <LL_GPIO_SetOutputPin>
    //check whether basic config is success?
    //if success, check network again, if network false, restart, if still work, open tcp and udp again (then return -> don not restart)
    if (Sim7600BasicConfigSuccess)
 8008878:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <sim7600_handle_error+0xb0>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01d      	beq.n	80088bc <sim7600_handle_error+0x84>
    {
      //check network is open or closed(open again)
      if(!sim7600_network_IsOpen) sim7600_open_network();
 8008880:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <sim7600_handle_error+0xb4>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f083 0301 	eor.w	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <sim7600_handle_error+0x5a>
 800888e:	f7ff fe5b 	bl	8008548 <sim7600_open_network>

      //after above step if network open success, continue open tcp
      if (sim7600_network_IsOpen)
 8008892:	4b16      	ldr	r3, [pc, #88]	; (80088ec <sim7600_handle_error+0xb4>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d010      	beq.n	80088bc <sim7600_handle_error+0x84>
      {
        //network still open, check udp, tcp connect
        if(!sim7600_udp_IsOpen) sim7600_open_udp_connect();
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <sim7600_handle_error+0xb8>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f083 0301 	eor.w	r3, r3, #1
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <sim7600_handle_error+0x74>
 80088a8:	f7ff fea2 	bl	80085f0 <sim7600_open_udp_connect>
        //if(!sim7600_tcp_IsOpen) sim7600_open_tcp_connect();
        if(sim7600_udp_IsOpen)
 80088ac:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <sim7600_handle_error+0xb8>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <sim7600_handle_error+0x84>
        {
        	sim7600_error = false;
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <sim7600_handle_error+0xa8>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
        	return; //when network and udp is ok
 80088ba:	e009      	b.n	80088d0 <sim7600_handle_error+0x98>
      }
    }

    //if basic config is not success or network false -> restart and config again
    //turn status (play->stop) and disable uart before restart
    sim7600_restart();
 80088bc:	f000 ff42 	bl	8009744 <sim7600_restart>
    if (sim7600_config())
 80088c0:	f7ff fd38 	bl	8008334 <sim7600_config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <sim7600_handle_error+0x98>
      sim7600_error = false;
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <sim7600_handle_error+0xa8>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
  }

  //update led error
  //if sim7600_error == true, turn on and vice versa
}
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20004158 	.word	0x20004158
 80088d8:	2000582c 	.word	0x2000582c
 80088dc:	0800b160 	.word	0x0800b160
 80088e0:	20004154 	.word	0x20004154
 80088e4:	40020000 	.word	0x40020000
 80088e8:	2000415a 	.word	0x2000415a
 80088ec:	20004155 	.word	0x20004155
 80088f0:	20004157 	.word	0x20004157

080088f4 <sim7600_send_cmd>:

//send command (auto add "\r\n"), with timeout, if > timeout -> reset by
int cmdSendStatus = 0; // 1: sended, 0: ok
bool sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
  

  sim7600_update_response(response1, response2);
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	68b8      	ldr	r0, [r7, #8]
 8008906:	f7ff fde9 	bl	80084dc <sim7600_update_response>
  int try = timeout / 100;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <sim7600_send_cmd+0x80>)
 800890e:	fb82 1203 	smull	r1, r2, r2, r3
 8008912:	1152      	asrs	r2, r2, #5
 8008914:	17db      	asrs	r3, r3, #31
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	617b      	str	r3, [r7, #20]
  bool send_cmd_success = false;
 800891a:	2300      	movs	r3, #0
 800891c:	74fb      	strb	r3, [r7, #19]
  do
  {
    //wait to aquire to update res
    osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 800891e:	4b16      	ldr	r3, [pc, #88]	; (8008978 <sim7600_send_cmd+0x84>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f04f 31ff 	mov.w	r1, #4294967295
 8008926:	4618      	mov	r0, r3
 8008928:	f7fb fe92 	bl	8004650 <osSemaphoreWait>

    sim7600_usart_send_string(cmd);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f827 	bl	8008980 <sim7600_usart_send_string>

    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008932:	4b11      	ldr	r3, [pc, #68]	; (8008978 <sim7600_send_cmd+0x84>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb fed8 	bl	80046ec <osSemaphoreRelease>

    cmdSendStatus = 1;
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <sim7600_send_cmd+0x88>)
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
    sim7600_delay_ms(100); //10ms receive max 100 bytes with baud = 115200
 8008942:	2064      	movs	r0, #100	; 0x64
 8008944:	f7ff fb4a 	bl	8007fdc <sim7600_delay_ms>
    if (cmdSendStatus == 0)
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <sim7600_send_cmd+0x88>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <sim7600_send_cmd+0x62>
    {
      send_cmd_success = true;
 8008950:	2301      	movs	r3, #1
 8008952:	74fb      	strb	r3, [r7, #19]
      break;
 8008954:	e005      	b.n	8008962 <sim7600_send_cmd+0x6e>
    }
  } while (--try);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	3b01      	subs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1dd      	bne.n	800891e <sim7600_send_cmd+0x2a>

  cmdSendStatus = 0; // reset
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <sim7600_send_cmd+0x88>)
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

  return send_cmd_success;
 8008968:	7cfb      	ldrb	r3, [r7, #19]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	51eb851f 	.word	0x51eb851f
 8008978:	2000582c 	.word	0x2000582c
 800897c:	20004178 	.word	0x20004178

08008980 <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  sim7600_usart_send_byte(str, strlen(str));
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7f7 fc21 	bl	80001d0 <strlen>
 800898e:	4603      	mov	r3, r0
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f804 	bl	80089a0 <sim7600_usart_send_byte>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  const uint8_t *d = data;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 80089ae:	e016      	b.n	80089de <sim7600_usart_send_byte+0x3e>
  {
    LL_USART_TransmitData8(usartSim7600, *d);
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <sim7600_usart_send_byte+0x60>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7ff fad6 	bl	8007f6c <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(usartSim7600));
 80089c0:	bf00      	nop
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <sim7600_usart_send_byte+0x60>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fa8d 	bl	8007ee6 <LL_USART_IsActiveFlag_TXE>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f7      	beq.n	80089c2 <sim7600_usart_send_byte+0x22>
  for (; len > 0; --len, ++d)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	dce5      	bgt.n	80089b0 <sim7600_usart_send_byte+0x10>
  }
  while (!LL_USART_IsActiveFlag_TC(usartSim7600));
 80089e4:	bf00      	nop
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <sim7600_usart_send_byte+0x60>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fa68 	bl	8007ec0 <LL_USART_IsActiveFlag_TC>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f7      	beq.n	80089e6 <sim7600_usart_send_byte+0x46>
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	2000000c 	.word	0x2000000c

08008a04 <sim7600_usart_rx_check>:
volatile uint16_t ndtr_dma, ndtr_dma2;
volatile int returnTmp = 0;
volatile int timeHandle_usart_rx_check_us = 0; //debug
volatile int timeHandle_usart_rx_check_us_max = 0; //debug
void sim7600_usart_rx_check()
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
	TIM3->CNT = 0; //debug
 8008a08:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <sim7600_usart_rx_check+0x140>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Calculate current position in buffer */

  ndtr_dma = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8008a0e:	2102      	movs	r1, #2
 8008a10:	484d      	ldr	r0, [pc, #308]	; (8008b48 <sim7600_usart_rx_check+0x144>)
 8008a12:	f7fe ffa1 	bl	8007958 <LL_DMA_GetDataLength>
 8008a16:	4603      	mov	r3, r0
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	4b4c      	ldr	r3, [pc, #304]	; (8008b4c <sim7600_usart_rx_check+0x148>)
 8008a1c:	801a      	strh	r2, [r3, #0]
  pos = sim_dma_buffer_size - (int)ndtr_dma;
 8008a1e:	4b4b      	ldr	r3, [pc, #300]	; (8008b4c <sim7600_usart_rx_check+0x148>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8008a28:	3308      	adds	r3, #8
 8008a2a:	4a49      	ldr	r2, [pc, #292]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008a2c:	6013      	str	r3, [r2, #0]
  // if(pos > (2*sim_dma_buffer_size))
  // {
	//   pos = 0;
  // }
  //pos = sim_dma_buffer_size - dma_NDTR;
  if (pos != old_pos)
 8008a2e:	4b48      	ldr	r3, [pc, #288]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b48      	ldr	r3, [pc, #288]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d066      	beq.n	8008b08 <sim7600_usart_rx_check+0x104>
  { /* Check change in received data */
    if (pos > old_pos)
 8008a3a:	4b45      	ldr	r3, [pc, #276]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b45      	ldr	r3, [pc, #276]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	dd12      	ble.n	8008a6c <sim7600_usart_rx_check+0x68>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos);
      sim_buff_length = pos - old_pos;
 8008a46:	4b42      	ldr	r3, [pc, #264]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	4b42      	ldr	r3, [pc, #264]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	4a41      	ldr	r2, [pc, #260]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008a52:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8008a54:	4b3f      	ldr	r3, [pc, #252]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <sim7600_usart_rx_check+0x158>)
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4a3e      	ldr	r2, [pc, #248]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	483e      	ldr	r0, [pc, #248]	; (8008b60 <sim7600_usart_rx_check+0x15c>)
 8008a66:	f001 f859 	bl	8009b1c <memcpy>
 8008a6a:	e027      	b.n	8008abc <sim7600_usart_rx_check+0xb8>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buffer_size - old_pos;
 8008a6c:	4b39      	ldr	r3, [pc, #228]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8008a74:	3308      	adds	r3, #8
 8008a76:	4a38      	ldr	r2, [pc, #224]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008a78:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8008a7a:	4b36      	ldr	r3, [pc, #216]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <sim7600_usart_rx_check+0x158>)
 8008a82:	4413      	add	r3, r2
 8008a84:	4a34      	ldr	r2, [pc, #208]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4835      	ldr	r0, [pc, #212]	; (8008b60 <sim7600_usart_rx_check+0x15c>)
 8008a8c:	f001 f846 	bl	8009b1c <memcpy>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8008a90:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dd11      	ble.n	8008abc <sim7600_usart_rx_check+0xb8>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], pos);
        memcpy(sim_buff + sim_buff_length, sim_dma_buffer, pos);
 8008a98:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b30      	ldr	r3, [pc, #192]	; (8008b60 <sim7600_usart_rx_check+0x15c>)
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4a2b      	ldr	r2, [pc, #172]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	492d      	ldr	r1, [pc, #180]	; (8008b5c <sim7600_usart_rx_check+0x158>)
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 f837 	bl	8009b1c <memcpy>
        sim_buff_length += pos;
 8008aae:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	4a27      	ldr	r2, [pc, #156]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008aba:	6013      	str	r3, [r2, #0]
      }
    }
    sim7600_resume_rx_uart_dma();
 8008abc:	f7ff fa82 	bl	8007fc4 <sim7600_resume_rx_uart_dma>
    //old_pos = pos; /* Save current position as old */
    returnTmp = sim7600_handle_received_data();
 8008ac0:	f000 f896 	bl	8008bf0 <sim7600_handle_received_data>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <sim7600_usart_rx_check+0x160>)
 8008ac8:	6013      	str	r3, [r2, #0]
    if(returnTmp < 0) //something wrong
 8008aca:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <sim7600_usart_rx_check+0x160>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da04      	bge.n	8008adc <sim7600_usart_rx_check+0xd8>
    {
    	old_pos = pos;
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <sim7600_usart_rx_check+0x14c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008ad8:	6013      	str	r3, [r2, #0]
    	return;
 8008ada:	e032      	b.n	8008b42 <sim7600_usart_rx_check+0x13e>
    }
    // if(old_pos > (2*sim_dma_buffer_size))
    // {
    // 	old_pos = 0;
    // }
    old_pos += returnTmp;
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <sim7600_usart_rx_check+0x160>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a1b      	ldr	r2, [pc, #108]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008ae8:	6013      	str	r3, [r2, #0]
    old_pos %= sim_dma_buffer_size; // ~ if(old_pos >= sim_dma_buffer_size) old_pos -= sim_dma_buffer_size;
 8008aea:	4b1a      	ldr	r3, [pc, #104]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <sim7600_usart_rx_check+0x164>)
 8008af0:	fb83 1302 	smull	r1, r3, r3, r2
 8008af4:	12d9      	asrs	r1, r3, #11
 8008af6:	17d3      	asrs	r3, r2, #31
 8008af8:	1acb      	subs	r3, r1, r3
 8008afa:	f241 3188 	movw	r1, #5000	; 0x1388
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <sim7600_usart_rx_check+0x150>)
 8008b06:	6013      	str	r3, [r2, #0]
  //ndtr_dma2 = LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
  /*if(ndtr_dma2 != ndtr_dma)
  {
	  printf("error");
  }*/
  if(sim_buff_length > 3000)
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <sim7600_usart_rx_check+0x154>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008b10:	4293      	cmp	r3, r2
 8008b12:	dd02      	ble.n	8008b1a <sim7600_usart_rx_check+0x116>
  {
	  printf("st wrong");
 8008b14:	4815      	ldr	r0, [pc, #84]	; (8008b6c <sim7600_usart_rx_check+0x168>)
 8008b16:	f001 f817 	bl	8009b48 <iprintf>
  }

  sim7600_resume_rx_uart_dma();
 8008b1a:	f7ff fa53 	bl	8007fc4 <sim7600_resume_rx_uart_dma>
  //debug
  timeHandle_usart_rx_check_us = TIM3->CNT;
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <sim7600_usart_rx_check+0x140>)
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	461a      	mov	r2, r3
 8008b24:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <sim7600_usart_rx_check+0x16c>)
 8008b26:	601a      	str	r2, [r3, #0]
  //debug
  timeHandle_usart_rx_check_us_max = timeHandle_usart_rx_check_us > timeHandle_usart_rx_check_us_max ? timeHandle_usart_rx_check_us : timeHandle_usart_rx_check_us_max;
 8008b28:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <sim7600_usart_rx_check+0x16c>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <sim7600_usart_rx_check+0x170>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	dd02      	ble.n	8008b3a <sim7600_usart_rx_check+0x136>
 8008b34:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <sim7600_usart_rx_check+0x16c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	e001      	b.n	8008b3e <sim7600_usart_rx_check+0x13a>
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <sim7600_usart_rx_check+0x170>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <sim7600_usart_rx_check+0x170>)
 8008b40:	6013      	str	r3, [r2, #0]
}
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	40000400 	.word	0x40000400
 8008b48:	40026400 	.word	0x40026400
 8008b4c:	200043b4 	.word	0x200043b4
 8008b50:	20004180 	.word	0x20004180
 8008b54:	2000417c 	.word	0x2000417c
 8008b58:	2000580c 	.word	0x2000580c
 8008b5c:	20004484 	.word	0x20004484
 8008b60:	2000832c 	.word	0x2000832c
 8008b64:	20004184 	.word	0x20004184
 8008b68:	68db8bad 	.word	0x68db8bad
 8008b6c:	0800b16c 	.word	0x0800b16c
 8008b70:	20004188 	.word	0x20004188
 8008b74:	2000418c 	.word	0x2000418c

08008b78 <check_normal_response>:
int errorSizeFrameNum = 0, errorSizeFrameNum2 = 0;
int errorSizeFrame;

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index
__STATIC_INLINE int check_normal_response(uint8_t* posOfSubStr, const char* response, int* sim_buff_index ) //macro
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  //check whether have \r\n at the end of this response
  posOfSubStr += strlen(response); //point to position right after the last character of response on sim_buff
 8008b84:	68b8      	ldr	r0, [r7, #8]
 8008b86:	f7f7 fb23 	bl	80001d0 <strlen>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]
  //in the worst case the last character of response is last character of sim_buff
  // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
  uint8_t *pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 8008b92:	4914      	ldr	r1, [pc, #80]	; (8008be4 <check_normal_response+0x6c>)
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f001 f885 	bl	8009ca4 <strstr>
 8008b9a:	6178      	str	r0, [r7, #20]
  if (pointerTo_r_n != NULL)
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <check_normal_response+0x3a>
  {
    //perfect sastified
    //change sim_buff_index
    *sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	4a10      	ldr	r2, [pc, #64]	; (8008be8 <check_normal_response+0x70>)
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	1c9a      	adds	r2, r3, #2
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
    return 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e013      	b.n	8008bda <check_normal_response+0x62>
  }
  else if (posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case, have enough bytes but can't sastified
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <check_normal_response+0x74>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <check_normal_response+0x70>)
 8008bc0:	440b      	add	r3, r1
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d208      	bcs.n	8008bd8 <check_normal_response+0x60>
  {
    //data may be error-bit
    *sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a07      	ldr	r2, [pc, #28]	; (8008be8 <check_normal_response+0x70>)
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
    return 1;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <check_normal_response+0x62>
  }
  else
    //return sim_buff_index; don't have enough data
    return 2;
 8008bd8:	2302      	movs	r3, #2
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	0800b178 	.word	0x0800b178
 8008be8:	2000832c 	.word	0x2000832c
 8008bec:	2000580c 	.word	0x2000580c

08008bf0 <sim7600_handle_received_data>:
                  //.. cmd check
};

//return num of bytes handled
int sim7600_handle_received_data()
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08c      	sub	sp, #48	; 0x30
 8008bf4:	af00      	add	r7, sp, #0
  //handle received data

  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 8008bf6:	4b9e      	ldr	r3, [pc, #632]	; (8008e70 <sim7600_handle_received_data+0x280>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a9e      	ldr	r2, [pc, #632]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	54d1      	strb	r1, [r2, r3]
  uint8_t* posOfSubStr = NULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t* posOfSubStrSave = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	62bb      	str	r3, [r7, #40]	; 0x28
  int sim_buff_index = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	607b      	str	r3, [r7, #4]

  while (true)
  {
    posOfSubStr = NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    posOfSubStrSave = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28
    if(sim_buff_index >= sim_buff_length) return sim_buff_length;
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4b96      	ldr	r3, [pc, #600]	; (8008e70 <sim7600_handle_received_data+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	db02      	blt.n	8008c24 <sim7600_handle_received_data+0x34>
 8008c1e:	4b94      	ldr	r3, [pc, #592]	; (8008e70 <sim7600_handle_received_data+0x280>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	e21e      	b.n	8009062 <sim7600_handle_received_data+0x472>
    if(*(sim_buff + sim_buff_index) == '\0') //ignore wrong data
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	461a      	mov	r2, r3
 8008c28:	4b92      	ldr	r3, [pc, #584]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <sim7600_handle_received_data+0x4a>
    {
    	sim_buff_index++;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3301      	adds	r3, #1
 8008c36:	607b      	str	r3, [r7, #4]
    	continue;
 8008c38:	e1ec      	b.n	8009014 <sim7600_handle_received_data+0x424>

    //memcpy(printf_buff, sim_buff + sim_buff_index, 9);
    //printf("%s : %d", printf_buff, sim_buff_length);
    //check what response is appeared earliest

    int resultCheck = -1;
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
    //first cmd response
    int checkCmdResLength;
    if (cmdSendStatus || sim7600_open_tcp_connectStatus || sim7600_open_udp_connectStatus || sim7600_open_netStatus
 8008c40:	4b8d      	ldr	r3, [pc, #564]	; (8008e78 <sim7600_handle_received_data+0x288>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10f      	bne.n	8008c68 <sim7600_handle_received_data+0x78>
 8008c48:	4b8c      	ldr	r3, [pc, #560]	; (8008e7c <sim7600_handle_received_data+0x28c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <sim7600_handle_received_data+0x78>
 8008c50:	4b8b      	ldr	r3, [pc, #556]	; (8008e80 <sim7600_handle_received_data+0x290>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d107      	bne.n	8008c68 <sim7600_handle_received_data+0x78>
 8008c58:	4b8a      	ldr	r3, [pc, #552]	; (8008e84 <sim7600_handle_received_data+0x294>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <sim7600_handle_received_data+0x78>
      || sim7600_send_packetStatus2)
 8008c60:	4b89      	ldr	r3, [pc, #548]	; (8008e88 <sim7600_handle_received_data+0x298>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d026      	beq.n	8008cb6 <sim7600_handle_received_data+0xc6>
    {
      if(res1 != NULL)
 8008c68:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <sim7600_handle_received_data+0x29c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <sim7600_handle_received_data+0x9c>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	461a      	mov	r2, r3
 8008c74:	4b7f      	ldr	r3, [pc, #508]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008c76:	4413      	add	r3, r2
 8008c78:	4a84      	ldr	r2, [pc, #528]	; (8008e8c <sim7600_handle_received_data+0x29c>)
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 f810 	bl	8009ca4 <strstr>
 8008c84:	62f8      	str	r0, [r7, #44]	; 0x2c
        checkCmdResLength = res1Length;
 8008c86:	4b82      	ldr	r3, [pc, #520]	; (8008e90 <sim7600_handle_received_data+0x2a0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	623b      	str	r3, [r7, #32]
      }
      if (posOfSubStr == NULL && res2 != NULL)
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d111      	bne.n	8008cb6 <sim7600_handle_received_data+0xc6>
 8008c92:	4b80      	ldr	r3, [pc, #512]	; (8008e94 <sim7600_handle_received_data+0x2a4>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00d      	beq.n	8008cb6 <sim7600_handle_received_data+0xc6>
      {
          posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4b75      	ldr	r3, [pc, #468]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4a7c      	ldr	r2, [pc, #496]	; (8008e94 <sim7600_handle_received_data+0x2a4>)
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fffb 	bl	8009ca4 <strstr>
 8008cae:	62f8      	str	r0, [r7, #44]	; 0x2c
          checkCmdResLength = res2Length;
 8008cb0:	4b79      	ldr	r3, [pc, #484]	; (8008e98 <sim7600_handle_received_data+0x2a8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	623b      	str	r3, [r7, #32]
      }
    }
    if(posOfSubStr != NULL)
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <sim7600_handle_received_data+0xd4>
    {
      posOfSubStrSave = posOfSubStr;
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      resultCheck = listResponseSize;
 8008cc0:	2307      	movs	r3, #7
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    //check in list
    for(int i = 0; i < listResponseSize; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e024      	b.n	8008d14 <sim7600_handle_received_data+0x124>
    {
      posOfSubStr = strstr(sim_buff + sim_buff_index, listResponse[i]);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b69      	ldr	r3, [pc, #420]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008cd0:	18d0      	adds	r0, r2, r3
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a6f      	ldr	r2, [pc, #444]	; (8008e9c <sim7600_handle_received_data+0x2ac>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	f000 ffdf 	bl	8009ca4 <strstr>
 8008ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(posOfSubStr != NULL)
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00f      	beq.n	8008d0e <sim7600_handle_received_data+0x11e>
      {
        if(posOfSubStrSave == NULL)
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <sim7600_handle_received_data+0x10e>
        {
          posOfSubStrSave = posOfSubStr;
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	62bb      	str	r3, [r7, #40]	; 0x28
          resultCheck = i;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfc:	e007      	b.n	8008d0e <sim7600_handle_received_data+0x11e>
        }
        //else posOfSubStrSave = (posOfSubStr < posOfSubStrSave) ? posOfSubStr : posOfSubStrSave;
        else
        {
          if(posOfSubStr < posOfSubStrSave)
 8008cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d203      	bcs.n	8008d0e <sim7600_handle_received_data+0x11e>
          {
            posOfSubStrSave = posOfSubStr;
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
            resultCheck = i;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i = 0; i < listResponseSize; i++)
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	3301      	adds	r3, #1
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b06      	cmp	r3, #6
 8008d18:	ddd7      	ble.n	8008cca <sim7600_handle_received_data+0xda>
          }
        }
      }
    }

    int resultTmp = -1;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	61bb      	str	r3, [r7, #24]
    if (resultCheck < 0){break;} // nothing
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da00      	bge.n	8008d28 <sim7600_handle_received_data+0x138>
 8008d26:	e176      	b.n	8009016 <sim7600_handle_received_data+0x426>
    else if (resultCheck == 0) //udp received
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d164      	bne.n	8008df8 <sim7600_handle_received_data+0x208>
    {
      //check whether have \r\n at buffer
      posOfSubStrSave += strlen(listResponse[resultCheck]);                 //point to lenght of udp packet (right after ",1,")
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a58      	ldr	r2, [pc, #352]	; (8008e9c <sim7600_handle_received_data+0x2ac>)
 8008d3a:	4413      	add	r3, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f7 fa47 	bl	80001d0 <strlen>
 8008d42:	4602      	mov	r2, r0
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	4413      	add	r3, r2
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t *pointerTo_r_n = strstr(posOfSubStrSave, "\r\n"); //point to '\r'
 8008d4a:	4955      	ldr	r1, [pc, #340]	; (8008ea0 <sim7600_handle_received_data+0x2b0>)
 8008d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4e:	f000 ffa9 	bl	8009ca4 <strstr>
 8008d52:	60f8      	str	r0, [r7, #12]
      //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
      // ->  posOfSubStrSave point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
      if (pointerTo_r_n != NULL)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d03d      	beq.n	8008dd6 <sim7600_handle_received_data+0x1e6>
      {
        int lengthOfUdpPacket = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
        while (posOfSubStrSave != pointerTo_r_n) //make sure break when meet '\r'
 8008d5e:	e01c      	b.n	8008d9a <sim7600_handle_received_data+0x1aa>
        {
          char numberTmp = (*posOfSubStrSave);
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	72fb      	strb	r3, [r7, #11]
          if (numberTmp >= '0' && numberTmp <= '9')
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	2b2f      	cmp	r3, #47	; 0x2f
 8008d6a:	d910      	bls.n	8008d8e <sim7600_handle_received_data+0x19e>
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	2b39      	cmp	r3, #57	; 0x39
 8008d70:	d80d      	bhi.n	8008d8e <sim7600_handle_received_data+0x19e>
          {
            lengthOfUdpPacket = lengthOfUdpPacket * 10 + numberTmp - '0';
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	4413      	add	r3, r2
 8008d82:	3b30      	subs	r3, #48	; 0x30
 8008d84:	617b      	str	r3, [r7, #20]
          else //data maybe bit-error
          {
            sim_buff_index = pointerTo_r_n - sim_buff + 2; // +2 since "\r\n"
            continue;
          }
          posOfSubStrSave++;
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	3301      	adds	r3, #1
 8008d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d8c:	e005      	b.n	8008d9a <sim7600_handle_received_data+0x1aa>
            sim_buff_index = pointerTo_r_n - sim_buff + 2; // +2 since "\r\n"
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4a38      	ldr	r2, [pc, #224]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	3302      	adds	r3, #2
 8008d96:	607b      	str	r3, [r7, #4]
            continue;
 8008d98:	bf00      	nop
        while (posOfSubStrSave != pointerTo_r_n) //make sure break when meet '\r'
 8008d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d1de      	bne.n	8008d60 <sim7600_handle_received_data+0x170>
        }
        posOfSubStrSave += 2;                                                 //point to data
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	3302      	adds	r3, #2
 8008da6:	62bb      	str	r3, [r7, #40]	; 0x28
        if (posOfSubStrSave + lengthOfUdpPacket > sim_buff + sim_buff_length) // don't have enough data
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dac:	441a      	add	r2, r3
 8008dae:	4b30      	ldr	r3, [pc, #192]	; (8008e70 <sim7600_handle_received_data+0x280>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4b2f      	ldr	r3, [pc, #188]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008db6:	440b      	add	r3, r1
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d901      	bls.n	8008dc0 <sim7600_handle_received_data+0x1d0>
          return sim_buff_index;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	e150      	b.n	8009062 <sim7600_handle_received_data+0x472>
        //else data is sastified
        sim7600_handle_udp_packet(posOfSubStrSave, lengthOfUdpPacket);
 8008dc0:	6979      	ldr	r1, [r7, #20]
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc4:	f000 f972 	bl	80090ac <sim7600_handle_udp_packet>
        sim_buff_index = posOfSubStrSave - sim_buff + lengthOfUdpPacket;
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	4a2a      	ldr	r2, [pc, #168]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008dcc:	1a9a      	subs	r2, r3, r2
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	607b      	str	r3, [r7, #4]
        continue;
 8008dd4:	e11e      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
      else if (posOfSubStrSave + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,9999\r\n
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	1d9a      	adds	r2, r3, #6
 8008dda:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <sim7600_handle_received_data+0x280>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4619      	mov	r1, r3
 8008de0:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008de2:	440b      	add	r3, r1
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d205      	bcs.n	8008df4 <sim7600_handle_received_data+0x204>
      {
        //data may be error-bit
        sim_buff_index = posOfSubStrSave - sim_buff + 6;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	4a22      	ldr	r2, [pc, #136]	; (8008e74 <sim7600_handle_received_data+0x284>)
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	3306      	adds	r3, #6
 8008df0:	607b      	str	r3, [r7, #4]
        continue;
 8008df2:	e10f      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
      else
        return sim_buff_index; //dont have enough data
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	e134      	b.n	8009062 <sim7600_handle_received_data+0x472>
    }
    else if (resultCheck == 1) //1 net error
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d11d      	bne.n	8008e3a <sim7600_handle_received_data+0x24a>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <sim7600_handle_received_data+0x2ac>)
 8008e0a:	4413      	add	r3, r2
 8008e0c:	1d3a      	adds	r2, r7, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e12:	f7ff feb1 	bl	8008b78 <check_normal_response>
 8008e16:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 80f4 	bne.w	8009008 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_network_IsOpen = false;
 8008e20:	4b20      	ldr	r3, [pc, #128]	; (8008ea4 <sim7600_handle_received_data+0x2b4>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
        sim7600_udp_IsOpen = false;
 8008e26:	4b20      	ldr	r3, [pc, #128]	; (8008ea8 <sim7600_handle_received_data+0x2b8>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
        sim7600_tcp_IsOpen = false;
 8008e2c:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <sim7600_handle_received_data+0x2bc>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 8008e32:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <sim7600_handle_received_data+0x2c0>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	701a      	strb	r2, [r3, #0]
        continue;
 8008e38:	e0ec      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 2) //2 udp closed
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d139      	bne.n	8008eb4 <sim7600_handle_received_data+0x2c4>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4a14      	ldr	r2, [pc, #80]	; (8008e9c <sim7600_handle_received_data+0x2ac>)
 8008e4c:	4413      	add	r3, r2
 8008e4e:	1d3a      	adds	r2, r7, #4
 8008e50:	4619      	mov	r1, r3
 8008e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e54:	f7ff fe90 	bl	8008b78 <check_normal_response>
 8008e58:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 80d3 	bne.w	8009008 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_udp_IsOpen = false;
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <sim7600_handle_received_data+0x2b8>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <sim7600_handle_received_data+0x2c0>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	701a      	strb	r2, [r3, #0]
        continue;
 8008e6e:	e0d1      	b.n	8009014 <sim7600_handle_received_data+0x424>
 8008e70:	2000580c 	.word	0x2000580c
 8008e74:	2000832c 	.word	0x2000832c
 8008e78:	20004178 	.word	0x20004178
 8008e7c:	20004174 	.word	0x20004174
 8008e80:	20004164 	.word	0x20004164
 8008e84:	20004160 	.word	0x20004160
 8008e88:	2000416c 	.word	0x2000416c
 8008e8c:	2000424c 	.word	0x2000424c
 8008e90:	2000429c 	.word	0x2000429c
 8008e94:	20004240 	.word	0x20004240
 8008e98:	200042a8 	.word	0x200042a8
 8008e9c:	20000078 	.word	0x20000078
 8008ea0:	0800b178 	.word	0x0800b178
 8008ea4:	20004155 	.word	0x20004155
 8008ea8:	20004157 	.word	0x20004157
 8008eac:	20004156 	.word	0x20004156
 8008eb0:	20004154 	.word	0x20004154
      }
    }
    else if (resultCheck == 3) //3 can't open udp since network
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d11a      	bne.n	8008ef0 <sim7600_handle_received_data+0x300>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4a69      	ldr	r2, [pc, #420]	; (800906c <sim7600_handle_received_data+0x47c>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	1d3a      	adds	r2, r7, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ece:	f7ff fe53 	bl	8008b78 <check_normal_response>
 8008ed2:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 8096 	bne.w	8009008 <sim7600_handle_received_data+0x418>
      {
        //sim7600 error, handle in a task sim7600 config task
        sim7600_network_IsOpen = false;
 8008edc:	4b64      	ldr	r3, [pc, #400]	; (8009070 <sim7600_handle_received_data+0x480>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
        sim7600_udp_IsOpen = false;
 8008ee2:	4b64      	ldr	r3, [pc, #400]	; (8009074 <sim7600_handle_received_data+0x484>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
        sim7600_error = true;
 8008ee8:	4b63      	ldr	r3, [pc, #396]	; (8009078 <sim7600_handle_received_data+0x488>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	701a      	strb	r2, [r3, #0]
        continue;
 8008eee:	e091      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 4) //4 call
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d113      	bne.n	8008f1e <sim7600_handle_received_data+0x32e>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4a5a      	ldr	r2, [pc, #360]	; (800906c <sim7600_handle_received_data+0x47c>)
 8008f02:	4413      	add	r3, r2
 8008f04:	1d3a      	adds	r2, r7, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0a:	f7ff fe35 	bl	8008b78 <check_normal_response>
 8008f0e:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d178      	bne.n	8009008 <sim7600_handle_received_data+0x418>
      {
        sim7600_have_call = true;
 8008f16:	4b59      	ldr	r3, [pc, #356]	; (800907c <sim7600_handle_received_data+0x48c>)
 8008f18:	2201      	movs	r2, #1
 8008f1a:	701a      	strb	r2, [r3, #0]
        continue;
 8008f1c:	e07a      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 5) //sms
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	2b05      	cmp	r3, #5
 8008f22:	d110      	bne.n	8008f46 <sim7600_handle_received_data+0x356>
    {
      resultTmp = check_normal_response(posOfSubStrSave, listResponse[resultCheck], &sim_buff_index);
 8008f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a4f      	ldr	r2, [pc, #316]	; (800906c <sim7600_handle_received_data+0x47c>)
 8008f30:	4413      	add	r3, r2
 8008f32:	1d3a      	adds	r2, r7, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f38:	f7ff fe1e 	bl	8008b78 <check_normal_response>
 8008f3c:	61b8      	str	r0, [r7, #24]
      if(resultTmp == 0) // success find
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d161      	bne.n	8009008 <sim7600_handle_received_data+0x418>
      {
        //reserved
        continue;
 8008f44:	e066      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
    }
    else if (resultCheck == 6) //"\r\n>""
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	d10c      	bne.n	8008f66 <sim7600_handle_received_data+0x376>
    {
      if (sim7600_send_packetStatus1 == 1)
 8008f4c:	4b4c      	ldr	r3, [pc, #304]	; (8009080 <sim7600_handle_received_data+0x490>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d159      	bne.n	8009008 <sim7600_handle_received_data+0x418>
      {
        sim7600_send_packetStatus1 = 0;
 8008f54:	4b4a      	ldr	r3, [pc, #296]	; (8009080 <sim7600_handle_received_data+0x490>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
        sim_buff_index = posOfSubStrSave - sim_buff + 3; // +1 point right after "\r\n>"
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	4a49      	ldr	r2, [pc, #292]	; (8009084 <sim7600_handle_received_data+0x494>)
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	3303      	adds	r3, #3
 8008f62:	607b      	str	r3, [r7, #4]
        continue;
 8008f64:	e056      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
    }
    else //cmd check
    {
      //check whether have \r\n at the end of this response
      posOfSubStrSave += checkCmdResLength; //point to right after the last charater of response
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f6a:	4413      	add	r3, r2
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t* pointerTo_r_n = strstr(posOfSubStrSave, "\r\n");
 8008f6e:	4946      	ldr	r1, [pc, #280]	; (8009088 <sim7600_handle_received_data+0x498>)
 8008f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f72:	f000 fe97 	bl	8009ca4 <strstr>
 8008f76:	6138      	str	r0, [r7, #16]
      if(pointerTo_r_n != NULL)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d032      	beq.n	8008fe4 <sim7600_handle_received_data+0x3f4>
      {
        if (cmdSendStatus == 1)
 8008f7e:	4b43      	ldr	r3, [pc, #268]	; (800908c <sim7600_handle_received_data+0x49c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d103      	bne.n	8008f8e <sim7600_handle_received_data+0x39e>
          cmdSendStatus = 0;
 8008f86:	4b41      	ldr	r3, [pc, #260]	; (800908c <sim7600_handle_received_data+0x49c>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e01e      	b.n	8008fcc <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_tcp_connectStatus == 1)
 8008f8e:	4b40      	ldr	r3, [pc, #256]	; (8009090 <sim7600_handle_received_data+0x4a0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d103      	bne.n	8008f9e <sim7600_handle_received_data+0x3ae>
          sim7600_open_tcp_connectStatus = 0;
 8008f96:	4b3e      	ldr	r3, [pc, #248]	; (8009090 <sim7600_handle_received_data+0x4a0>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e016      	b.n	8008fcc <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_udp_connectStatus == 1)
 8008f9e:	4b3d      	ldr	r3, [pc, #244]	; (8009094 <sim7600_handle_received_data+0x4a4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d103      	bne.n	8008fae <sim7600_handle_received_data+0x3be>
          sim7600_open_udp_connectStatus = 0;
 8008fa6:	4b3b      	ldr	r3, [pc, #236]	; (8009094 <sim7600_handle_received_data+0x4a4>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	e00e      	b.n	8008fcc <sim7600_handle_received_data+0x3dc>
        else if (sim7600_open_netStatus == 1)
 8008fae:	4b3a      	ldr	r3, [pc, #232]	; (8009098 <sim7600_handle_received_data+0x4a8>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d103      	bne.n	8008fbe <sim7600_handle_received_data+0x3ce>
          sim7600_open_netStatus = 0;
 8008fb6:	4b38      	ldr	r3, [pc, #224]	; (8009098 <sim7600_handle_received_data+0x4a8>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	e006      	b.n	8008fcc <sim7600_handle_received_data+0x3dc>
        else if (sim7600_send_packetStatus2 == 1)
 8008fbe:	4b37      	ldr	r3, [pc, #220]	; (800909c <sim7600_handle_received_data+0x4ac>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d102      	bne.n	8008fcc <sim7600_handle_received_data+0x3dc>
          sim7600_send_packetStatus2 = 0;
 8008fc6:	4b35      	ldr	r3, [pc, #212]	; (800909c <sim7600_handle_received_data+0x4ac>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
        res1 = NULL;
 8008fcc:	4b34      	ldr	r3, [pc, #208]	; (80090a0 <sim7600_handle_received_data+0x4b0>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
        res2 = NULL;
 8008fd2:	4b34      	ldr	r3, [pc, #208]	; (80090a4 <sim7600_handle_received_data+0x4b4>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
        //change sim_buff_index
        sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <sim7600_handle_received_data+0x494>)
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	3302      	adds	r3, #2
 8008fe0:	607b      	str	r3, [r7, #4]
        continue;
 8008fe2:	e017      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
      else if(posOfSubStrSave + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008fea:	4b2f      	ldr	r3, [pc, #188]	; (80090a8 <sim7600_handle_received_data+0x4b8>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4b24      	ldr	r3, [pc, #144]	; (8009084 <sim7600_handle_received_data+0x494>)
 8008ff2:	440b      	add	r3, r1
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d205      	bcs.n	8009004 <sim7600_handle_received_data+0x414>
      {
        //data may be error-bit
        sim_buff_index = posOfSubStrSave - sim_buff + max_data_length_of_response_r_n;
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	4a22      	ldr	r2, [pc, #136]	; (8009084 <sim7600_handle_received_data+0x494>)
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	3364      	adds	r3, #100	; 0x64
 8009000:	607b      	str	r3, [r7, #4]
        continue;
 8009002:	e007      	b.n	8009014 <sim7600_handle_received_data+0x424>
      }
      else //don't have enough data
        return sim_buff_index;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	e02c      	b.n	8009062 <sim7600_handle_received_data+0x472>
    }

    //data maybe bit-error sim_buff_index = posOfSubStrSave - sim_buff + max_data_length_of_response_r_n;
    if(resultTmp == 1) continue;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d001      	beq.n	8009012 <sim7600_handle_received_data+0x422>
    //dont have enough data
    //else if(resultTmp == 2) return sim_buff_index;
    else return sim_buff_index;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	e027      	b.n	8009062 <sim7600_handle_received_data+0x472>
    if(resultTmp == 1) continue;
 8009012:	bf00      	nop
  {
 8009014:	e5fa      	b.n	8008c0c <sim7600_handle_received_data+0x1c>
  }

  //discard garbage \r\n .. \r\n
  while(true)
  {
    if (sim_buff_index >= sim_buff_length)
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	4b23      	ldr	r3, [pc, #140]	; (80090a8 <sim7600_handle_received_data+0x4b8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	db02      	blt.n	8009026 <sim7600_handle_received_data+0x436>
      return sim_buff_length;
 8009020:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <sim7600_handle_received_data+0x4b8>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	e01d      	b.n	8009062 <sim7600_handle_received_data+0x472>

    posOfSubStr = strstr(sim_buff + sim_buff_index, "\r\n"); //first \r\n
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	461a      	mov	r2, r3
 800902a:	4b16      	ldr	r3, [pc, #88]	; (8009084 <sim7600_handle_received_data+0x494>)
 800902c:	4413      	add	r3, r2
 800902e:	4916      	ldr	r1, [pc, #88]	; (8009088 <sim7600_handle_received_data+0x498>)
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fe37 	bl	8009ca4 <strstr>
 8009036:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(posOfSubStr != NULL)
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00f      	beq.n	800905e <sim7600_handle_received_data+0x46e>
    {
      posOfSubStr = strstr(posOfSubStr + 2, "\r\n"); //second \r\n
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	3302      	adds	r3, #2
 8009042:	4911      	ldr	r1, [pc, #68]	; (8009088 <sim7600_handle_received_data+0x498>)
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fe2d 	bl	8009ca4 <strstr>
 800904a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(posOfSubStr != NULL) //detect \r\n...\r\n
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <sim7600_handle_received_data+0x46e>
      {
        sim_buff_index = posOfSubStr + 2 - sim_buff;
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	3302      	adds	r3, #2
 8009056:	4a0b      	ldr	r2, [pc, #44]	; (8009084 <sim7600_handle_received_data+0x494>)
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	607b      	str	r3, [r7, #4]
    if (sim_buff_index >= sim_buff_length)
 800905c:	e7db      	b.n	8009016 <sim7600_handle_received_data+0x426>
        continue;
      }
    }
    break; //if can't find \r\n .. \r\n sastified
 800905e:	bf00      	nop
  }
  return sim_buff_index;
 8009060:	687b      	ldr	r3, [r7, #4]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3730      	adds	r7, #48	; 0x30
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000078 	.word	0x20000078
 8009070:	20004155 	.word	0x20004155
 8009074:	20004157 	.word	0x20004157
 8009078:	20004154 	.word	0x20004154
 800907c:	20004158 	.word	0x20004158
 8009080:	20004168 	.word	0x20004168
 8009084:	2000832c 	.word	0x2000832c
 8009088:	0800b178 	.word	0x0800b178
 800908c:	20004178 	.word	0x20004178
 8009090:	20004174 	.word	0x20004174
 8009094:	20004164 	.word	0x20004164
 8009098:	20004160 	.word	0x20004160
 800909c:	2000416c 	.word	0x2000416c
 80090a0:	2000424c 	.word	0x2000424c
 80090a4:	20004240 	.word	0x20004240
 80090a8:	2000580c 	.word	0x2000580c

080090ac <sim7600_handle_udp_packet>:
bool IsPlaying = false;

int totalFrame = 0;

void sim7600_handle_udp_packet(uint8_t* udpPacket, int length)
{
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b089      	sub	sp, #36	; 0x24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  //this var is maybe changed unexpected, so delcare  "a volatile pointer to a volatile variable"
  packetMP3HeaderStruct volatile * volatile packetMP3Header = (packetMP3HeaderStruct*)udpPacket;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]
  //check sum to confirm it is head of a packet
  if (packetMP3Header->checkSumHeader == sim7600_check_sum_data(udpPacket + 2, length - 2))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29c      	uxth	r4, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	1c9a      	adds	r2, r3, #2
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	3b02      	subs	r3, #2
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f000 fa90 	bl	80095f0 <sim7600_check_sum_data>
 80090d0:	4603      	mov	r3, r0
 80090d2:	429c      	cmp	r4, r3
 80090d4:	f040 8192 	bne.w	80093fc <sim7600_handle_udp_packet+0x350>
  {
    numOfPacketUDPReceived++;
 80090d8:	4b65      	ldr	r3, [pc, #404]	; (8009270 <sim7600_handle_udp_packet+0x1c4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	4a64      	ldr	r2, [pc, #400]	; (8009270 <sim7600_handle_udp_packet+0x1c4>)
 80090e0:	6013      	str	r3, [r2, #0]

    if (packetMP3Header->songID != songID) //new song
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80090e8:	4b62      	ldr	r3, [pc, #392]	; (8009274 <sim7600_handle_udp_packet+0x1c8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d04a      	beq.n	8009186 <sim7600_handle_udp_packet+0xda>
    {          
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 80090f0:	4b61      	ldr	r3, [pc, #388]	; (8009278 <sim7600_handle_udp_packet+0x1cc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f04f 31ff 	mov.w	r1, #4294967295
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fb faa9 	bl	8004650 <osSemaphoreWait>

      VS1003_ResetDecodeTime();
 80090fe:	f000 fc53 	bl	80099a8 <VS1003_ResetDecodeTime>

    	//clear status frame -> to detect old frame when play
    	for(int i = 0; i < mp3PacketSize; i++) 
 8009102:	2300      	movs	r3, #0
 8009104:	61fb      	str	r3, [r7, #28]
 8009106:	e018      	b.n	800913a <sim7600_handle_udp_packet+0x8e>
      {
        mp3Packet[i].IsEmpty = true;
 8009108:	4a5c      	ldr	r2, [pc, #368]	; (800927c <sim7600_handle_udp_packet+0x1d0>)
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009110:	fb01 f303 	mul.w	r3, r1, r3
 8009114:	4413      	add	r3, r2
 8009116:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800911a:	2201      	movs	r2, #1
 800911c:	701a      	strb	r2, [r3, #0]
        mp3Packet[i].ID = 0;
 800911e:	4a57      	ldr	r2, [pc, #348]	; (800927c <sim7600_handle_udp_packet+0x1d0>)
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	4413      	add	r3, r2
 800912c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < mp3PacketSize; i++) 
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	3301      	adds	r3, #1
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	2b17      	cmp	r3, #23
 800913e:	dde3      	ble.n	8009108 <sim7600_handle_udp_packet+0x5c>
      }

      IsPlaying = true;
 8009140:	4b4f      	ldr	r3, [pc, #316]	; (8009280 <sim7600_handle_udp_packet+0x1d4>)
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]

      songID = packetMP3Header->songID; 
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800914c:	4a49      	ldr	r2, [pc, #292]	; (8009274 <sim7600_handle_udp_packet+0x1c8>)
 800914e:	6013      	str	r3, [r2, #0]

      IDframeSaved = 0; //debug
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <sim7600_handle_udp_packet+0x1d8>)
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]

      totalFrame = 0;
 8009156:	4b4c      	ldr	r3, [pc, #304]	; (8009288 <sim7600_handle_udp_packet+0x1dc>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]

      IDframePlayed = packetMP3Header->IDframe - 1; //to synchronize
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009162:	3b01      	subs	r3, #1
 8009164:	4a49      	ldr	r2, [pc, #292]	; (800928c <sim7600_handle_udp_packet+0x1e0>)
 8009166:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 8009168:	4b43      	ldr	r3, [pc, #268]	; (8009278 <sim7600_handle_udp_packet+0x1cc>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f7fb fabd 	bl	80046ec <osSemaphoreRelease>
      //osThreadResumeAll();
    //****************************************************

      //put to task play mp3
      osMessagePut(play_mp3_queue_id, packetMP3Header->IDframe, osWaitForever); //wait before play
 8009172:	4b47      	ldr	r3, [pc, #284]	; (8009290 <sim7600_handle_udp_packet+0x1e4>)
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800917c:	f04f 32ff 	mov.w	r2, #4294967295
 8009180:	4619      	mov	r1, r3
 8009182:	f7fb fb11 	bl	80047a8 <osMessagePut>
    }

    if(!IsPlaying) //new play after loss alot of packets
 8009186:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <sim7600_handle_udp_packet+0x1d4>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f083 0301 	eor.w	r3, r3, #1
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d054      	beq.n	800923e <sim7600_handle_udp_packet+0x192>
    {
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 8009194:	4b38      	ldr	r3, [pc, #224]	; (8009278 <sim7600_handle_udp_packet+0x1cc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f04f 31ff 	mov.w	r1, #4294967295
 800919c:	4618      	mov	r0, r3
 800919e:	f7fb fa57 	bl	8004650 <osSemaphoreWait>


      //clear status frame -> to detect old frame when play
    	for(int i = 0; i < mp3PacketSize; i++) 
 80091a2:	2300      	movs	r3, #0
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e02c      	b.n	8009202 <sim7600_handle_udp_packet+0x156>
      {
        if(!mp3Packet[i].IsEmpty) conSotLai++;
 80091a8:	4a34      	ldr	r2, [pc, #208]	; (800927c <sim7600_handle_udp_packet+0x1d0>)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f083 0301 	eor.w	r3, r3, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <sim7600_handle_udp_packet+0x124>
 80091c6:	4b33      	ldr	r3, [pc, #204]	; (8009294 <sim7600_handle_udp_packet+0x1e8>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3301      	adds	r3, #1
 80091cc:	4a31      	ldr	r2, [pc, #196]	; (8009294 <sim7600_handle_udp_packet+0x1e8>)
 80091ce:	6013      	str	r3, [r2, #0]
        mp3Packet[i].IsEmpty = true;
 80091d0:	4a2a      	ldr	r2, [pc, #168]	; (800927c <sim7600_handle_udp_packet+0x1d0>)
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80091d8:	fb01 f303 	mul.w	r3, r1, r3
 80091dc:	4413      	add	r3, r2
 80091de:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80091e2:	2201      	movs	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
        mp3Packet[i].ID = 0;
 80091e6:	4a25      	ldr	r2, [pc, #148]	; (800927c <sim7600_handle_udp_packet+0x1d0>)
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < mp3PacketSize; i++) 
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	3301      	adds	r3, #1
 8009200:	61bb      	str	r3, [r7, #24]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	2b17      	cmp	r3, #23
 8009206:	ddcf      	ble.n	80091a8 <sim7600_handle_udp_packet+0xfc>
      }
      totalFrame = 0;
 8009208:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <sim7600_handle_udp_packet+0x1dc>)
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
      
      IsPlaying = true;
 800920e:	4b1c      	ldr	r3, [pc, #112]	; (8009280 <sim7600_handle_udp_packet+0x1d4>)
 8009210:	2201      	movs	r2, #1
 8009212:	701a      	strb	r2, [r3, #0]
      IDframePlayed = packetMP3Header->IDframe - 1; //to synchronize
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800921a:	3b01      	subs	r3, #1
 800921c:	4a1b      	ldr	r2, [pc, #108]	; (800928c <sim7600_handle_udp_packet+0x1e0>)
 800921e:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 8009220:	4b15      	ldr	r3, [pc, #84]	; (8009278 <sim7600_handle_udp_packet+0x1cc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f7fb fa61 	bl	80046ec <osSemaphoreRelease>
      //osThreadResumeAll();
    //****************************************************

      //put to task play mp3
      osMessagePut(play_mp3_queue_id, packetMP3Header->IDframe, osWaitForever); //wait before play
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <sim7600_handle_udp_packet+0x1e4>)
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009234:	f04f 32ff 	mov.w	r2, #4294967295
 8009238:	4619      	mov	r1, r3
 800923a:	f7fb fab5 	bl	80047a8 <osMessagePut>
    }

    
    //debug
    if (packetMP3Header->IDframe > IDframeSaved)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009244:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <sim7600_handle_udp_packet+0x1d8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	dd27      	ble.n	800929c <sim7600_handle_udp_packet+0x1f0>
    {
      miss_frame += packetMP3Header->IDframe - IDframeSaved - 1;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <sim7600_handle_udp_packet+0x1d8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	1e5a      	subs	r2, r3, #1
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <sim7600_handle_udp_packet+0x1ec>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4413      	add	r3, r2
 8009260:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <sim7600_handle_udp_packet+0x1ec>)
 8009262:	6013      	str	r3, [r2, #0]
      IDframeSaved = packetMP3Header->IDframe;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800926a:	4a06      	ldr	r2, [pc, #24]	; (8009284 <sim7600_handle_udp_packet+0x1d8>)
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	e01a      	b.n	80092a6 <sim7600_handle_udp_packet+0x1fa>
 8009270:	20004190 	.word	0x20004190
 8009274:	200041a8 	.word	0x200041a8
 8009278:	20005814 	.word	0x20005814
 800927c:	20005830 	.word	0x20005830
 8009280:	200041b8 	.word	0x200041b8
 8009284:	200041b0 	.word	0x200041b0
 8009288:	200041bc 	.word	0x200041bc
 800928c:	200041ac 	.word	0x200041ac
 8009290:	20004248 	.word	0x20004248
 8009294:	200041a4 	.word	0x200041a4
 8009298:	20004198 	.word	0x20004198
    }
    else
    {
      late_frame++;
 800929c:	4b5c      	ldr	r3, [pc, #368]	; (8009410 <sim7600_handle_udp_packet+0x364>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	4a5b      	ldr	r2, [pc, #364]	; (8009410 <sim7600_handle_udp_packet+0x364>)
 80092a4:	6013      	str	r3, [r2, #0]
    }

    int index_mp3_packet = packetMP3Header->IDframe % mp3PacketSize;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80092ac:	4b59      	ldr	r3, [pc, #356]	; (8009414 <sim7600_handle_udp_packet+0x368>)
 80092ae:	fb83 1302 	smull	r1, r3, r3, r2
 80092b2:	1099      	asrs	r1, r3, #2
 80092b4:	17d3      	asrs	r3, r2, #31
 80092b6:	1ac9      	subs	r1, r1, r3
 80092b8:	460b      	mov	r3, r1
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	440b      	add	r3, r1
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	617b      	str	r3, [r7, #20]

    if(mp3Packet[index_mp3_packet].IsEmpty && packetMP3Header->IDframe > IDframePlayed)
 80092c4:	4a54      	ldr	r2, [pc, #336]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8089 	beq.w	80093f0 <sim7600_handle_udp_packet+0x344>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80092e4:	4b4d      	ldr	r3, [pc, #308]	; (800941c <sim7600_handle_udp_packet+0x370>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	f340 8081 	ble.w	80093f0 <sim7600_handle_udp_packet+0x344>
    {
      //********* critical part **************
      //osThreadSuspendAll();
      osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 80092ee:	4b4c      	ldr	r3, [pc, #304]	; (8009420 <sim7600_handle_udp_packet+0x374>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f04f 31ff 	mov.w	r1, #4294967295
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fb f9aa 	bl	8004650 <osSemaphoreWait>

      //clear garbage
      int adu_length = length - packetMP3HeaderLength;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	3b0a      	subs	r3, #10
 8009300:	613b      	str	r3, [r7, #16]
      memset(mp3Packet[index_mp3_packet].frames + adu_length, 0, mp3PacketFrameSize - adu_length);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009308:	fb02 f303 	mul.w	r3, r2, r3
 800930c:	4a42      	ldr	r2, [pc, #264]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 800930e:	441a      	add	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	18d0      	adds	r0, r2, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 800931a:	461a      	mov	r2, r3
 800931c:	2100      	movs	r1, #0
 800931e:	f000 fc0b 	bl	8009b38 <memset>
      memcpy(mp3Packet[index_mp3_packet].frames, packetMP3Header->frame, adu_length);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	4a3a      	ldr	r2, [pc, #232]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 800932e:	1898      	adds	r0, r3, r2
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	330a      	adds	r3, #10
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4619      	mov	r1, r3
 8009338:	f000 fbf0 	bl	8009b1c <memcpy>
      mp3Packet[index_mp3_packet].ID = packetMP3Header->IDframe;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009342:	4935      	ldr	r1, [pc, #212]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800934a:	fb00 f303 	mul.w	r3, r0, r3
 800934e:	440b      	add	r3, r1
 8009350:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009354:	601a      	str	r2, [r3, #0]
      //change bitrate to 144kbps
      mp3Packet[index_mp3_packet].frames[2] &= 0x0F;
 8009356:	4a30      	ldr	r2, [pc, #192]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	4413      	add	r3, r2
 8009364:	3302      	adds	r3, #2
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	b2d8      	uxtb	r0, r3
 800936e:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	3302      	adds	r3, #2
 800937e:	4602      	mov	r2, r0
 8009380:	701a      	strb	r2, [r3, #0]
      mp3Packet[index_mp3_packet].frames[2] |= 0xD0; //0b1101 0000
 8009382:	4a25      	ldr	r2, [pc, #148]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	3302      	adds	r3, #2
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8009398:	b2d8      	uxtb	r0, r3
 800939a:	4a1f      	ldr	r2, [pc, #124]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	3302      	adds	r3, #2
 80093aa:	4602      	mov	r2, r0
 80093ac:	701a      	strb	r2, [r3, #0]
      //clear backpoint of playbuff
      mp3Packet[index_mp3_packet].frames[4] = 0;
 80093ae:	4a1a      	ldr	r2, [pc, #104]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80093b6:	fb01 f303 	mul.w	r3, r1, r3
 80093ba:	4413      	add	r3, r2
 80093bc:	3304      	adds	r3, #4
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]

      mp3Packet[index_mp3_packet].IsEmpty = false;
 80093c2:	4a15      	ldr	r2, [pc, #84]	; (8009418 <sim7600_handle_udp_packet+0x36c>)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]

      totalFrame++;
 80093d8:	4b12      	ldr	r3, [pc, #72]	; (8009424 <sim7600_handle_udp_packet+0x378>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3301      	adds	r3, #1
 80093de:	4a11      	ldr	r2, [pc, #68]	; (8009424 <sim7600_handle_udp_packet+0x378>)
 80093e0:	6013      	str	r3, [r2, #0]

      osSemaphoreRelease(BinSemPlayMp3Handle);
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <sim7600_handle_udp_packet+0x374>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fb f980 	bl	80046ec <osSemaphoreRelease>
    {
 80093ec:	bf00      	nop
  }
  else
  {
	  error_frame++; //debug
  }
}
 80093ee:	e00a      	b.n	8009406 <sim7600_handle_udp_packet+0x35a>
      frame_out_of_order++;
 80093f0:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <sim7600_handle_udp_packet+0x37c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	4a0c      	ldr	r2, [pc, #48]	; (8009428 <sim7600_handle_udp_packet+0x37c>)
 80093f8:	6013      	str	r3, [r2, #0]
}
 80093fa:	e004      	b.n	8009406 <sim7600_handle_udp_packet+0x35a>
	  error_frame++; //debug
 80093fc:	4b0b      	ldr	r3, [pc, #44]	; (800942c <sim7600_handle_udp_packet+0x380>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	4a0a      	ldr	r2, [pc, #40]	; (800942c <sim7600_handle_udp_packet+0x380>)
 8009404:	6013      	str	r3, [r2, #0]
}
 8009406:	bf00      	nop
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd90      	pop	{r4, r7, pc}
 800940e:	bf00      	nop
 8009410:	2000419c 	.word	0x2000419c
 8009414:	2aaaaaab 	.word	0x2aaaaaab
 8009418:	20005830 	.word	0x20005830
 800941c:	200041ac 	.word	0x200041ac
 8009420:	20005814 	.word	0x20005814
 8009424:	200041bc 	.word	0x200041bc
 8009428:	200041a0 	.word	0x200041a0
 800942c:	20004194 	.word	0x20004194

08009430 <playMp3DMA>:
int differ;

//sign: 1 ~ beggin play with delay n frame , 2 ~ play immidiate frame after dma tc interrupt
uint8_t playBuff[mp3PacketFrameSize];
void playMp3DMA(int IDframeWillplay)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  static int playMp3PacketIndex = 0;
  if(IDframeWillplay > 0)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dd23      	ble.n	8009486 <playMp3DMA+0x56>
  {
    //********* critical part **************
    //osThreadSuspendAll();
    osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 800943e:	4b60      	ldr	r3, [pc, #384]	; (80095c0 <playMp3DMA+0x190>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f04f 31ff 	mov.w	r1, #4294967295
 8009446:	4618      	mov	r0, r3
 8009448:	f7fb f902 	bl	8004650 <osSemaphoreWait>
    
    xQueueReset(play_mp3_queue_id);
 800944c:	4b5d      	ldr	r3, [pc, #372]	; (80095c4 <playMp3DMA+0x194>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f7fb fb3e 	bl	8004ad4 <xQueueGenericReset>
    playMp3PacketIndex = IDframeWillplay % mp3PacketSize;
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4b5b      	ldr	r3, [pc, #364]	; (80095c8 <playMp3DMA+0x198>)
 800945c:	fb83 2301 	smull	r2, r3, r3, r1
 8009460:	109a      	asrs	r2, r3, #2
 8009462:	17cb      	asrs	r3, r1, #31
 8009464:	1ad2      	subs	r2, r2, r3
 8009466:	4613      	mov	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	4413      	add	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	1aca      	subs	r2, r1, r3
 8009470:	4b56      	ldr	r3, [pc, #344]	; (80095cc <playMp3DMA+0x19c>)
 8009472:	601a      	str	r2, [r3, #0]

    osSemaphoreRelease(BinSemPlayMp3Handle);
 8009474:	4b52      	ldr	r3, [pc, #328]	; (80095c0 <playMp3DMA+0x190>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb f937 	bl	80046ec <osSemaphoreRelease>
    //osThreadResumeAll();
    //****************************************************

    osDelay(waitFrameBeforePlayNewSong * timePerFrame_ms); //8 frame delay
 800947e:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8009482:	f7fb f89e 	bl	80045c2 <osDelay>
  }

  if(totalFrame  >= 20)
 8009486:	4b52      	ldr	r3, [pc, #328]	; (80095d0 <playMp3DMA+0x1a0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b13      	cmp	r3, #19
 800948c:	dd02      	ble.n	8009494 <playMp3DMA+0x64>
  {
	  totalFrame = 0;
 800948e:	4b50      	ldr	r3, [pc, #320]	; (80095d0 <playMp3DMA+0x1a0>)
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
  }
  if(IsPlaying)
 8009494:	4b4f      	ldr	r3, [pc, #316]	; (80095d4 <playMp3DMA+0x1a4>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 808c 	beq.w	80095b6 <playMp3DMA+0x186>
    first iniatilize timer->CNT =  IDframePlayed
    */

    //********* critical part **************
    //osThreadSuspendAll();
    osSemaphoreWait(BinSemPlayMp3Handle, osWaitForever);
 800949e:	4b48      	ldr	r3, [pc, #288]	; (80095c0 <playMp3DMA+0x190>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f04f 31ff 	mov.w	r1, #4294967295
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fb f8d2 	bl	8004650 <osSemaphoreWait>

    if(totalFrame < 1)
 80094ac:	4b48      	ldr	r3, [pc, #288]	; (80095d0 <playMp3DMA+0x1a0>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dc06      	bgt.n	80094c2 <playMp3DMA+0x92>
    {
      totalFrame = 0;
 80094b4:	4b46      	ldr	r3, [pc, #280]	; (80095d0 <playMp3DMA+0x1a0>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
      IsPlaying = false;
 80094ba:	4b46      	ldr	r3, [pc, #280]	; (80095d4 <playMp3DMA+0x1a4>)
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	e074      	b.n	80095ac <playMp3DMA+0x17c>
    }
    else
    {
      if (mp3Packet[playMp3PacketIndex].IsEmpty == false && mp3Packet[playMp3PacketIndex].ID > IDframePlayed)
 80094c2:	4b42      	ldr	r3, [pc, #264]	; (80095cc <playMp3DMA+0x19c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a44      	ldr	r2, [pc, #272]	; (80095d8 <playMp3DMA+0x1a8>)
 80094c8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f083 0301 	eor.w	r3, r3, #1
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d042      	beq.n	8009568 <playMp3DMA+0x138>
 80094e2:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <playMp3DMA+0x19c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a3c      	ldr	r2, [pc, #240]	; (80095d8 <playMp3DMA+0x1a8>)
 80094e8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80094ec:	fb01 f303 	mul.w	r3, r1, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	4b38      	ldr	r3, [pc, #224]	; (80095dc <playMp3DMA+0x1ac>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	dd33      	ble.n	8009568 <playMp3DMA+0x138>
      {
        memcpy(playBuff, mp3Packet[playMp3PacketIndex].frames, mp3PacketFrameSize);
 8009500:	4b32      	ldr	r3, [pc, #200]	; (80095cc <playMp3DMA+0x19c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	4a32      	ldr	r2, [pc, #200]	; (80095d8 <playMp3DMA+0x1a8>)
 800950e:	4413      	add	r3, r2
 8009510:	4a33      	ldr	r2, [pc, #204]	; (80095e0 <playMp3DMA+0x1b0>)
 8009512:	4610      	mov	r0, r2
 8009514:	4619      	mov	r1, r3
 8009516:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800951a:	461a      	mov	r2, r3
 800951c:	f000 fafe 	bl	8009b1c <memcpy>
        mp3Packet[playMp3PacketIndex].IsEmpty = true;
 8009520:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <playMp3DMA+0x19c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a2c      	ldr	r2, [pc, #176]	; (80095d8 <playMp3DMA+0x1a8>)
 8009526:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800952a:	fb01 f303 	mul.w	r3, r1, r3
 800952e:	4413      	add	r3, r2
 8009530:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
        IDframePlayed = mp3Packet[playMp3PacketIndex].ID;
 8009538:	4b24      	ldr	r3, [pc, #144]	; (80095cc <playMp3DMA+0x19c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a26      	ldr	r2, [pc, #152]	; (80095d8 <playMp3DMA+0x1a8>)
 800953e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009542:	fb01 f303 	mul.w	r3, r1, r3
 8009546:	4413      	add	r3, r2
 8009548:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a23      	ldr	r2, [pc, #140]	; (80095dc <playMp3DMA+0x1ac>)
 8009550:	6013      	str	r3, [r2, #0]
        VS1003_Play_Data_DMA(playBuff, mp3PacketFrameSize);
 8009552:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009556:	4822      	ldr	r0, [pc, #136]	; (80095e0 <playMp3DMA+0x1b0>)
 8009558:	f000 fa5a 	bl	8009a10 <VS1003_Play_Data_DMA>
        totalFrame--;
 800955c:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <playMp3DMA+0x1a0>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3b01      	subs	r3, #1
 8009562:	4a1b      	ldr	r2, [pc, #108]	; (80095d0 <playMp3DMA+0x1a0>)
 8009564:	6013      	str	r3, [r2, #0]
      {
 8009566:	e006      	b.n	8009576 <playMp3DMA+0x146>
      }
      else
      {
        VS1003_Play_1frameMute_DMA();
 8009568:	f000 fa74 	bl	8009a54 <VS1003_Play_1frameMute_DMA>
        miss_adu++;
 800956c:	4b1d      	ldr	r3, [pc, #116]	; (80095e4 <playMp3DMA+0x1b4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	4a1c      	ldr	r2, [pc, #112]	; (80095e4 <playMp3DMA+0x1b4>)
 8009574:	6013      	str	r3, [r2, #0]
      }
      differ = IDframeSaved - IDframePlayed; //debug
 8009576:	4b1c      	ldr	r3, [pc, #112]	; (80095e8 <playMp3DMA+0x1b8>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b18      	ldr	r3, [pc, #96]	; (80095dc <playMp3DMA+0x1ac>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <playMp3DMA+0x1bc>)
 8009582:	6013      	str	r3, [r2, #0]
      
      playMp3PacketIndex++;
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <playMp3DMA+0x19c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	4a10      	ldr	r2, [pc, #64]	; (80095cc <playMp3DMA+0x19c>)
 800958c:	6013      	str	r3, [r2, #0]
      playMp3PacketIndex %= mp3PacketSize;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <playMp3DMA+0x19c>)
 8009590:	6819      	ldr	r1, [r3, #0]
 8009592:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <playMp3DMA+0x198>)
 8009594:	fb83 2301 	smull	r2, r3, r3, r1
 8009598:	109a      	asrs	r2, r3, #2
 800959a:	17cb      	asrs	r3, r1, #31
 800959c:	1ad2      	subs	r2, r2, r3
 800959e:	4613      	mov	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	1aca      	subs	r2, r1, r3
 80095a8:	4b08      	ldr	r3, [pc, #32]	; (80095cc <playMp3DMA+0x19c>)
 80095aa:	601a      	str	r2, [r3, #0]
    }

    osSemaphoreRelease(BinSemPlayMp3Handle);
 80095ac:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <playMp3DMA+0x190>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fb f89b 	bl	80046ec <osSemaphoreRelease>
    //osThreadResumeAll();
    //****************************************************
  }
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20005814 	.word	0x20005814
 80095c4:	20004248 	.word	0x20004248
 80095c8:	2aaaaaab 	.word	0x2aaaaaab
 80095cc:	200041cc 	.word	0x200041cc
 80095d0:	200041bc 	.word	0x200041bc
 80095d4:	200041b8 	.word	0x200041b8
 80095d8:	20005830 	.word	0x20005830
 80095dc:	200041ac 	.word	0x200041ac
 80095e0:	2000817c 	.word	0x2000817c
 80095e4:	200041b4 	.word	0x200041b4
 80095e8:	200041b0 	.word	0x200041b0
 80095ec:	20008174 	.word	0x20008174

080095f0 <sim7600_check_sum_data>:

uint16_t sim7600_check_sum_data(uint8_t *ptr, int length)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]

	while (length > 1) //cong het cac byte16 lai
 80095fe:	e00f      	b.n	8009620 <sim7600_check_sum_data+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	3201      	adds	r2, #1
 800960a:	7812      	ldrb	r2, [r2, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3302      	adds	r3, #2
 8009618:	607b      	str	r3, [r7, #4]
		length -= 2;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	3b02      	subs	r3, #2
 800961e:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	dcec      	bgt.n	8009600 <sim7600_check_sum_data+0x10>
	}
	if (length)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <sim7600_check_sum_data+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4413      	add	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8009638:	e005      	b.n	8009646 <sim7600_check_sum_data+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	0c1b      	lsrs	r3, r3, #16
 8009642:	4413      	add	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	0c1b      	lsrs	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1f5      	bne.n	800963a <sim7600_check_sum_data+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	43db      	mvns	r3, r3
 8009652:	60fb      	str	r3, [r7, #12]
	//hoan vi byte thap byte cao
	return (uint16_t)checksum;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	b29b      	uxth	r3, r3
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <sim7600_usart_IRQHandler>:
 * \brief           usartSim7600 global interrupt handler
 */
int numOfIDLEdetect = 0, numOfRXNEdetect = 0;
bool uartFirstByte = false;
void sim7600_usart_IRQHandler(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
  //if (LL_USART_IsEnabledIT_IDLE(usartSim7600) && LL_USART_IsActiveFlag_IDLE(usartSim7600)) {
  //    LL_USART_ClearFlag_IDLE(usartSim7600);        /* Clear IDLE line flag */
  //   sim7600_usart_rx_check();                       /* Check for data to process */
  //}

  if ((usartSim7600->CR1 & USART_CR1_IDLEIE) == USART_CR1_IDLEIE && (usartSim7600->SR & USART_SR_IDLE) == (USART_SR_IDLE))
 800966a:	4b22      	ldr	r3, [pc, #136]	; (80096f4 <sim7600_usart_IRQHandler+0x90>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b10      	cmp	r3, #16
 8009676:	d123      	bne.n	80096c0 <sim7600_usart_IRQHandler+0x5c>
 8009678:	4b1e      	ldr	r3, [pc, #120]	; (80096f4 <sim7600_usart_IRQHandler+0x90>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0310 	and.w	r3, r3, #16
 8009682:	2b10      	cmp	r3, #16
 8009684:	d11c      	bne.n	80096c0 <sim7600_usart_IRQHandler+0x5c>
  {
	  HAL_TIM_Base_Stop_IT(&htim1);
 8009686:	481c      	ldr	r0, [pc, #112]	; (80096f8 <sim7600_usart_IRQHandler+0x94>)
 8009688:	f7f9 fcfe 	bl	8003088 <HAL_TIM_Base_Stop_IT>

    // Clear IDLE line flag
    volatile uint32_t tmpreg;
    tmpreg = usartSim7600->SR;
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <sim7600_usart_IRQHandler+0x90>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8009694:	687b      	ldr	r3, [r7, #4]
    tmpreg = usartSim7600->DR;
 8009696:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <sim7600_usart_IRQHandler+0x90>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 800969e:	687b      	ldr	r3, [r7, #4]

    //for safe, because dma handle with DR, so after disabel dma, we will read to clear IDLE
    //tmpreg = usartSim7600->DR;
    //(void)tmpreg;

    osMessagePut(usart_rx_dma_queue_id, 1, 0);
 80096a0:	4b16      	ldr	r3, [pc, #88]	; (80096fc <sim7600_usart_IRQHandler+0x98>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2200      	movs	r2, #0
 80096a6:	2101      	movs	r1, #1
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fb f87d 	bl	80047a8 <osMessagePut>

    numOfIDLEdetect++; //debug
 80096ae:	4b14      	ldr	r3, [pc, #80]	; (8009700 <sim7600_usart_IRQHandler+0x9c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a12      	ldr	r2, [pc, #72]	; (8009700 <sim7600_usart_IRQHandler+0x9c>)
 80096b6:	6013      	str	r3, [r2, #0]

    uartFirstByte = true; // ~ //LL_USART_EnableIT_RXNE(USART1);
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <sim7600_usart_IRQHandler+0xa0>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]

    return;
 80096be:	e015      	b.n	80096ec <sim7600_usart_IRQHandler+0x88>

  //check RXNE interrutp
  //since DMA clear RXNE so we can't check RXNE flag, uart sim7600 just be configured 2 types of interrupt
  // are IDLE and RXNE, so if it is IDLE, we will return (in above right after)
  //and if it is RXNE we just check LL_USART_IsEnabledIT_RXNE
  if(uartFirstByte && IsBaudrate3Mbps)// && LL_USART_IsActiveFlag_RXNE(USART1))
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <sim7600_usart_IRQHandler+0xa0>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d011      	beq.n	80096ec <sim7600_usart_IRQHandler+0x88>
 80096c8:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <sim7600_usart_IRQHandler+0xa4>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00d      	beq.n	80096ec <sim7600_usart_IRQHandler+0x88>
  {
	  uartFirstByte = false; //~ LL_USART_DisableIT_RXNE(USART1);
 80096d0:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <sim7600_usart_IRQHandler+0xa0>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
	  //LL_USART_ClearFlag_RXNE(USART1); do this by DMA
	  numOfRXNEdetect++;
 80096d6:	4b0d      	ldr	r3, [pc, #52]	; (800970c <sim7600_usart_IRQHandler+0xa8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	4a0b      	ldr	r2, [pc, #44]	; (800970c <sim7600_usart_IRQHandler+0xa8>)
 80096de:	6013      	str	r3, [r2, #0]
    TIM1->CNT = 0;
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <sim7600_usart_IRQHandler+0xac>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start_IT(&htim1);
 80096e6:	4804      	ldr	r0, [pc, #16]	; (80096f8 <sim7600_usart_IRQHandler+0x94>)
 80096e8:	f7f9 fc5e 	bl	8002fa8 <HAL_TIM_Base_Start_IT>
  }
}
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2000000c 	.word	0x2000000c
 80096f8:	200042b0 	.word	0x200042b0
 80096fc:	200042a4 	.word	0x200042a4
 8009700:	200041c0 	.word	0x200041c0
 8009704:	200041c8 	.word	0x200041c8
 8009708:	20004159 	.word	0x20004159
 800970c:	200041c4 	.word	0x200041c4
 8009710:	40010000 	.word	0x40010000

08009714 <sim7600_change_baud>:

void sim7600_change_baud(uint32_t baudrate)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  LL_USART_Disable(USART1);
 800971c:	4807      	ldr	r0, [pc, #28]	; (800973c <sim7600_change_baud+0x28>)
 800971e:	f7fe f9e5 	bl	8007aec <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	4906      	ldr	r1, [pc, #24]	; (8009740 <sim7600_change_baud+0x2c>)
 8009728:	4804      	ldr	r0, [pc, #16]	; (800973c <sim7600_change_baud+0x28>)
 800972a:	f7fe fa23 	bl	8007b74 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 800972e:	4803      	ldr	r0, [pc, #12]	; (800973c <sim7600_change_baud+0x28>)
 8009730:	f7fe f9cc 	bl	8007acc <LL_USART_Enable>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40011000 	.word	0x40011000
 8009740:	0501bd00 	.word	0x0501bd00

08009744 <sim7600_restart>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_restart()
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  //suspend all task

  LL_USART_Disable(USART1);
 8009748:	483d      	ldr	r0, [pc, #244]	; (8009840 <sim7600_restart+0xfc>)
 800974a:	f7fe f9cf 	bl	8007aec <LL_USART_Disable>
  //disable DMA
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 800974e:	2102      	movs	r1, #2
 8009750:	483c      	ldr	r0, [pc, #240]	; (8009844 <sim7600_restart+0x100>)
 8009752:	f7fd ffa5 	bl	80076a0 <LL_DMA_DisableStream>
  while(LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 0
 8009756:	bf00      	nop
 8009758:	2102      	movs	r1, #2
 800975a:	483a      	ldr	r0, [pc, #232]	; (8009844 <sim7600_restart+0x100>)
 800975c:	f7fd ffc0 	bl	80076e0 <LL_DMA_IsEnabledStream>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1f8      	bne.n	8009758 <sim7600_restart+0x14>
  printf("%s", "rst\n");
 8009766:	4838      	ldr	r0, [pc, #224]	; (8009848 <sim7600_restart+0x104>)
 8009768:	f000 fa74 	bl	8009c54 <puts>

  //int
  UDPsendStatus = 0;
 800976c:	4b37      	ldr	r3, [pc, #220]	; (800984c <sim7600_restart+0x108>)
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
  cmdSendStatus = 0;
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <sim7600_restart+0x10c>)
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
  sim7600_open_tcp_connectStatus = 0;
 8009778:	4b36      	ldr	r3, [pc, #216]	; (8009854 <sim7600_restart+0x110>)
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
  sim7600_open_udp_connectStatus = 0;
 800977e:	4b36      	ldr	r3, [pc, #216]	; (8009858 <sim7600_restart+0x114>)
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
  sim7600_open_netStatus = 0;
 8009784:	4b35      	ldr	r3, [pc, #212]	; (800985c <sim7600_restart+0x118>)
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
  sim7600_send_packetStatus1 = 0;
 800978a:	4b35      	ldr	r3, [pc, #212]	; (8009860 <sim7600_restart+0x11c>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
  sim7600_send_packetStatus2 = 0;
 8009790:	4b34      	ldr	r3, [pc, #208]	; (8009864 <sim7600_restart+0x120>)
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
  old_pos = 0;
 8009796:	4b34      	ldr	r3, [pc, #208]	; (8009868 <sim7600_restart+0x124>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
  pos = 0;
 800979c:	4b33      	ldr	r3, [pc, #204]	; (800986c <sim7600_restart+0x128>)
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
  songID = 0;
 80097a2:	4b33      	ldr	r3, [pc, #204]	; (8009870 <sim7600_restart+0x12c>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

  //bool
  Sim7600BasicConfigSuccess = false;
 80097a8:	4b32      	ldr	r3, [pc, #200]	; (8009874 <sim7600_restart+0x130>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
  sim7600_error = false;
 80097ae:	4b32      	ldr	r3, [pc, #200]	; (8009878 <sim7600_restart+0x134>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	701a      	strb	r2, [r3, #0]
  sim7600_network_IsOpen = false;
 80097b4:	4b31      	ldr	r3, [pc, #196]	; (800987c <sim7600_restart+0x138>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	701a      	strb	r2, [r3, #0]
  sim7600_tcp_IsOpen = false;
 80097ba:	4b31      	ldr	r3, [pc, #196]	; (8009880 <sim7600_restart+0x13c>)
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
  sim7600_udp_IsOpen = false;
 80097c0:	4b30      	ldr	r3, [pc, #192]	; (8009884 <sim7600_restart+0x140>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
  sim7600_have_call = false;
 80097c6:	4b30      	ldr	r3, [pc, #192]	; (8009888 <sim7600_restart+0x144>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
  IsPlaying = false;
 80097cc:	4b2f      	ldr	r3, [pc, #188]	; (800988c <sim7600_restart+0x148>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
  //init udp var
  // int i, limit = mp3PacketSize;
  // for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;

  if (restartSimstatus < max_num_restart_sim7600) //0-19
 80097d2:	4b2f      	ldr	r3, [pc, #188]	; (8009890 <sim7600_restart+0x14c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b13      	cmp	r3, #19
 80097d8:	dc07      	bgt.n	80097ea <sim7600_restart+0xa6>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 80097da:	f7fe fc29 	bl	8008030 <sim7600_powerOFF>
    restartSimstatus++;
 80097de:	4b2c      	ldr	r3, [pc, #176]	; (8009890 <sim7600_restart+0x14c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	4a2a      	ldr	r2, [pc, #168]	; (8009890 <sim7600_restart+0x14c>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	e013      	b.n	8009812 <sim7600_restart+0xce>
  }
  else if (restartSimstatus < (max_num_restart_sim7600 + max_num_reset_sim7600)) // 20-21
 80097ea:	4b29      	ldr	r3, [pc, #164]	; (8009890 <sim7600_restart+0x14c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b15      	cmp	r3, #21
 80097f0:	dc09      	bgt.n	8009806 <sim7600_restart+0xc2>
  {
    sim7600_reset();
 80097f2:	f7fe fc3b 	bl	800806c <sim7600_reset>
    sim7600_powerOFF();
 80097f6:	f7fe fc1b 	bl	8008030 <sim7600_powerOFF>
    restartSimstatus++;
 80097fa:	4b25      	ldr	r3, [pc, #148]	; (8009890 <sim7600_restart+0x14c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	4a23      	ldr	r2, [pc, #140]	; (8009890 <sim7600_restart+0x14c>)
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	e005      	b.n	8009812 <sim7600_restart+0xce>
  }
  else // >=22
  {
    //delay to wait
    sim7600_delay_ms(sleep_minutes_sim7600 * 60 * 1000); // sleep_minutes_sim7600 minutes
 8009806:	4823      	ldr	r0, [pc, #140]	; (8009894 <sim7600_restart+0x150>)
 8009808:	f7fe fbe8 	bl	8007fdc <sim7600_delay_ms>
    restartSimstatus = 0;
 800980c:	4b20      	ldr	r3, [pc, #128]	; (8009890 <sim7600_restart+0x14c>)
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
  }

  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8009812:	2102      	movs	r1, #2
 8009814:	480b      	ldr	r0, [pc, #44]	; (8009844 <sim7600_restart+0x100>)
 8009816:	f7fd ff23 	bl	8007660 <LL_DMA_EnableStream>
	while(!LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_2)); //wait until En bit == 1
 800981a:	bf00      	nop
 800981c:	2102      	movs	r1, #2
 800981e:	4809      	ldr	r0, [pc, #36]	; (8009844 <sim7600_restart+0x100>)
 8009820:	f7fd ff5e 	bl	80076e0 <LL_DMA_IsEnabledStream>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f8      	beq.n	800981c <sim7600_restart+0xd8>

  //change baud rate to default
  sim7600_change_baud(Sim7600BaudDefaul); // in this function usart is enable again
 800982a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800982e:	f7ff ff71 	bl	8009714 <sim7600_change_baud>
  LL_USART_Enable(USART1);
 8009832:	4803      	ldr	r0, [pc, #12]	; (8009840 <sim7600_restart+0xfc>)
 8009834:	f7fe f94a 	bl	8007acc <LL_USART_Enable>

  //power on again
  sim7600_powerON();
 8009838:	f7fe fbdc 	bl	8007ff4 <sim7600_powerON>

  //resume all task
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40011000 	.word	0x40011000
 8009844:	40026400 	.word	0x40026400
 8009848:	0800b17c 	.word	0x0800b17c
 800984c:	2000415c 	.word	0x2000415c
 8009850:	20004178 	.word	0x20004178
 8009854:	20004174 	.word	0x20004174
 8009858:	20004164 	.word	0x20004164
 800985c:	20004160 	.word	0x20004160
 8009860:	20004168 	.word	0x20004168
 8009864:	2000416c 	.word	0x2000416c
 8009868:	2000417c 	.word	0x2000417c
 800986c:	20004180 	.word	0x20004180
 8009870:	200041a8 	.word	0x200041a8
 8009874:	2000415a 	.word	0x2000415a
 8009878:	20004154 	.word	0x20004154
 800987c:	20004155 	.word	0x20004155
 8009880:	20004156 	.word	0x20004156
 8009884:	20004157 	.word	0x20004157
 8009888:	20004158 	.word	0x20004158
 800988c:	200041b8 	.word	0x200041b8
 8009890:	20004150 	.word	0x20004150
 8009894:	02932e00 	.word	0x02932e00

08009898 <VS1003_SPI_WriteByte>:
}

/*******************************************************************************
*******************************************************************************/ 
static uint8_t VS1003_SPI_WriteByte( uint8_t TxData )
{	
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	uint8_t cmd[1] = {0, };
 80098a2:	2300      	movs	r3, #0
 80098a4:	733b      	strb	r3, [r7, #12]

	cmd[0] = TxData;
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	733b      	strb	r3, [r7, #12]
	res = HAL_SPI_Transmit(hspiVS1003, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80098aa:	4b08      	ldr	r3, [pc, #32]	; (80098cc <VS1003_SPI_WriteByte+0x34>)
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	f107 010c 	add.w	r1, r7, #12
 80098b2:	f04f 33ff 	mov.w	r3, #4294967295
 80098b6:	2201      	movs	r2, #1
 80098b8:	f7f8 ff27 	bl	800270a <HAL_SPI_Transmit>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK);
		//printf("HAL_SPI_Transmit Error\r\n");

  return 0;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200096b8 	.word	0x200096b8

080098d0 <VS1003_Init>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_Init(void)
{		  
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  hspiVS1003 = &hspi2;
 80098d4:	4b10      	ldr	r3, [pc, #64]	; (8009918 <VS1003_Init+0x48>)
 80098d6:	4a11      	ldr	r2, [pc, #68]	; (800991c <VS1003_Init+0x4c>)
 80098d8:	601a      	str	r2, [r3, #0]
  MP3_Reset(0);
 80098da:	2200      	movs	r2, #0
 80098dc:	2180      	movs	r1, #128	; 0x80
 80098de:	4810      	ldr	r0, [pc, #64]	; (8009920 <VS1003_Init+0x50>)
 80098e0:	f7f8 fe1e 	bl	8002520 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80098e4:	2064      	movs	r0, #100	; 0x64
 80098e6:	f7f7 fff1 	bl	80018cc <HAL_Delay>
  MP3_Reset(1);
 80098ea:	2201      	movs	r2, #1
 80098ec:	2180      	movs	r1, #128	; 0x80
 80098ee:	480c      	ldr	r0, [pc, #48]	; (8009920 <VS1003_Init+0x50>)
 80098f0:	f7f8 fe16 	bl	8002520 <HAL_GPIO_WritePin>

  MP3_DCS(1);
 80098f4:	2201      	movs	r2, #1
 80098f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098fa:	4809      	ldr	r0, [pc, #36]	; (8009920 <VS1003_Init+0x50>)
 80098fc:	f7f8 fe10 	bl	8002520 <HAL_GPIO_WritePin>
  MP3_CCS(0);
 8009900:	2200      	movs	r2, #0
 8009902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009906:	4806      	ldr	r0, [pc, #24]	; (8009920 <VS1003_Init+0x50>)
 8009908:	f7f8 fe0a 	bl	8002520 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 800990c:	200a      	movs	r0, #10
 800990e:	f7f7 ffdd 	bl	80018cc <HAL_Delay>
}
 8009912:	bf00      	nop
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	200096b8 	.word	0x200096b8
 800991c:	200041e0 	.word	0x200041e0
 8009920:	40021000 	.word	0x40021000

08009924 <VS1003_WriteReg>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_WriteReg( uint8_t reg, uint16_t value )
{  
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	460a      	mov	r2, r1
 800992e:	71fb      	strb	r3, [r7, #7]
 8009930:	4613      	mov	r3, r2
 8009932:	80bb      	strh	r3, [r7, #4]
	while(  MP3_DREQ ==0 );           /* */
 8009934:	bf00      	nop
 8009936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800993a:	481a      	ldr	r0, [pc, #104]	; (80099a4 <VS1003_WriteReg+0x80>)
 800993c:	f7f8 fdd8 	bl	80024f0 <HAL_GPIO_ReadPin>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0f7      	beq.n	8009936 <VS1003_WriteReg+0x12>

	//VS1003_SPI_SetSpeed( SPI_SPEED_LOW );
	MP3_DCS(1); 
 8009946:	2201      	movs	r2, #1
 8009948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800994c:	4815      	ldr	r0, [pc, #84]	; (80099a4 <VS1003_WriteReg+0x80>)
 800994e:	f7f8 fde7 	bl	8002520 <HAL_GPIO_WritePin>
	MP3_CCS(0); 
 8009952:	2200      	movs	r2, #0
 8009954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009958:	4812      	ldr	r0, [pc, #72]	; (80099a4 <VS1003_WriteReg+0x80>)
 800995a:	f7f8 fde1 	bl	8002520 <HAL_GPIO_WritePin>
	VS1003_SPI_WriteByte(VS_WRITE_COMMAND); /*  VS1003 */
 800995e:	2002      	movs	r0, #2
 8009960:	f7ff ff9a 	bl	8009898 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(reg);             
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff ff96 	bl	8009898 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value>>8);        
 800996c:	88bb      	ldrh	r3, [r7, #4]
 800996e:	0a1b      	lsrs	r3, r3, #8
 8009970:	b29b      	uxth	r3, r3
 8009972:	b2db      	uxtb	r3, r3
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff ff8f 	bl	8009898 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value);	 
 800997a:	88bb      	ldrh	r3, [r7, #4]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff ff8a 	bl	8009898 <VS1003_SPI_WriteByte>
	MP3_DCS(0); 
 8009984:	2200      	movs	r2, #0
 8009986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800998a:	4806      	ldr	r0, [pc, #24]	; (80099a4 <VS1003_WriteReg+0x80>)
 800998c:	f7f8 fdc8 	bl	8002520 <HAL_GPIO_WritePin>
	MP3_CCS(1); 
 8009990:	2201      	movs	r2, #1
 8009992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009996:	4803      	ldr	r0, [pc, #12]	; (80099a4 <VS1003_WriteReg+0x80>)
 8009998:	f7f8 fdc2 	bl	8002520 <HAL_GPIO_WritePin>
	//VS1003_SPI_SetSpeed( SPI_SPEED_HIGH );
} 
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40021000 	.word	0x40021000

080099a8 <VS1003_ResetDecodeTime>:
} 

/*******************************************************************************
*******************************************************************************/                       
void VS1003_ResetDecodeTime(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 80099ac:	2100      	movs	r1, #0
 80099ae:	2004      	movs	r0, #4
 80099b0:	f7ff ffb8 	bl	8009924 <VS1003_WriteReg>
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000); /* */
 80099b4:	2100      	movs	r1, #0
 80099b6:	2004      	movs	r0, #4
 80099b8:	f7ff ffb4 	bl	8009924 <VS1003_WriteReg>
}
 80099bc:	bf00      	nop
 80099be:	bd80      	pop	{r7, pc}

080099c0 <VS1003_SoftReset>:
} 

/*******************************************************************************
*******************************************************************************/
void VS1003_SoftReset(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
	uint8_t retry; 	
				 
	while(  MP3_DREQ ==0 );
 80099c4:	bf00      	nop
 80099c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099ca:	4810      	ldr	r0, [pc, #64]	; (8009a0c <VS1003_SoftReset+0x4c>)
 80099cc:	f7f8 fd90 	bl	80024f0 <HAL_GPIO_ReadPin>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0f7      	beq.n	80099c6 <VS1003_SoftReset+0x6>

	VS1003_WriteReg(SPI_MODE, (SM_SDINEW | SM_RESET));  /* */
 80099d6:	f640 0104 	movw	r1, #2052	; 0x804
 80099da:	2000      	movs	r0, #0
 80099dc:	f7ff ffa2 	bl	8009924 <VS1003_WriteReg>
	HAL_Delay(2);                        /* 1.35ms */
 80099e0:	2002      	movs	r0, #2
 80099e2:	f7f7 ff73 	bl	80018cc <HAL_Delay>
	
	while(  MP3_DREQ ==0 );
 80099e6:	bf00      	nop
 80099e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099ec:	4807      	ldr	r0, [pc, #28]	; (8009a0c <VS1003_SoftReset+0x4c>)
 80099ee:	f7f8 fd7f 	bl	80024f0 <HAL_GPIO_ReadPin>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0f7      	beq.n	80099e8 <VS1003_SoftReset+0x28>
	// 		//printf("SPI_CLOCKF Set Error\r\n");
	// 		break; 
	// 	}
	// }

	VS1003_WriteReg(SPI_VOL, 0x4040);
 80099f8:	f244 0140 	movw	r1, #16448	; 0x4040
 80099fc:	200b      	movs	r0, #11
 80099fe:	f7ff ff91 	bl	8009924 <VS1003_WriteReg>
	VS1003_ResetDecodeTime();
 8009a02:	f7ff ffd1 	bl	80099a8 <VS1003_ResetDecodeTime>
} 
 8009a06:	bf00      	nop
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40021000 	.word	0x40021000

08009a10 <VS1003_Play_Data_DMA>:
	HAL_SPI_Transmit_DMA(hspiVS1003, szBeepMP3, sizeof(szBeepMP3));

}

void VS1003_Play_Data_DMA(uint8_t *data, int length)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	MP3_CCS(1);
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a20:	480a      	ldr	r0, [pc, #40]	; (8009a4c <VS1003_Play_Data_DMA+0x3c>)
 8009a22:	f7f8 fd7d 	bl	8002520 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 8009a26:	2200      	movs	r2, #0
 8009a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a2c:	4807      	ldr	r0, [pc, #28]	; (8009a4c <VS1003_Play_Data_DMA+0x3c>)
 8009a2e:	f7f8 fd77 	bl	8002520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, data, length);
 8009a32:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <VS1003_Play_Data_DMA+0x40>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	b292      	uxth	r2, r2
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f8 ffa1 	bl	8002984 <HAL_SPI_Transmit_DMA>
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40021000 	.word	0x40021000
 8009a50:	200096b8 	.word	0x200096b8

08009a54 <VS1003_Play_1frameMute_DMA>:

void VS1003_Play_1frameMute_DMA()
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
	MP3_CCS(1);
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a5e:	4809      	ldr	r0, [pc, #36]	; (8009a84 <VS1003_Play_1frameMute_DMA+0x30>)
 8009a60:	f7f8 fd5e 	bl	8002520 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 8009a64:	2200      	movs	r2, #0
 8009a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a6a:	4806      	ldr	r0, [pc, #24]	; (8009a84 <VS1003_Play_1frameMute_DMA+0x30>)
 8009a6c:	f7f8 fd58 	bl	8002520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, mute1framse, 24);
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <VS1003_Play_1frameMute_DMA+0x34>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2218      	movs	r2, #24
 8009a76:	4905      	ldr	r1, [pc, #20]	; (8009a8c <VS1003_Play_1frameMute_DMA+0x38>)
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f8 ff83 	bl	8002984 <HAL_SPI_Transmit_DMA>
}
 8009a7e:	bf00      	nop
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40021000 	.word	0x40021000
 8009a88:	200096b8 	.word	0x200096b8
 8009a8c:	20000104 	.word	0x20000104

08009a90 <DREQ_VS1003_IRQhandler>:

void DREQ_VS1003_IRQhandler()
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
	if (!MP3_DREQ) //falling
 8009a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a98:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <DREQ_VS1003_IRQhandler+0x30>)
 8009a9a:	f7f8 fd29 	bl	80024f0 <HAL_GPIO_ReadPin>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d105      	bne.n	8009ab0 <DREQ_VS1003_IRQhandler+0x20>
	    {
	      //pause DMA
	      HAL_SPI_DMAPause(hspiVS1003);
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <DREQ_VS1003_IRQhandler+0x34>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7f9 f821 	bl	8002af0 <HAL_SPI_DMAPause>
	    else //rising
	    {
	      //resume DMA
	      HAL_SPI_DMAResume(hspiVS1003);
	    }
}
 8009aae:	e004      	b.n	8009aba <DREQ_VS1003_IRQhandler+0x2a>
	      HAL_SPI_DMAResume(hspiVS1003);
 8009ab0:	4b04      	ldr	r3, [pc, #16]	; (8009ac4 <DREQ_VS1003_IRQhandler+0x34>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f9 f83d 	bl	8002b34 <HAL_SPI_DMAResume>
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	200096b8 	.word	0x200096b8

08009ac8 <__errno>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	; (8009ad0 <__errno+0x8>)
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	2000011c 	.word	0x2000011c

08009ad4 <__libc_init_array>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4d0d      	ldr	r5, [pc, #52]	; (8009b0c <__libc_init_array+0x38>)
 8009ad8:	4c0d      	ldr	r4, [pc, #52]	; (8009b10 <__libc_init_array+0x3c>)
 8009ada:	1b64      	subs	r4, r4, r5
 8009adc:	10a4      	asrs	r4, r4, #2
 8009ade:	2600      	movs	r6, #0
 8009ae0:	42a6      	cmp	r6, r4
 8009ae2:	d109      	bne.n	8009af8 <__libc_init_array+0x24>
 8009ae4:	4d0b      	ldr	r5, [pc, #44]	; (8009b14 <__libc_init_array+0x40>)
 8009ae6:	4c0c      	ldr	r4, [pc, #48]	; (8009b18 <__libc_init_array+0x44>)
 8009ae8:	f001 f9d6 	bl	800ae98 <_init>
 8009aec:	1b64      	subs	r4, r4, r5
 8009aee:	10a4      	asrs	r4, r4, #2
 8009af0:	2600      	movs	r6, #0
 8009af2:	42a6      	cmp	r6, r4
 8009af4:	d105      	bne.n	8009b02 <__libc_init_array+0x2e>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afc:	4798      	blx	r3
 8009afe:	3601      	adds	r6, #1
 8009b00:	e7ee      	b.n	8009ae0 <__libc_init_array+0xc>
 8009b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b06:	4798      	blx	r3
 8009b08:	3601      	adds	r6, #1
 8009b0a:	e7f2      	b.n	8009af2 <__libc_init_array+0x1e>
 8009b0c:	0800b248 	.word	0x0800b248
 8009b10:	0800b248 	.word	0x0800b248
 8009b14:	0800b248 	.word	0x0800b248
 8009b18:	0800b24c 	.word	0x0800b24c

08009b1c <memcpy>:
 8009b1c:	440a      	add	r2, r1
 8009b1e:	4291      	cmp	r1, r2
 8009b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b24:	d100      	bne.n	8009b28 <memcpy+0xc>
 8009b26:	4770      	bx	lr
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b32:	4291      	cmp	r1, r2
 8009b34:	d1f9      	bne.n	8009b2a <memcpy+0xe>
 8009b36:	bd10      	pop	{r4, pc}

08009b38 <memset>:
 8009b38:	4402      	add	r2, r0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d100      	bne.n	8009b42 <memset+0xa>
 8009b40:	4770      	bx	lr
 8009b42:	f803 1b01 	strb.w	r1, [r3], #1
 8009b46:	e7f9      	b.n	8009b3c <memset+0x4>

08009b48 <iprintf>:
 8009b48:	b40f      	push	{r0, r1, r2, r3}
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <iprintf+0x2c>)
 8009b4c:	b513      	push	{r0, r1, r4, lr}
 8009b4e:	681c      	ldr	r4, [r3, #0]
 8009b50:	b124      	cbz	r4, 8009b5c <iprintf+0x14>
 8009b52:	69a3      	ldr	r3, [r4, #24]
 8009b54:	b913      	cbnz	r3, 8009b5c <iprintf+0x14>
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 fa96 	bl	800a088 <__sinit>
 8009b5c:	ab05      	add	r3, sp, #20
 8009b5e:	9a04      	ldr	r2, [sp, #16]
 8009b60:	68a1      	ldr	r1, [r4, #8]
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fdc3 	bl	800a6f0 <_vfiprintf_r>
 8009b6a:	b002      	add	sp, #8
 8009b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b70:	b004      	add	sp, #16
 8009b72:	4770      	bx	lr
 8009b74:	2000011c 	.word	0x2000011c

08009b78 <_puts_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	460e      	mov	r6, r1
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	b118      	cbz	r0, 8009b88 <_puts_r+0x10>
 8009b80:	6983      	ldr	r3, [r0, #24]
 8009b82:	b90b      	cbnz	r3, 8009b88 <_puts_r+0x10>
 8009b84:	f000 fa80 	bl	800a088 <__sinit>
 8009b88:	69ab      	ldr	r3, [r5, #24]
 8009b8a:	68ac      	ldr	r4, [r5, #8]
 8009b8c:	b913      	cbnz	r3, 8009b94 <_puts_r+0x1c>
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 fa7a 	bl	800a088 <__sinit>
 8009b94:	4b2c      	ldr	r3, [pc, #176]	; (8009c48 <_puts_r+0xd0>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d120      	bne.n	8009bdc <_puts_r+0x64>
 8009b9a:	686c      	ldr	r4, [r5, #4]
 8009b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9e:	07db      	lsls	r3, r3, #31
 8009ba0:	d405      	bmi.n	8009bae <_puts_r+0x36>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	0598      	lsls	r0, r3, #22
 8009ba6:	d402      	bmi.n	8009bae <_puts_r+0x36>
 8009ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009baa:	f000 fb0b 	bl	800a1c4 <__retarget_lock_acquire_recursive>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	0719      	lsls	r1, r3, #28
 8009bb2:	d51d      	bpl.n	8009bf0 <_puts_r+0x78>
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	b1db      	cbz	r3, 8009bf0 <_puts_r+0x78>
 8009bb8:	3e01      	subs	r6, #1
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	60a3      	str	r3, [r4, #8]
 8009bc4:	bb39      	cbnz	r1, 8009c16 <_puts_r+0x9e>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da38      	bge.n	8009c3c <_puts_r+0xc4>
 8009bca:	4622      	mov	r2, r4
 8009bcc:	210a      	movs	r1, #10
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f880 	bl	8009cd4 <__swbuf_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d011      	beq.n	8009bfc <_puts_r+0x84>
 8009bd8:	250a      	movs	r5, #10
 8009bda:	e011      	b.n	8009c00 <_puts_r+0x88>
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <_puts_r+0xd4>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d101      	bne.n	8009be6 <_puts_r+0x6e>
 8009be2:	68ac      	ldr	r4, [r5, #8]
 8009be4:	e7da      	b.n	8009b9c <_puts_r+0x24>
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <_puts_r+0xd8>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	bf08      	it	eq
 8009bec:	68ec      	ldreq	r4, [r5, #12]
 8009bee:	e7d5      	b.n	8009b9c <_puts_r+0x24>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f8c0 	bl	8009d78 <__swsetup_r>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d0dd      	beq.n	8009bb8 <_puts_r+0x40>
 8009bfc:	f04f 35ff 	mov.w	r5, #4294967295
 8009c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c02:	07da      	lsls	r2, r3, #31
 8009c04:	d405      	bmi.n	8009c12 <_puts_r+0x9a>
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	059b      	lsls	r3, r3, #22
 8009c0a:	d402      	bmi.n	8009c12 <_puts_r+0x9a>
 8009c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0e:	f000 fada 	bl	800a1c6 <__retarget_lock_release_recursive>
 8009c12:	4628      	mov	r0, r5
 8009c14:	bd70      	pop	{r4, r5, r6, pc}
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da04      	bge.n	8009c24 <_puts_r+0xac>
 8009c1a:	69a2      	ldr	r2, [r4, #24]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	dc06      	bgt.n	8009c2e <_puts_r+0xb6>
 8009c20:	290a      	cmp	r1, #10
 8009c22:	d004      	beq.n	8009c2e <_puts_r+0xb6>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	7019      	strb	r1, [r3, #0]
 8009c2c:	e7c5      	b.n	8009bba <_puts_r+0x42>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f000 f84f 	bl	8009cd4 <__swbuf_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	d1bf      	bne.n	8009bba <_puts_r+0x42>
 8009c3a:	e7df      	b.n	8009bfc <_puts_r+0x84>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	250a      	movs	r5, #10
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	6022      	str	r2, [r4, #0]
 8009c44:	701d      	strb	r5, [r3, #0]
 8009c46:	e7db      	b.n	8009c00 <_puts_r+0x88>
 8009c48:	0800b1cc 	.word	0x0800b1cc
 8009c4c:	0800b1ec 	.word	0x0800b1ec
 8009c50:	0800b1ac 	.word	0x0800b1ac

08009c54 <puts>:
 8009c54:	4b02      	ldr	r3, [pc, #8]	; (8009c60 <puts+0xc>)
 8009c56:	4601      	mov	r1, r0
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	f7ff bf8d 	b.w	8009b78 <_puts_r>
 8009c5e:	bf00      	nop
 8009c60:	2000011c 	.word	0x2000011c

08009c64 <siprintf>:
 8009c64:	b40e      	push	{r1, r2, r3}
 8009c66:	b500      	push	{lr}
 8009c68:	b09c      	sub	sp, #112	; 0x70
 8009c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c6c:	9002      	str	r0, [sp, #8]
 8009c6e:	9006      	str	r0, [sp, #24]
 8009c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c74:	4809      	ldr	r0, [pc, #36]	; (8009c9c <siprintf+0x38>)
 8009c76:	9107      	str	r1, [sp, #28]
 8009c78:	9104      	str	r1, [sp, #16]
 8009c7a:	4909      	ldr	r1, [pc, #36]	; (8009ca0 <siprintf+0x3c>)
 8009c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c80:	9105      	str	r1, [sp, #20]
 8009c82:	6800      	ldr	r0, [r0, #0]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	a902      	add	r1, sp, #8
 8009c88:	f000 fc08 	bl	800a49c <_svfiprintf_r>
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	b01c      	add	sp, #112	; 0x70
 8009c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c98:	b003      	add	sp, #12
 8009c9a:	4770      	bx	lr
 8009c9c:	2000011c 	.word	0x2000011c
 8009ca0:	ffff0208 	.word	0xffff0208

08009ca4 <strstr>:
 8009ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca6:	780c      	ldrb	r4, [r1, #0]
 8009ca8:	b164      	cbz	r4, 8009cc4 <strstr+0x20>
 8009caa:	4603      	mov	r3, r0
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	1c5e      	adds	r6, r3, #1
 8009cb2:	b90a      	cbnz	r2, 8009cb8 <strstr+0x14>
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	e005      	b.n	8009cc4 <strstr+0x20>
 8009cb8:	4294      	cmp	r4, r2
 8009cba:	d108      	bne.n	8009cce <strstr+0x2a>
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009cc2:	b902      	cbnz	r2, 8009cc6 <strstr+0x22>
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009cca:	4297      	cmp	r7, r2
 8009ccc:	d0f7      	beq.n	8009cbe <strstr+0x1a>
 8009cce:	4633      	mov	r3, r6
 8009cd0:	e7ec      	b.n	8009cac <strstr+0x8>
	...

08009cd4 <__swbuf_r>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	460e      	mov	r6, r1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	4605      	mov	r5, r0
 8009cdc:	b118      	cbz	r0, 8009ce6 <__swbuf_r+0x12>
 8009cde:	6983      	ldr	r3, [r0, #24]
 8009ce0:	b90b      	cbnz	r3, 8009ce6 <__swbuf_r+0x12>
 8009ce2:	f000 f9d1 	bl	800a088 <__sinit>
 8009ce6:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <__swbuf_r+0x98>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d12b      	bne.n	8009d44 <__swbuf_r+0x70>
 8009cec:	686c      	ldr	r4, [r5, #4]
 8009cee:	69a3      	ldr	r3, [r4, #24]
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	071a      	lsls	r2, r3, #28
 8009cf6:	d52f      	bpl.n	8009d58 <__swbuf_r+0x84>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	b36b      	cbz	r3, 8009d58 <__swbuf_r+0x84>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	6820      	ldr	r0, [r4, #0]
 8009d00:	1ac0      	subs	r0, r0, r3
 8009d02:	6963      	ldr	r3, [r4, #20]
 8009d04:	b2f6      	uxtb	r6, r6
 8009d06:	4283      	cmp	r3, r0
 8009d08:	4637      	mov	r7, r6
 8009d0a:	dc04      	bgt.n	8009d16 <__swbuf_r+0x42>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f926 	bl	8009f60 <_fflush_r>
 8009d14:	bb30      	cbnz	r0, 8009d64 <__swbuf_r+0x90>
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	701e      	strb	r6, [r3, #0]
 8009d24:	6963      	ldr	r3, [r4, #20]
 8009d26:	3001      	adds	r0, #1
 8009d28:	4283      	cmp	r3, r0
 8009d2a:	d004      	beq.n	8009d36 <__swbuf_r+0x62>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d506      	bpl.n	8009d40 <__swbuf_r+0x6c>
 8009d32:	2e0a      	cmp	r6, #10
 8009d34:	d104      	bne.n	8009d40 <__swbuf_r+0x6c>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f000 f911 	bl	8009f60 <_fflush_r>
 8009d3e:	b988      	cbnz	r0, 8009d64 <__swbuf_r+0x90>
 8009d40:	4638      	mov	r0, r7
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <__swbuf_r+0x9c>)
 8009d46:	429c      	cmp	r4, r3
 8009d48:	d101      	bne.n	8009d4e <__swbuf_r+0x7a>
 8009d4a:	68ac      	ldr	r4, [r5, #8]
 8009d4c:	e7cf      	b.n	8009cee <__swbuf_r+0x1a>
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <__swbuf_r+0xa0>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	bf08      	it	eq
 8009d54:	68ec      	ldreq	r4, [r5, #12]
 8009d56:	e7ca      	b.n	8009cee <__swbuf_r+0x1a>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 f80c 	bl	8009d78 <__swsetup_r>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d0cb      	beq.n	8009cfc <__swbuf_r+0x28>
 8009d64:	f04f 37ff 	mov.w	r7, #4294967295
 8009d68:	e7ea      	b.n	8009d40 <__swbuf_r+0x6c>
 8009d6a:	bf00      	nop
 8009d6c:	0800b1cc 	.word	0x0800b1cc
 8009d70:	0800b1ec 	.word	0x0800b1ec
 8009d74:	0800b1ac 	.word	0x0800b1ac

08009d78 <__swsetup_r>:
 8009d78:	4b32      	ldr	r3, [pc, #200]	; (8009e44 <__swsetup_r+0xcc>)
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	b125      	cbz	r5, 8009d8e <__swsetup_r+0x16>
 8009d84:	69ab      	ldr	r3, [r5, #24]
 8009d86:	b913      	cbnz	r3, 8009d8e <__swsetup_r+0x16>
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 f97d 	bl	800a088 <__sinit>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__swsetup_r+0xd0>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d10f      	bne.n	8009db4 <__swsetup_r+0x3c>
 8009d94:	686c      	ldr	r4, [r5, #4]
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d9c:	0719      	lsls	r1, r3, #28
 8009d9e:	d42c      	bmi.n	8009dfa <__swsetup_r+0x82>
 8009da0:	06dd      	lsls	r5, r3, #27
 8009da2:	d411      	bmi.n	8009dc8 <__swsetup_r+0x50>
 8009da4:	2309      	movs	r3, #9
 8009da6:	6033      	str	r3, [r6, #0]
 8009da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e03e      	b.n	8009e32 <__swsetup_r+0xba>
 8009db4:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <__swsetup_r+0xd4>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d101      	bne.n	8009dbe <__swsetup_r+0x46>
 8009dba:	68ac      	ldr	r4, [r5, #8]
 8009dbc:	e7eb      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dbe:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <__swsetup_r+0xd8>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	bf08      	it	eq
 8009dc4:	68ec      	ldreq	r4, [r5, #12]
 8009dc6:	e7e6      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dc8:	0758      	lsls	r0, r3, #29
 8009dca:	d512      	bpl.n	8009df2 <__swsetup_r+0x7a>
 8009dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dce:	b141      	cbz	r1, 8009de2 <__swsetup_r+0x6a>
 8009dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	d002      	beq.n	8009dde <__swsetup_r+0x66>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 fa59 	bl	800a290 <_free_r>
 8009dde:	2300      	movs	r3, #0
 8009de0:	6363      	str	r3, [r4, #52]	; 0x34
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6063      	str	r3, [r4, #4]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0308 	orr.w	r3, r3, #8
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	b94b      	cbnz	r3, 8009e12 <__swsetup_r+0x9a>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e08:	d003      	beq.n	8009e12 <__swsetup_r+0x9a>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f9ff 	bl	800a210 <__smakebuf_r>
 8009e12:	89a0      	ldrh	r0, [r4, #12]
 8009e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e18:	f010 0301 	ands.w	r3, r0, #1
 8009e1c:	d00a      	beq.n	8009e34 <__swsetup_r+0xbc>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	425b      	negs	r3, r3
 8009e26:	61a3      	str	r3, [r4, #24]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b943      	cbnz	r3, 8009e3e <__swsetup_r+0xc6>
 8009e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e30:	d1ba      	bne.n	8009da8 <__swsetup_r+0x30>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	0781      	lsls	r1, r0, #30
 8009e36:	bf58      	it	pl
 8009e38:	6963      	ldrpl	r3, [r4, #20]
 8009e3a:	60a3      	str	r3, [r4, #8]
 8009e3c:	e7f4      	b.n	8009e28 <__swsetup_r+0xb0>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e7f7      	b.n	8009e32 <__swsetup_r+0xba>
 8009e42:	bf00      	nop
 8009e44:	2000011c 	.word	0x2000011c
 8009e48:	0800b1cc 	.word	0x0800b1cc
 8009e4c:	0800b1ec 	.word	0x0800b1ec
 8009e50:	0800b1ac 	.word	0x0800b1ac

08009e54 <__sflush_r>:
 8009e54:	898a      	ldrh	r2, [r1, #12]
 8009e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	0710      	lsls	r0, r2, #28
 8009e5e:	460c      	mov	r4, r1
 8009e60:	d458      	bmi.n	8009f14 <__sflush_r+0xc0>
 8009e62:	684b      	ldr	r3, [r1, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dc05      	bgt.n	8009e74 <__sflush_r+0x20>
 8009e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dc02      	bgt.n	8009e74 <__sflush_r+0x20>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d0f9      	beq.n	8009e6e <__sflush_r+0x1a>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e80:	682f      	ldr	r7, [r5, #0]
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	d032      	beq.n	8009eec <__sflush_r+0x98>
 8009e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	075a      	lsls	r2, r3, #29
 8009e8c:	d505      	bpl.n	8009e9a <__sflush_r+0x46>
 8009e8e:	6863      	ldr	r3, [r4, #4]
 8009e90:	1ac0      	subs	r0, r0, r3
 8009e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e94:	b10b      	cbz	r3, 8009e9a <__sflush_r+0x46>
 8009e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e98:	1ac0      	subs	r0, r0, r3
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea0:	6a21      	ldr	r1, [r4, #32]
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b0      	blx	r6
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	d106      	bne.n	8009eba <__sflush_r+0x66>
 8009eac:	6829      	ldr	r1, [r5, #0]
 8009eae:	291d      	cmp	r1, #29
 8009eb0:	d82c      	bhi.n	8009f0c <__sflush_r+0xb8>
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <__sflush_r+0x108>)
 8009eb4:	40ca      	lsrs	r2, r1
 8009eb6:	07d6      	lsls	r6, r2, #31
 8009eb8:	d528      	bpl.n	8009f0c <__sflush_r+0xb8>
 8009eba:	2200      	movs	r2, #0
 8009ebc:	6062      	str	r2, [r4, #4]
 8009ebe:	04d9      	lsls	r1, r3, #19
 8009ec0:	6922      	ldr	r2, [r4, #16]
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	d504      	bpl.n	8009ed0 <__sflush_r+0x7c>
 8009ec6:	1c42      	adds	r2, r0, #1
 8009ec8:	d101      	bne.n	8009ece <__sflush_r+0x7a>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	b903      	cbnz	r3, 8009ed0 <__sflush_r+0x7c>
 8009ece:	6560      	str	r0, [r4, #84]	; 0x54
 8009ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed2:	602f      	str	r7, [r5, #0]
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d0ca      	beq.n	8009e6e <__sflush_r+0x1a>
 8009ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009edc:	4299      	cmp	r1, r3
 8009ede:	d002      	beq.n	8009ee6 <__sflush_r+0x92>
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f9d5 	bl	800a290 <_free_r>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8009eea:	e7c1      	b.n	8009e70 <__sflush_r+0x1c>
 8009eec:	6a21      	ldr	r1, [r4, #32]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b0      	blx	r6
 8009ef4:	1c41      	adds	r1, r0, #1
 8009ef6:	d1c7      	bne.n	8009e88 <__sflush_r+0x34>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0c4      	beq.n	8009e88 <__sflush_r+0x34>
 8009efe:	2b1d      	cmp	r3, #29
 8009f00:	d001      	beq.n	8009f06 <__sflush_r+0xb2>
 8009f02:	2b16      	cmp	r3, #22
 8009f04:	d101      	bne.n	8009f0a <__sflush_r+0xb6>
 8009f06:	602f      	str	r7, [r5, #0]
 8009f08:	e7b1      	b.n	8009e6e <__sflush_r+0x1a>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	e7ad      	b.n	8009e70 <__sflush_r+0x1c>
 8009f14:	690f      	ldr	r7, [r1, #16]
 8009f16:	2f00      	cmp	r7, #0
 8009f18:	d0a9      	beq.n	8009e6e <__sflush_r+0x1a>
 8009f1a:	0793      	lsls	r3, r2, #30
 8009f1c:	680e      	ldr	r6, [r1, #0]
 8009f1e:	bf08      	it	eq
 8009f20:	694b      	ldreq	r3, [r1, #20]
 8009f22:	600f      	str	r7, [r1, #0]
 8009f24:	bf18      	it	ne
 8009f26:	2300      	movne	r3, #0
 8009f28:	eba6 0807 	sub.w	r8, r6, r7
 8009f2c:	608b      	str	r3, [r1, #8]
 8009f2e:	f1b8 0f00 	cmp.w	r8, #0
 8009f32:	dd9c      	ble.n	8009e6e <__sflush_r+0x1a>
 8009f34:	6a21      	ldr	r1, [r4, #32]
 8009f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f38:	4643      	mov	r3, r8
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b0      	blx	r6
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dc06      	bgt.n	8009f52 <__sflush_r+0xfe>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	e78e      	b.n	8009e70 <__sflush_r+0x1c>
 8009f52:	4407      	add	r7, r0
 8009f54:	eba8 0800 	sub.w	r8, r8, r0
 8009f58:	e7e9      	b.n	8009f2e <__sflush_r+0xda>
 8009f5a:	bf00      	nop
 8009f5c:	20400001 	.word	0x20400001

08009f60 <_fflush_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	690b      	ldr	r3, [r1, #16]
 8009f64:	4605      	mov	r5, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b913      	cbnz	r3, 8009f70 <_fflush_r+0x10>
 8009f6a:	2500      	movs	r5, #0
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	b118      	cbz	r0, 8009f7a <_fflush_r+0x1a>
 8009f72:	6983      	ldr	r3, [r0, #24]
 8009f74:	b90b      	cbnz	r3, 8009f7a <_fflush_r+0x1a>
 8009f76:	f000 f887 	bl	800a088 <__sinit>
 8009f7a:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <_fflush_r+0x6c>)
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	d11b      	bne.n	8009fb8 <_fflush_r+0x58>
 8009f80:	686c      	ldr	r4, [r5, #4]
 8009f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0ef      	beq.n	8009f6a <_fflush_r+0xa>
 8009f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f8c:	07d0      	lsls	r0, r2, #31
 8009f8e:	d404      	bmi.n	8009f9a <_fflush_r+0x3a>
 8009f90:	0599      	lsls	r1, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_fflush_r+0x3a>
 8009f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f96:	f000 f915 	bl	800a1c4 <__retarget_lock_acquire_recursive>
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f7ff ff59 	bl	8009e54 <__sflush_r>
 8009fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa4:	07da      	lsls	r2, r3, #31
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	d4e0      	bmi.n	8009f6c <_fflush_r+0xc>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	059b      	lsls	r3, r3, #22
 8009fae:	d4dd      	bmi.n	8009f6c <_fflush_r+0xc>
 8009fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb2:	f000 f908 	bl	800a1c6 <__retarget_lock_release_recursive>
 8009fb6:	e7d9      	b.n	8009f6c <_fflush_r+0xc>
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <_fflush_r+0x70>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d101      	bne.n	8009fc2 <_fflush_r+0x62>
 8009fbe:	68ac      	ldr	r4, [r5, #8]
 8009fc0:	e7df      	b.n	8009f82 <_fflush_r+0x22>
 8009fc2:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <_fflush_r+0x74>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	bf08      	it	eq
 8009fc8:	68ec      	ldreq	r4, [r5, #12]
 8009fca:	e7da      	b.n	8009f82 <_fflush_r+0x22>
 8009fcc:	0800b1cc 	.word	0x0800b1cc
 8009fd0:	0800b1ec 	.word	0x0800b1ec
 8009fd4:	0800b1ac 	.word	0x0800b1ac

08009fd8 <std>:
 8009fd8:	2300      	movs	r3, #0
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	e9c0 3300 	strd	r3, r3, [r0]
 8009fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fe6:	6083      	str	r3, [r0, #8]
 8009fe8:	8181      	strh	r1, [r0, #12]
 8009fea:	6643      	str	r3, [r0, #100]	; 0x64
 8009fec:	81c2      	strh	r2, [r0, #14]
 8009fee:	6183      	str	r3, [r0, #24]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2208      	movs	r2, #8
 8009ff4:	305c      	adds	r0, #92	; 0x5c
 8009ff6:	f7ff fd9f 	bl	8009b38 <memset>
 8009ffa:	4b05      	ldr	r3, [pc, #20]	; (800a010 <std+0x38>)
 8009ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <std+0x3c>)
 800a000:	62a3      	str	r3, [r4, #40]	; 0x28
 800a002:	4b05      	ldr	r3, [pc, #20]	; (800a018 <std+0x40>)
 800a004:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <std+0x44>)
 800a008:	6224      	str	r4, [r4, #32]
 800a00a:	6323      	str	r3, [r4, #48]	; 0x30
 800a00c:	bd10      	pop	{r4, pc}
 800a00e:	bf00      	nop
 800a010:	0800ac99 	.word	0x0800ac99
 800a014:	0800acbb 	.word	0x0800acbb
 800a018:	0800acf3 	.word	0x0800acf3
 800a01c:	0800ad17 	.word	0x0800ad17

0800a020 <_cleanup_r>:
 800a020:	4901      	ldr	r1, [pc, #4]	; (800a028 <_cleanup_r+0x8>)
 800a022:	f000 b8af 	b.w	800a184 <_fwalk_reent>
 800a026:	bf00      	nop
 800a028:	08009f61 	.word	0x08009f61

0800a02c <__sfmoreglue>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	1e4a      	subs	r2, r1, #1
 800a030:	2568      	movs	r5, #104	; 0x68
 800a032:	4355      	muls	r5, r2
 800a034:	460e      	mov	r6, r1
 800a036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a03a:	f000 f979 	bl	800a330 <_malloc_r>
 800a03e:	4604      	mov	r4, r0
 800a040:	b140      	cbz	r0, 800a054 <__sfmoreglue+0x28>
 800a042:	2100      	movs	r1, #0
 800a044:	e9c0 1600 	strd	r1, r6, [r0]
 800a048:	300c      	adds	r0, #12
 800a04a:	60a0      	str	r0, [r4, #8]
 800a04c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a050:	f7ff fd72 	bl	8009b38 <memset>
 800a054:	4620      	mov	r0, r4
 800a056:	bd70      	pop	{r4, r5, r6, pc}

0800a058 <__sfp_lock_acquire>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__sfp_lock_acquire+0x8>)
 800a05a:	f000 b8b3 	b.w	800a1c4 <__retarget_lock_acquire_recursive>
 800a05e:	bf00      	nop
 800a060:	200096c4 	.word	0x200096c4

0800a064 <__sfp_lock_release>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__sfp_lock_release+0x8>)
 800a066:	f000 b8ae 	b.w	800a1c6 <__retarget_lock_release_recursive>
 800a06a:	bf00      	nop
 800a06c:	200096c4 	.word	0x200096c4

0800a070 <__sinit_lock_acquire>:
 800a070:	4801      	ldr	r0, [pc, #4]	; (800a078 <__sinit_lock_acquire+0x8>)
 800a072:	f000 b8a7 	b.w	800a1c4 <__retarget_lock_acquire_recursive>
 800a076:	bf00      	nop
 800a078:	200096bf 	.word	0x200096bf

0800a07c <__sinit_lock_release>:
 800a07c:	4801      	ldr	r0, [pc, #4]	; (800a084 <__sinit_lock_release+0x8>)
 800a07e:	f000 b8a2 	b.w	800a1c6 <__retarget_lock_release_recursive>
 800a082:	bf00      	nop
 800a084:	200096bf 	.word	0x200096bf

0800a088 <__sinit>:
 800a088:	b510      	push	{r4, lr}
 800a08a:	4604      	mov	r4, r0
 800a08c:	f7ff fff0 	bl	800a070 <__sinit_lock_acquire>
 800a090:	69a3      	ldr	r3, [r4, #24]
 800a092:	b11b      	cbz	r3, 800a09c <__sinit+0x14>
 800a094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a098:	f7ff bff0 	b.w	800a07c <__sinit_lock_release>
 800a09c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <__sinit+0x68>)
 800a0a4:	4a13      	ldr	r2, [pc, #76]	; (800a0f4 <__sinit+0x6c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	bf04      	itt	eq
 800a0ae:	2301      	moveq	r3, #1
 800a0b0:	61a3      	streq	r3, [r4, #24]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f820 	bl	800a0f8 <__sfp>
 800a0b8:	6060      	str	r0, [r4, #4]
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f81c 	bl	800a0f8 <__sfp>
 800a0c0:	60a0      	str	r0, [r4, #8]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 f818 	bl	800a0f8 <__sfp>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	60e0      	str	r0, [r4, #12]
 800a0cc:	2104      	movs	r1, #4
 800a0ce:	6860      	ldr	r0, [r4, #4]
 800a0d0:	f7ff ff82 	bl	8009fd8 <std>
 800a0d4:	68a0      	ldr	r0, [r4, #8]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	2109      	movs	r1, #9
 800a0da:	f7ff ff7d 	bl	8009fd8 <std>
 800a0de:	68e0      	ldr	r0, [r4, #12]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	2112      	movs	r1, #18
 800a0e4:	f7ff ff78 	bl	8009fd8 <std>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	61a3      	str	r3, [r4, #24]
 800a0ec:	e7d2      	b.n	800a094 <__sinit+0xc>
 800a0ee:	bf00      	nop
 800a0f0:	0800b1a8 	.word	0x0800b1a8
 800a0f4:	0800a021 	.word	0x0800a021

0800a0f8 <__sfp>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	f7ff ffac 	bl	800a058 <__sfp_lock_acquire>
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <__sfp+0x84>)
 800a102:	681e      	ldr	r6, [r3, #0]
 800a104:	69b3      	ldr	r3, [r6, #24]
 800a106:	b913      	cbnz	r3, 800a10e <__sfp+0x16>
 800a108:	4630      	mov	r0, r6
 800a10a:	f7ff ffbd 	bl	800a088 <__sinit>
 800a10e:	3648      	adds	r6, #72	; 0x48
 800a110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a114:	3b01      	subs	r3, #1
 800a116:	d503      	bpl.n	800a120 <__sfp+0x28>
 800a118:	6833      	ldr	r3, [r6, #0]
 800a11a:	b30b      	cbz	r3, 800a160 <__sfp+0x68>
 800a11c:	6836      	ldr	r6, [r6, #0]
 800a11e:	e7f7      	b.n	800a110 <__sfp+0x18>
 800a120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a124:	b9d5      	cbnz	r5, 800a15c <__sfp+0x64>
 800a126:	4b16      	ldr	r3, [pc, #88]	; (800a180 <__sfp+0x88>)
 800a128:	60e3      	str	r3, [r4, #12]
 800a12a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a12e:	6665      	str	r5, [r4, #100]	; 0x64
 800a130:	f000 f847 	bl	800a1c2 <__retarget_lock_init_recursive>
 800a134:	f7ff ff96 	bl	800a064 <__sfp_lock_release>
 800a138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a13c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a140:	6025      	str	r5, [r4, #0]
 800a142:	61a5      	str	r5, [r4, #24]
 800a144:	2208      	movs	r2, #8
 800a146:	4629      	mov	r1, r5
 800a148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a14c:	f7ff fcf4 	bl	8009b38 <memset>
 800a150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a158:	4620      	mov	r0, r4
 800a15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a15c:	3468      	adds	r4, #104	; 0x68
 800a15e:	e7d9      	b.n	800a114 <__sfp+0x1c>
 800a160:	2104      	movs	r1, #4
 800a162:	4638      	mov	r0, r7
 800a164:	f7ff ff62 	bl	800a02c <__sfmoreglue>
 800a168:	4604      	mov	r4, r0
 800a16a:	6030      	str	r0, [r6, #0]
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1d5      	bne.n	800a11c <__sfp+0x24>
 800a170:	f7ff ff78 	bl	800a064 <__sfp_lock_release>
 800a174:	230c      	movs	r3, #12
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	e7ee      	b.n	800a158 <__sfp+0x60>
 800a17a:	bf00      	nop
 800a17c:	0800b1a8 	.word	0x0800b1a8
 800a180:	ffff0001 	.word	0xffff0001

0800a184 <_fwalk_reent>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	4606      	mov	r6, r0
 800a18a:	4688      	mov	r8, r1
 800a18c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a190:	2700      	movs	r7, #0
 800a192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a196:	f1b9 0901 	subs.w	r9, r9, #1
 800a19a:	d505      	bpl.n	800a1a8 <_fwalk_reent+0x24>
 800a19c:	6824      	ldr	r4, [r4, #0]
 800a19e:	2c00      	cmp	r4, #0
 800a1a0:	d1f7      	bne.n	800a192 <_fwalk_reent+0xe>
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a8:	89ab      	ldrh	r3, [r5, #12]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d907      	bls.n	800a1be <_fwalk_reent+0x3a>
 800a1ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	d003      	beq.n	800a1be <_fwalk_reent+0x3a>
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	47c0      	blx	r8
 800a1bc:	4307      	orrs	r7, r0
 800a1be:	3568      	adds	r5, #104	; 0x68
 800a1c0:	e7e9      	b.n	800a196 <_fwalk_reent+0x12>

0800a1c2 <__retarget_lock_init_recursive>:
 800a1c2:	4770      	bx	lr

0800a1c4 <__retarget_lock_acquire_recursive>:
 800a1c4:	4770      	bx	lr

0800a1c6 <__retarget_lock_release_recursive>:
 800a1c6:	4770      	bx	lr

0800a1c8 <__swhatbuf_r>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	b096      	sub	sp, #88	; 0x58
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	461d      	mov	r5, r3
 800a1d8:	da07      	bge.n	800a1ea <__swhatbuf_r+0x22>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	89b3      	ldrh	r3, [r6, #12]
 800a1e0:	061a      	lsls	r2, r3, #24
 800a1e2:	d410      	bmi.n	800a206 <__swhatbuf_r+0x3e>
 800a1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e8:	e00e      	b.n	800a208 <__swhatbuf_r+0x40>
 800a1ea:	466a      	mov	r2, sp
 800a1ec:	f000 fdba 	bl	800ad64 <_fstat_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dbf2      	blt.n	800a1da <__swhatbuf_r+0x12>
 800a1f4:	9a01      	ldr	r2, [sp, #4]
 800a1f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1fe:	425a      	negs	r2, r3
 800a200:	415a      	adcs	r2, r3
 800a202:	602a      	str	r2, [r5, #0]
 800a204:	e7ee      	b.n	800a1e4 <__swhatbuf_r+0x1c>
 800a206:	2340      	movs	r3, #64	; 0x40
 800a208:	2000      	movs	r0, #0
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	b016      	add	sp, #88	; 0x58
 800a20e:	bd70      	pop	{r4, r5, r6, pc}

0800a210 <__smakebuf_r>:
 800a210:	898b      	ldrh	r3, [r1, #12]
 800a212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a214:	079d      	lsls	r5, r3, #30
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	d507      	bpl.n	800a22c <__smakebuf_r+0x1c>
 800a21c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	2301      	movs	r3, #1
 800a226:	6163      	str	r3, [r4, #20]
 800a228:	b002      	add	sp, #8
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	ab01      	add	r3, sp, #4
 800a22e:	466a      	mov	r2, sp
 800a230:	f7ff ffca 	bl	800a1c8 <__swhatbuf_r>
 800a234:	9900      	ldr	r1, [sp, #0]
 800a236:	4605      	mov	r5, r0
 800a238:	4630      	mov	r0, r6
 800a23a:	f000 f879 	bl	800a330 <_malloc_r>
 800a23e:	b948      	cbnz	r0, 800a254 <__smakebuf_r+0x44>
 800a240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a244:	059a      	lsls	r2, r3, #22
 800a246:	d4ef      	bmi.n	800a228 <__smakebuf_r+0x18>
 800a248:	f023 0303 	bic.w	r3, r3, #3
 800a24c:	f043 0302 	orr.w	r3, r3, #2
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	e7e3      	b.n	800a21c <__smakebuf_r+0xc>
 800a254:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <__smakebuf_r+0x7c>)
 800a256:	62b3      	str	r3, [r6, #40]	; 0x28
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	6020      	str	r0, [r4, #0]
 800a25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	6163      	str	r3, [r4, #20]
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	6120      	str	r0, [r4, #16]
 800a26a:	b15b      	cbz	r3, 800a284 <__smakebuf_r+0x74>
 800a26c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a270:	4630      	mov	r0, r6
 800a272:	f000 fd89 	bl	800ad88 <_isatty_r>
 800a276:	b128      	cbz	r0, 800a284 <__smakebuf_r+0x74>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	f023 0303 	bic.w	r3, r3, #3
 800a27e:	f043 0301 	orr.w	r3, r3, #1
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	89a0      	ldrh	r0, [r4, #12]
 800a286:	4305      	orrs	r5, r0
 800a288:	81a5      	strh	r5, [r4, #12]
 800a28a:	e7cd      	b.n	800a228 <__smakebuf_r+0x18>
 800a28c:	0800a021 	.word	0x0800a021

0800a290 <_free_r>:
 800a290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a292:	2900      	cmp	r1, #0
 800a294:	d048      	beq.n	800a328 <_free_r+0x98>
 800a296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a29a:	9001      	str	r0, [sp, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f1a1 0404 	sub.w	r4, r1, #4
 800a2a2:	bfb8      	it	lt
 800a2a4:	18e4      	addlt	r4, r4, r3
 800a2a6:	f000 fdab 	bl	800ae00 <__malloc_lock>
 800a2aa:	4a20      	ldr	r2, [pc, #128]	; (800a32c <_free_r+0x9c>)
 800a2ac:	9801      	ldr	r0, [sp, #4]
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	b933      	cbnz	r3, 800a2c2 <_free_r+0x32>
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	6014      	str	r4, [r2, #0]
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2be:	f000 bda5 	b.w	800ae0c <__malloc_unlock>
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	d90b      	bls.n	800a2de <_free_r+0x4e>
 800a2c6:	6821      	ldr	r1, [r4, #0]
 800a2c8:	1862      	adds	r2, r4, r1
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bf04      	itt	eq
 800a2ce:	681a      	ldreq	r2, [r3, #0]
 800a2d0:	685b      	ldreq	r3, [r3, #4]
 800a2d2:	6063      	str	r3, [r4, #4]
 800a2d4:	bf04      	itt	eq
 800a2d6:	1852      	addeq	r2, r2, r1
 800a2d8:	6022      	streq	r2, [r4, #0]
 800a2da:	602c      	str	r4, [r5, #0]
 800a2dc:	e7ec      	b.n	800a2b8 <_free_r+0x28>
 800a2de:	461a      	mov	r2, r3
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	b10b      	cbz	r3, 800a2e8 <_free_r+0x58>
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d9fa      	bls.n	800a2de <_free_r+0x4e>
 800a2e8:	6811      	ldr	r1, [r2, #0]
 800a2ea:	1855      	adds	r5, r2, r1
 800a2ec:	42a5      	cmp	r5, r4
 800a2ee:	d10b      	bne.n	800a308 <_free_r+0x78>
 800a2f0:	6824      	ldr	r4, [r4, #0]
 800a2f2:	4421      	add	r1, r4
 800a2f4:	1854      	adds	r4, r2, r1
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	6011      	str	r1, [r2, #0]
 800a2fa:	d1dd      	bne.n	800a2b8 <_free_r+0x28>
 800a2fc:	681c      	ldr	r4, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	6053      	str	r3, [r2, #4]
 800a302:	4421      	add	r1, r4
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	e7d7      	b.n	800a2b8 <_free_r+0x28>
 800a308:	d902      	bls.n	800a310 <_free_r+0x80>
 800a30a:	230c      	movs	r3, #12
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	e7d3      	b.n	800a2b8 <_free_r+0x28>
 800a310:	6825      	ldr	r5, [r4, #0]
 800a312:	1961      	adds	r1, r4, r5
 800a314:	428b      	cmp	r3, r1
 800a316:	bf04      	itt	eq
 800a318:	6819      	ldreq	r1, [r3, #0]
 800a31a:	685b      	ldreq	r3, [r3, #4]
 800a31c:	6063      	str	r3, [r4, #4]
 800a31e:	bf04      	itt	eq
 800a320:	1949      	addeq	r1, r1, r5
 800a322:	6021      	streq	r1, [r4, #0]
 800a324:	6054      	str	r4, [r2, #4]
 800a326:	e7c7      	b.n	800a2b8 <_free_r+0x28>
 800a328:	b003      	add	sp, #12
 800a32a:	bd30      	pop	{r4, r5, pc}
 800a32c:	200041d0 	.word	0x200041d0

0800a330 <_malloc_r>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	1ccd      	adds	r5, r1, #3
 800a334:	f025 0503 	bic.w	r5, r5, #3
 800a338:	3508      	adds	r5, #8
 800a33a:	2d0c      	cmp	r5, #12
 800a33c:	bf38      	it	cc
 800a33e:	250c      	movcc	r5, #12
 800a340:	2d00      	cmp	r5, #0
 800a342:	4606      	mov	r6, r0
 800a344:	db01      	blt.n	800a34a <_malloc_r+0x1a>
 800a346:	42a9      	cmp	r1, r5
 800a348:	d903      	bls.n	800a352 <_malloc_r+0x22>
 800a34a:	230c      	movs	r3, #12
 800a34c:	6033      	str	r3, [r6, #0]
 800a34e:	2000      	movs	r0, #0
 800a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a352:	f000 fd55 	bl	800ae00 <__malloc_lock>
 800a356:	4921      	ldr	r1, [pc, #132]	; (800a3dc <_malloc_r+0xac>)
 800a358:	680a      	ldr	r2, [r1, #0]
 800a35a:	4614      	mov	r4, r2
 800a35c:	b99c      	cbnz	r4, 800a386 <_malloc_r+0x56>
 800a35e:	4f20      	ldr	r7, [pc, #128]	; (800a3e0 <_malloc_r+0xb0>)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	b923      	cbnz	r3, 800a36e <_malloc_r+0x3e>
 800a364:	4621      	mov	r1, r4
 800a366:	4630      	mov	r0, r6
 800a368:	f000 fc86 	bl	800ac78 <_sbrk_r>
 800a36c:	6038      	str	r0, [r7, #0]
 800a36e:	4629      	mov	r1, r5
 800a370:	4630      	mov	r0, r6
 800a372:	f000 fc81 	bl	800ac78 <_sbrk_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d123      	bne.n	800a3c2 <_malloc_r+0x92>
 800a37a:	230c      	movs	r3, #12
 800a37c:	6033      	str	r3, [r6, #0]
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 fd44 	bl	800ae0c <__malloc_unlock>
 800a384:	e7e3      	b.n	800a34e <_malloc_r+0x1e>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	1b5b      	subs	r3, r3, r5
 800a38a:	d417      	bmi.n	800a3bc <_malloc_r+0x8c>
 800a38c:	2b0b      	cmp	r3, #11
 800a38e:	d903      	bls.n	800a398 <_malloc_r+0x68>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	441c      	add	r4, r3
 800a394:	6025      	str	r5, [r4, #0]
 800a396:	e004      	b.n	800a3a2 <_malloc_r+0x72>
 800a398:	6863      	ldr	r3, [r4, #4]
 800a39a:	42a2      	cmp	r2, r4
 800a39c:	bf0c      	ite	eq
 800a39e:	600b      	streq	r3, [r1, #0]
 800a3a0:	6053      	strne	r3, [r2, #4]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 fd32 	bl	800ae0c <__malloc_unlock>
 800a3a8:	f104 000b 	add.w	r0, r4, #11
 800a3ac:	1d23      	adds	r3, r4, #4
 800a3ae:	f020 0007 	bic.w	r0, r0, #7
 800a3b2:	1ac2      	subs	r2, r0, r3
 800a3b4:	d0cc      	beq.n	800a350 <_malloc_r+0x20>
 800a3b6:	1a1b      	subs	r3, r3, r0
 800a3b8:	50a3      	str	r3, [r4, r2]
 800a3ba:	e7c9      	b.n	800a350 <_malloc_r+0x20>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	6864      	ldr	r4, [r4, #4]
 800a3c0:	e7cc      	b.n	800a35c <_malloc_r+0x2c>
 800a3c2:	1cc4      	adds	r4, r0, #3
 800a3c4:	f024 0403 	bic.w	r4, r4, #3
 800a3c8:	42a0      	cmp	r0, r4
 800a3ca:	d0e3      	beq.n	800a394 <_malloc_r+0x64>
 800a3cc:	1a21      	subs	r1, r4, r0
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f000 fc52 	bl	800ac78 <_sbrk_r>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d1dd      	bne.n	800a394 <_malloc_r+0x64>
 800a3d8:	e7cf      	b.n	800a37a <_malloc_r+0x4a>
 800a3da:	bf00      	nop
 800a3dc:	200041d0 	.word	0x200041d0
 800a3e0:	200041d4 	.word	0x200041d4

0800a3e4 <__ssputs_r>:
 800a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	688e      	ldr	r6, [r1, #8]
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4690      	mov	r8, r2
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	d838      	bhi.n	800a468 <__ssputs_r+0x84>
 800a3f6:	898a      	ldrh	r2, [r1, #12]
 800a3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3fc:	d032      	beq.n	800a464 <__ssputs_r+0x80>
 800a3fe:	6825      	ldr	r5, [r4, #0]
 800a400:	6909      	ldr	r1, [r1, #16]
 800a402:	eba5 0901 	sub.w	r9, r5, r1
 800a406:	6965      	ldr	r5, [r4, #20]
 800a408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a410:	3301      	adds	r3, #1
 800a412:	444b      	add	r3, r9
 800a414:	106d      	asrs	r5, r5, #1
 800a416:	429d      	cmp	r5, r3
 800a418:	bf38      	it	cc
 800a41a:	461d      	movcc	r5, r3
 800a41c:	0553      	lsls	r3, r2, #21
 800a41e:	d531      	bpl.n	800a484 <__ssputs_r+0xa0>
 800a420:	4629      	mov	r1, r5
 800a422:	f7ff ff85 	bl	800a330 <_malloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	b950      	cbnz	r0, 800a440 <__ssputs_r+0x5c>
 800a42a:	230c      	movs	r3, #12
 800a42c:	f8ca 3000 	str.w	r3, [sl]
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a440:	6921      	ldr	r1, [r4, #16]
 800a442:	464a      	mov	r2, r9
 800a444:	f7ff fb6a 	bl	8009b1c <memcpy>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	6126      	str	r6, [r4, #16]
 800a456:	6165      	str	r5, [r4, #20]
 800a458:	444e      	add	r6, r9
 800a45a:	eba5 0509 	sub.w	r5, r5, r9
 800a45e:	6026      	str	r6, [r4, #0]
 800a460:	60a5      	str	r5, [r4, #8]
 800a462:	463e      	mov	r6, r7
 800a464:	42be      	cmp	r6, r7
 800a466:	d900      	bls.n	800a46a <__ssputs_r+0x86>
 800a468:	463e      	mov	r6, r7
 800a46a:	4632      	mov	r2, r6
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	4641      	mov	r1, r8
 800a470:	f000 fcac 	bl	800adcc <memmove>
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	6822      	ldr	r2, [r4, #0]
 800a478:	1b9b      	subs	r3, r3, r6
 800a47a:	4432      	add	r2, r6
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	2000      	movs	r0, #0
 800a482:	e7db      	b.n	800a43c <__ssputs_r+0x58>
 800a484:	462a      	mov	r2, r5
 800a486:	f000 fcc7 	bl	800ae18 <_realloc_r>
 800a48a:	4606      	mov	r6, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d1e1      	bne.n	800a454 <__ssputs_r+0x70>
 800a490:	6921      	ldr	r1, [r4, #16]
 800a492:	4650      	mov	r0, sl
 800a494:	f7ff fefc 	bl	800a290 <_free_r>
 800a498:	e7c7      	b.n	800a42a <__ssputs_r+0x46>
	...

0800a49c <_svfiprintf_r>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	4698      	mov	r8, r3
 800a4a2:	898b      	ldrh	r3, [r1, #12]
 800a4a4:	061b      	lsls	r3, r3, #24
 800a4a6:	b09d      	sub	sp, #116	; 0x74
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	d50e      	bpl.n	800a4ce <_svfiprintf_r+0x32>
 800a4b0:	690b      	ldr	r3, [r1, #16]
 800a4b2:	b963      	cbnz	r3, 800a4ce <_svfiprintf_r+0x32>
 800a4b4:	2140      	movs	r1, #64	; 0x40
 800a4b6:	f7ff ff3b 	bl	800a330 <_malloc_r>
 800a4ba:	6028      	str	r0, [r5, #0]
 800a4bc:	6128      	str	r0, [r5, #16]
 800a4be:	b920      	cbnz	r0, 800a4ca <_svfiprintf_r+0x2e>
 800a4c0:	230c      	movs	r3, #12
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c8:	e0d1      	b.n	800a66e <_svfiprintf_r+0x1d2>
 800a4ca:	2340      	movs	r3, #64	; 0x40
 800a4cc:	616b      	str	r3, [r5, #20]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d2:	2320      	movs	r3, #32
 800a4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4dc:	2330      	movs	r3, #48	; 0x30
 800a4de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a688 <_svfiprintf_r+0x1ec>
 800a4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e6:	f04f 0901 	mov.w	r9, #1
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	469a      	mov	sl, r3
 800a4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f2:	b10a      	cbz	r2, 800a4f8 <_svfiprintf_r+0x5c>
 800a4f4:	2a25      	cmp	r2, #37	; 0x25
 800a4f6:	d1f9      	bne.n	800a4ec <_svfiprintf_r+0x50>
 800a4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4fc:	d00b      	beq.n	800a516 <_svfiprintf_r+0x7a>
 800a4fe:	465b      	mov	r3, fp
 800a500:	4622      	mov	r2, r4
 800a502:	4629      	mov	r1, r5
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff ff6d 	bl	800a3e4 <__ssputs_r>
 800a50a:	3001      	adds	r0, #1
 800a50c:	f000 80aa 	beq.w	800a664 <_svfiprintf_r+0x1c8>
 800a510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a512:	445a      	add	r2, fp
 800a514:	9209      	str	r2, [sp, #36]	; 0x24
 800a516:	f89a 3000 	ldrb.w	r3, [sl]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 80a2 	beq.w	800a664 <_svfiprintf_r+0x1c8>
 800a520:	2300      	movs	r3, #0
 800a522:	f04f 32ff 	mov.w	r2, #4294967295
 800a526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a52a:	f10a 0a01 	add.w	sl, sl, #1
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	9307      	str	r3, [sp, #28]
 800a532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a536:	931a      	str	r3, [sp, #104]	; 0x68
 800a538:	4654      	mov	r4, sl
 800a53a:	2205      	movs	r2, #5
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	4851      	ldr	r0, [pc, #324]	; (800a688 <_svfiprintf_r+0x1ec>)
 800a542:	f7f5 fe4d 	bl	80001e0 <memchr>
 800a546:	9a04      	ldr	r2, [sp, #16]
 800a548:	b9d8      	cbnz	r0, 800a582 <_svfiprintf_r+0xe6>
 800a54a:	06d0      	lsls	r0, r2, #27
 800a54c:	bf44      	itt	mi
 800a54e:	2320      	movmi	r3, #32
 800a550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a554:	0711      	lsls	r1, r2, #28
 800a556:	bf44      	itt	mi
 800a558:	232b      	movmi	r3, #43	; 0x2b
 800a55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55e:	f89a 3000 	ldrb.w	r3, [sl]
 800a562:	2b2a      	cmp	r3, #42	; 0x2a
 800a564:	d015      	beq.n	800a592 <_svfiprintf_r+0xf6>
 800a566:	9a07      	ldr	r2, [sp, #28]
 800a568:	4654      	mov	r4, sl
 800a56a:	2000      	movs	r0, #0
 800a56c:	f04f 0c0a 	mov.w	ip, #10
 800a570:	4621      	mov	r1, r4
 800a572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a576:	3b30      	subs	r3, #48	; 0x30
 800a578:	2b09      	cmp	r3, #9
 800a57a:	d94e      	bls.n	800a61a <_svfiprintf_r+0x17e>
 800a57c:	b1b0      	cbz	r0, 800a5ac <_svfiprintf_r+0x110>
 800a57e:	9207      	str	r2, [sp, #28]
 800a580:	e014      	b.n	800a5ac <_svfiprintf_r+0x110>
 800a582:	eba0 0308 	sub.w	r3, r0, r8
 800a586:	fa09 f303 	lsl.w	r3, r9, r3
 800a58a:	4313      	orrs	r3, r2
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	46a2      	mov	sl, r4
 800a590:	e7d2      	b.n	800a538 <_svfiprintf_r+0x9c>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	1d19      	adds	r1, r3, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	9103      	str	r1, [sp, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfbb      	ittet	lt
 800a59e:	425b      	neglt	r3, r3
 800a5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a4:	9307      	strge	r3, [sp, #28]
 800a5a6:	9307      	strlt	r3, [sp, #28]
 800a5a8:	bfb8      	it	lt
 800a5aa:	9204      	strlt	r2, [sp, #16]
 800a5ac:	7823      	ldrb	r3, [r4, #0]
 800a5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b0:	d10c      	bne.n	800a5cc <_svfiprintf_r+0x130>
 800a5b2:	7863      	ldrb	r3, [r4, #1]
 800a5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b6:	d135      	bne.n	800a624 <_svfiprintf_r+0x188>
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	1d1a      	adds	r2, r3, #4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	9203      	str	r2, [sp, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bfb8      	it	lt
 800a5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5c8:	3402      	adds	r4, #2
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a698 <_svfiprintf_r+0x1fc>
 800a5d0:	7821      	ldrb	r1, [r4, #0]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	f7f5 fe03 	bl	80001e0 <memchr>
 800a5da:	b140      	cbz	r0, 800a5ee <_svfiprintf_r+0x152>
 800a5dc:	2340      	movs	r3, #64	; 0x40
 800a5de:	eba0 000a 	sub.w	r0, r0, sl
 800a5e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	4303      	orrs	r3, r0
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f2:	4826      	ldr	r0, [pc, #152]	; (800a68c <_svfiprintf_r+0x1f0>)
 800a5f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	f7f5 fdf1 	bl	80001e0 <memchr>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d038      	beq.n	800a674 <_svfiprintf_r+0x1d8>
 800a602:	4b23      	ldr	r3, [pc, #140]	; (800a690 <_svfiprintf_r+0x1f4>)
 800a604:	bb1b      	cbnz	r3, 800a64e <_svfiprintf_r+0x1b2>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	3307      	adds	r3, #7
 800a60a:	f023 0307 	bic.w	r3, r3, #7
 800a60e:	3308      	adds	r3, #8
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a614:	4433      	add	r3, r6
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	e767      	b.n	800a4ea <_svfiprintf_r+0x4e>
 800a61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61e:	460c      	mov	r4, r1
 800a620:	2001      	movs	r0, #1
 800a622:	e7a5      	b.n	800a570 <_svfiprintf_r+0xd4>
 800a624:	2300      	movs	r3, #0
 800a626:	3401      	adds	r4, #1
 800a628:	9305      	str	r3, [sp, #20]
 800a62a:	4619      	mov	r1, r3
 800a62c:	f04f 0c0a 	mov.w	ip, #10
 800a630:	4620      	mov	r0, r4
 800a632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a636:	3a30      	subs	r2, #48	; 0x30
 800a638:	2a09      	cmp	r2, #9
 800a63a:	d903      	bls.n	800a644 <_svfiprintf_r+0x1a8>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0c5      	beq.n	800a5cc <_svfiprintf_r+0x130>
 800a640:	9105      	str	r1, [sp, #20]
 800a642:	e7c3      	b.n	800a5cc <_svfiprintf_r+0x130>
 800a644:	fb0c 2101 	mla	r1, ip, r1, r2
 800a648:	4604      	mov	r4, r0
 800a64a:	2301      	movs	r3, #1
 800a64c:	e7f0      	b.n	800a630 <_svfiprintf_r+0x194>
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	462a      	mov	r2, r5
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <_svfiprintf_r+0x1f8>)
 800a656:	a904      	add	r1, sp, #16
 800a658:	4638      	mov	r0, r7
 800a65a:	f3af 8000 	nop.w
 800a65e:	1c42      	adds	r2, r0, #1
 800a660:	4606      	mov	r6, r0
 800a662:	d1d6      	bne.n	800a612 <_svfiprintf_r+0x176>
 800a664:	89ab      	ldrh	r3, [r5, #12]
 800a666:	065b      	lsls	r3, r3, #25
 800a668:	f53f af2c 	bmi.w	800a4c4 <_svfiprintf_r+0x28>
 800a66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a66e:	b01d      	add	sp, #116	; 0x74
 800a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	ab03      	add	r3, sp, #12
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	462a      	mov	r2, r5
 800a67a:	4b06      	ldr	r3, [pc, #24]	; (800a694 <_svfiprintf_r+0x1f8>)
 800a67c:	a904      	add	r1, sp, #16
 800a67e:	4638      	mov	r0, r7
 800a680:	f000 f9d4 	bl	800aa2c <_printf_i>
 800a684:	e7eb      	b.n	800a65e <_svfiprintf_r+0x1c2>
 800a686:	bf00      	nop
 800a688:	0800b20c 	.word	0x0800b20c
 800a68c:	0800b216 	.word	0x0800b216
 800a690:	00000000 	.word	0x00000000
 800a694:	0800a3e5 	.word	0x0800a3e5
 800a698:	0800b212 	.word	0x0800b212

0800a69c <__sfputc_r>:
 800a69c:	6893      	ldr	r3, [r2, #8]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	b410      	push	{r4}
 800a6a4:	6093      	str	r3, [r2, #8]
 800a6a6:	da08      	bge.n	800a6ba <__sfputc_r+0x1e>
 800a6a8:	6994      	ldr	r4, [r2, #24]
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	db01      	blt.n	800a6b2 <__sfputc_r+0x16>
 800a6ae:	290a      	cmp	r1, #10
 800a6b0:	d103      	bne.n	800a6ba <__sfputc_r+0x1e>
 800a6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b6:	f7ff bb0d 	b.w	8009cd4 <__swbuf_r>
 800a6ba:	6813      	ldr	r3, [r2, #0]
 800a6bc:	1c58      	adds	r0, r3, #1
 800a6be:	6010      	str	r0, [r2, #0]
 800a6c0:	7019      	strb	r1, [r3, #0]
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <__sfputs_r>:
 800a6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	18d5      	adds	r5, r2, r3
 800a6d4:	42ac      	cmp	r4, r5
 800a6d6:	d101      	bne.n	800a6dc <__sfputs_r+0x12>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e007      	b.n	800a6ec <__sfputs_r+0x22>
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7ff ffda 	bl	800a69c <__sfputc_r>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d1f3      	bne.n	800a6d4 <__sfputs_r+0xa>
 800a6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6f0 <_vfiprintf_r>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	b09d      	sub	sp, #116	; 0x74
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	4698      	mov	r8, r3
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	b118      	cbz	r0, 800a708 <_vfiprintf_r+0x18>
 800a700:	6983      	ldr	r3, [r0, #24]
 800a702:	b90b      	cbnz	r3, 800a708 <_vfiprintf_r+0x18>
 800a704:	f7ff fcc0 	bl	800a088 <__sinit>
 800a708:	4b89      	ldr	r3, [pc, #548]	; (800a930 <_vfiprintf_r+0x240>)
 800a70a:	429d      	cmp	r5, r3
 800a70c:	d11b      	bne.n	800a746 <_vfiprintf_r+0x56>
 800a70e:	6875      	ldr	r5, [r6, #4]
 800a710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a712:	07d9      	lsls	r1, r3, #31
 800a714:	d405      	bmi.n	800a722 <_vfiprintf_r+0x32>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	059a      	lsls	r2, r3, #22
 800a71a:	d402      	bmi.n	800a722 <_vfiprintf_r+0x32>
 800a71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a71e:	f7ff fd51 	bl	800a1c4 <__retarget_lock_acquire_recursive>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	071b      	lsls	r3, r3, #28
 800a726:	d501      	bpl.n	800a72c <_vfiprintf_r+0x3c>
 800a728:	692b      	ldr	r3, [r5, #16]
 800a72a:	b9eb      	cbnz	r3, 800a768 <_vfiprintf_r+0x78>
 800a72c:	4629      	mov	r1, r5
 800a72e:	4630      	mov	r0, r6
 800a730:	f7ff fb22 	bl	8009d78 <__swsetup_r>
 800a734:	b1c0      	cbz	r0, 800a768 <_vfiprintf_r+0x78>
 800a736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a738:	07dc      	lsls	r4, r3, #31
 800a73a:	d50e      	bpl.n	800a75a <_vfiprintf_r+0x6a>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	b01d      	add	sp, #116	; 0x74
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	4b7b      	ldr	r3, [pc, #492]	; (800a934 <_vfiprintf_r+0x244>)
 800a748:	429d      	cmp	r5, r3
 800a74a:	d101      	bne.n	800a750 <_vfiprintf_r+0x60>
 800a74c:	68b5      	ldr	r5, [r6, #8]
 800a74e:	e7df      	b.n	800a710 <_vfiprintf_r+0x20>
 800a750:	4b79      	ldr	r3, [pc, #484]	; (800a938 <_vfiprintf_r+0x248>)
 800a752:	429d      	cmp	r5, r3
 800a754:	bf08      	it	eq
 800a756:	68f5      	ldreq	r5, [r6, #12]
 800a758:	e7da      	b.n	800a710 <_vfiprintf_r+0x20>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	0598      	lsls	r0, r3, #22
 800a75e:	d4ed      	bmi.n	800a73c <_vfiprintf_r+0x4c>
 800a760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a762:	f7ff fd30 	bl	800a1c6 <__retarget_lock_release_recursive>
 800a766:	e7e9      	b.n	800a73c <_vfiprintf_r+0x4c>
 800a768:	2300      	movs	r3, #0
 800a76a:	9309      	str	r3, [sp, #36]	; 0x24
 800a76c:	2320      	movs	r3, #32
 800a76e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a772:	f8cd 800c 	str.w	r8, [sp, #12]
 800a776:	2330      	movs	r3, #48	; 0x30
 800a778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a93c <_vfiprintf_r+0x24c>
 800a77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a780:	f04f 0901 	mov.w	r9, #1
 800a784:	4623      	mov	r3, r4
 800a786:	469a      	mov	sl, r3
 800a788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a78c:	b10a      	cbz	r2, 800a792 <_vfiprintf_r+0xa2>
 800a78e:	2a25      	cmp	r2, #37	; 0x25
 800a790:	d1f9      	bne.n	800a786 <_vfiprintf_r+0x96>
 800a792:	ebba 0b04 	subs.w	fp, sl, r4
 800a796:	d00b      	beq.n	800a7b0 <_vfiprintf_r+0xc0>
 800a798:	465b      	mov	r3, fp
 800a79a:	4622      	mov	r2, r4
 800a79c:	4629      	mov	r1, r5
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ff93 	bl	800a6ca <__sfputs_r>
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	f000 80aa 	beq.w	800a8fe <_vfiprintf_r+0x20e>
 800a7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ac:	445a      	add	r2, fp
 800a7ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 80a2 	beq.w	800a8fe <_vfiprintf_r+0x20e>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7c4:	f10a 0a01 	add.w	sl, sl, #1
 800a7c8:	9304      	str	r3, [sp, #16]
 800a7ca:	9307      	str	r3, [sp, #28]
 800a7cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7d2:	4654      	mov	r4, sl
 800a7d4:	2205      	movs	r2, #5
 800a7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7da:	4858      	ldr	r0, [pc, #352]	; (800a93c <_vfiprintf_r+0x24c>)
 800a7dc:	f7f5 fd00 	bl	80001e0 <memchr>
 800a7e0:	9a04      	ldr	r2, [sp, #16]
 800a7e2:	b9d8      	cbnz	r0, 800a81c <_vfiprintf_r+0x12c>
 800a7e4:	06d1      	lsls	r1, r2, #27
 800a7e6:	bf44      	itt	mi
 800a7e8:	2320      	movmi	r3, #32
 800a7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ee:	0713      	lsls	r3, r2, #28
 800a7f0:	bf44      	itt	mi
 800a7f2:	232b      	movmi	r3, #43	; 0x2b
 800a7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fe:	d015      	beq.n	800a82c <_vfiprintf_r+0x13c>
 800a800:	9a07      	ldr	r2, [sp, #28]
 800a802:	4654      	mov	r4, sl
 800a804:	2000      	movs	r0, #0
 800a806:	f04f 0c0a 	mov.w	ip, #10
 800a80a:	4621      	mov	r1, r4
 800a80c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a810:	3b30      	subs	r3, #48	; 0x30
 800a812:	2b09      	cmp	r3, #9
 800a814:	d94e      	bls.n	800a8b4 <_vfiprintf_r+0x1c4>
 800a816:	b1b0      	cbz	r0, 800a846 <_vfiprintf_r+0x156>
 800a818:	9207      	str	r2, [sp, #28]
 800a81a:	e014      	b.n	800a846 <_vfiprintf_r+0x156>
 800a81c:	eba0 0308 	sub.w	r3, r0, r8
 800a820:	fa09 f303 	lsl.w	r3, r9, r3
 800a824:	4313      	orrs	r3, r2
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	46a2      	mov	sl, r4
 800a82a:	e7d2      	b.n	800a7d2 <_vfiprintf_r+0xe2>
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	1d19      	adds	r1, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	9103      	str	r1, [sp, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfbb      	ittet	lt
 800a838:	425b      	neglt	r3, r3
 800a83a:	f042 0202 	orrlt.w	r2, r2, #2
 800a83e:	9307      	strge	r3, [sp, #28]
 800a840:	9307      	strlt	r3, [sp, #28]
 800a842:	bfb8      	it	lt
 800a844:	9204      	strlt	r2, [sp, #16]
 800a846:	7823      	ldrb	r3, [r4, #0]
 800a848:	2b2e      	cmp	r3, #46	; 0x2e
 800a84a:	d10c      	bne.n	800a866 <_vfiprintf_r+0x176>
 800a84c:	7863      	ldrb	r3, [r4, #1]
 800a84e:	2b2a      	cmp	r3, #42	; 0x2a
 800a850:	d135      	bne.n	800a8be <_vfiprintf_r+0x1ce>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	1d1a      	adds	r2, r3, #4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	9203      	str	r2, [sp, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfb8      	it	lt
 800a85e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a862:	3402      	adds	r4, #2
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a94c <_vfiprintf_r+0x25c>
 800a86a:	7821      	ldrb	r1, [r4, #0]
 800a86c:	2203      	movs	r2, #3
 800a86e:	4650      	mov	r0, sl
 800a870:	f7f5 fcb6 	bl	80001e0 <memchr>
 800a874:	b140      	cbz	r0, 800a888 <_vfiprintf_r+0x198>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	eba0 000a 	sub.w	r0, r0, sl
 800a87c:	fa03 f000 	lsl.w	r0, r3, r0
 800a880:	9b04      	ldr	r3, [sp, #16]
 800a882:	4303      	orrs	r3, r0
 800a884:	3401      	adds	r4, #1
 800a886:	9304      	str	r3, [sp, #16]
 800a888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88c:	482c      	ldr	r0, [pc, #176]	; (800a940 <_vfiprintf_r+0x250>)
 800a88e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a892:	2206      	movs	r2, #6
 800a894:	f7f5 fca4 	bl	80001e0 <memchr>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d03f      	beq.n	800a91c <_vfiprintf_r+0x22c>
 800a89c:	4b29      	ldr	r3, [pc, #164]	; (800a944 <_vfiprintf_r+0x254>)
 800a89e:	bb1b      	cbnz	r3, 800a8e8 <_vfiprintf_r+0x1f8>
 800a8a0:	9b03      	ldr	r3, [sp, #12]
 800a8a2:	3307      	adds	r3, #7
 800a8a4:	f023 0307 	bic.w	r3, r3, #7
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	9303      	str	r3, [sp, #12]
 800a8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ae:	443b      	add	r3, r7
 800a8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b2:	e767      	b.n	800a784 <_vfiprintf_r+0x94>
 800a8b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e7a5      	b.n	800a80a <_vfiprintf_r+0x11a>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f04f 0c0a 	mov.w	ip, #10
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8d0:	3a30      	subs	r2, #48	; 0x30
 800a8d2:	2a09      	cmp	r2, #9
 800a8d4:	d903      	bls.n	800a8de <_vfiprintf_r+0x1ee>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0c5      	beq.n	800a866 <_vfiprintf_r+0x176>
 800a8da:	9105      	str	r1, [sp, #20]
 800a8dc:	e7c3      	b.n	800a866 <_vfiprintf_r+0x176>
 800a8de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e7f0      	b.n	800a8ca <_vfiprintf_r+0x1da>
 800a8e8:	ab03      	add	r3, sp, #12
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	462a      	mov	r2, r5
 800a8ee:	4b16      	ldr	r3, [pc, #88]	; (800a948 <_vfiprintf_r+0x258>)
 800a8f0:	a904      	add	r1, sp, #16
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f3af 8000 	nop.w
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	1c78      	adds	r0, r7, #1
 800a8fc:	d1d6      	bne.n	800a8ac <_vfiprintf_r+0x1bc>
 800a8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a900:	07d9      	lsls	r1, r3, #31
 800a902:	d405      	bmi.n	800a910 <_vfiprintf_r+0x220>
 800a904:	89ab      	ldrh	r3, [r5, #12]
 800a906:	059a      	lsls	r2, r3, #22
 800a908:	d402      	bmi.n	800a910 <_vfiprintf_r+0x220>
 800a90a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a90c:	f7ff fc5b 	bl	800a1c6 <__retarget_lock_release_recursive>
 800a910:	89ab      	ldrh	r3, [r5, #12]
 800a912:	065b      	lsls	r3, r3, #25
 800a914:	f53f af12 	bmi.w	800a73c <_vfiprintf_r+0x4c>
 800a918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a91a:	e711      	b.n	800a740 <_vfiprintf_r+0x50>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <_vfiprintf_r+0x258>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4630      	mov	r0, r6
 800a928:	f000 f880 	bl	800aa2c <_printf_i>
 800a92c:	e7e4      	b.n	800a8f8 <_vfiprintf_r+0x208>
 800a92e:	bf00      	nop
 800a930:	0800b1cc 	.word	0x0800b1cc
 800a934:	0800b1ec 	.word	0x0800b1ec
 800a938:	0800b1ac 	.word	0x0800b1ac
 800a93c:	0800b20c 	.word	0x0800b20c
 800a940:	0800b216 	.word	0x0800b216
 800a944:	00000000 	.word	0x00000000
 800a948:	0800a6cb 	.word	0x0800a6cb
 800a94c:	0800b212 	.word	0x0800b212

0800a950 <_printf_common>:
 800a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	4616      	mov	r6, r2
 800a956:	4699      	mov	r9, r3
 800a958:	688a      	ldr	r2, [r1, #8]
 800a95a:	690b      	ldr	r3, [r1, #16]
 800a95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a960:	4293      	cmp	r3, r2
 800a962:	bfb8      	it	lt
 800a964:	4613      	movlt	r3, r2
 800a966:	6033      	str	r3, [r6, #0]
 800a968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a96c:	4607      	mov	r7, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b10a      	cbz	r2, 800a976 <_printf_common+0x26>
 800a972:	3301      	adds	r3, #1
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	0699      	lsls	r1, r3, #26
 800a97a:	bf42      	ittt	mi
 800a97c:	6833      	ldrmi	r3, [r6, #0]
 800a97e:	3302      	addmi	r3, #2
 800a980:	6033      	strmi	r3, [r6, #0]
 800a982:	6825      	ldr	r5, [r4, #0]
 800a984:	f015 0506 	ands.w	r5, r5, #6
 800a988:	d106      	bne.n	800a998 <_printf_common+0x48>
 800a98a:	f104 0a19 	add.w	sl, r4, #25
 800a98e:	68e3      	ldr	r3, [r4, #12]
 800a990:	6832      	ldr	r2, [r6, #0]
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	42ab      	cmp	r3, r5
 800a996:	dc26      	bgt.n	800a9e6 <_printf_common+0x96>
 800a998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a99c:	1e13      	subs	r3, r2, #0
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	bf18      	it	ne
 800a9a2:	2301      	movne	r3, #1
 800a9a4:	0692      	lsls	r2, r2, #26
 800a9a6:	d42b      	bmi.n	800aa00 <_printf_common+0xb0>
 800a9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	47c0      	blx	r8
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d01e      	beq.n	800a9f4 <_printf_common+0xa4>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	68e5      	ldr	r5, [r4, #12]
 800a9ba:	6832      	ldr	r2, [r6, #0]
 800a9bc:	f003 0306 	and.w	r3, r3, #6
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	bf08      	it	eq
 800a9c4:	1aad      	subeq	r5, r5, r2
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	6922      	ldr	r2, [r4, #16]
 800a9ca:	bf0c      	ite	eq
 800a9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9d0:	2500      	movne	r5, #0
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	bfc4      	itt	gt
 800a9d6:	1a9b      	subgt	r3, r3, r2
 800a9d8:	18ed      	addgt	r5, r5, r3
 800a9da:	2600      	movs	r6, #0
 800a9dc:	341a      	adds	r4, #26
 800a9de:	42b5      	cmp	r5, r6
 800a9e0:	d11a      	bne.n	800aa18 <_printf_common+0xc8>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e008      	b.n	800a9f8 <_printf_common+0xa8>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	47c0      	blx	r8
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d103      	bne.n	800a9fc <_printf_common+0xac>
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	e7c6      	b.n	800a98e <_printf_common+0x3e>
 800aa00:	18e1      	adds	r1, r4, r3
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	2030      	movs	r0, #48	; 0x30
 800aa06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa0a:	4422      	add	r2, r4
 800aa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa14:	3302      	adds	r3, #2
 800aa16:	e7c7      	b.n	800a9a8 <_printf_common+0x58>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	4638      	mov	r0, r7
 800aa20:	47c0      	blx	r8
 800aa22:	3001      	adds	r0, #1
 800aa24:	d0e6      	beq.n	800a9f4 <_printf_common+0xa4>
 800aa26:	3601      	adds	r6, #1
 800aa28:	e7d9      	b.n	800a9de <_printf_common+0x8e>
	...

0800aa2c <_printf_i>:
 800aa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	460c      	mov	r4, r1
 800aa32:	4691      	mov	r9, r2
 800aa34:	7e27      	ldrb	r7, [r4, #24]
 800aa36:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa38:	2f78      	cmp	r7, #120	; 0x78
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	469a      	mov	sl, r3
 800aa3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa42:	d807      	bhi.n	800aa54 <_printf_i+0x28>
 800aa44:	2f62      	cmp	r7, #98	; 0x62
 800aa46:	d80a      	bhi.n	800aa5e <_printf_i+0x32>
 800aa48:	2f00      	cmp	r7, #0
 800aa4a:	f000 80d8 	beq.w	800abfe <_printf_i+0x1d2>
 800aa4e:	2f58      	cmp	r7, #88	; 0x58
 800aa50:	f000 80a3 	beq.w	800ab9a <_printf_i+0x16e>
 800aa54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa5c:	e03a      	b.n	800aad4 <_printf_i+0xa8>
 800aa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa62:	2b15      	cmp	r3, #21
 800aa64:	d8f6      	bhi.n	800aa54 <_printf_i+0x28>
 800aa66:	a001      	add	r0, pc, #4	; (adr r0, 800aa6c <_printf_i+0x40>)
 800aa68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa6c:	0800aac5 	.word	0x0800aac5
 800aa70:	0800aad9 	.word	0x0800aad9
 800aa74:	0800aa55 	.word	0x0800aa55
 800aa78:	0800aa55 	.word	0x0800aa55
 800aa7c:	0800aa55 	.word	0x0800aa55
 800aa80:	0800aa55 	.word	0x0800aa55
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aa55 	.word	0x0800aa55
 800aa8c:	0800aa55 	.word	0x0800aa55
 800aa90:	0800aa55 	.word	0x0800aa55
 800aa94:	0800aa55 	.word	0x0800aa55
 800aa98:	0800abe5 	.word	0x0800abe5
 800aa9c:	0800ab09 	.word	0x0800ab09
 800aaa0:	0800abc7 	.word	0x0800abc7
 800aaa4:	0800aa55 	.word	0x0800aa55
 800aaa8:	0800aa55 	.word	0x0800aa55
 800aaac:	0800ac07 	.word	0x0800ac07
 800aab0:	0800aa55 	.word	0x0800aa55
 800aab4:	0800ab09 	.word	0x0800ab09
 800aab8:	0800aa55 	.word	0x0800aa55
 800aabc:	0800aa55 	.word	0x0800aa55
 800aac0:	0800abcf 	.word	0x0800abcf
 800aac4:	680b      	ldr	r3, [r1, #0]
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	600a      	str	r2, [r1, #0]
 800aacc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aad4:	2301      	movs	r3, #1
 800aad6:	e0a3      	b.n	800ac20 <_printf_i+0x1f4>
 800aad8:	6825      	ldr	r5, [r4, #0]
 800aada:	6808      	ldr	r0, [r1, #0]
 800aadc:	062e      	lsls	r6, r5, #24
 800aade:	f100 0304 	add.w	r3, r0, #4
 800aae2:	d50a      	bpl.n	800aafa <_printf_i+0xce>
 800aae4:	6805      	ldr	r5, [r0, #0]
 800aae6:	600b      	str	r3, [r1, #0]
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	da03      	bge.n	800aaf4 <_printf_i+0xc8>
 800aaec:	232d      	movs	r3, #45	; 0x2d
 800aaee:	426d      	negs	r5, r5
 800aaf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf4:	485e      	ldr	r0, [pc, #376]	; (800ac70 <_printf_i+0x244>)
 800aaf6:	230a      	movs	r3, #10
 800aaf8:	e019      	b.n	800ab2e <_printf_i+0x102>
 800aafa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aafe:	6805      	ldr	r5, [r0, #0]
 800ab00:	600b      	str	r3, [r1, #0]
 800ab02:	bf18      	it	ne
 800ab04:	b22d      	sxthne	r5, r5
 800ab06:	e7ef      	b.n	800aae8 <_printf_i+0xbc>
 800ab08:	680b      	ldr	r3, [r1, #0]
 800ab0a:	6825      	ldr	r5, [r4, #0]
 800ab0c:	1d18      	adds	r0, r3, #4
 800ab0e:	6008      	str	r0, [r1, #0]
 800ab10:	0628      	lsls	r0, r5, #24
 800ab12:	d501      	bpl.n	800ab18 <_printf_i+0xec>
 800ab14:	681d      	ldr	r5, [r3, #0]
 800ab16:	e002      	b.n	800ab1e <_printf_i+0xf2>
 800ab18:	0669      	lsls	r1, r5, #25
 800ab1a:	d5fb      	bpl.n	800ab14 <_printf_i+0xe8>
 800ab1c:	881d      	ldrh	r5, [r3, #0]
 800ab1e:	4854      	ldr	r0, [pc, #336]	; (800ac70 <_printf_i+0x244>)
 800ab20:	2f6f      	cmp	r7, #111	; 0x6f
 800ab22:	bf0c      	ite	eq
 800ab24:	2308      	moveq	r3, #8
 800ab26:	230a      	movne	r3, #10
 800ab28:	2100      	movs	r1, #0
 800ab2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab2e:	6866      	ldr	r6, [r4, #4]
 800ab30:	60a6      	str	r6, [r4, #8]
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	bfa2      	ittt	ge
 800ab36:	6821      	ldrge	r1, [r4, #0]
 800ab38:	f021 0104 	bicge.w	r1, r1, #4
 800ab3c:	6021      	strge	r1, [r4, #0]
 800ab3e:	b90d      	cbnz	r5, 800ab44 <_printf_i+0x118>
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	d04d      	beq.n	800abe0 <_printf_i+0x1b4>
 800ab44:	4616      	mov	r6, r2
 800ab46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab4e:	5dc7      	ldrb	r7, [r0, r7]
 800ab50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab54:	462f      	mov	r7, r5
 800ab56:	42bb      	cmp	r3, r7
 800ab58:	460d      	mov	r5, r1
 800ab5a:	d9f4      	bls.n	800ab46 <_printf_i+0x11a>
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d10b      	bne.n	800ab78 <_printf_i+0x14c>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	07df      	lsls	r7, r3, #31
 800ab64:	d508      	bpl.n	800ab78 <_printf_i+0x14c>
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	6861      	ldr	r1, [r4, #4]
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	bfde      	ittt	le
 800ab6e:	2330      	movle	r3, #48	; 0x30
 800ab70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab78:	1b92      	subs	r2, r2, r6
 800ab7a:	6122      	str	r2, [r4, #16]
 800ab7c:	f8cd a000 	str.w	sl, [sp]
 800ab80:	464b      	mov	r3, r9
 800ab82:	aa03      	add	r2, sp, #12
 800ab84:	4621      	mov	r1, r4
 800ab86:	4640      	mov	r0, r8
 800ab88:	f7ff fee2 	bl	800a950 <_printf_common>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d14c      	bne.n	800ac2a <_printf_i+0x1fe>
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	b004      	add	sp, #16
 800ab96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9a:	4835      	ldr	r0, [pc, #212]	; (800ac70 <_printf_i+0x244>)
 800ab9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	680e      	ldr	r6, [r1, #0]
 800aba4:	061f      	lsls	r7, r3, #24
 800aba6:	f856 5b04 	ldr.w	r5, [r6], #4
 800abaa:	600e      	str	r6, [r1, #0]
 800abac:	d514      	bpl.n	800abd8 <_printf_i+0x1ac>
 800abae:	07d9      	lsls	r1, r3, #31
 800abb0:	bf44      	itt	mi
 800abb2:	f043 0320 	orrmi.w	r3, r3, #32
 800abb6:	6023      	strmi	r3, [r4, #0]
 800abb8:	b91d      	cbnz	r5, 800abc2 <_printf_i+0x196>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f023 0320 	bic.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	2310      	movs	r3, #16
 800abc4:	e7b0      	b.n	800ab28 <_printf_i+0xfc>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	f043 0320 	orr.w	r3, r3, #32
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	2378      	movs	r3, #120	; 0x78
 800abd0:	4828      	ldr	r0, [pc, #160]	; (800ac74 <_printf_i+0x248>)
 800abd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abd6:	e7e3      	b.n	800aba0 <_printf_i+0x174>
 800abd8:	065e      	lsls	r6, r3, #25
 800abda:	bf48      	it	mi
 800abdc:	b2ad      	uxthmi	r5, r5
 800abde:	e7e6      	b.n	800abae <_printf_i+0x182>
 800abe0:	4616      	mov	r6, r2
 800abe2:	e7bb      	b.n	800ab5c <_printf_i+0x130>
 800abe4:	680b      	ldr	r3, [r1, #0]
 800abe6:	6826      	ldr	r6, [r4, #0]
 800abe8:	6960      	ldr	r0, [r4, #20]
 800abea:	1d1d      	adds	r5, r3, #4
 800abec:	600d      	str	r5, [r1, #0]
 800abee:	0635      	lsls	r5, r6, #24
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0x1cc>
 800abf4:	6018      	str	r0, [r3, #0]
 800abf6:	e002      	b.n	800abfe <_printf_i+0x1d2>
 800abf8:	0671      	lsls	r1, r6, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0x1c8>
 800abfc:	8018      	strh	r0, [r3, #0]
 800abfe:	2300      	movs	r3, #0
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	4616      	mov	r6, r2
 800ac04:	e7ba      	b.n	800ab7c <_printf_i+0x150>
 800ac06:	680b      	ldr	r3, [r1, #0]
 800ac08:	1d1a      	adds	r2, r3, #4
 800ac0a:	600a      	str	r2, [r1, #0]
 800ac0c:	681e      	ldr	r6, [r3, #0]
 800ac0e:	6862      	ldr	r2, [r4, #4]
 800ac10:	2100      	movs	r1, #0
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7f5 fae4 	bl	80001e0 <memchr>
 800ac18:	b108      	cbz	r0, 800ac1e <_printf_i+0x1f2>
 800ac1a:	1b80      	subs	r0, r0, r6
 800ac1c:	6060      	str	r0, [r4, #4]
 800ac1e:	6863      	ldr	r3, [r4, #4]
 800ac20:	6123      	str	r3, [r4, #16]
 800ac22:	2300      	movs	r3, #0
 800ac24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac28:	e7a8      	b.n	800ab7c <_printf_i+0x150>
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d0ab      	beq.n	800ab90 <_printf_i+0x164>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	079b      	lsls	r3, r3, #30
 800ac3c:	d413      	bmi.n	800ac66 <_printf_i+0x23a>
 800ac3e:	68e0      	ldr	r0, [r4, #12]
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	4298      	cmp	r0, r3
 800ac44:	bfb8      	it	lt
 800ac46:	4618      	movlt	r0, r3
 800ac48:	e7a4      	b.n	800ab94 <_printf_i+0x168>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4640      	mov	r0, r8
 800ac52:	47d0      	blx	sl
 800ac54:	3001      	adds	r0, #1
 800ac56:	d09b      	beq.n	800ab90 <_printf_i+0x164>
 800ac58:	3501      	adds	r5, #1
 800ac5a:	68e3      	ldr	r3, [r4, #12]
 800ac5c:	9903      	ldr	r1, [sp, #12]
 800ac5e:	1a5b      	subs	r3, r3, r1
 800ac60:	42ab      	cmp	r3, r5
 800ac62:	dcf2      	bgt.n	800ac4a <_printf_i+0x21e>
 800ac64:	e7eb      	b.n	800ac3e <_printf_i+0x212>
 800ac66:	2500      	movs	r5, #0
 800ac68:	f104 0619 	add.w	r6, r4, #25
 800ac6c:	e7f5      	b.n	800ac5a <_printf_i+0x22e>
 800ac6e:	bf00      	nop
 800ac70:	0800b21d 	.word	0x0800b21d
 800ac74:	0800b22e 	.word	0x0800b22e

0800ac78 <_sbrk_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d06      	ldr	r5, [pc, #24]	; (800ac94 <_sbrk_r+0x1c>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	602b      	str	r3, [r5, #0]
 800ac84:	f7f6 fd6e 	bl	8001764 <_sbrk>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_sbrk_r+0x1a>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_sbrk_r+0x1a>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	200096c8 	.word	0x200096c8

0800ac98 <__sread>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	f000 f8e0 	bl	800ae64 <_read_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	bfab      	itete	ge
 800aca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acaa:	89a3      	ldrhlt	r3, [r4, #12]
 800acac:	181b      	addge	r3, r3, r0
 800acae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acb2:	bfac      	ite	ge
 800acb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800acb6:	81a3      	strhlt	r3, [r4, #12]
 800acb8:	bd10      	pop	{r4, pc}

0800acba <__swrite>:
 800acba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	461f      	mov	r7, r3
 800acc0:	898b      	ldrh	r3, [r1, #12]
 800acc2:	05db      	lsls	r3, r3, #23
 800acc4:	4605      	mov	r5, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	4616      	mov	r6, r2
 800acca:	d505      	bpl.n	800acd8 <__swrite+0x1e>
 800accc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd0:	2302      	movs	r3, #2
 800acd2:	2200      	movs	r2, #0
 800acd4:	f000 f868 	bl	800ada8 <_lseek_r>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	4632      	mov	r2, r6
 800ace6:	463b      	mov	r3, r7
 800ace8:	4628      	mov	r0, r5
 800acea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acee:	f000 b817 	b.w	800ad20 <_write_r>

0800acf2 <__sseek>:
 800acf2:	b510      	push	{r4, lr}
 800acf4:	460c      	mov	r4, r1
 800acf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfa:	f000 f855 	bl	800ada8 <_lseek_r>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	bf15      	itete	ne
 800ad04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad0e:	81a3      	strheq	r3, [r4, #12]
 800ad10:	bf18      	it	ne
 800ad12:	81a3      	strhne	r3, [r4, #12]
 800ad14:	bd10      	pop	{r4, pc}

0800ad16 <__sclose>:
 800ad16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1a:	f000 b813 	b.w	800ad44 <_close_r>
	...

0800ad20 <_write_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_write_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f5 ff12 	bl	8000b58 <_write>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_write_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_write_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	200096c8 	.word	0x200096c8

0800ad44 <_close_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_close_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7f6 fcd3 	bl	80016fa <_close>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_close_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_close_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	200096c8 	.word	0x200096c8

0800ad64 <_fstat_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	; (800ad84 <_fstat_r+0x20>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4611      	mov	r1, r2
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	f7f6 fcce 	bl	8001712 <_fstat>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d102      	bne.n	800ad80 <_fstat_r+0x1c>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	b103      	cbz	r3, 800ad80 <_fstat_r+0x1c>
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
 800ad82:	bf00      	nop
 800ad84:	200096c8 	.word	0x200096c8

0800ad88 <_isatty_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_isatty_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f6 fccd 	bl	8001732 <_isatty>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_isatty_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_isatty_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	200096c8 	.word	0x200096c8

0800ada8 <_lseek_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_lseek_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f6 fcc6 	bl	8001748 <_lseek>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_lseek_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_lseek_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	200096c8 	.word	0x200096c8

0800adcc <memmove>:
 800adcc:	4288      	cmp	r0, r1
 800adce:	b510      	push	{r4, lr}
 800add0:	eb01 0402 	add.w	r4, r1, r2
 800add4:	d902      	bls.n	800addc <memmove+0x10>
 800add6:	4284      	cmp	r4, r0
 800add8:	4623      	mov	r3, r4
 800adda:	d807      	bhi.n	800adec <memmove+0x20>
 800addc:	1e43      	subs	r3, r0, #1
 800adde:	42a1      	cmp	r1, r4
 800ade0:	d008      	beq.n	800adf4 <memmove+0x28>
 800ade2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ade6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adea:	e7f8      	b.n	800adde <memmove+0x12>
 800adec:	4402      	add	r2, r0
 800adee:	4601      	mov	r1, r0
 800adf0:	428a      	cmp	r2, r1
 800adf2:	d100      	bne.n	800adf6 <memmove+0x2a>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adfe:	e7f7      	b.n	800adf0 <memmove+0x24>

0800ae00 <__malloc_lock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__malloc_lock+0x8>)
 800ae02:	f7ff b9df 	b.w	800a1c4 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	200096c0 	.word	0x200096c0

0800ae0c <__malloc_unlock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__malloc_unlock+0x8>)
 800ae0e:	f7ff b9da 	b.w	800a1c6 <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	200096c0 	.word	0x200096c0

0800ae18 <_realloc_r>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	460e      	mov	r6, r1
 800ae20:	b921      	cbnz	r1, 800ae2c <_realloc_r+0x14>
 800ae22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae26:	4611      	mov	r1, r2
 800ae28:	f7ff ba82 	b.w	800a330 <_malloc_r>
 800ae2c:	b922      	cbnz	r2, 800ae38 <_realloc_r+0x20>
 800ae2e:	f7ff fa2f 	bl	800a290 <_free_r>
 800ae32:	4625      	mov	r5, r4
 800ae34:	4628      	mov	r0, r5
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	f000 f826 	bl	800ae88 <_malloc_usable_size_r>
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d20f      	bcs.n	800ae60 <_realloc_r+0x48>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4638      	mov	r0, r7
 800ae44:	f7ff fa74 	bl	800a330 <_malloc_r>
 800ae48:	4605      	mov	r5, r0
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d0f2      	beq.n	800ae34 <_realloc_r+0x1c>
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4622      	mov	r2, r4
 800ae52:	f7fe fe63 	bl	8009b1c <memcpy>
 800ae56:	4631      	mov	r1, r6
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff fa19 	bl	800a290 <_free_r>
 800ae5e:	e7e9      	b.n	800ae34 <_realloc_r+0x1c>
 800ae60:	4635      	mov	r5, r6
 800ae62:	e7e7      	b.n	800ae34 <_realloc_r+0x1c>

0800ae64 <_read_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d07      	ldr	r5, [pc, #28]	; (800ae84 <_read_r+0x20>)
 800ae68:	4604      	mov	r4, r0
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	602a      	str	r2, [r5, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f7f6 fc24 	bl	80016c0 <_read>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_read_r+0x1e>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_read_r+0x1e>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	200096c8 	.word	0x200096c8

0800ae88 <_malloc_usable_size_r>:
 800ae88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae8c:	1f18      	subs	r0, r3, #4
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bfbc      	itt	lt
 800ae92:	580b      	ldrlt	r3, [r1, r0]
 800ae94:	18c0      	addlt	r0, r0, r3
 800ae96:	4770      	bx	lr

0800ae98 <_init>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	bf00      	nop
 800ae9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9e:	bc08      	pop	{r3}
 800aea0:	469e      	mov	lr, r3
 800aea2:	4770      	bx	lr

0800aea4 <_fini>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr
