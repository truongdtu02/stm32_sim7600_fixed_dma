
sim7600LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aba0  0800aba0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aba8  0800aba8  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800abb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d9c  200000f4  0800aca4  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008e90  0800aca4  00028e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f84d  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049dd  00000000  00000000  0003f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00044350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001958  00000000  00000000  00045e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280f0  00000000  00000000  000477d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1da  00000000  00000000  0006f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6636  00000000  00000000  0008aa9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001710d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bcc  00000000  00000000  00171124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7d4 	.word	0x0800a7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	0800a7d4 	.word	0x0800a7d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000110 	.word	0x20000110
 80005a8:	20000164 	.word	0x20000164

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00b      	beq.n	80006fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e6:	e000      	b.n	80006ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <LL_RCC_HSE_Enable+0x1c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <LL_RCC_HSE_Enable+0x1c>)
 8000716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LL_RCC_HSE_IsReady+0x24>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f023 0203 	bic.w	r2, r3, #3
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	608b      	str	r3, [r1, #8]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_RCC_GetSysClkSource+0x18>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 030c 	and.w	r3, r3, #12
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_RCC_SetAHBPrescaler+0x24>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <LL_RCC_SetAHBPrescaler+0x24>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40023800 	.word	0x40023800

080007c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	608b      	str	r3, [r1, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40023800 	.word	0x40023800

080007e8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_RCC_SetAPB2Prescaler+0x24>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <LL_RCC_SetAPB2Prescaler+0x24>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	608b      	str	r3, [r1, #8]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40023800 	.word	0x40023800

08000810 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <LL_RCC_PLL_Enable+0x1c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <LL_RCC_PLL_Enable+0x1c>)
 800081a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <LL_RCC_PLL_IsReady+0x24>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800083c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800086c:	4013      	ands	r3, r2
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4311      	orrs	r1, r2
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	0192      	lsls	r2, r2, #6
 8000878:	430a      	orrs	r2, r1
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800087c:	4313      	orrs	r3, r2
 800087e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	4313      	orrs	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40023800 	.word	0x40023800
 80008a0:	ffbf8000 	.word	0xffbf8000

080008a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	40023800 	.word	0x40023800

080008d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	40023800 	.word	0x40023800

08000904 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800090e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800091a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800

08000934 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800093e:	4a13      	ldr	r2, [pc, #76]	; (800098c <LL_SYSCFG_SetEXTISource+0x58>)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3302      	adds	r3, #2
 8000946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	0c1b      	lsrs	r3, r3, #16
 800094e:	43db      	mvns	r3, r3
 8000950:	ea02 0103 	and.w	r1, r2, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	fa93 f3a3 	rbit	r3, r3
 8000960:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	fa03 f202 	lsl.w	r2, r3, r2
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <LL_SYSCFG_SetEXTISource+0x58>)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	430a      	orrs	r2, r1
 800097a:	3302      	adds	r3, #2
 800097c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40013800 	.word	0x40013800

08000990 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LL_FLASH_SetLatency+0x24>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f023 0207 	bic.w	r2, r3, #7
 80009a0:	4904      	ldr	r1, [pc, #16]	; (80009b4 <LL_FLASH_SetLatency+0x24>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LL_FLASH_GetLatency+0x18>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0307 	and.w	r3, r3, #7
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	600b      	str	r3, [r1, #0]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40007000 	.word	0x40007000

080009fc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a2e:	f023 0307 	bic.w	r3, r3, #7
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	605a      	str	r2, [r3, #4]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60da      	str	r2, [r3, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	613b      	str	r3, [r7, #16]
  return result;
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	401a      	ands	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	fa93 f3a3 	rbit	r3, r3
 8000b12:	61bb      	str	r3, [r7, #24]
  return result;
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fab3 f383 	clz	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	431a      	orrs	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b089      	sub	sp, #36	; 0x24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	613b      	str	r3, [r7, #16]
  return result;
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	401a      	ands	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa93 f3a3 	rbit	r3, r3
 8000b70:	61bb      	str	r3, [r7, #24]
  return result;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	fab3 f383 	clz	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	431a      	orrs	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	60da      	str	r2, [r3, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3724      	adds	r7, #36	; 0x24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	619a      	str	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4013      	ands	r3, r2
 8000be4:	041a      	lsls	r2, r3, #16
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43d9      	mvns	r1, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	400b      	ands	r3, r1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	619a      	str	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e009      	b.n	8000c26 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fd4f 	bl	80006be <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dbf1      	blt.n	8000c12 <_write+0x12>
	}
	return len;
 8000c2e:	687b      	ldr	r3, [r7, #4]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b0a0      	sub	sp, #128	; 0x80
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fd17 	bl	8001670 <HAL_Init>

  /* USER CODE BEGIN Init */
  eStatusPlayMp3 = ON;
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <main+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f880 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f98e 	bl	8000f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c50:	f000 f97c 	bl	8000f4c <MX_DMA_Init>
  MX_TIM3_Init();
 8000c54:	f000 f8fa 	bl	8000e4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c58:	f000 f928 	bl	8000eac <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000c5c:	f000 f8c0 	bl	8000de0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //osMessageGet(queue_id, millisec)
  VS1003_Init();
 8000c60:	f008 fa2c 	bl	80090bc <VS1003_Init>
  VS1003_SoftReset();
 8000c64:	f008 fad4 	bl	8009210 <VS1003_SoftReset>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <main+0xec>)
 8000c6a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fcdd 	bl	8004642 <osThreadCreate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <main+0xf0>)
 8000c8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, StartTask02, osPriorityHigh, 0, 128);
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <main+0xf4>)
 8000c90:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000c94:	461d      	mov	r5, r3
 8000c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000ca2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fcca 	bl	8004642 <osThreadCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <main+0xf8>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(sim7600Error, sim7600ErrorTask, osPriorityHigh, 0, 128);
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <main+0xfc>)
 8000cb6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sim7600ErrorHandle = osThreadCreate(osThread(sim7600Error), NULL);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fcb7 	bl	8004642 <osThreadCreate>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <main+0x100>)
 8000cd8:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(sim7600ErrorHandle);

  osMessageQDef(rxUASRTQueue, 20, uint8_t);
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0x104>)
 8000cdc:	f107 041c 	add.w	r4, r7, #28
 8000ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart_rx_dma_queue_id = osMessageCreate(osMessageQ(rxUASRTQueue), NULL);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fdcb 	bl	8004888 <osMessageCreate>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <main+0x108>)
 8000cf6:	6013      	str	r3, [r2, #0]

  osThreadDef(usart_rx_dma, usart_rx_dmaTask, osPriorityHigh, 0, 128);
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <main+0x10c>)
 8000cfa:	463c      	mov	r4, r7
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_rx_dmaHandle = osThreadCreate(osThread(usart_rx_dma), NULL);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fc97 	bl	8004642 <osThreadCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <main+0x110>)
 8000d18:	6013      	str	r3, [r2, #0]
  //osThreadSuspend(usart_rx_dmaHandle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d1a:	f003 fc8b 	bl	8004634 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <main+0xe6>
 8000d20:	20004190 	.word	0x20004190
 8000d24:	0800a824 	.word	0x0800a824
 8000d28:	20004120 	.word	0x20004120
 8000d2c:	0800a840 	.word	0x0800a840
 8000d30:	20004124 	.word	0x20004124
 8000d34:	0800a85c 	.word	0x0800a85c
 8000d38:	20004184 	.word	0x20004184
 8000d3c:	0800a878 	.word	0x0800a878
 8000d40:	2000419c 	.word	0x2000419c
 8000d44:	0800a888 	.word	0x0800a888
 8000d48:	20004198 	.word	0x20004198

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000d50:	2005      	movs	r0, #5
 8000d52:	f7ff fe1d 	bl	8000990 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000d56:	bf00      	nop
 8000d58:	f7ff fe2e 	bl	80009b8 <LL_FLASH_GetLatency>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d1fa      	bne.n	8000d58 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d66:	f7ff fe35 	bl	80009d4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000d6a:	f7ff fccf 	bl	800070c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d6e:	bf00      	nop
 8000d70:	f7ff fcdc 	bl	800072c <LL_RCC_HSE_IsReady>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d1fa      	bne.n	8000d70 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	22a8      	movs	r2, #168	; 0xa8
 8000d7e:	2104      	movs	r1, #4
 8000d80:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d84:	f7ff fd68 	bl	8000858 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d88:	f7ff fd42 	bl	8000810 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d8c:	bf00      	nop
 8000d8e:	f7ff fd4f 	bl	8000830 <LL_RCC_PLL_IsReady>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d1fa      	bne.n	8000d8e <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fcfd 	bl	8000798 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000d9e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000da2:	f7ff fd0d 	bl	80007c0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000da6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000daa:	f7ff fd1d 	bl	80007e8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fcd0 	bl	8000754 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000db4:	bf00      	nop
 8000db6:	f7ff fce1 	bl	800077c <LL_RCC_GetSysClkSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d1fa      	bne.n	8000db6 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <SystemClock_Config+0x90>)
 8000dc2:	f003 fbfd 	bl	80045c0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 fad2 	bl	8001370 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dd2:	f000 fa02 	bl	80011da <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	0a037a00 	.word	0x0a037a00

08000de0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <MX_SPI2_Init+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e14:	2230      	movs	r2, #48	; 0x30
 8000e16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_SPI2_Init+0x64>)
 8000e32:	f001 faf5 	bl	8002420 <HAL_SPI_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e3c:	f000 f9cd 	bl	80011da <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20004128 	.word	0x20004128
 8000e48:	40003800 	.word	0x40003800

08000e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fd37 	bl	80008d4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <MX_TIM3_Init+0x5c>)
 8000e7e:	f003 f8bb 	bl	8003ff8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <MX_TIM3_Init+0x5c>)
 8000e84:	f7ff fdba 	bl	80009fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM3_Init+0x5c>)
 8000e8c:	f7ff fdc6 	bl	8000a1c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_TIM3_Init+0x5c>)
 8000e94:	f7ff fdd7 	bl	8000a46 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM3_Init+0x5c>)
 8000e9a:	f7ff fde7 	bl	8000a6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400

08000eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f7ff fd14 	bl	8000904 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fce1 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ee6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <MX_USART1_UART_Init+0x98>)
 8000f02:	f002 fe91 	bl	8003c28 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f0a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_USART1_UART_Init+0x9c>)
 8000f2c:	f003 fac8 	bl	80044c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART1_UART_Init+0x9c>)
 8000f32:	f7ff fdbb 	bl	8000aac <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_USART1_UART_Init+0x9c>)
 8000f38:	f7ff fda8 	bl	8000a8c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	; 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40011000 	.word	0x40011000

08000f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f54:	f7ff fca6 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f000 fca5 	bl	80018ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f000 fcbe 	bl	80018e4 <HAL_NVIC_EnableIRQ>

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000f8c:	2080      	movs	r0, #128	; 0x80
 8000f8e:	f7ff fc89 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f92:	2004      	movs	r0, #4
 8000f94:	f7ff fc86 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff fc83 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f7ff fc80 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fc7d 	bl	80008a4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 8000faa:	21c0      	movs	r1, #192	; 0xc0
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <MX_GPIO_Init+0x11c>)
 8000fae:	f7ff fdf1 	bl	8000b94 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13);
 8000fb2:	f44f 5122 	mov.w	r1, #10368	; 0x2880
 8000fb6:	4835      	ldr	r0, [pc, #212]	; (800108c <MX_GPIO_Init+0x120>)
 8000fb8:	f7ff fdec 	bl	8000b94 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc0:	4833      	ldr	r0, [pc, #204]	; (8001090 <MX_GPIO_Init+0x124>)
 8000fc2:	f7ff fdf5 	bl	8000bb0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <MX_GPIO_Init+0x11c>)
 8000fe0:	f002 fe22 	bl	8003c28 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_11|LL_GPIO_PIN_13;
 8000fe4:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 8000fe8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <MX_GPIO_Init+0x120>)
 8001000:	f002 fe12 	bl	8003c28 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800100a:	2301      	movs	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	481c      	ldr	r0, [pc, #112]	; (8001090 <MX_GPIO_Init+0x124>)
 8001020:	f002 fe02 	bl	8003c28 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE9);
 8001024:	491b      	ldr	r1, [pc, #108]	; (8001094 <MX_GPIO_Init+0x128>)
 8001026:	2004      	movs	r0, #4
 8001028:	f7ff fc84 	bl	8000934 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001036:	2300      	movs	r3, #0
 8001038:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800103a:	2303      	movs	r3, #3
 800103c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fc6a 	bl	800391c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOE, LL_GPIO_PIN_9, LL_GPIO_PULL_NO);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <MX_GPIO_Init+0x120>)
 8001050:	f7ff fd71 	bl	8000b36 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_9, LL_GPIO_MODE_INPUT);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_GPIO_Init+0x120>)
 800105c:	f7ff fd3c 	bl	8000ad8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001060:	f7ff faa4 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8001064:	4603      	mov	r3, r0
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff faf4 	bl	8000658 <NVIC_EncodePriority>
 8001070:	4603      	mov	r3, r0
 8001072:	4619      	mov	r1, r3
 8001074:	2017      	movs	r0, #23
 8001076:	f7ff fac5 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800107a:	2017      	movs	r0, #23
 800107c:	f7ff faa4 	bl	80005c8 <__NVIC_EnableIRQ>

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000
 800108c:	40021000 	.word	0x40021000
 8001090:	40020400 	.word	0x40020400
 8001094:	00f00002 	.word	0x00f00002

08001098 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_SPI_TxCpltCallback+0x24>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d105      	bne.n	80010b4 <HAL_SPI_TxCpltCallback+0x1c>
  {
    //VS1003_PlayBeep_DMA();
	  if(IsPlaying)
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_SPI_TxCpltCallback+0x28>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_SPI_TxCpltCallback+0x1c>
		  //VS1003_PlayBeep_DMA();
		  playMp3DMA();
 80010b0:	f007 fe34 	bl	8008d1c <playMp3DMA>
		//VS1003_Play_1frameMute_DMA();
		//iii++;
  }
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20004128 	.word	0x20004128
 80010c0:	20004108 	.word	0x20004108

080010c4 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	//IRQ_Tim_LL_GetTick();
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
	sim7600_usart_IRQHandler();
 80010d6:	f007 fed5 	bl	8008e84 <sim7600_usart_IRQHandler>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <sim7600ErrorTask>:

void sim7600ErrorTask(void const * argument)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    printf("%c", 'e');
 80010e6:	2065      	movs	r0, #101	; 0x65
 80010e8:	f008 f986 	bl	80093f8 <putchar>
    osDelay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f0:	f003 faff 	bl	80046f2 <osDelay>
    sim7600_handle_error();
 80010f4:	f007 f980 	bl	80083f8 <sim7600_handle_error>
    printf("%c", 'e');
 80010f8:	e7f5      	b.n	80010e6 <sim7600ErrorTask+0x8>
	...

080010fc <usart_rx_dmaTask>:
  }
}

osEvent rx_dmaQueueEvent;
void usart_rx_dmaTask(void const * argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6178      	str	r0, [r7, #20]
    // }
    // else //in normal 
    // {
    //   osMessageGet(usart_rx_dma_queue_id, osWaitForever);
    // }
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <usart_rx_dmaTask+0x20>)
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	463b      	mov	r3, r7
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fc22 	bl	8004958 <osMessageGet>
    sim7600_usart_rx_check();
 8001114:	f007 fa56 	bl	80085c4 <sim7600_usart_rx_check>
    osMessageGet(usart_rx_dma_queue_id, osWaitForever);
 8001118:	e7f4      	b.n	8001104 <usart_rx_dmaTask+0x8>
 800111a:	bf00      	nop
 800111c:	2000419c 	.word	0x2000419c

08001120 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  //osThreadSuspend(sim7600ErrorHandle); // suspend all other thread
  //Init_LL_GetTick();
  sim7600_init();
 8001128:	f006 fe2a 	bl	8007d80 <sim7600_init>
  if(!sim7600_config()) sim7600_error = true;
 800112c:	f006 ff22 	bl	8007f74 <sim7600_config>
 8001130:	4603      	mov	r3, r0
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <StartDefaultTask+0x22>
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <StartDefaultTask+0x30>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
  //osThreadResumeAll();
  //osThreadResume(blinkTaskHandle);
  //osThreadResume(sim7600ErrorHandle);
  //osThreadResume(usart_rx_dmaHandle);
  
  osThreadTerminate(NULL);
 8001142:	2000      	movs	r0, #0
 8001144:	f003 fac9 	bl	80046da <osThreadTerminate>

  //osThreadTerminate(defaultTaskHandle);
  /* USER CODE END 5 */
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200040c4 	.word	0x200040c4

08001154 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  static int StartTask02_num = 0;
  for(;;)
  {
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	4813      	ldr	r0, [pc, #76]	; (80011ac <StartTask02+0x58>)
 8001160:	f7ff fd35 	bl	8000bce <LL_GPIO_TogglePin>
    osDelay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f003 fac3 	bl	80046f2 <osDelay>

    if(sim7600_udp_IsOpen)
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <StartTask02+0x5c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f3      	beq.n	800115c <StartTask02+0x8>
    {
    	StartTask02_num++;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <StartTask02+0x60>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <StartTask02+0x60>)
 800117c:	6013      	str	r3, [r2, #0]
    	if(StartTask02_num % 10 == 0 || StartTask02_num < 10) sim7600_keepAlive_udp();
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <StartTask02+0x60>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <StartTask02+0x64>)
 8001184:	fb83 2301 	smull	r2, r3, r3, r1
 8001188:	109a      	asrs	r2, r3, #2
 800118a:	17cb      	asrs	r3, r1, #31
 800118c:	1ad2      	subs	r2, r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	1aca      	subs	r2, r1, r3
 8001198:	2a00      	cmp	r2, #0
 800119a:	d003      	beq.n	80011a4 <StartTask02+0x50>
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <StartTask02+0x60>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b09      	cmp	r3, #9
 80011a2:	dcdb      	bgt.n	800115c <StartTask02+0x8>
 80011a4:	f007 f8fa 	bl	800839c <sim7600_keepAlive_udp>
	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_7);
 80011a8:	e7d8      	b.n	800115c <StartTask02+0x8>
 80011aa:	bf00      	nop
 80011ac:	40020000 	.word	0x40020000
 80011b0:	200040c7 	.word	0x200040c7
 80011b4:	20000364 	.word	0x20000364
 80011b8:	66666667 	.word	0x66666667

080011bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d101      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ce:	f000 fa71 	bl	80016b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011de:	b672      	cpsid	i
}
 80011e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_MspInit+0x54>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_MspInit+0x54>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x54>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_MspInit+0x54>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_MspInit+0x54>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_MspInit+0x54>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	210f      	movs	r1, #15
 8001226:	f06f 0001 	mvn.w	r0, #1
 800122a:	f000 fb3f 	bl	80018ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <HAL_SPI_MspInit+0x11c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d178      	bne.n	8001350 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_SPI_MspInit+0x120>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <HAL_SPI_MspInit+0x120>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_SPI_MspInit+0x120>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_SPI_MspInit+0x120>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a36      	ldr	r2, [pc, #216]	; (800135c <HAL_SPI_MspInit+0x120>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_SPI_MspInit+0x120>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_SPI_MspInit+0x120>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <HAL_SPI_MspInit+0x120>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_SPI_MspInit+0x120>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c2:	2305      	movs	r3, #5
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4824      	ldr	r0, [pc, #144]	; (8001360 <HAL_SPI_MspInit+0x124>)
 80012ce:	f000 fe87 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e4:	2305      	movs	r3, #5
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <HAL_SPI_MspInit+0x128>)
 80012f0:	f000 fe76 	bl	8001fe0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_SPI_MspInit+0x130>)
 80012f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 800130e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001312:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800132c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001336:	f000 fae3 	bl	8001900 <HAL_DMA_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001340:	f7ff ff4b 	bl	80011da <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 8001348:	649a      	str	r2, [r3, #72]	; 0x48
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_SPI_MspInit+0x12c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40003800 	.word	0x40003800
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020400 	.word	0x40020400
 8001368:	200041b8 	.word	0x200041b8
 800136c:	40026070 	.word	0x40026070

08001370 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	201c      	movs	r0, #28
 8001386:	f000 fa91 	bl	80018ac <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138a:	201c      	movs	r0, #28
 800138c:	f000 faaa 	bl	80018e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_InitTick+0xa8>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <HAL_InitTick+0xa8>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_InitTick+0xa8>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ac:	f107 0210 	add.w	r2, r7, #16
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f800 	bl	80023bc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013bc:	f000 ffea 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_InitTick+0xac>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	3b01      	subs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0xb0>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_InitTick+0xb0>)
 80013de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_InitTick+0xb0>)
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_InitTick+0xb0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_InitTick+0xb0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <HAL_InitTick+0xb0>)
 80013f8:	f001 ff4a 	bl	8003290 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d104      	bne.n	800140c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <HAL_InitTick+0xb0>)
 8001404:	f001 ff9e 	bl	8003344 <HAL_TIM_Base_Start_IT>
 8001408:	4603      	mov	r3, r0
 800140a:	e000      	b.n	800140e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	431bde83 	.word	0x431bde83
 8001420:	20004218 	.word	0x20004218

08001424 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4013      	ands	r3, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40013c00 	.word	0x40013c00

08001450 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6153      	str	r3, [r2, #20]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40013c00 	.word	0x40013c00

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA1_Stream4_IRQHandler+0x10>)
 80014a2:	f000 fb33 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200041b8 	.word	0x200041b8

080014b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 80014b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014b8:	f7ff ffb4 	bl	8001424 <LL_EXTI_IsActiveFlag_0_31>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <EXTI9_5_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 80014c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c6:	f7ff ffc3 	bl	8001450 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9 */
    DREQ_VS1003_IRQhandler();
 80014ca:	f007 ff21 	bl	8009310 <DREQ_VS1003_IRQhandler>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM2_IRQHandler+0x10>)
 80014da:	f001 ffa3 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004218 	.word	0x20004218

080014e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
	}

return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f007 fec4 	bl	8009348 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20020000 	.word	0x20020000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000368 	.word	0x20000368
 80015f4:	20008e90 	.word	0x20008e90

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f007 fe83 	bl	8009354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff faf3 	bl	8000c38 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001660:	0800abb0 	.word	0x0800abb0
  ldr r2, =_sbss
 8001664:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8001668:	20008e90 	.word	0x20008e90

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f8fc 	bl	8001896 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff fe66 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fd9e 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000004 	.word	0x20000004
 80016d8:	20004260 	.word	0x20004260

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20004260 	.word	0x20004260

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004

0800173c <__NVIC_SetPriorityGrouping>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff4c 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018be:	f7ff ff61 	bl	8001784 <__NVIC_GetPriorityGrouping>
 80018c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	6978      	ldr	r0, [r7, #20]
 80018ca:	f7ff ffb1 	bl	8001830 <NVIC_EncodePriority>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff80 	bl	80017dc <__NVIC_SetPriority>
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff54 	bl	80017a0 <__NVIC_EnableIRQ>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff fee6 	bl	80016dc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e099      	b.n	8001a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193c:	e00f      	b.n	800195e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800193e:	f7ff fecd 	bl	80016dc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b05      	cmp	r3, #5
 800194a:	d908      	bls.n	800195e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e078      	b.n	8001a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e8      	bne.n	800193e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_DMA_Init+0x158>)
 8001978:	4013      	ands	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4313      	orrs	r3, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f023 0307 	bic.w	r3, r3, #7
 80019de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d117      	bne.n	8001a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00e      	beq.n	8001a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fa6f 	bl	8001ee8 <DMA_CheckFifoParam>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e016      	b.n	8001a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fa26 	bl	8001e7c <DMA_CalcBaseAndBitshift>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	223f      	movs	r2, #63	; 0x3f
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	f010803f 	.word	0xf010803f

08001a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Start_IT+0x26>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e040      	b.n	8001b04 <HAL_DMA_Start_IT+0xa8>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d12f      	bne.n	8001af6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f9b8 	bl	8001e20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0216 	orr.w	r2, r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0208 	orr.w	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e005      	b.n	8001b02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b18:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_DMA_IRQHandler+0x258>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a92      	ldr	r2, [pc, #584]	; (8001d68 <HAL_DMA_IRQHandler+0x25c>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2208      	movs	r2, #8
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01a      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2208      	movs	r2, #8
 8001b66:	409a      	lsls	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0202 	orr.w	r2, r3, #2
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d012      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f043 0204 	orr.w	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2210      	movs	r2, #16
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d043      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03c      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2210      	movs	r2, #16
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d108      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d024      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	e01f      	b.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
 8001c4c:	e016      	b.n	8001c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0208 	bic.w	r2, r2, #8
 8001c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2220      	movs	r2, #32
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 808e 	beq.w	8001daa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8086 	beq.w	8001daa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d136      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0216 	bic.w	r2, r2, #22
 8001cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_DMA_IRQHandler+0x1da>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0208 	bic.w	r2, r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	223f      	movs	r2, #63	; 0x3f
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d07d      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
        }
        return;
 8001d22:	e078      	b.n	8001e16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d108      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d030      	beq.n	8001daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
 8001d50:	e02b      	b.n	8001daa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d027      	beq.n	8001daa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
 8001d62:	e022      	b.n	8001daa <HAL_DMA_IRQHandler+0x29e>
 8001d64:	20000000 	.word	0x20000000
 8001d68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0210 	bic.w	r2, r2, #16
 8001d88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d032      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d022      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d307      	bcc.n	8001df2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f2      	bne.n	8001dd6 <HAL_DMA_IRQHandler+0x2ca>
 8001df0:	e000      	b.n	8001df4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001df2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e000      	b.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e16:	bf00      	nop
    }
  }
}
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop

08001e20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d108      	bne.n	8001e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e5e:	e007      	b.n	8001e70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3b10      	subs	r3, #16
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e96:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d909      	bls.n	8001ebe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	1d1a      	adds	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58
 8001ebc:	e007      	b.n	8001ece <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	aaaaaaab 	.word	0xaaaaaaab
 8001ee4:	0800aaf8 	.word	0x0800aaf8

08001ee8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11f      	bne.n	8001f42 <DMA_CheckFifoParam+0x5a>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d856      	bhi.n	8001fb6 <DMA_CheckFifoParam+0xce>
 8001f08:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <DMA_CheckFifoParam+0x28>)
 8001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f33 	.word	0x08001f33
 8001f18:	08001f21 	.word	0x08001f21
 8001f1c:	08001fb7 	.word	0x08001fb7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d046      	beq.n	8001fba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f30:	e043      	b.n	8001fba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f3a:	d140      	bne.n	8001fbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f40:	e03d      	b.n	8001fbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4a:	d121      	bne.n	8001f90 <DMA_CheckFifoParam+0xa8>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d837      	bhi.n	8001fc2 <DMA_CheckFifoParam+0xda>
 8001f52:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <DMA_CheckFifoParam+0x70>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	08001f6f 	.word	0x08001f6f
 8001f60:	08001f69 	.word	0x08001f69
 8001f64:	08001f81 	.word	0x08001f81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f6c:	e030      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d025      	beq.n	8001fc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7e:	e022      	b.n	8001fc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f88:	d11f      	bne.n	8001fca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f8e:	e01c      	b.n	8001fca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d903      	bls.n	8001f9e <DMA_CheckFifoParam+0xb6>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d003      	beq.n	8001fa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f9c:	e018      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa2:	e015      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb4:	e00b      	b.n	8001fce <DMA_CheckFifoParam+0xe6>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e00a      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e008      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e006      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e004      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e002      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
    }
  } 
  
  return status; 
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e16b      	b.n	80022d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 815a 	bne.w	80022ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	2b02      	cmp	r3, #2
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d017      	beq.n	80020d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d123      	bne.n	8002124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80b4 	beq.w	80022ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b60      	ldr	r3, [pc, #384]	; (80022ec <HAL_GPIO_Init+0x30c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_GPIO_Init+0x30c>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_GPIO_Init+0x30c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <HAL_GPIO_Init+0x310>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x314>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_Init+0x318>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d025      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_Init+0x31c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x320>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x21a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_GPIO_Init+0x324>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x216>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x328>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x212>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x32c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_GPIO_Init+0x330>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x20a>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00e      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021ea:	2308      	movs	r3, #8
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x228>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x228>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4935      	ldr	r1, [pc, #212]	; (80022f0 <HAL_GPIO_Init+0x310>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a32      	ldr	r2, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x334>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x334>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae90 	bls.w	8001ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40021000 	.word	0x40021000
 8002308:	40021400 	.word	0x40021400
 800230c:	40021800 	.word	0x40021800
 8002310:	40021c00 	.word	0x40021c00
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e001      	b.n	800233a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	0800aaf0 	.word	0x0800aaf0

080023bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	220f      	movs	r2, #15
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_RCC_GetClockConfig+0x60>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0207 	and.w	r2, r3, #7
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07b      	b.n	800252a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002442:	d009      	beq.n	8002458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
 800244a:	e005      	b.n	8002458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fee2 	bl	800123c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0104 	and.w	r1, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f003 0210 	and.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b088      	sub	sp, #32
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_SPI_Transmit+0x22>
 8002550:	2302      	movs	r3, #2
 8002552:	e126      	b.n	80027a2 <HAL_SPI_Transmit+0x270>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255c:	f7ff f8be 	bl	80016dc <HAL_GetTick>
 8002560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002576:	e10b      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_Transmit+0x52>
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002588:	e102      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	d10f      	bne.n	80025f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d007      	beq.n	8002610 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002618:	d14b      	bne.n	80026b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Transmit+0xf6>
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13e      	bne.n	80026a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800264c:	e02b      	b.n	80026a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d112      	bne.n	8002682 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002680:	e011      	b.n	80026a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002682:	f7ff f82b 	bl	80016dc <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d803      	bhi.n	800269a <HAL_SPI_Transmit+0x168>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d102      	bne.n	80026a0 <HAL_SPI_Transmit+0x16e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026a4:	e074      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ce      	bne.n	800264e <HAL_SPI_Transmit+0x11c>
 80026b0:	e04c      	b.n	800274c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_Transmit+0x18e>
 80026ba:	8afb      	ldrh	r3, [r7, #22]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d140      	bne.n	8002742 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026e6:	e02c      	b.n	8002742 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d113      	bne.n	800271e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
 800271c:	e011      	b.n	8002742 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271e:	f7fe ffdd 	bl	80016dc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d803      	bhi.n	8002736 <HAL_SPI_Transmit+0x204>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d102      	bne.n	800273c <HAL_SPI_Transmit+0x20a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002740:	e026      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1cd      	bne.n	80026e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fd5b 	bl	800320c <SPI_EndRxTxTransaction>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e000      	b.n	8002790 <HAL_SPI_Transmit+0x25e>
  }

error:
 800278e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b088      	sub	sp, #32
 80027ae:	af02      	add	r7, sp, #8
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d112      	bne.n	80027ee <HAL_SPI_Receive+0x44>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10e      	bne.n	80027ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2204      	movs	r2, #4
 80027d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f8f1 	bl	80029cc <HAL_SPI_TransmitReceive>
 80027ea:	4603      	mov	r3, r0
 80027ec:	e0ea      	b.n	80029c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_SPI_Receive+0x52>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0e3      	b.n	80029c4 <HAL_SPI_Receive+0x21a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002804:	f7fe ff6a 	bl	80016dc <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d002      	beq.n	800281c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
    goto error;
 800281a:	e0ca      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_Receive+0x7e>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800282c:	e0c1      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2204      	movs	r2, #4
 8002832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002874:	d10f      	bne.n	8002896 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d007      	beq.n	80028b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d162      	bne.n	8002982 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028bc:	e02e      	b.n	800291c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d115      	bne.n	80028f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f103 020c 	add.w	r2, r3, #12
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f6:	e011      	b.n	800291c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f8:	f7fe fef0 	bl	80016dc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d803      	bhi.n	8002910 <HAL_SPI_Receive+0x166>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d102      	bne.n	8002916 <HAL_SPI_Receive+0x16c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	75fb      	strb	r3, [r7, #23]
          goto error;
 800291a:	e04a      	b.n	80029b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cb      	bne.n	80028be <HAL_SPI_Receive+0x114>
 8002926:	e031      	b.n	800298c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	b292      	uxth	r2, r2
 8002942:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295c:	e011      	b.n	8002982 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295e:	f7fe febd 	bl	80016dc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d803      	bhi.n	8002976 <HAL_SPI_Receive+0x1cc>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d102      	bne.n	800297c <HAL_SPI_Receive+0x1d2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002980:	e017      	b.n	80029b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1cd      	bne.n	8002928 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fbd5 	bl	8003140 <SPI_EndRxTransaction>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
 80029ae:	e000      	b.n	80029b2 <HAL_SPI_Receive+0x208>
  }

error :
 80029b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x26>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e18a      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x33c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fa:	f7fe fe6f 	bl	80016dc <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d00f      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x70>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a22:	d107      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x68>
 8002a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d003      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a3a:	e15b      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x82>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x82>
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a54:	e14e      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2205      	movs	r2, #5
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d007      	beq.n	8002abe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d178      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x10a>
 8002ad0:	8b7b      	ldrh	r3, [r7, #26]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d166      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afa:	e053      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11b      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d113      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	1c9a      	adds	r2, r3, #2
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d119      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x1b8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	b292      	uxth	r2, r2
 8002b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b84:	f7fe fdaa 	bl	80016dc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d807      	bhi.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d003      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ba2:	e0a7      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1a6      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x130>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1a1      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x130>
 8002bb8:	e07c      	b.n	8002cb4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_SPI_TransmitReceive+0x1fc>
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d16b      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bee:	e057      	b.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d11c      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d114      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d119      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x2ae>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d014      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c76:	2301      	movs	r3, #1
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c7a:	f7fe fd2f 	bl	80016dc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d803      	bhi.n	8002c92 <HAL_SPI_TransmitReceive+0x2c6>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d102      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x2cc>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c9e:	e029      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1a2      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x224>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d19d      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 faa7 	bl	800320c <SPI_EndRxTxTransaction>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cd0:	e010      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	e000      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3730      	adds	r7, #48	; 0x30
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_SPI_Transmit_DMA+0x20>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e09b      	b.n	8002e68 <HAL_SPI_Transmit_DMA+0x158>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
 8002d46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d48:	e089      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit_DMA+0x46>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d5a:	e080      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da2:	d10f      	bne.n	8002dc4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_SPI_Transmit_DMA+0x160>)
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_SPI_Transmit_DMA+0x164>)
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_SPI_Transmit_DMA+0x168>)
 8002dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	2200      	movs	r2, #0
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4619      	mov	r1, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002dfc:	f7fe fe2e 	bl	8001a5c <HAL_DMA_Start_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e1e:	e01e      	b.n	8002e5e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0202 	orr.w	r2, r2, #2
 8002e5c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	08002fd5 	.word	0x08002fd5
 8002e74:	08002f2d 	.word	0x08002f2d
 8002e78:	08002ff1 	.word	0x08002ff1

08002e7c <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_DMAPause+0x16>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e010      	b.n	8002eb4 <HAL_SPI_DMAPause+0x38>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0203 	bic.w	r2, r2, #3
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_SPI_DMAResume+0x16>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e010      	b.n	8002ef8 <HAL_SPI_DMAResume+0x38>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0203 	orr.w	r2, r2, #3
 8002eec:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f3a:	f7fe fbcf 	bl	80016dc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4e:	d03b      	beq.n	8002fc8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0220 	bic.w	r2, r2, #32
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0202 	bic.w	r2, r2, #2
 8002f6e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	2164      	movs	r1, #100	; 0x64
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f000 f949 	bl	800320c <SPI_EndRxTxTransaction>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002fc0:	6978      	ldr	r0, [r7, #20]
 8002fc2:	f7ff ffa9 	bl	8002f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fc6:	e002      	b.n	8002fce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f7fe f865 	bl	8001098 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff ff8e 	bl	8002f04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0203 	bic.w	r2, r2, #3
 800300c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff ff78 	bl	8002f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003040:	f7fe fb4c 	bl	80016dc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003050:	f7fe fb44 	bl	80016dc <HAL_GetTick>
 8003054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003066:	e054      	b.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d050      	beq.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003070:	f7fe fb34 	bl	80016dc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d902      	bls.n	8003086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d13d      	bne.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d111      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d004      	beq.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d107      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d10f      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e017      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3b01      	subs	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	429a      	cmp	r2, r3
 800312e:	d19b      	bne.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000000 	.word	0x20000000

08003140 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003154:	d111      	bne.n	800317a <SPI_EndRxTransaction+0x3a>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d004      	beq.n	800316a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d107      	bne.n	800317a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003182:	d12a      	bne.n	80031da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318c:	d012      	beq.n	80031b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff49 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02d      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e026      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2101      	movs	r1, #1
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff ff36 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e013      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2101      	movs	r1, #1
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff23 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e000      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <SPI_EndRxTxTransaction+0x7c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <SPI_EndRxTxTransaction+0x80>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0d5b      	lsrs	r3, r3, #21
 8003224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003236:	d112      	bne.n	800325e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fef4 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3b01      	subs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d0f2      	beq.n	800325e <SPI_EndRxTxTransaction+0x52>
 8003278:	e000      	b.n	800327c <SPI_EndRxTxTransaction+0x70>
        break;
 800327a:	bf00      	nop
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	165e9f81 	.word	0x165e9f81

08003290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e041      	b.n	8003326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f839 	bl	800332e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f000 f9d8 	bl	8003684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d001      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04e      	b.n	80033fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_TIM_Base_Start_IT+0xc4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d01d      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_TIM_Base_Start_IT+0xc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <HAL_TIM_Base_Start_IT+0xcc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_TIM_Base_Start_IT+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_TIM_Base_Start_IT+0xd4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_TIM_Base_Start_IT+0xd8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_TIM_Base_Start_IT+0xdc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d010      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e6:	e007      	b.n	80033f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40010400 	.word	0x40010400
 800341c:	40014000 	.word	0x40014000
 8003420:	40001800 	.word	0x40001800

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0202 	mvn.w	r2, #2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8ee 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8e0 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8f1 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8c4 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8b6 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8c7 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0208 	mvn.w	r2, #8
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f89a 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f88c 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f89d 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b10      	cmp	r3, #16
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f870 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f862 	bl	8003634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f873 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fe0a 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f902 	bl	80037d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f838 	bl	8003670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0220 	mvn.w	r2, #32
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8cc 	bl	80037c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a40      	ldr	r2, [pc, #256]	; (8003798 <TIM_Base_SetConfig+0x114>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d00f      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3d      	ldr	r2, [pc, #244]	; (800379c <TIM_Base_SetConfig+0x118>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3c      	ldr	r2, [pc, #240]	; (80037a0 <TIM_Base_SetConfig+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3b      	ldr	r2, [pc, #236]	; (80037a4 <TIM_Base_SetConfig+0x120>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <TIM_Base_SetConfig+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2f      	ldr	r2, [pc, #188]	; (8003798 <TIM_Base_SetConfig+0x114>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d027      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2c      	ldr	r2, [pc, #176]	; (800379c <TIM_Base_SetConfig+0x118>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d023      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2b      	ldr	r2, [pc, #172]	; (80037a0 <TIM_Base_SetConfig+0x11c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <TIM_Base_SetConfig+0x120>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <TIM_Base_SetConfig+0x124>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d017      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a28      	ldr	r2, [pc, #160]	; (80037ac <TIM_Base_SetConfig+0x128>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <TIM_Base_SetConfig+0x12c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00f      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a26      	ldr	r2, [pc, #152]	; (80037b4 <TIM_Base_SetConfig+0x130>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <TIM_Base_SetConfig+0x134>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a24      	ldr	r2, [pc, #144]	; (80037bc <TIM_Base_SetConfig+0x138>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <TIM_Base_SetConfig+0x13c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <TIM_Base_SetConfig+0x114>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0xf8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <TIM_Base_SetConfig+0x124>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40010400 	.word	0x40010400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	40001800 	.word	0x40001800
 80037bc:	40001c00 	.word	0x40001c00
 80037c0:	40002000 	.word	0x40002000

080037c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_EXTI_EnableIT_0_31>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <LL_EXTI_EnableIT_0_31+0x20>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <LL_EXTI_EnableIT_0_31+0x20>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40013c00 	.word	0x40013c00

08003810 <LL_EXTI_DisableIT_0_31>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <LL_EXTI_DisableIT_0_31+0x24>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	43db      	mvns	r3, r3
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <LL_EXTI_DisableIT_0_31+0x24>)
 8003822:	4013      	ands	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40013c00 	.word	0x40013c00

08003838 <LL_EXTI_EnableEvent_0_31>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4904      	ldr	r1, [pc, #16]	; (8003858 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40013c00 	.word	0x40013c00

0800385c <LL_EXTI_DisableEvent_0_31>:
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	43db      	mvns	r3, r3
 800386c:	4904      	ldr	r1, [pc, #16]	; (8003880 <LL_EXTI_DisableEvent_0_31+0x24>)
 800386e:	4013      	ands	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40013c00 	.word	0x40013c00

08003884 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40013c00 	.word	0x40013c00

080038a8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	4904      	ldr	r1, [pc, #16]	; (80038cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40013c00 	.word	0x40013c00

080038d0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	4904      	ldr	r1, [pc, #16]	; (80038f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60cb      	str	r3, [r1, #12]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	43db      	mvns	r3, r3
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003906:	4013      	ands	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40013c00 	.word	0x40013c00

0800391c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d065      	beq.n	80039fc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d06c      	beq.n	8003a12 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d01c      	beq.n	800397a <LL_EXTI_Init+0x5e>
 8003940:	2b02      	cmp	r3, #2
 8003942:	dc25      	bgt.n	8003990 <LL_EXTI_Init+0x74>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <LL_EXTI_Init+0x32>
 8003948:	2b01      	cmp	r3, #1
 800394a:	d00b      	beq.n	8003964 <LL_EXTI_Init+0x48>
 800394c:	e020      	b.n	8003990 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff82 	bl	800385c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff45 	bl	80037ec <LL_EXTI_EnableIT_0_31>
          break;
 8003962:	e018      	b.n	8003996 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff51 	bl	8003810 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff60 	bl	8003838 <LL_EXTI_EnableEvent_0_31>
          break;
 8003978:	e00d      	b.n	8003996 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff34 	bl	80037ec <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff55 	bl	8003838 <LL_EXTI_EnableEvent_0_31>
          break;
 800398e:	e002      	b.n	8003996 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
          break;
 8003994:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	799b      	ldrb	r3, [r3, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d039      	beq.n	8003a12 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	799b      	ldrb	r3, [r3, #6]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d01c      	beq.n	80039e0 <LL_EXTI_Init+0xc4>
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	dc25      	bgt.n	80039f6 <LL_EXTI_Init+0xda>
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d002      	beq.n	80039b4 <LL_EXTI_Init+0x98>
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d00b      	beq.n	80039ca <LL_EXTI_Init+0xae>
 80039b2:	e020      	b.n	80039f6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff9b 	bl	80038f4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff5e 	bl	8003884 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80039c8:	e024      	b.n	8003a14 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff6a 	bl	80038a8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff79 	bl	80038d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039de:	e019      	b.n	8003a14 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff4d 	bl	8003884 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff6e 	bl	80038d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039f4:	e00e      	b.n	8003a14 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
            break;
 80039fa:	e00b      	b.n	8003a14 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff05 	bl	8003810 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff26 	bl	800385c <LL_EXTI_DisableEvent_0_31>
 8003a10:	e000      	b.n	8003a14 <LL_EXTI_Init+0xf8>
      }
 8003a12:	bf00      	nop
  }
  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <LL_GPIO_SetPinMode>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b089      	sub	sp, #36	; 0x24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	613b      	str	r3, [r7, #16]
  return result;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2103      	movs	r1, #3
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	61bb      	str	r3, [r7, #24]
  return result;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3724      	adds	r7, #36	; 0x24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_GPIO_SetPinOutputType>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	401a      	ands	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_GPIO_SetPinSpeed>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	613b      	str	r3, [r7, #16]
  return result;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	bf00      	nop
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_GPIO_SetPinPull>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b089      	sub	sp, #36	; 0x24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	613b      	str	r3, [r7, #16]
  return result;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2103      	movs	r1, #3
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	61bb      	str	r3, [r7, #24]
  return result;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	60da      	str	r2, [r3, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3724      	adds	r7, #36	; 0x24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_GPIO_SetAFPin_0_7>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b089      	sub	sp, #36	; 0x24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	613b      	str	r3, [r7, #16]
  return result;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	210f      	movs	r1, #15
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	401a      	ands	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	61bb      	str	r3, [r7, #24]
  return result;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_GPIO_SetAFPin_8_15>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b089      	sub	sp, #36	; 0x24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	613b      	str	r3, [r7, #16]
  return result;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	210f      	movs	r1, #15
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	61bb      	str	r3, [r7, #24]
  return result;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c1c:	bf00      	nop
 8003c1e:	3724      	adds	r7, #36	; 0x24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	613b      	str	r3, [r7, #16]
  return result;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c52:	e050      	b.n	8003cf6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d042      	beq.n	8003cf0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d003      	beq.n	8003c7a <LL_GPIO_Init+0x52>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d10d      	bne.n	8003c96 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff12 	bl	8003aac <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fef3 	bl	8003a7c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ff33 	bl	8003b0a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d11a      	bne.n	8003ce2 <LL_GPIO_Init+0xba>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	60bb      	str	r3, [r7, #8]
  return result;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b07      	cmp	r3, #7
 8003cc2:	d807      	bhi.n	8003cd4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff4b 	bl	8003b68 <LL_GPIO_SetAFPin_0_7>
 8003cd2:	e006      	b.n	8003ce2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff72 	bl	8003bc6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fe97 	bl	8003a1e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1a7      	bne.n	8003c54 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <LL_RCC_GetSysClkSource>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <LL_RCC_GetSysClkSource+0x18>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800

08003d2c <LL_RCC_GetAHBPrescaler>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <LL_RCC_GetAPB1Prescaler>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <LL_RCC_GetAPB2Prescaler>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800

08003d80 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <LL_RCC_PLL_GetMainSource+0x18>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <LL_RCC_PLL_GetN+0x18>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40023800 	.word	0x40023800

08003db8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <LL_RCC_PLL_GetP+0x18>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <LL_RCC_PLL_GetDivider+0x18>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003df8:	f000 f820 	bl	8003e3c <RCC_GetSystemClockFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f840 	bl	8003e8c <RCC_GetHCLKClockFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f84e 	bl	8003eb8 <RCC_GetPCLK1ClockFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f85a 	bl	8003ee0 <RCC_GetPCLK2ClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60da      	str	r2, [r3, #12]
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e46:	f7ff ff63 	bl	8003d10 <LL_RCC_GetSysClkSource>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d00c      	beq.n	8003e6a <RCC_GetSystemClockFreq+0x2e>
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d80f      	bhi.n	8003e74 <RCC_GetSystemClockFreq+0x38>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <RCC_GetSystemClockFreq+0x22>
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d003      	beq.n	8003e64 <RCC_GetSystemClockFreq+0x28>
 8003e5c:	e00a      	b.n	8003e74 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <RCC_GetSystemClockFreq+0x48>)
 8003e60:	607b      	str	r3, [r7, #4]
      break;
 8003e62:	e00a      	b.n	8003e7a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <RCC_GetSystemClockFreq+0x4c>)
 8003e66:	607b      	str	r3, [r7, #4]
      break;
 8003e68:	e007      	b.n	8003e7a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e6a:	2008      	movs	r0, #8
 8003e6c:	f000 f84c 	bl	8003f08 <RCC_PLL_GetFreqDomain_SYS>
 8003e70:	6078      	str	r0, [r7, #4]
      break;
 8003e72:	e002      	b.n	8003e7a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <RCC_GetSystemClockFreq+0x48>)
 8003e76:	607b      	str	r3, [r7, #4]
      break;
 8003e78:	bf00      	nop
  }

  return frequency;
 8003e7a:	687b      	ldr	r3, [r7, #4]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e94:	f7ff ff4a 	bl	8003d2c <LL_RCC_GetAHBPrescaler>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <RCC_GetHCLKClockFreq+0x28>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	40d3      	lsrs	r3, r2
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0800aae0 	.word	0x0800aae0

08003eb8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ec0:	f7ff ff42 	bl	8003d48 <LL_RCC_GetAPB1Prescaler>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0a9b      	lsrs	r3, r3, #10
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <RCC_GetPCLK1ClockFreq+0x24>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	40d3      	lsrs	r3, r2
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	0800aaf0 	.word	0x0800aaf0

08003ee0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ee8:	f7ff ff3c 	bl	8003d64 <LL_RCC_GetAPB2Prescaler>
 8003eec:	4603      	mov	r3, r0
 8003eee:	0b5b      	lsrs	r3, r3, #13
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <RCC_GetPCLK2ClockFreq+0x24>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	40d3      	lsrs	r3, r2
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	0800aaf0 	.word	0x0800aaf0

08003f08 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f1c:	f7ff ff30 	bl	8003d80 <LL_RCC_PLL_GetMainSource>
 8003f20:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d003      	beq.n	8003f38 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f30:	e005      	b.n	8003f3e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f34:	617b      	str	r3, [r7, #20]
      break;
 8003f36:	e005      	b.n	8003f44 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f3a:	617b      	str	r3, [r7, #20]
      break;
 8003f3c:	e002      	b.n	8003f44 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f40:	617b      	str	r3, [r7, #20]
      break;
 8003f42:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d113      	bne.n	8003f72 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f4a:	f7ff ff43 	bl	8003dd4 <LL_RCC_PLL_GetDivider>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f56:	f7ff ff21 	bl	8003d9c <LL_RCC_PLL_GetN>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	fb03 f404 	mul.w	r4, r3, r4
 8003f60:	f7ff ff2a 	bl	8003db8 <LL_RCC_PLL_GetP>
 8003f64:	4603      	mov	r3, r0
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	3301      	adds	r3, #1
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f70:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f72:	693b      	ldr	r3, [r7, #16]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	007a1200 	.word	0x007a1200

08003f84 <LL_TIM_SetPrescaler>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_TIM_SetAutoReload>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_TIM_SetRepetitionCounter>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	615a      	str	r2, [r3, #20]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3d      	ldr	r2, [pc, #244]	; (8004100 <LL_TIM_Init+0x108>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <LL_TIM_Init+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d00f      	beq.n	8004038 <LL_TIM_Init+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3a      	ldr	r2, [pc, #232]	; (8004104 <LL_TIM_Init+0x10c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <LL_TIM_Init+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a39      	ldr	r2, [pc, #228]	; (8004108 <LL_TIM_Init+0x110>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <LL_TIM_Init+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a38      	ldr	r2, [pc, #224]	; (800410c <LL_TIM_Init+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <LL_TIM_Init+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a37      	ldr	r2, [pc, #220]	; (8004110 <LL_TIM_Init+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d106      	bne.n	8004046 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <LL_TIM_Init+0x108>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d027      	beq.n	80040a6 <LL_TIM_Init+0xae>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <LL_TIM_Init+0x10c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d023      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <LL_TIM_Init+0x110>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <LL_TIM_Init+0xae>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a28      	ldr	r2, [pc, #160]	; (800410c <LL_TIM_Init+0x114>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <LL_TIM_Init+0x118>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d017      	beq.n	80040a6 <LL_TIM_Init+0xae>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <LL_TIM_Init+0x11c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a25      	ldr	r2, [pc, #148]	; (8004118 <LL_TIM_Init+0x120>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <LL_TIM_Init+0xae>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <LL_TIM_Init+0x124>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <LL_TIM_Init+0x128>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <LL_TIM_Init+0xae>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <LL_TIM_Init+0x12c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <LL_TIM_Init+0xae>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a21      	ldr	r2, [pc, #132]	; (8004128 <LL_TIM_Init+0x130>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d106      	bne.n	80040b4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff6d 	bl	8003fa0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff59 	bl	8003f84 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <LL_TIM_Init+0x108>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <LL_TIM_Init+0xea>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <LL_TIM_Init+0x118>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d105      	bne.n	80040ee <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff67 	bl	8003fbc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff72 	bl	8003fd8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40010400 	.word	0x40010400
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800
 8004120:	40001800 	.word	0x40001800
 8004124:	40001c00 	.word	0x40001c00
 8004128:	40002000 	.word	0x40002000

0800412c <LL_USART_IsEnabled>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_USART_SetStopBitsLength>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_USART_SetHWFlowCtrl>:
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	615a      	str	r2, [r3, #20]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_USART_SetBaudRate>:
{
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	b09f      	sub	sp, #124	; 0x7c
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6778      	str	r0, [r7, #116]	; 0x74
 80041aa:	6739      	str	r1, [r7, #112]	; 0x70
 80041ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	f040 80bc 	bne.w	8004332 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80041ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041bc:	461c      	mov	r4, r3
 80041be:	f04f 0500 	mov.w	r5, #0
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	eb12 0a02 	adds.w	sl, r2, r2
 80041ca:	eb43 0b03 	adc.w	fp, r3, r3
 80041ce:	4652      	mov	r2, sl
 80041d0:	465b      	mov	r3, fp
 80041d2:	1912      	adds	r2, r2, r4
 80041d4:	eb45 0303 	adc.w	r3, r5, r3
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	00d9      	lsls	r1, r3, #3
 80041e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041e6:	00d0      	lsls	r0, r2, #3
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	1911      	adds	r1, r2, r4
 80041ee:	6639      	str	r1, [r7, #96]	; 0x60
 80041f0:	416b      	adcs	r3, r5
 80041f2:	667b      	str	r3, [r7, #100]	; 0x64
 80041f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f6:	461a      	mov	r2, r3
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	6339      	str	r1, [r7, #48]	; 0x30
 8004200:	415b      	adcs	r3, r3
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004208:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800420c:	f7fc f838 	bl	8000280 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4ba9      	ldr	r3, [pc, #676]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b29b      	uxth	r3, r3
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	b29e      	uxth	r6, r3
 8004222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004224:	461c      	mov	r4, r3
 8004226:	f04f 0500 	mov.w	r5, #0
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	1891      	adds	r1, r2, r2
 8004230:	62b9      	str	r1, [r7, #40]	; 0x28
 8004232:	415b      	adcs	r3, r3
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800423a:	1912      	adds	r2, r2, r4
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	f04f 0000 	mov.w	r0, #0
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	00d9      	lsls	r1, r3, #3
 800424a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800424e:	00d0      	lsls	r0, r2, #3
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	1911      	adds	r1, r2, r4
 8004256:	65b9      	str	r1, [r7, #88]	; 0x58
 8004258:	416b      	adcs	r3, r5
 800425a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800425c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425e:	461a      	mov	r2, r3
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	1891      	adds	r1, r2, r2
 8004266:	6239      	str	r1, [r7, #32]
 8004268:	415b      	adcs	r3, r3
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004270:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004274:	f7fc f804 	bl	8000280 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 800427e:	fba3 1302 	umull	r1, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2164      	movs	r1, #100	; 0x64
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a8a      	ldr	r2, [pc, #552]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	b29b      	uxth	r3, r3
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4433      	add	r3, r6
 80042a6:	b29e      	uxth	r6, r3
 80042a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042aa:	4618      	mov	r0, r3
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	1894      	adds	r4, r2, r2
 80042b6:	61bc      	str	r4, [r7, #24]
 80042b8:	415b      	adcs	r3, r3
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c0:	1812      	adds	r2, r2, r0
 80042c2:	eb41 0303 	adc.w	r3, r1, r3
 80042c6:	f04f 0400 	mov.w	r4, #0
 80042ca:	f04f 0500 	mov.w	r5, #0
 80042ce:	00dd      	lsls	r5, r3, #3
 80042d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042d4:	00d4      	lsls	r4, r2, #3
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	1814      	adds	r4, r2, r0
 80042dc:	653c      	str	r4, [r7, #80]	; 0x50
 80042de:	414b      	adcs	r3, r1
 80042e0:	657b      	str	r3, [r7, #84]	; 0x54
 80042e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e4:	461a      	mov	r2, r3
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	1891      	adds	r1, r2, r2
 80042ec:	6139      	str	r1, [r7, #16]
 80042ee:	415b      	adcs	r3, r3
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042fa:	f7fb ffc1 	bl	8000280 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b6e      	ldr	r3, [pc, #440]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b29b      	uxth	r3, r3
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	b29b      	uxth	r3, r3
 8004326:	4433      	add	r3, r6
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	e0be      	b.n	80044b0 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004334:	461c      	mov	r4, r3
 8004336:	f04f 0500 	mov.w	r5, #0
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	eb12 0802 	adds.w	r8, r2, r2
 8004342:	eb43 0903 	adc.w	r9, r3, r3
 8004346:	4642      	mov	r2, r8
 8004348:	464b      	mov	r3, r9
 800434a:	1912      	adds	r2, r2, r4
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	00d9      	lsls	r1, r3, #3
 800435a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800435e:	00d0      	lsls	r0, r2, #3
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	1911      	adds	r1, r2, r4
 8004366:	64b9      	str	r1, [r7, #72]	; 0x48
 8004368:	416b      	adcs	r3, r5
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436e:	4618      	mov	r0, r3
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004382:	0082      	lsls	r2, r0, #2
 8004384:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004388:	f7fb ff7a 	bl	8000280 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004392:	fba3 2302 	umull	r2, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	b29b      	uxth	r3, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	b29e      	uxth	r6, r3
 800439e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a0:	4618      	mov	r0, r3
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	1894      	adds	r4, r2, r2
 80043ac:	60bc      	str	r4, [r7, #8]
 80043ae:	415b      	adcs	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b6:	1812      	adds	r2, r2, r0
 80043b8:	eb41 0303 	adc.w	r3, r1, r3
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	f04f 0500 	mov.w	r5, #0
 80043c4:	00dd      	lsls	r5, r3, #3
 80043c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ca:	00d4      	lsls	r4, r2, #3
 80043cc:	4622      	mov	r2, r4
 80043ce:	462b      	mov	r3, r5
 80043d0:	1814      	adds	r4, r2, r0
 80043d2:	643c      	str	r4, [r7, #64]	; 0x40
 80043d4:	414b      	adcs	r3, r1
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043da:	4618      	mov	r0, r3
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	008b      	lsls	r3, r1, #2
 80043ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ee:	0082      	lsls	r2, r0, #2
 80043f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80043f4:	f7fb ff44 	bl	8000280 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 80043fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2164      	movs	r1, #100	; 0x64
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	b29b      	uxth	r3, r3
 800441a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441e:	b29b      	uxth	r3, r3
 8004420:	4433      	add	r3, r6
 8004422:	b29e      	uxth	r6, r3
 8004424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004426:	4618      	mov	r0, r3
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	1894      	adds	r4, r2, r2
 8004432:	603c      	str	r4, [r7, #0]
 8004434:	415b      	adcs	r3, r3
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	1812      	adds	r2, r2, r0
 800443e:	eb41 0303 	adc.w	r3, r1, r3
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	f04f 0500 	mov.w	r5, #0
 800444a:	00dd      	lsls	r5, r3, #3
 800444c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004450:	00d4      	lsls	r4, r2, #3
 8004452:	4622      	mov	r2, r4
 8004454:	462b      	mov	r3, r5
 8004456:	1814      	adds	r4, r2, r0
 8004458:	63bc      	str	r4, [r7, #56]	; 0x38
 800445a:	414b      	adcs	r3, r1
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004460:	4618      	mov	r0, r3
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	008b      	lsls	r3, r1, #2
 8004470:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004474:	0082      	lsls	r2, r0, #2
 8004476:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800447a:	f7fb ff01 	bl	8000280 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004484:	fba3 1302 	umull	r1, r3, r3, r2
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	2164      	movs	r1, #100	; 0x64
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	3332      	adds	r3, #50	; 0x32
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <LL_USART_SetBaudRate+0x31c>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4433      	add	r3, r6
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	bf00      	nop
 80044b2:	377c      	adds	r7, #124	; 0x7c
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	51eb851f 	.word	0x51eb851f

080044c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fe2a 	bl	800412c <LL_USART_IsEnabled>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d15e      	bne.n	800459c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044e6:	f023 030c 	bic.w	r3, r3, #12
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	6851      	ldr	r1, [r2, #4]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	68d2      	ldr	r2, [r2, #12]
 80044f2:	4311      	orrs	r1, r2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	6912      	ldr	r2, [r2, #16]
 80044f8:	4311      	orrs	r1, r2
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	6992      	ldr	r2, [r2, #24]
 80044fe:	430a      	orrs	r2, r1
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe21 	bl	8004154 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fe2e 	bl	800417a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fc64 	bl	8003df0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <LL_USART_Init+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d102      	bne.n	8004536 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e021      	b.n	800457a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <LL_USART_Init+0xec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d102      	bne.n	8004544 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e01a      	b.n	800457a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <LL_USART_Init+0xf0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d102      	bne.n	8004552 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e013      	b.n	800457a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <LL_USART_Init+0xf4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d102      	bne.n	8004560 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e00c      	b.n	800457a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <LL_USART_Init+0xf8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d102      	bne.n	800456e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e005      	b.n	800457a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a12      	ldr	r2, [pc, #72]	; (80045bc <LL_USART_Init+0xfc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004588:	2300      	movs	r3, #0
 800458a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fe02 	bl	80041a0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800459c:	7ffb      	ldrb	r3, [r7, #31]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40011000 	.word	0x40011000
 80045ac:	40004400 	.word	0x40004400
 80045b0:	40004800 	.word	0x40004800
 80045b4:	40011400 	.word	0x40011400
 80045b8:	40004c00 	.word	0x40004c00
 80045bc:	40005000 	.word	0x40005000

080045c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <LL_SetSystemCoreClock+0x1c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000

080045e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f2:	2b84      	cmp	r3, #132	; 0x84
 80045f4:	d005      	beq.n	8004602 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	3303      	adds	r3, #3
 8004600:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	607b      	str	r3, [r7, #4]
  return(result);
 800461c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004638:	f001 fc02 	bl	8005e40 <vTaskStartScheduler>
  
  return osOK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	bd80      	pop	{r7, pc}

08004642 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004644:	b089      	sub	sp, #36	; 0x24
 8004646:	af04      	add	r7, sp, #16
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <osThreadCreate+0x54>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01c      	beq.n	8004696 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685c      	ldr	r4, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681d      	ldr	r5, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691e      	ldr	r6, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ffb6 	bl	80045e0 <makeFreeRtosPriority>
 8004674:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	9202      	str	r2, [sp, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	9100      	str	r1, [sp, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4632      	mov	r2, r6
 8004688:	4629      	mov	r1, r5
 800468a:	4620      	mov	r0, r4
 800468c:	f001 f980 	bl	8005990 <xTaskCreateStatic>
 8004690:	4603      	mov	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e01c      	b.n	80046d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685c      	ldr	r4, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046a2:	b29e      	uxth	r6, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff ff98 	bl	80045e0 <makeFreeRtosPriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f107 030c 	add.w	r3, r7, #12
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	9200      	str	r2, [sp, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4632      	mov	r2, r6
 80046be:	4629      	mov	r1, r5
 80046c0:	4620      	mov	r0, r4
 80046c2:	f001 f9c2 	bl	8005a4a <xTaskCreate>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046da <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fae8 	bl	8005cb8 <vTaskDelete>
  return osOK;
 80046e8:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <osDelay+0x16>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	e000      	b.n	800470a <osDelay+0x18>
 8004708:	2301      	movs	r3, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fb64 	bl	8005dd8 <vTaskDelay>
  
  return osOK;
 8004710:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800471a:	b580      	push	{r7, lr}
 800471c:	b086      	sub	sp, #24
 800471e:	af02      	add	r7, sp, #8
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00f      	beq.n	800474c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10a      	bne.n	8004748 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2203      	movs	r2, #3
 8004738:	9200      	str	r2, [sp, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	2001      	movs	r0, #1
 8004740:	f000 fa9a 	bl	8004c78 <xQueueGenericCreateStatic>
 8004744:	4603      	mov	r3, r0
 8004746:	e016      	b.n	8004776 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	e014      	b.n	8004776 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d110      	bne.n	8004774 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004752:	2203      	movs	r2, #3
 8004754:	2100      	movs	r1, #0
 8004756:	2001      	movs	r0, #1
 8004758:	f000 fb06 	bl	8004d68 <xQueueGenericCreate>
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <osSemaphoreCreate+0x56>
 8004764:	2300      	movs	r3, #0
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fb56 	bl	8004e1c <xQueueGenericSend>
      return sema;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	e000      	b.n	8004776 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004774:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	e03a      	b.n	800480e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d103      	bne.n	80047ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e009      	b.n	80047c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80047bc:	2301      	movs	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047c0:	f7ff ff26 	bl	8004610 <inHandlerMode>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d017      	beq.n	80047fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	461a      	mov	r2, r3
 80047d0:	2100      	movs	r1, #0
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 ff34 	bl	8005640 <xQueueReceiveFromISR>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80047de:	23ff      	movs	r3, #255	; 0xff
 80047e0:	e015      	b.n	800480e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <osSemaphoreWait+0x8c>
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <osSemaphoreWait+0x98>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	e008      	b.n	800480c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fe13 	bl	8005428 <xQueueSemaphoreTake>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004808:	23ff      	movs	r3, #255	; 0xff
 800480a:	e000      	b.n	800480e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800482c:	f7ff fef0 	bl	8004610 <inHandlerMode>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fc86 	bl	800514e <xQueueGiveFromISR>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d001      	beq.n	800484c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	e017      	b.n	800487c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <osSemaphoreRelease+0x5e>
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <osSemaphoreRelease+0x68>)
 8004854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	e00a      	b.n	800487a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004864:	2300      	movs	r3, #0
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fad6 	bl	8004e1c <xQueueGenericSend>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004876:	23ff      	movs	r3, #255	; 0xff
 8004878:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b085      	sub	sp, #20
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <osMessageCreate+0x36>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2400      	movs	r4, #0
 80048b4:	9400      	str	r4, [sp, #0]
 80048b6:	f000 f9df 	bl	8004c78 <xQueueGenericCreateStatic>
 80048ba:	4603      	mov	r3, r0
 80048bc:	e008      	b.n	80048d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	4619      	mov	r1, r3
 80048ca:	f000 fa4d 	bl	8004d68 <xQueueGenericCreate>
 80048ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}

080048d8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <osMessagePut+0x1e>
    ticks = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048f6:	f7ff fe8b 	bl	8004610 <inHandlerMode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d018      	beq.n	8004932 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004900:	f107 0210 	add.w	r2, r7, #16
 8004904:	f107 0108 	add.w	r1, r7, #8
 8004908:	2300      	movs	r3, #0
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fb84 	bl	8005018 <xQueueGenericSendFromISR>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <osMessagePut+0x42>
      return osErrorOS;
 8004916:	23ff      	movs	r3, #255	; 0xff
 8004918:	e018      	b.n	800494c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d014      	beq.n	800494a <osMessagePut+0x72>
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <osMessagePut+0x7c>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	e00b      	b.n	800494a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004932:	f107 0108 	add.w	r1, r7, #8
 8004936:	2300      	movs	r3, #0
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fa6e 	bl	8004e1c <xQueueGenericSend>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d001      	beq.n	800494a <osMessagePut+0x72>
      return osErrorOS;
 8004946:	23ff      	movs	r3, #255	; 0xff
 8004948:	e000      	b.n	800494c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b08b      	sub	sp, #44	; 0x2c
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	617b      	str	r3, [r7, #20]
    return event;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	461c      	mov	r4, r3
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004986:	e054      	b.n	8004a32 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d103      	bne.n	80049a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004998:	f04f 33ff 	mov.w	r3, #4294967295
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e009      	b.n	80049b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <osMessageGet+0x5c>
      ticks = 1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80049b4:	f7ff fe2c 	bl	8004610 <inHandlerMode>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01c      	beq.n	80049f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80049be:	f107 0220 	add.w	r2, r7, #32
 80049c2:	f107 0314 	add.w	r3, r7, #20
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f000 fe38 	bl	8005640 <xQueueReceiveFromISR>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049d6:	2310      	movs	r3, #16
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e001      	b.n	80049e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01d      	beq.n	8004a22 <osMessageGet+0xca>
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <osMessageGet+0xe4>)
 80049e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	e014      	b.n	8004a22 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	3304      	adds	r3, #4
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	4619      	mov	r1, r3
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f000 fc30 	bl	8005268 <xQueueReceive>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d102      	bne.n	8004a14 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004a0e:	2310      	movs	r3, #16
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e006      	b.n	8004a22 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <osMessageGet+0xc6>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <osMessageGet+0xc8>
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	461c      	mov	r4, r3
 8004a26:	f107 0314 	add.w	r3, r7, #20
 8004a2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	372c      	adds	r7, #44	; 0x2c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd90      	pop	{r4, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f103 0208 	add.w	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f103 0208 	add.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e00c      	b.n	8004b1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3308      	adds	r3, #8
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e002      	b.n	8004b10 <vListInsert+0x2e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d2f6      	bcs.n	8004b0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6852      	ldr	r2, [r2, #4]
 8004b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d103      	bne.n	8004b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bd2:	f002 f87f 	bl	8006cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	441a      	add	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	3b01      	subs	r3, #1
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	441a      	add	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d114      	bne.n	8004c52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01a      	beq.n	8004c66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3310      	adds	r3, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 fb45 	bl	80062c4 <xTaskRemoveFromEventList>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <xQueueGenericReset+0xcc>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	e009      	b.n	8004c66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3310      	adds	r3, #16
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fef2 	bl	8004a40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff feed 	bl	8004a40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c66:	f002 f865 	bl	8006d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c6a:	2301      	movs	r3, #1
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08e      	sub	sp, #56	; 0x38
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <xQueueGenericCreateStatic+0x52>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <xQueueGenericCreateStatic+0x56>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueGenericCreateStatic+0x58>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	623b      	str	r3, [r7, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <xQueueGenericCreateStatic+0x7e>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <xQueueGenericCreateStatic+0x82>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericCreateStatic+0x84>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61fb      	str	r3, [r7, #28]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d16:	2348      	movs	r3, #72	; 0x48
 8004d18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b48      	cmp	r3, #72	; 0x48
 8004d1e:	d00a      	beq.n	8004d36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	61bb      	str	r3, [r7, #24]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f83f 	bl	8004ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3730      	adds	r7, #48	; 0x30
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	613b      	str	r3, [r7, #16]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3348      	adds	r3, #72	; 0x48
 8004da0:	4618      	mov	r0, r3
 8004da2:	f002 f8b9 	bl	8006f18 <pvPortMalloc>
 8004da6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d011      	beq.n	8004dd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3348      	adds	r3, #72	; 0x48
 8004db6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dc0:	79fa      	ldrb	r2, [r7, #7]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f805 	bl	8004ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e002      	b.n	8004dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	69b8      	ldr	r0, [r7, #24]
 8004e0e:	f7ff fecb 	bl	8004ba8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08e      	sub	sp, #56	; 0x38
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xQueueGenericSend+0x32>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <xQueueGenericSend+0x40>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <xQueueGenericSend+0x44>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <xQueueGenericSend+0x46>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xQueueGenericSend+0x60>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d103      	bne.n	8004e8a <xQueueGenericSend+0x6e>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <xQueueGenericSend+0x72>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <xQueueGenericSend+0x74>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <xQueueGenericSend+0x8e>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	623b      	str	r3, [r7, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eaa:	f001 fbc7 	bl	800663c <xTaskGetSchedulerState>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <xQueueGenericSend+0x9e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <xQueueGenericSend+0xa2>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <xQueueGenericSend+0xa4>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xQueueGenericSend+0xbe>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61fb      	str	r3, [r7, #28]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eda:	f001 fefb 	bl	8006cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <xQueueGenericSend+0xd4>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d129      	bne.n	8004f44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef6:	f000 fc3b 	bl	8005770 <prvCopyDataToQueue>
 8004efa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	3324      	adds	r3, #36	; 0x24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 f9db 	bl	80062c4 <xTaskRemoveFromEventList>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f14:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <xQueueGenericSend+0x1f8>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	e00a      	b.n	8004f3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f2c:	4b39      	ldr	r3, [pc, #228]	; (8005014 <xQueueGenericSend+0x1f8>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f3c:	f001 fefa 	bl	8006d34 <vPortExitCritical>
				return pdPASS;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e063      	b.n	800500c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f4a:	f001 fef3 	bl	8006d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e05c      	b.n	800500c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f58:	f107 0314 	add.w	r3, r7, #20
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fa13 	bl	8006388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f66:	f001 fee5 	bl	8006d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f6a:	f000 ffc9 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f6e:	f001 feb1 	bl	8006cd4 <vPortEnterCritical>
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d103      	bne.n	8004f88 <xQueueGenericSend+0x16c>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f8e:	b25b      	sxtb	r3, r3
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x182>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f9e:	f001 fec9 	bl	8006d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fa2:	1d3a      	adds	r2, r7, #4
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 fa02 	bl	80063b4 <xTaskCheckForTimeOut>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d124      	bne.n	8005000 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb8:	f000 fcd2 	bl	8005960 <prvIsQueueFull>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 f956 	bl	800627c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd2:	f000 fc5d 	bl	8005890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fd6:	f000 ffa1 	bl	8005f1c <xTaskResumeAll>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f af7c 	bne.w	8004eda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <xQueueGenericSend+0x1f8>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	e772      	b.n	8004eda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff6:	f000 fc4b 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ffa:	f000 ff8f 	bl	8005f1c <xTaskResumeAll>
 8004ffe:	e76c      	b.n	8004eda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005002:	f000 fc45 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005006:	f000 ff89 	bl	8005f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800500a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800500c:	4618      	mov	r0, r3
 800500e:	3738      	adds	r7, #56	; 0x38
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b090      	sub	sp, #64	; 0x40
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <xQueueGenericSendFromISR+0x3c>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <xQueueGenericSendFromISR+0x40>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <xQueueGenericSendFromISR+0x42>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <xQueueGenericSendFromISR+0x6a>
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <xQueueGenericSendFromISR+0x6e>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSendFromISR+0x70>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a2:	f001 fef9 	bl	8006e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050a6:	f3ef 8211 	mrs	r2, BASEPRI
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	61fa      	str	r2, [r7, #28]
 80050bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <xQueueGenericSendFromISR+0xbc>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d12f      	bne.n	8005134 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ea:	f000 fb41 	bl	8005770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d112      	bne.n	800511e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d016      	beq.n	800512e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	4618      	mov	r0, r3
 8005106:	f001 f8dd 	bl	80062c4 <xTaskRemoveFromEventList>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e007      	b.n	800512e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800511e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005122:	3301      	adds	r3, #1
 8005124:	b2db      	uxtb	r3, r3
 8005126:	b25a      	sxtb	r2, r3
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800512e:	2301      	movs	r3, #1
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005132:	e001      	b.n	8005138 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005134:	2300      	movs	r3, #0
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005142:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005146:	4618      	mov	r0, r3
 8005148:	3740      	adds	r7, #64	; 0x40
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b08e      	sub	sp, #56	; 0x38
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	623b      	str	r3, [r7, #32]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	61fb      	str	r3, [r7, #28]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <xQueueGiveFromISR+0x58>
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueGiveFromISR+0x5c>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGiveFromISR+0x5e>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61bb      	str	r3, [r7, #24]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c6:	f001 fe67 	bl	8006e98 <vPortValidateInterruptPriority>
	__asm volatile
 80051ca:	f3ef 8211 	mrs	r2, BASEPRI
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	617a      	str	r2, [r7, #20]
 80051e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80051e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d22b      	bcs.n	800524e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d112      	bne.n	8005238 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f001 f850 	bl	80062c4 <xTaskRemoveFromEventList>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e007      	b.n	8005248 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800523c:	3301      	adds	r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	b25a      	sxtb	r2, r3
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005248:	2301      	movs	r3, #1
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	e001      	b.n	8005252 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800524e:	2300      	movs	r3, #0
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f383 8811 	msr	BASEPRI, r3
}
 800525c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005260:	4618      	mov	r0, r3
 8005262:	3738      	adds	r7, #56	; 0x38
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005274:	2300      	movs	r3, #0
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <xQueueReceive+0x30>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	623b      	str	r3, [r7, #32]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <xQueueReceive+0x3e>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <xQueueReceive+0x42>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <xQueueReceive+0x44>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueReceive+0x5e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61fb      	str	r3, [r7, #28]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c6:	f001 f9b9 	bl	800663c <xTaskGetSchedulerState>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d102      	bne.n	80052d6 <xQueueReceive+0x6e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <xQueueReceive+0x72>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <xQueueReceive+0x74>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueReceive+0x8e>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61bb      	str	r3, [r7, #24]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f6:	f001 fced 	bl	8006cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01f      	beq.n	8005346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530a:	f000 fa9b 	bl	8005844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00f      	beq.n	800533e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	3310      	adds	r3, #16
 8005322:	4618      	mov	r0, r3
 8005324:	f000 ffce 	bl	80062c4 <xTaskRemoveFromEventList>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800532e:	4b3d      	ldr	r3, [pc, #244]	; (8005424 <xQueueReceive+0x1bc>)
 8005330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800533e:	f001 fcf9 	bl	8006d34 <vPortExitCritical>
				return pdPASS;
 8005342:	2301      	movs	r3, #1
 8005344:	e069      	b.n	800541a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800534c:	f001 fcf2 	bl	8006d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005350:	2300      	movs	r3, #0
 8005352:	e062      	b.n	800541a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f812 	bl	8006388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005368:	f001 fce4 	bl	8006d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800536c:	f000 fdc8 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005370:	f001 fcb0 	bl	8006cd4 <vPortEnterCritical>
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537a:	b25b      	sxtb	r3, r3
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d103      	bne.n	800538a <xQueueReceive+0x122>
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005390:	b25b      	sxtb	r3, r3
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d103      	bne.n	80053a0 <xQueueReceive+0x138>
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a0:	f001 fcc8 	bl	8006d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053a4:	1d3a      	adds	r2, r7, #4
 80053a6:	f107 0310 	add.w	r3, r7, #16
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 f801 	bl	80063b4 <xTaskCheckForTimeOut>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d123      	bne.n	8005400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ba:	f000 fabb 	bl	8005934 <prvIsQueueEmpty>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d017      	beq.n	80053f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 ff55 	bl	800627c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d4:	f000 fa5c 	bl	8005890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053d8:	f000 fda0 	bl	8005f1c <xTaskResumeAll>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d189      	bne.n	80052f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <xQueueReceive+0x1bc>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	e780      	b.n	80052f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f6:	f000 fa4b 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053fa:	f000 fd8f 	bl	8005f1c <xTaskResumeAll>
 80053fe:	e77a      	b.n	80052f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 fa45 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005406:	f000 fd89 	bl	8005f1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800540a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540c:	f000 fa92 	bl	8005934 <prvIsQueueEmpty>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	f43f af6f 	beq.w	80052f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800541a:	4618      	mov	r0, r3
 800541c:	3730      	adds	r7, #48	; 0x30
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	623b      	str	r3, [r7, #32]
}
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	61fb      	str	r3, [r7, #28]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005478:	f001 f8e0 	bl	800663c <xTaskGetSchedulerState>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <xQueueSemaphoreTake+0x60>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <xQueueSemaphoreTake+0x64>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <xQueueSemaphoreTake+0x66>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054a8:	f001 fc14 	bl	8006cd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d024      	beq.n	8005502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80054c8:	f001 fa60 	bl	800698c <pvTaskIncrementMutexHeldCount>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00f      	beq.n	80054fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	3310      	adds	r3, #16
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fef0 	bl	80062c4 <xTaskRemoveFromEventList>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054ea:	4b54      	ldr	r3, [pc, #336]	; (800563c <xQueueSemaphoreTake+0x214>)
 80054ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054fa:	f001 fc1b 	bl	8006d34 <vPortExitCritical>
				return pdPASS;
 80054fe:	2301      	movs	r3, #1
 8005500:	e097      	b.n	8005632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d111      	bne.n	800552c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	617b      	str	r3, [r7, #20]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005524:	f001 fc06 	bl	8006d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005528:	2300      	movs	r3, #0
 800552a:	e082      	b.n	8005632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005532:	f107 030c 	add.w	r3, r7, #12
 8005536:	4618      	mov	r0, r3
 8005538:	f000 ff26 	bl	8006388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800553c:	2301      	movs	r3, #1
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005540:	f001 fbf8 	bl	8006d34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005544:	f000 fcdc 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005548:	f001 fbc4 	bl	8006cd4 <vPortEnterCritical>
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005552:	b25b      	sxtb	r3, r3
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d103      	bne.n	8005562 <xQueueSemaphoreTake+0x13a>
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	b25b      	sxtb	r3, r3
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d103      	bne.n	8005578 <xQueueSemaphoreTake+0x150>
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005578:	f001 fbdc 	bl	8006d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557c:	463a      	mov	r2, r7
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 ff15 	bl	80063b4 <xTaskCheckForTimeOut>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d132      	bne.n	80055f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005592:	f000 f9cf 	bl	8005934 <prvIsQueueEmpty>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d026      	beq.n	80055ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80055a4:	f001 fb96 	bl	8006cd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f863 	bl	8006678 <xTaskPriorityInherit>
 80055b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80055b4:	f001 fbbe 	bl	8006d34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fe5b 	bl	800627c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055c8:	f000 f962 	bl	8005890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055cc:	f000 fca6 	bl	8005f1c <xTaskResumeAll>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f47f af68 	bne.w	80054a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80055d8:	4b18      	ldr	r3, [pc, #96]	; (800563c <xQueueSemaphoreTake+0x214>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	e75e      	b.n	80054a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055ec:	f000 f950 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055f0:	f000 fc94 	bl	8005f1c <xTaskResumeAll>
 80055f4:	e758      	b.n	80054a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055f8:	f000 f94a 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055fc:	f000 fc8e 	bl	8005f1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005602:	f000 f997 	bl	8005934 <prvIsQueueEmpty>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f43f af4d 	beq.w	80054a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005614:	f001 fb5e 	bl	8006cd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800561a:	f000 f891 	bl	8005740 <prvGetDisinheritPriorityAfterTimeout>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f922 	bl	8006870 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800562c:	f001 fb82 	bl	8006d34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3738      	adds	r7, #56	; 0x38
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	623b      	str	r3, [r7, #32]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <xQueueReceiveFromISR+0x3a>
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueReceiveFromISR+0x3e>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueReceiveFromISR+0x40>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800569a:	f001 fbfd 	bl	8006e98 <vPortValidateInterruptPriority>
	__asm volatile
 800569e:	f3ef 8211 	mrs	r2, BASEPRI
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61ba      	str	r2, [r7, #24]
 80056b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80056b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02f      	beq.n	8005726 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d4:	f000 f8b6 	bl	8005844 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80056e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d112      	bne.n	8005710 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d016      	beq.n	8005720 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	3310      	adds	r3, #16
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fde4 	bl	80062c4 <xTaskRemoveFromEventList>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	e007      	b.n	8005720 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005714:	3301      	adds	r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	b25a      	sxtb	r2, r3
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005720:	2301      	movs	r3, #1
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	e001      	b.n	800572a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005738:	4618      	mov	r0, r3
 800573a:	3738      	adds	r7, #56	; 0x38
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1c3 0307 	rsb	r3, r3, #7
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e001      	b.n	8005762 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005762:	68fb      	ldr	r3, [r7, #12]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d14d      	bne.n	8005832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 ffe2 	bl	8006764 <xTaskPriorityDisinherit>
 80057a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	e043      	b.n	8005832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d119      	bne.n	80057e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6858      	ldr	r0, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	461a      	mov	r2, r3
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	f003 fdee 	bl	800939c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	441a      	add	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d32b      	bcc.n	8005832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e026      	b.n	8005832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68d8      	ldr	r0, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	461a      	mov	r2, r3
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	f003 fdd4 	bl	800939c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	425b      	negs	r3, r3
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d207      	bcs.n	8005820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	425b      	negs	r3, r3
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d105      	bne.n	8005832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3b01      	subs	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800583a:	697b      	ldr	r3, [r7, #20]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d303      	bcc.n	8005878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68d9      	ldr	r1, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	461a      	mov	r2, r3
 8005882:	6838      	ldr	r0, [r7, #0]
 8005884:	f003 fd8a 	bl	800939c <memcpy>
	}
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005898:	f001 fa1c 	bl	8006cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a4:	e011      	b.n	80058ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3324      	adds	r3, #36	; 0x24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fd06 	bl	80062c4 <xTaskRemoveFromEventList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058be:	f000 fddb 	bl	8006478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dce9      	bgt.n	80058a6 <prvUnlockQueue+0x16>
 80058d2:	e000      	b.n	80058d6 <prvUnlockQueue+0x46>
					break;
 80058d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	22ff      	movs	r2, #255	; 0xff
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058de:	f001 fa29 	bl	8006d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058e2:	f001 f9f7 	bl	8006cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ee:	e011      	b.n	8005914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3310      	adds	r3, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fce1 	bl	80062c4 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005908:	f000 fdb6 	bl	8006478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	3b01      	subs	r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dce9      	bgt.n	80058f0 <prvUnlockQueue+0x60>
 800591c:	e000      	b.n	8005920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800591e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fa04 	bl	8006d34 <vPortExitCritical>
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800593c:	f001 f9ca 	bl	8006cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e001      	b.n	8005952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f001 f9ef 	bl	8006d34 <vPortExitCritical>

	return xReturn;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005968:	f001 f9b4 	bl	8006cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	429a      	cmp	r2, r3
 8005976:	d102      	bne.n	800597e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e001      	b.n	8005982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005982:	f001 f9d7 	bl	8006d34 <vPortExitCritical>

	return xReturn;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08e      	sub	sp, #56	; 0x38
 8005994:	af04      	add	r7, sp, #16
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	623b      	str	r3, [r7, #32]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61fb      	str	r3, [r7, #28]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d6:	2354      	movs	r3, #84	; 0x54
 80059d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b54      	cmp	r3, #84	; 0x54
 80059de:	d00a      	beq.n	80059f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	61bb      	str	r3, [r7, #24]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01e      	beq.n	8005a3c <xTaskCreateStatic+0xac>
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a16:	2300      	movs	r3, #0
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f850 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a36:	f000 f8d5 	bl	8005be4 <prvAddNewTaskToReadyList>
 8005a3a:	e001      	b.n	8005a40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a40:	697b      	ldr	r3, [r7, #20]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08c      	sub	sp, #48	; 0x30
 8005a4e:	af04      	add	r7, sp, #16
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 fa5a 	bl	8006f18 <pvPortMalloc>
 8005a64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a6c:	2054      	movs	r0, #84	; 0x54
 8005a6e:	f001 fa53 	bl	8006f18 <pvPortMalloc>
 8005a72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a80:	e005      	b.n	8005a8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a82:	6978      	ldr	r0, [r7, #20]
 8005a84:	f001 fb14 	bl	80070b0 <vPortFree>
 8005a88:	e001      	b.n	8005a8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d017      	beq.n	8005ac4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a9c:	88fa      	ldrh	r2, [r7, #6]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f80e 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab8:	69f8      	ldr	r0, [r7, #28]
 8005aba:	f000 f893 	bl	8005be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e002      	b.n	8005aca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aca:	69bb      	ldr	r3, [r7, #24]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005aec:	3b01      	subs	r3, #1
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	617b      	str	r3, [r7, #20]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01f      	beq.n	8005b62 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e012      	b.n	8005b4e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	7819      	ldrb	r1, [r3, #0]
 8005b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	3334      	adds	r3, #52	; 0x34
 8005b38:	460a      	mov	r2, r1
 8005b3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	2b0f      	cmp	r3, #15
 8005b52:	d9e9      	bls.n	8005b28 <prvInitialiseNewTask+0x54>
 8005b54:	e000      	b.n	8005b58 <prvInitialiseNewTask+0x84>
			{
				break;
 8005b56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b60:	e003      	b.n	8005b6a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	2b06      	cmp	r3, #6
 8005b6e:	d901      	bls.n	8005b74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b70:	2306      	movs	r3, #6
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	2200      	movs	r2, #0
 8005b84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe ff78 	bl	8004a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3318      	adds	r3, #24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe ff73 	bl	8004a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	f1c3 0207 	rsb	r2, r3, #7
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	69b8      	ldr	r0, [r7, #24]
 8005bc4:	f000 ff5c 	bl	8006a80 <pxPortInitialiseStack>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bda:	bf00      	nop
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bec:	f001 f872 	bl	8006cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <prvAddNewTaskToReadyList+0xb8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	4a29      	ldr	r2, [pc, #164]	; (8005c9c <prvAddNewTaskToReadyList+0xb8>)
 8005bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bfa:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <prvAddNewTaskToReadyList+0xbc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c02:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <prvAddNewTaskToReadyList+0xbc>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <prvAddNewTaskToReadyList+0xb8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d110      	bne.n	8005c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c10:	f000 fc56 	bl	80064c0 <prvInitialiseTaskLists>
 8005c14:	e00d      	b.n	8005c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <prvAddNewTaskToReadyList+0xc0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <prvAddNewTaskToReadyList+0xbc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d802      	bhi.n	8005c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <prvAddNewTaskToReadyList+0xbc>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c32:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <prvAddNewTaskToReadyList+0xc4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3301      	adds	r3, #1
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <prvAddNewTaskToReadyList+0xc4>)
 8005c3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	2201      	movs	r2, #1
 8005c42:	409a      	lsls	r2, r3
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <prvAddNewTaskToReadyList+0xc8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <prvAddNewTaskToReadyList+0xc8>)
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <prvAddNewTaskToReadyList+0xcc>)
 8005c5c:	441a      	add	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f7fe ff18 	bl	8004a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c6a:	f001 f863 	bl	8006d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <prvAddNewTaskToReadyList+0xc0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00e      	beq.n	8005c94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <prvAddNewTaskToReadyList+0xbc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d207      	bcs.n	8005c94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <prvAddNewTaskToReadyList+0xd0>)
 8005c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	2000046c 	.word	0x2000046c
 8005ca0:	2000036c 	.word	0x2000036c
 8005ca4:	20000478 	.word	0x20000478
 8005ca8:	20000488 	.word	0x20000488
 8005cac:	20000474 	.word	0x20000474
 8005cb0:	20000370 	.word	0x20000370
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005cc0:	f001 f808 	bl	8006cd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <vTaskDelete+0x18>
 8005cca:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <vTaskDelete+0xf8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	e000      	b.n	8005cd2 <vTaskDelete+0x1a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe ff3b 	bl	8004b54 <uxListRemove>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d115      	bne.n	8005d10 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4932      	ldr	r1, [pc, #200]	; (8005db4 <vTaskDelete+0xfc>)
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <vTaskDelete+0x58>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	2201      	movs	r2, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43da      	mvns	r2, r3
 8005d06:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <vTaskDelete+0x100>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <vTaskDelete+0x100>)
 8005d0e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe ff19 	bl	8004b54 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005d22:	4b26      	ldr	r3, [pc, #152]	; (8005dbc <vTaskDelete+0x104>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <vTaskDelete+0x104>)
 8005d2a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <vTaskDelete+0xf8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d10b      	bne.n	8005d4e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4820      	ldr	r0, [pc, #128]	; (8005dc0 <vTaskDelete+0x108>)
 8005d3e:	f7fe feac 	bl	8004a9a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <vTaskDelete+0x10c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <vTaskDelete+0x10c>)
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e009      	b.n	8005d62 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <vTaskDelete+0x110>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	4a1c      	ldr	r2, [pc, #112]	; (8005dc8 <vTaskDelete+0x110>)
 8005d56:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fc1f 	bl	800659c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005d5e:	f000 fc4d 	bl	80065fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005d62:	f000 ffe7 	bl	8006d34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <vTaskDelete+0x114>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01b      	beq.n	8005da6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <vTaskDelete+0xf8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d116      	bne.n	8005da6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005d78:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <vTaskDelete+0x118>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <vTaskDelete+0xde>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60bb      	str	r3, [r7, #8]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8005d96:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <vTaskDelete+0x11c>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2000036c 	.word	0x2000036c
 8005db4:	20000370 	.word	0x20000370
 8005db8:	20000474 	.word	0x20000474
 8005dbc:	20000488 	.word	0x20000488
 8005dc0:	20000440 	.word	0x20000440
 8005dc4:	20000454 	.word	0x20000454
 8005dc8:	2000046c 	.word	0x2000046c
 8005dcc:	20000478 	.word	0x20000478
 8005dd0:	20000494 	.word	0x20000494
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d017      	beq.n	8005e1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <vTaskDelay+0x60>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <vTaskDelay+0x30>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e08:	f000 f87a 	bl	8005f00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fdd0 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e14:	f000 f882 	bl	8005f1c <xTaskResumeAll>
 8005e18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <vTaskDelay+0x64>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000494 	.word	0x20000494
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e4e:	463a      	mov	r2, r7
 8005e50:	1d39      	adds	r1, r7, #4
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fb8e 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	460a      	mov	r2, r1
 8005e6e:	491e      	ldr	r1, [pc, #120]	; (8005ee8 <vTaskStartScheduler+0xa8>)
 8005e70:	481e      	ldr	r0, [pc, #120]	; (8005eec <vTaskStartScheduler+0xac>)
 8005e72:	f7ff fd8d 	bl	8005990 <xTaskCreateStatic>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <vTaskStartScheduler+0xb0>)
 8005e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <vTaskStartScheduler+0xb0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e001      	b.n	8005e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d116      	bne.n	8005ec2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	613b      	str	r3, [r7, #16]
}
 8005ea6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <vTaskStartScheduler+0xb4>)
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <vTaskStartScheduler+0xb8>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <vTaskStartScheduler+0xbc>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ebc:	f000 fe68 	bl	8006b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ec0:	e00e      	b.n	8005ee0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d10a      	bne.n	8005ee0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	60fb      	str	r3, [r7, #12]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vTaskStartScheduler+0x9e>
}
 8005ee0:	bf00      	nop
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	0800a8a4 	.word	0x0800a8a4
 8005eec:	08006491 	.word	0x08006491
 8005ef0:	20000490 	.word	0x20000490
 8005ef4:	2000048c 	.word	0x2000048c
 8005ef8:	20000478 	.word	0x20000478
 8005efc:	20000470 	.word	0x20000470

08005f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f04:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <vTaskSuspendAll+0x18>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a03      	ldr	r2, [pc, #12]	; (8005f18 <vTaskSuspendAll+0x18>)
 8005f0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000494 	.word	0x20000494

08005f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2a:	4b41      	ldr	r3, [pc, #260]	; (8006030 <xTaskResumeAll+0x114>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	603b      	str	r3, [r7, #0]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f48:	f000 fec4 	bl	8006cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f4c:	4b38      	ldr	r3, [pc, #224]	; (8006030 <xTaskResumeAll+0x114>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	4a37      	ldr	r2, [pc, #220]	; (8006030 <xTaskResumeAll+0x114>)
 8005f54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <xTaskResumeAll+0x114>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d161      	bne.n	8006022 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f5e:	4b35      	ldr	r3, [pc, #212]	; (8006034 <xTaskResumeAll+0x118>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d05d      	beq.n	8006022 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f66:	e02e      	b.n	8005fc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b33      	ldr	r3, [pc, #204]	; (8006038 <xTaskResumeAll+0x11c>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3318      	adds	r3, #24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fded 	bl	8004b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fde8 	bl	8004b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	; (800603c <xTaskResumeAll+0x120>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	4a2a      	ldr	r2, [pc, #168]	; (800603c <xTaskResumeAll+0x120>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <xTaskResumeAll+0x124>)
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fe fd74 	bl	8004a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <xTaskResumeAll+0x128>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <xTaskResumeAll+0x12c>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc6:	4b1c      	ldr	r3, [pc, #112]	; (8006038 <xTaskResumeAll+0x11c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1cc      	bne.n	8005f68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fd4:	f000 fb12 	bl	80065fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <xTaskResumeAll+0x130>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fe4:	f000 f836 	bl	8006054 <xTaskIncrementTick>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005fee:	4b16      	ldr	r3, [pc, #88]	; (8006048 <xTaskResumeAll+0x12c>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f1      	bne.n	8005fe4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <xTaskResumeAll+0x130>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <xTaskResumeAll+0x12c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <xTaskResumeAll+0x134>)
 8006014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f000 fe87 	bl	8006d34 <vPortExitCritical>

	return xAlreadyYielded;
 8006026:	68bb      	ldr	r3, [r7, #8]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20000494 	.word	0x20000494
 8006034:	2000046c 	.word	0x2000046c
 8006038:	2000042c 	.word	0x2000042c
 800603c:	20000474 	.word	0x20000474
 8006040:	20000370 	.word	0x20000370
 8006044:	2000036c 	.word	0x2000036c
 8006048:	20000480 	.word	0x20000480
 800604c:	2000047c 	.word	0x2000047c
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605e:	4b4e      	ldr	r3, [pc, #312]	; (8006198 <xTaskIncrementTick+0x144>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 808e 	bne.w	8006184 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006068:	4b4c      	ldr	r3, [pc, #304]	; (800619c <xTaskIncrementTick+0x148>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3301      	adds	r3, #1
 800606e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006070:	4a4a      	ldr	r2, [pc, #296]	; (800619c <xTaskIncrementTick+0x148>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d120      	bne.n	80060be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800607c:	4b48      	ldr	r3, [pc, #288]	; (80061a0 <xTaskIncrementTick+0x14c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <xTaskIncrementTick+0x48>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	603b      	str	r3, [r7, #0]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xTaskIncrementTick+0x46>
 800609c:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <xTaskIncrementTick+0x14c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <xTaskIncrementTick+0x150>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <xTaskIncrementTick+0x14c>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4a3e      	ldr	r2, [pc, #248]	; (80061a4 <xTaskIncrementTick+0x150>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <xTaskIncrementTick+0x154>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <xTaskIncrementTick+0x154>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	f000 fa9f 	bl	80065fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <xTaskIncrementTick+0x158>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d348      	bcc.n	800615a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <xTaskIncrementTick+0x14c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <xTaskIncrementTick+0x158>)
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	601a      	str	r2, [r3, #0]
					break;
 80060da:	e03e      	b.n	800615a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060dc:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <xTaskIncrementTick+0x14c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d203      	bcs.n	80060fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060f4:	4a2d      	ldr	r2, [pc, #180]	; (80061ac <xTaskIncrementTick+0x158>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060fa:	e02e      	b.n	800615a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	3304      	adds	r3, #4
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fd27 	bl	8004b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3318      	adds	r3, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fd1e 	bl	8004b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <xTaskIncrementTick+0x15c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <xTaskIncrementTick+0x15c>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <xTaskIncrementTick+0x160>)
 8006138:	441a      	add	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fe fcaa 	bl	8004a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <xTaskIncrementTick+0x164>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d3b9      	bcc.n	80060c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006158:	e7b6      	b.n	80060c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <xTaskIncrementTick+0x164>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4914      	ldr	r1, [pc, #80]	; (80061b4 <xTaskIncrementTick+0x160>)
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d901      	bls.n	8006176 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006172:	2301      	movs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <xTaskIncrementTick+0x168>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800617e:	2301      	movs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e004      	b.n	800618e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <xTaskIncrementTick+0x16c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a0d      	ldr	r2, [pc, #52]	; (80061c0 <xTaskIncrementTick+0x16c>)
 800618c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800618e:	697b      	ldr	r3, [r7, #20]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000494 	.word	0x20000494
 800619c:	20000470 	.word	0x20000470
 80061a0:	20000424 	.word	0x20000424
 80061a4:	20000428 	.word	0x20000428
 80061a8:	20000484 	.word	0x20000484
 80061ac:	2000048c 	.word	0x2000048c
 80061b0:	20000474 	.word	0x20000474
 80061b4:	20000370 	.word	0x20000370
 80061b8:	2000036c 	.word	0x2000036c
 80061bc:	20000480 	.word	0x20000480
 80061c0:	2000047c 	.word	0x2000047c

080061c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <vTaskSwitchContext+0xa4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <vTaskSwitchContext+0xa8>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061d8:	e03f      	b.n	800625a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80061da:	4b24      	ldr	r3, [pc, #144]	; (800626c <vTaskSwitchContext+0xa8>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e0:	4b23      	ldr	r3, [pc, #140]	; (8006270 <vTaskSwitchContext+0xac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	fab3 f383 	clz	r3, r3
 80061ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	f1c3 031f 	rsb	r3, r3, #31
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	491f      	ldr	r1, [pc, #124]	; (8006274 <vTaskSwitchContext+0xb0>)
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <vTaskSwitchContext+0x5c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vTaskSwitchContext+0x5a>
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a12      	ldr	r2, [pc, #72]	; (8006274 <vTaskSwitchContext+0xb0>)
 800622c:	4413      	add	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3308      	adds	r3, #8
 8006242:	429a      	cmp	r2, r3
 8006244:	d104      	bne.n	8006250 <vTaskSwitchContext+0x8c>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <vTaskSwitchContext+0xb4>)
 8006258:	6013      	str	r3, [r2, #0]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000494 	.word	0x20000494
 800626c:	20000480 	.word	0x20000480
 8006270:	20000474 	.word	0x20000474
 8006274:	20000370 	.word	0x20000370
 8006278:	2000036c 	.word	0x2000036c

0800627c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60fb      	str	r3, [r7, #12]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <vTaskPlaceOnEventList+0x44>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3318      	adds	r3, #24
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fe fc19 	bl	8004ae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062b0:	2101      	movs	r1, #1
 80062b2:	6838      	ldr	r0, [r7, #0]
 80062b4:	f000 fb7e 	bl	80069b4 <prvAddCurrentTaskToDelayedList>
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	2000036c 	.word	0x2000036c

080062c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60fb      	str	r3, [r7, #12]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	3318      	adds	r3, #24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fc2d 	bl	8004b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <xTaskRemoveFromEventList+0xac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11c      	bne.n	800633c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	3304      	adds	r3, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fc24 	bl	8004b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b17      	ldr	r3, [pc, #92]	; (8006374 <xTaskRemoveFromEventList+0xb0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <xTaskRemoveFromEventList+0xb0>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <xTaskRemoveFromEventList+0xb4>)
 800632c:	441a      	add	r2, r3
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe fbb0 	bl	8004a9a <vListInsertEnd>
 800633a:	e005      	b.n	8006348 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3318      	adds	r3, #24
 8006340:	4619      	mov	r1, r3
 8006342:	480e      	ldr	r0, [pc, #56]	; (800637c <xTaskRemoveFromEventList+0xb8>)
 8006344:	f7fe fba9 	bl	8004a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <xTaskRemoveFromEventList+0xbc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	429a      	cmp	r2, r3
 8006354:	d905      	bls.n	8006362 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <xTaskRemoveFromEventList+0xc0>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e001      	b.n	8006366 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000494 	.word	0x20000494
 8006374:	20000474 	.word	0x20000474
 8006378:	20000370 	.word	0x20000370
 800637c:	2000042c 	.word	0x2000042c
 8006380:	2000036c 	.word	0x2000036c
 8006384:	20000480 	.word	0x20000480

08006388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <vTaskInternalSetTimeOutState+0x24>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <vTaskInternalSetTimeOutState+0x28>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	605a      	str	r2, [r3, #4]
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000484 	.word	0x20000484
 80063b0:	20000470 	.word	0x20000470

080063b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	613b      	str	r3, [r7, #16]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80063f6:	f000 fc6d 	bl	8006cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <xTaskCheckForTimeOut+0xbc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d102      	bne.n	800641a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e023      	b.n	8006462 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <xTaskCheckForTimeOut+0xc0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d007      	beq.n	8006436 <xTaskCheckForTimeOut+0x82>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	429a      	cmp	r2, r3
 800642e:	d302      	bcc.n	8006436 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e015      	b.n	8006462 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	429a      	cmp	r2, r3
 800643e:	d20b      	bcs.n	8006458 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff9b 	bl	8006388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e004      	b.n	8006462 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f000 fc67 	bl	8006d34 <vPortExitCritical>

	return xReturn;
 8006466:	69fb      	ldr	r3, [r7, #28]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000470 	.word	0x20000470
 8006474:	20000484 	.word	0x20000484

08006478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800647c:	4b03      	ldr	r3, [pc, #12]	; (800648c <vTaskMissedYield+0x14>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000480 	.word	0x20000480

08006490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006498:	f000 f852 	bl	8006540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <prvIdleTask+0x28>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d9f9      	bls.n	8006498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <prvIdleTask+0x2c>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064b4:	e7f0      	b.n	8006498 <prvIdleTask+0x8>
 80064b6:	bf00      	nop
 80064b8:	20000370 	.word	0x20000370
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	e00c      	b.n	80064e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a12      	ldr	r2, [pc, #72]	; (8006520 <prvInitialiseTaskLists+0x60>)
 80064d8:	4413      	add	r3, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fab0 	bl	8004a40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3301      	adds	r3, #1
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	d9ef      	bls.n	80064cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064ec:	480d      	ldr	r0, [pc, #52]	; (8006524 <prvInitialiseTaskLists+0x64>)
 80064ee:	f7fe faa7 	bl	8004a40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064f2:	480d      	ldr	r0, [pc, #52]	; (8006528 <prvInitialiseTaskLists+0x68>)
 80064f4:	f7fe faa4 	bl	8004a40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064f8:	480c      	ldr	r0, [pc, #48]	; (800652c <prvInitialiseTaskLists+0x6c>)
 80064fa:	f7fe faa1 	bl	8004a40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064fe:	480c      	ldr	r0, [pc, #48]	; (8006530 <prvInitialiseTaskLists+0x70>)
 8006500:	f7fe fa9e 	bl	8004a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006504:	480b      	ldr	r0, [pc, #44]	; (8006534 <prvInitialiseTaskLists+0x74>)
 8006506:	f7fe fa9b 	bl	8004a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <prvInitialiseTaskLists+0x78>)
 800650c:	4a05      	ldr	r2, [pc, #20]	; (8006524 <prvInitialiseTaskLists+0x64>)
 800650e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <prvInitialiseTaskLists+0x7c>)
 8006512:	4a05      	ldr	r2, [pc, #20]	; (8006528 <prvInitialiseTaskLists+0x68>)
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000370 	.word	0x20000370
 8006524:	200003fc 	.word	0x200003fc
 8006528:	20000410 	.word	0x20000410
 800652c:	2000042c 	.word	0x2000042c
 8006530:	20000440 	.word	0x20000440
 8006534:	20000458 	.word	0x20000458
 8006538:	20000424 	.word	0x20000424
 800653c:	20000428 	.word	0x20000428

08006540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006546:	e019      	b.n	800657c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006548:	f000 fbc4 	bl	8006cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654c:	4b10      	ldr	r3, [pc, #64]	; (8006590 <prvCheckTasksWaitingTermination+0x50>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fafb 	bl	8004b54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <prvCheckTasksWaitingTermination+0x54>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <prvCheckTasksWaitingTermination+0x54>)
 8006566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <prvCheckTasksWaitingTermination+0x58>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <prvCheckTasksWaitingTermination+0x58>)
 8006570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006572:	f000 fbdf 	bl	8006d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f810 	bl	800659c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <prvCheckTasksWaitingTermination+0x58>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e1      	bne.n	8006548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000440 	.word	0x20000440
 8006594:	2000046c 	.word	0x2000046c
 8006598:	20000454 	.word	0x20000454

0800659c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d108      	bne.n	80065c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd7c 	bl	80070b0 <vPortFree>
				vPortFree( pxTCB );
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fd79 	bl	80070b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065be:	e018      	b.n	80065f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d103      	bne.n	80065d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fd70 	bl	80070b0 <vPortFree>
	}
 80065d0:	e00f      	b.n	80065f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d00a      	beq.n	80065f2 <prvDeleteTCB+0x56>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <prvDeleteTCB+0x54>
	}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006614:	e008      	b.n	8006628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000424 	.word	0x20000424
 8006638:	2000048c 	.word	0x2000048c

0800663c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <xTaskGetSchedulerState+0x34>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800664a:	2301      	movs	r3, #1
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	e008      	b.n	8006662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <xTaskGetSchedulerState+0x38>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006658:	2302      	movs	r3, #2
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e001      	b.n	8006662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006662:	687b      	ldr	r3, [r7, #4]
	}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000478 	.word	0x20000478
 8006674:	20000494 	.word	0x20000494

08006678 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d05e      	beq.n	800674c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <xTaskPriorityInherit+0xe0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d24e      	bcs.n	800673a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db06      	blt.n	80066b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a4:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <xTaskPriorityInherit+0xe0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	f1c3 0207 	rsb	r2, r3, #7
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a26      	ldr	r2, [pc, #152]	; (800675c <xTaskPriorityInherit+0xe4>)
 80066c4:	4413      	add	r3, r2
 80066c6:	4299      	cmp	r1, r3
 80066c8:	d12f      	bne.n	800672a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fa40 	bl	8004b54 <uxListRemove>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	2201      	movs	r2, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43da      	mvns	r2, r3
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <xTaskPriorityInherit+0xe8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4013      	ands	r3, r2
 80066ec:	4a1c      	ldr	r2, [pc, #112]	; (8006760 <xTaskPriorityInherit+0xe8>)
 80066ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066f0:	4b19      	ldr	r3, [pc, #100]	; (8006758 <xTaskPriorityInherit+0xe0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	2201      	movs	r2, #1
 8006700:	409a      	lsls	r2, r3
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <xTaskPriorityInherit+0xe8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <xTaskPriorityInherit+0xe8>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a10      	ldr	r2, [pc, #64]	; (800675c <xTaskPriorityInherit+0xe4>)
 800671a:	441a      	add	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe f9b9 	bl	8004a9a <vListInsertEnd>
 8006728:	e004      	b.n	8006734 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <xTaskPriorityInherit+0xe0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e008      	b.n	800674c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xTaskPriorityInherit+0xe0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d201      	bcs.n	800674c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800674c:	68fb      	ldr	r3, [r7, #12]
	}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000036c 	.word	0x2000036c
 800675c:	20000370 	.word	0x20000370
 8006760:	20000474 	.word	0x20000474

08006764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d06e      	beq.n	8006858 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800677a:	4b3a      	ldr	r3, [pc, #232]	; (8006864 <xTaskPriorityDisinherit+0x100>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	429a      	cmp	r2, r3
 8006782:	d00a      	beq.n	800679a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60bb      	str	r3, [r7, #8]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d044      	beq.n	8006858 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d140      	bne.n	8006858 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe f9ba 	bl	8004b54 <uxListRemove>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d115      	bne.n	8006812 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	491f      	ldr	r1, [pc, #124]	; (8006868 <xTaskPriorityDisinherit+0x104>)
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xTaskPriorityDisinherit+0xae>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43da      	mvns	r2, r3
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <xTaskPriorityDisinherit+0x108>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4013      	ands	r3, r2
 800680e:	4a17      	ldr	r2, [pc, #92]	; (800686c <xTaskPriorityDisinherit+0x108>)
 8006810:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	f1c3 0207 	rsb	r2, r3, #7
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	2201      	movs	r2, #1
 800682c:	409a      	lsls	r2, r3
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <xTaskPriorityDisinherit+0x108>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4313      	orrs	r3, r2
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <xTaskPriorityDisinherit+0x108>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <xTaskPriorityDisinherit+0x104>)
 8006846:	441a      	add	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe f923 	bl	8004a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006858:	697b      	ldr	r3, [r7, #20]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	2000036c 	.word	0x2000036c
 8006868:	20000370 	.word	0x20000370
 800686c:	20000474 	.word	0x20000474

08006870 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d077      	beq.n	8006978 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d902      	bls.n	80068b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e002      	b.n	80068bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d058      	beq.n	8006978 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d153      	bne.n	8006978 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80068d0:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10a      	bne.n	80068f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60bb      	str	r3, [r7, #8]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	db04      	blt.n	800690e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f1c3 0207 	rsb	r2, r3, #7
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	6959      	ldr	r1, [r3, #20]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800691e:	4413      	add	r3, r2
 8006920:	4299      	cmp	r1, r3
 8006922:	d129      	bne.n	8006978 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	3304      	adds	r3, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe f913 	bl	8004b54 <uxListRemove>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	2201      	movs	r2, #1
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43da      	mvns	r2, r3
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4013      	ands	r3, r2
 8006946:	4a10      	ldr	r2, [pc, #64]	; (8006988 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006948:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	2201      	movs	r2, #1
 8006950:	409a      	lsls	r2, r3
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4a06      	ldr	r2, [pc, #24]	; (8006984 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800696a:	441a      	add	r2, r3
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	3304      	adds	r3, #4
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7fe f891 	bl	8004a9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006978:	bf00      	nop
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	2000036c 	.word	0x2000036c
 8006984:	20000370 	.word	0x20000370
 8006988:	20000474 	.word	0x20000474

0800698c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800699e:	3201      	adds	r2, #1
 80069a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80069a4:	681b      	ldr	r3, [r3, #0]
	}
 80069a6:	4618      	mov	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	2000036c 	.word	0x2000036c

080069b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <prvAddCurrentTaskToDelayedList+0xb0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c4:	4b28      	ldr	r3, [pc, #160]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe f8c2 	bl	8004b54 <uxListRemove>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	2201      	movs	r2, #1
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	43da      	mvns	r2, r3
 80069e4:	4b21      	ldr	r3, [pc, #132]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xb8>)
 80069ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d10a      	bne.n	8006a0c <prvAddCurrentTaskToDelayedList+0x58>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	481a      	ldr	r0, [pc, #104]	; (8006a70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a06:	f7fe f848 	bl	8004a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a0a:	e026      	b.n	8006a5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a14:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d209      	bcs.n	8006a38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a24:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe f856 	bl	8004ae2 <vListInsert>
}
 8006a36:	e010      	b.n	8006a5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a38:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4619      	mov	r1, r3
 8006a44:	4610      	mov	r0, r2
 8006a46:	f7fe f84c 	bl	8004ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d202      	bcs.n	8006a5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a54:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6013      	str	r3, [r2, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000470 	.word	0x20000470
 8006a68:	2000036c 	.word	0x2000036c
 8006a6c:	20000474 	.word	0x20000474
 8006a70:	20000458 	.word	0x20000458
 8006a74:	20000428 	.word	0x20000428
 8006a78:	20000424 	.word	0x20000424
 8006a7c:	2000048c 	.word	0x2000048c

08006a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3b04      	subs	r3, #4
 8006a90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3b04      	subs	r3, #4
 8006a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3b04      	subs	r3, #4
 8006aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <pxPortInitialiseStack+0x64>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3b14      	subs	r3, #20
 8006aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f06f 0202 	mvn.w	r2, #2
 8006ace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3b20      	subs	r3, #32
 8006ad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	08006ae9 	.word	0x08006ae9

08006ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006af2:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <prvTaskExitError+0x54>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d00a      	beq.n	8006b12 <prvTaskExitError+0x2a>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	60fb      	str	r3, [r7, #12]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <prvTaskExitError+0x28>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	60bb      	str	r3, [r7, #8]
}
 8006b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b26:	bf00      	nop
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0fc      	beq.n	8006b28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000008 	.word	0x20000008

08006b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <pxCurrentTCBConst2>)
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	6808      	ldr	r0, [r1, #0]
 8006b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	f380 8809 	msr	PSP, r0
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f04f 0000 	mov.w	r0, #0
 8006b56:	f380 8811 	msr	BASEPRI, r0
 8006b5a:	4770      	bx	lr
 8006b5c:	f3af 8000 	nop.w

08006b60 <pxCurrentTCBConst2>:
 8006b60:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b68:	4808      	ldr	r0, [pc, #32]	; (8006b8c <prvPortStartFirstTask+0x24>)
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	6800      	ldr	r0, [r0, #0]
 8006b6e:	f380 8808 	msr	MSP, r0
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8814 	msr	CONTROL, r0
 8006b7a:	b662      	cpsie	i
 8006b7c:	b661      	cpsie	f
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	df00      	svc	0
 8006b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b8a:	bf00      	nop
 8006b8c:	e000ed08 	.word	0xe000ed08

08006b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b96:	4b46      	ldr	r3, [pc, #280]	; (8006cb0 <xPortStartScheduler+0x120>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a46      	ldr	r2, [pc, #280]	; (8006cb4 <xPortStartScheduler+0x124>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10a      	bne.n	8006bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	613b      	str	r3, [r7, #16]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bb6:	4b3e      	ldr	r3, [pc, #248]	; (8006cb0 <xPortStartScheduler+0x120>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <xPortStartScheduler+0x128>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d10a      	bne.n	8006bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	60fb      	str	r3, [r7, #12]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bd6:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <xPortStartScheduler+0x12c>)
 8006bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <xPortStartScheduler+0x130>)
 8006bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bfe:	4b31      	ldr	r3, [pc, #196]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c04:	e009      	b.n	8006c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c06:	4b2f      	ldr	r3, [pc, #188]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4a2d      	ldr	r2, [pc, #180]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d0ef      	beq.n	8006c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1c3 0307 	rsb	r3, r3, #7
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d00a      	beq.n	8006c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	60bb      	str	r3, [r7, #8]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	4a1d      	ldr	r2, [pc, #116]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c5a:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <xPortStartScheduler+0x134>)
 8006c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <xPortStartScheduler+0x138>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <xPortStartScheduler+0x138>)
 8006c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c72:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <xPortStartScheduler+0x138>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <xPortStartScheduler+0x138>)
 8006c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c7e:	f000 f8dd 	bl	8006e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <xPortStartScheduler+0x13c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c88:	f000 f8fc 	bl	8006e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c8c:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <xPortStartScheduler+0x140>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0f      	ldr	r2, [pc, #60]	; (8006cd0 <xPortStartScheduler+0x140>)
 8006c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c98:	f7ff ff66 	bl	8006b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c9c:	f7ff fa92 	bl	80061c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006ca0:	f7ff ff22 	bl	8006ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	e000ed00 	.word	0xe000ed00
 8006cb4:	410fc271 	.word	0x410fc271
 8006cb8:	410fc270 	.word	0x410fc270
 8006cbc:	e000e400 	.word	0xe000e400
 8006cc0:	20000498 	.word	0x20000498
 8006cc4:	2000049c 	.word	0x2000049c
 8006cc8:	e000ed20 	.word	0xe000ed20
 8006ccc:	20000008 	.word	0x20000008
 8006cd0:	e000ef34 	.word	0xe000ef34

08006cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	607b      	str	r3, [r7, #4]
}
 8006cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <vPortEnterCritical+0x58>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <vPortEnterCritical+0x58>)
 8006cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <vPortEnterCritical+0x58>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10f      	bne.n	8006d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <vPortEnterCritical+0x5c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	603b      	str	r3, [r7, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <vPortEnterCritical+0x4a>
	}
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20000008 	.word	0x20000008
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <vPortExitCritical+0x50>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <vPortExitCritical+0x24>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	607b      	str	r3, [r7, #4]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <vPortExitCritical+0x50>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <vPortExitCritical+0x50>)
 8006d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d62:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <vPortExitCritical+0x50>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <vPortExitCritical+0x42>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f383 8811 	msr	BASEPRI, r3
}
 8006d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000008 	.word	0x20000008
	...

08006d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d90:	f3ef 8009 	mrs	r0, PSP
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <pxCurrentTCBConst>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f01e 0f10 	tst.w	lr, #16
 8006da0:	bf08      	it	eq
 8006da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	6010      	str	r0, [r2, #0]
 8006dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006db4:	f380 8811 	msr	BASEPRI, r0
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f7ff fa00 	bl	80061c4 <vTaskSwitchContext>
 8006dc4:	f04f 0000 	mov.w	r0, #0
 8006dc8:	f380 8811 	msr	BASEPRI, r0
 8006dcc:	bc09      	pop	{r0, r3}
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	6808      	ldr	r0, [r1, #0]
 8006dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd6:	f01e 0f10 	tst.w	lr, #16
 8006dda:	bf08      	it	eq
 8006ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006de0:	f380 8809 	msr	PSP, r0
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	f3af 8000 	nop.w

08006df0 <pxCurrentTCBConst>:
 8006df0:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop

08006df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
}
 8006e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e12:	f7ff f91f 	bl	8006054 <xTaskIncrementTick>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <SysTick_Handler+0x40>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	2300      	movs	r3, #0
 8006e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f383 8811 	msr	BASEPRI, r3
}
 8006e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <vPortSetupTimerInterrupt+0x34>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <vPortSetupTimerInterrupt+0x38>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <vPortSetupTimerInterrupt+0x3c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <vPortSetupTimerInterrupt+0x40>)
 8006e52:	fba2 2303 	umull	r2, r3, r2, r3
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <vPortSetupTimerInterrupt+0x44>)
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <vPortSetupTimerInterrupt+0x34>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	e000e010 	.word	0xe000e010
 8006e74:	e000e018 	.word	0xe000e018
 8006e78:	20000000 	.word	0x20000000
 8006e7c:	10624dd3 	.word	0x10624dd3
 8006e80:	e000e014 	.word	0xe000e014

08006e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e94 <vPortEnableVFP+0x10>
 8006e88:	6801      	ldr	r1, [r0, #0]
 8006e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e8e:	6001      	str	r1, [r0, #0]
 8006e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e92:	bf00      	nop
 8006e94:	e000ed88 	.word	0xe000ed88

08006e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e9e:	f3ef 8305 	mrs	r3, IPSR
 8006ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d914      	bls.n	8006ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <vPortValidateInterruptPriority+0x70>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006eb4:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <vPortValidateInterruptPriority+0x74>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	7afa      	ldrb	r2, [r7, #11]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d20a      	bcs.n	8006ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <vPortValidateInterruptPriority+0x78>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <vPortValidateInterruptPriority+0x7c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d90a      	bls.n	8006efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	603b      	str	r3, [r7, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <vPortValidateInterruptPriority+0x60>
	}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	e000e3f0 	.word	0xe000e3f0
 8006f0c:	20000498 	.word	0x20000498
 8006f10:	e000ed0c 	.word	0xe000ed0c
 8006f14:	2000049c 	.word	0x2000049c

08006f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f24:	f7fe ffec 	bl	8005f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f28:	4b5b      	ldr	r3, [pc, #364]	; (8007098 <pvPortMalloc+0x180>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f30:	f000 f920 	bl	8007174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f34:	4b59      	ldr	r3, [pc, #356]	; (800709c <pvPortMalloc+0x184>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f040 8093 	bne.w	8007068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01d      	beq.n	8006f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f48:	2208      	movs	r2, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
 8006f60:	3308      	adds	r3, #8
 8006f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <pvPortMalloc+0x6c>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	617b      	str	r3, [r7, #20]
}
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d06e      	beq.n	8007068 <pvPortMalloc+0x150>
 8006f8a:	4b45      	ldr	r3, [pc, #276]	; (80070a0 <pvPortMalloc+0x188>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d869      	bhi.n	8007068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f94:	4b43      	ldr	r3, [pc, #268]	; (80070a4 <pvPortMalloc+0x18c>)
 8006f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f98:	4b42      	ldr	r3, [pc, #264]	; (80070a4 <pvPortMalloc+0x18c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f9e:	e004      	b.n	8006faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d903      	bls.n	8006fbc <pvPortMalloc+0xa4>
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f1      	bne.n	8006fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fbc:	4b36      	ldr	r3, [pc, #216]	; (8007098 <pvPortMalloc+0x180>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d050      	beq.n	8007068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2208      	movs	r2, #8
 8006fcc:	4413      	add	r3, r2
 8006fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d91f      	bls.n	8007028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <pvPortMalloc+0xf8>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	613b      	str	r3, [r7, #16]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007022:	69b8      	ldr	r0, [r7, #24]
 8007024:	f000 f908 	bl	8007238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007028:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <pvPortMalloc+0x188>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <pvPortMalloc+0x188>)
 8007034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007036:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <pvPortMalloc+0x188>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <pvPortMalloc+0x190>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d203      	bcs.n	800704a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007042:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <pvPortMalloc+0x188>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <pvPortMalloc+0x190>)
 8007048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <pvPortMalloc+0x184>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	431a      	orrs	r2, r3
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800705e:	4b13      	ldr	r3, [pc, #76]	; (80070ac <pvPortMalloc+0x194>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3301      	adds	r3, #1
 8007064:	4a11      	ldr	r2, [pc, #68]	; (80070ac <pvPortMalloc+0x194>)
 8007066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007068:	f7fe ff58 	bl	8005f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <pvPortMalloc+0x174>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60fb      	str	r3, [r7, #12]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <pvPortMalloc+0x172>
	return pvReturn;
 800708c:	69fb      	ldr	r3, [r7, #28]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3728      	adds	r7, #40	; 0x28
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200040a8 	.word	0x200040a8
 800709c:	200040bc 	.word	0x200040bc
 80070a0:	200040ac 	.word	0x200040ac
 80070a4:	200040a0 	.word	0x200040a0
 80070a8:	200040b0 	.word	0x200040b0
 80070ac:	200040b4 	.word	0x200040b4

080070b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d04d      	beq.n	800715e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070c2:	2308      	movs	r3, #8
 80070c4:	425b      	negs	r3, r3
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	4b24      	ldr	r3, [pc, #144]	; (8007168 <vPortFree+0xb8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <vPortFree+0x44>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	60fb      	str	r3, [r7, #12]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <vPortFree+0x62>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60bb      	str	r3, [r7, #8]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <vPortFree+0xb8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01e      	beq.n	800715e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d11a      	bne.n	800715e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	4b0e      	ldr	r3, [pc, #56]	; (8007168 <vPortFree+0xb8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	43db      	mvns	r3, r3
 8007132:	401a      	ands	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007138:	f7fe fee2 	bl	8005f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <vPortFree+0xbc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4413      	add	r3, r2
 8007146:	4a09      	ldr	r2, [pc, #36]	; (800716c <vPortFree+0xbc>)
 8007148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f000 f874 	bl	8007238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <vPortFree+0xc0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	4a06      	ldr	r2, [pc, #24]	; (8007170 <vPortFree+0xc0>)
 8007158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800715a:	f7fe fedf 	bl	8005f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800715e:	bf00      	nop
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	200040bc 	.word	0x200040bc
 800716c:	200040ac 	.word	0x200040ac
 8007170:	200040b8 	.word	0x200040b8

08007174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800717a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800717e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007180:	4b27      	ldr	r3, [pc, #156]	; (8007220 <prvHeapInit+0xac>)
 8007182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3307      	adds	r3, #7
 8007192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0307 	bic.w	r3, r3, #7
 800719a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <prvHeapInit+0xac>)
 80071a4:	4413      	add	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071ac:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <prvHeapInit+0xb0>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <prvHeapInit+0xb0>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071c0:	2208      	movs	r2, #8
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <prvHeapInit+0xb4>)
 80071d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <prvHeapInit+0xb4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <prvHeapInit+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <prvHeapInit+0xb4>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4a0a      	ldr	r2, [pc, #40]	; (800722c <prvHeapInit+0xb8>)
 8007202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <prvHeapInit+0xbc>)
 800720a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800720c:	4b09      	ldr	r3, [pc, #36]	; (8007234 <prvHeapInit+0xc0>)
 800720e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	200004a0 	.word	0x200004a0
 8007224:	200040a0 	.word	0x200040a0
 8007228:	200040a8 	.word	0x200040a8
 800722c:	200040b0 	.word	0x200040b0
 8007230:	200040ac 	.word	0x200040ac
 8007234:	200040bc 	.word	0x200040bc

08007238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007240:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <prvInsertBlockIntoFreeList+0xac>)
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e002      	b.n	800724c <prvInsertBlockIntoFreeList+0x14>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d8f7      	bhi.n	8007246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d108      	bne.n	800727a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d118      	bne.n	80072c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d00d      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	441a      	add	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	e008      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvInsertBlockIntoFreeList+0xb0>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e003      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d002      	beq.n	80072d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	200040a0 	.word	0x200040a0
 80072e8:	200040a8 	.word	0x200040a8

080072ec <__NVIC_GetPriorityGrouping>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <__NVIC_GetPriorityGrouping+0x18>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	f003 0307 	and.w	r3, r3, #7
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	e000ed00 	.word	0xe000ed00

08007308 <__NVIC_EnableIRQ>:
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	db0b      	blt.n	8007332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	f003 021f 	and.w	r2, r3, #31
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <__NVIC_EnableIRQ+0x38>)
 8007322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2001      	movs	r0, #1
 800732a:	fa00 f202 	lsl.w	r2, r0, r2
 800732e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e100 	.word	0xe000e100

08007344 <__NVIC_SetPriority>:
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007354:	2b00      	cmp	r3, #0
 8007356:	db0a      	blt.n	800736e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	490c      	ldr	r1, [pc, #48]	; (8007390 <__NVIC_SetPriority+0x4c>)
 800735e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007362:	0112      	lsls	r2, r2, #4
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	440b      	add	r3, r1
 8007368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800736c:	e00a      	b.n	8007384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	4908      	ldr	r1, [pc, #32]	; (8007394 <__NVIC_SetPriority+0x50>)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	3b04      	subs	r3, #4
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	440b      	add	r3, r1
 8007382:	761a      	strb	r2, [r3, #24]
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	e000e100 	.word	0xe000e100
 8007394:	e000ed00 	.word	0xe000ed00

08007398 <NVIC_EncodePriority>:
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f1c3 0307 	rsb	r3, r3, #7
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	bf28      	it	cs
 80073b6:	2304      	movcs	r3, #4
 80073b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3304      	adds	r3, #4
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d902      	bls.n	80073c8 <NVIC_EncodePriority+0x30>
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3b03      	subs	r3, #3
 80073c6:	e000      	b.n	80073ca <NVIC_EncodePriority+0x32>
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	401a      	ands	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e0:	f04f 31ff 	mov.w	r1, #4294967295
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ea:	43d9      	mvns	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f0:	4313      	orrs	r3, r2
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800740a:	4a0c      	ldr	r2, [pc, #48]	; (800743c <LL_DMA_EnableStream+0x3c>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4413      	add	r3, r2
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4908      	ldr	r1, [pc, #32]	; (800743c <LL_DMA_EnableStream+0x3c>)
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	440a      	add	r2, r1
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	4611      	mov	r1, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	440a      	add	r2, r1
 8007428:	f043 0301 	orr.w	r3, r3, #1
 800742c:	6013      	str	r3, [r2, #0]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	0800ab00 	.word	0x0800ab00

08007440 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800744c:	4a0d      	ldr	r2, [pc, #52]	; (8007484 <LL_DMA_SetDataTransferDirection+0x44>)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	4413      	add	r3, r2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007460:	4908      	ldr	r1, [pc, #32]	; (8007484 <LL_DMA_SetDataTransferDirection+0x44>)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	440b      	add	r3, r1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	4619      	mov	r1, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	440b      	add	r3, r1
 800746e:	4619      	mov	r1, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	0800ab00 	.word	0x0800ab00

08007488 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8007494:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <LL_DMA_SetMode+0x44>)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80074a8:	4908      	ldr	r1, [pc, #32]	; (80074cc <LL_DMA_SetMode+0x44>)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	440b      	add	r3, r1
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4619      	mov	r1, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	440b      	add	r3, r1
 80074b6:	4619      	mov	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	0800ab00 	.word	0x0800ab00

080074d0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80074dc:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <LL_DMA_SetPeriphIncMode+0x44>)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074f0:	4908      	ldr	r1, [pc, #32]	; (8007514 <LL_DMA_SetPeriphIncMode+0x44>)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	440b      	add	r3, r1
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	440b      	add	r3, r1
 80074fe:	4619      	mov	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	0800ab00 	.word	0x0800ab00

08007518 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8007524:	4a0d      	ldr	r2, [pc, #52]	; (800755c <LL_DMA_SetMemoryIncMode+0x44>)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007538:	4908      	ldr	r1, [pc, #32]	; (800755c <LL_DMA_SetMemoryIncMode+0x44>)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	440b      	add	r3, r1
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	440b      	add	r3, r1
 8007546:	4619      	mov	r1, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4313      	orrs	r3, r2
 800754c:	600b      	str	r3, [r1, #0]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	0800ab00 	.word	0x0800ab00

08007560 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <LL_DMA_SetPeriphSize+0x44>)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007580:	4908      	ldr	r1, [pc, #32]	; (80075a4 <LL_DMA_SetPeriphSize+0x44>)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	440b      	add	r3, r1
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	4619      	mov	r1, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	440b      	add	r3, r1
 800758e:	4619      	mov	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	0800ab00 	.word	0x0800ab00

080075a8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <LL_DMA_SetMemorySize+0x44>)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80075c8:	4908      	ldr	r1, [pc, #32]	; (80075ec <LL_DMA_SetMemorySize+0x44>)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	440b      	add	r3, r1
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	440b      	add	r3, r1
 80075d6:	4619      	mov	r1, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4313      	orrs	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	0800ab00 	.word	0x0800ab00

080075f0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80075fc:	4a0d      	ldr	r2, [pc, #52]	; (8007634 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007610:	4908      	ldr	r1, [pc, #32]	; (8007634 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	440b      	add	r3, r1
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	440b      	add	r3, r1
 800761e:	4619      	mov	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	0800ab00 	.word	0x0800ab00

08007638 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <LL_DMA_SetDataLength+0x44>)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4413      	add	r3, r2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	0c1b      	lsrs	r3, r3, #16
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	4908      	ldr	r1, [pc, #32]	; (800767c <LL_DMA_SetDataLength+0x44>)
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	440a      	add	r2, r1
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	4611      	mov	r1, r2
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	4611      	mov	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4313      	orrs	r3, r2
 800766c:	604b      	str	r3, [r1, #4]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	0800ab00 	.word	0x0800ab00

08007680 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 800768a:	4a07      	ldr	r2, [pc, #28]	; (80076a8 <LL_DMA_GetDataLength+0x28>)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b29b      	uxth	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	0800ab00 	.word	0x0800ab00

080076ac <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80076b8:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <LL_DMA_SetChannelSelection+0x44>)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80076cc:	4908      	ldr	r1, [pc, #32]	; (80076f0 <LL_DMA_SetChannelSelection+0x44>)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	440b      	add	r3, r1
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	4619      	mov	r1, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	440b      	add	r3, r1
 80076da:	4619      	mov	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]
}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	0800ab00 	.word	0x0800ab00

080076f4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80076fe:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <LL_DMA_DisableFifoMode+0x3c>)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4413      	add	r3, r2
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4908      	ldr	r1, [pc, #32]	; (8007730 <LL_DMA_DisableFifoMode+0x3c>)
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	440a      	add	r2, r1
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	4611      	mov	r1, r2
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	440a      	add	r2, r1
 800771c:	f023 0304 	bic.w	r3, r3, #4
 8007720:	6153      	str	r3, [r2, #20]
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	0800ab00 	.word	0x0800ab00

08007734 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8007740:	4a07      	ldr	r2, [pc, #28]	; (8007760 <LL_DMA_SetMemoryAddress+0x2c>)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4413      	add	r3, r2
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60d3      	str	r3, [r2, #12]
}
 8007754:	bf00      	nop
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	0800ab00 	.word	0x0800ab00

08007764 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8007770:	4a07      	ldr	r2, [pc, #28]	; (8007790 <LL_DMA_SetPeriphAddress+0x2c>)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4413      	add	r3, r2
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6093      	str	r3, [r2, #8]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	0800ab00 	.word	0x0800ab00

08007794 <LL_AHB1_GRP1_EnableClock>:
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800779e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a0:	4907      	ldr	r1, [pc, #28]	; (80077c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80077aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4013      	ands	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40023800 	.word	0x40023800

080077c4 <LL_APB2_GRP1_EnableClock>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80077cc:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80077ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d0:	4907      	ldr	r1, [pc, #28]	; (80077f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80077da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4013      	ands	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	40023800 	.word	0x40023800

080077f4 <LL_USART_Enable>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <LL_USART_Disable>:
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <LL_USART_SetBaudRate>:
{
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	b09f      	sub	sp, #124	; 0x7c
 800783a:	af00      	add	r7, sp, #0
 800783c:	6778      	str	r0, [r7, #116]	; 0x74
 800783e:	6739      	str	r1, [r7, #112]	; 0x70
 8007840:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007842:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	f040 80bc 	bne.w	80079c6 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800784e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007850:	461c      	mov	r4, r3
 8007852:	f04f 0500 	mov.w	r5, #0
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	eb12 0a02 	adds.w	sl, r2, r2
 800785e:	eb43 0b03 	adc.w	fp, r3, r3
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	1912      	adds	r2, r2, r4
 8007868:	eb45 0303 	adc.w	r3, r5, r3
 800786c:	f04f 0000 	mov.w	r0, #0
 8007870:	f04f 0100 	mov.w	r1, #0
 8007874:	00d9      	lsls	r1, r3, #3
 8007876:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800787a:	00d0      	lsls	r0, r2, #3
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	1911      	adds	r1, r2, r4
 8007882:	6639      	str	r1, [r7, #96]	; 0x60
 8007884:	416b      	adcs	r3, r5
 8007886:	667b      	str	r3, [r7, #100]	; 0x64
 8007888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800788a:	461a      	mov	r2, r3
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	1891      	adds	r1, r2, r2
 8007892:	6339      	str	r1, [r7, #48]	; 0x30
 8007894:	415b      	adcs	r3, r3
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
 8007898:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800789c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078a0:	f7f8 fcee 	bl	8000280 <__aeabi_uldivmod>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4ba9      	ldr	r3, [pc, #676]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 80078aa:	fba3 2302 	umull	r2, r3, r3, r2
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	b29e      	uxth	r6, r3
 80078b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b8:	461c      	mov	r4, r3
 80078ba:	f04f 0500 	mov.w	r5, #0
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	1891      	adds	r1, r2, r2
 80078c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80078c6:	415b      	adcs	r3, r3
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ce:	1912      	adds	r2, r2, r4
 80078d0:	eb45 0303 	adc.w	r3, r5, r3
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	00d9      	lsls	r1, r3, #3
 80078de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078e2:	00d0      	lsls	r0, r2, #3
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	1911      	adds	r1, r2, r4
 80078ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ec:	416b      	adcs	r3, r5
 80078ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f2:	461a      	mov	r2, r3
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	6239      	str	r1, [r7, #32]
 80078fc:	415b      	adcs	r3, r3
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007900:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007904:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007908:	f7f8 fcba 	bl	8000280 <__aeabi_uldivmod>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4b8f      	ldr	r3, [pc, #572]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007912:	fba3 1302 	umull	r1, r3, r3, r2
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2164      	movs	r1, #100	; 0x64
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	3332      	adds	r3, #50	; 0x32
 8007924:	4a8a      	ldr	r2, [pc, #552]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	b29b      	uxth	r3, r3
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007936:	b29b      	uxth	r3, r3
 8007938:	4433      	add	r3, r6
 800793a:	b29e      	uxth	r6, r3
 800793c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800793e:	4618      	mov	r0, r3
 8007940:	f04f 0100 	mov.w	r1, #0
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	1894      	adds	r4, r2, r2
 800794a:	61bc      	str	r4, [r7, #24]
 800794c:	415b      	adcs	r3, r3
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007954:	1812      	adds	r2, r2, r0
 8007956:	eb41 0303 	adc.w	r3, r1, r3
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	f04f 0500 	mov.w	r5, #0
 8007962:	00dd      	lsls	r5, r3, #3
 8007964:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007968:	00d4      	lsls	r4, r2, #3
 800796a:	4622      	mov	r2, r4
 800796c:	462b      	mov	r3, r5
 800796e:	1814      	adds	r4, r2, r0
 8007970:	653c      	str	r4, [r7, #80]	; 0x50
 8007972:	414b      	adcs	r3, r1
 8007974:	657b      	str	r3, [r7, #84]	; 0x54
 8007976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007978:	461a      	mov	r2, r3
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	1891      	adds	r1, r2, r2
 8007980:	6139      	str	r1, [r7, #16]
 8007982:	415b      	adcs	r3, r3
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800798a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800798e:	f7f8 fc77 	bl	8000280 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4b6e      	ldr	r3, [pc, #440]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007998:	fba3 1302 	umull	r1, r3, r3, r2
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	2164      	movs	r1, #100	; 0x64
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	3332      	adds	r3, #50	; 0x32
 80079aa:	4a69      	ldr	r2, [pc, #420]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4433      	add	r3, r6
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c2:	609a      	str	r2, [r3, #8]
}
 80079c4:	e0be      	b.n	8007b44 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80079c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079c8:	461c      	mov	r4, r3
 80079ca:	f04f 0500 	mov.w	r5, #0
 80079ce:	4622      	mov	r2, r4
 80079d0:	462b      	mov	r3, r5
 80079d2:	eb12 0802 	adds.w	r8, r2, r2
 80079d6:	eb43 0903 	adc.w	r9, r3, r3
 80079da:	4642      	mov	r2, r8
 80079dc:	464b      	mov	r3, r9
 80079de:	1912      	adds	r2, r2, r4
 80079e0:	eb45 0303 	adc.w	r3, r5, r3
 80079e4:	f04f 0000 	mov.w	r0, #0
 80079e8:	f04f 0100 	mov.w	r1, #0
 80079ec:	00d9      	lsls	r1, r3, #3
 80079ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079f2:	00d0      	lsls	r0, r2, #3
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	1911      	adds	r1, r2, r4
 80079fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80079fc:	416b      	adcs	r3, r5
 80079fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a02:	4618      	mov	r0, r3
 8007a04:	f04f 0100 	mov.w	r1, #0
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	008b      	lsls	r3, r1, #2
 8007a12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a16:	0082      	lsls	r2, r0, #2
 8007a18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a1c:	f7f8 fc30 	bl	8000280 <__aeabi_uldivmod>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4b4a      	ldr	r3, [pc, #296]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007a26:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	b29e      	uxth	r6, r3
 8007a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a34:	4618      	mov	r0, r3
 8007a36:	f04f 0100 	mov.w	r1, #0
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	1894      	adds	r4, r2, r2
 8007a40:	60bc      	str	r4, [r7, #8]
 8007a42:	415b      	adcs	r3, r3
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a4a:	1812      	adds	r2, r2, r0
 8007a4c:	eb41 0303 	adc.w	r3, r1, r3
 8007a50:	f04f 0400 	mov.w	r4, #0
 8007a54:	f04f 0500 	mov.w	r5, #0
 8007a58:	00dd      	lsls	r5, r3, #3
 8007a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a5e:	00d4      	lsls	r4, r2, #3
 8007a60:	4622      	mov	r2, r4
 8007a62:	462b      	mov	r3, r5
 8007a64:	1814      	adds	r4, r2, r0
 8007a66:	643c      	str	r4, [r7, #64]	; 0x40
 8007a68:	414b      	adcs	r3, r1
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	008b      	lsls	r3, r1, #2
 8007a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a82:	0082      	lsls	r2, r0, #2
 8007a84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a88:	f7f8 fbfa 	bl	8000280 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007a92:	fba3 1302 	umull	r1, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2164      	movs	r1, #100	; 0x64
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	3332      	adds	r3, #50	; 0x32
 8007aa4:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	4433      	add	r3, r6
 8007ab6:	b29e      	uxth	r6, r3
 8007ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aba:	4618      	mov	r0, r3
 8007abc:	f04f 0100 	mov.w	r1, #0
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	1894      	adds	r4, r2, r2
 8007ac6:	603c      	str	r4, [r7, #0]
 8007ac8:	415b      	adcs	r3, r3
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	1812      	adds	r2, r2, r0
 8007ad2:	eb41 0303 	adc.w	r3, r1, r3
 8007ad6:	f04f 0400 	mov.w	r4, #0
 8007ada:	f04f 0500 	mov.w	r5, #0
 8007ade:	00dd      	lsls	r5, r3, #3
 8007ae0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ae4:	00d4      	lsls	r4, r2, #3
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	1814      	adds	r4, r2, r0
 8007aec:	63bc      	str	r4, [r7, #56]	; 0x38
 8007aee:	414b      	adcs	r3, r1
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007af4:	4618      	mov	r0, r3
 8007af6:	f04f 0100 	mov.w	r1, #0
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	008b      	lsls	r3, r1, #2
 8007b04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b08:	0082      	lsls	r2, r0, #2
 8007b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b0e:	f7f8 fbb7 	bl	8000280 <__aeabi_uldivmod>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007b18:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	2164      	movs	r1, #100	; 0x64
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	3332      	adds	r3, #50	; 0x32
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <LL_USART_SetBaudRate+0x31c>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4433      	add	r3, r6
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b42:	609a      	str	r2, [r3, #8]
}
 8007b44:	bf00      	nop
 8007b46:	377c      	adds	r7, #124	; 0x7c
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4e:	bf00      	nop
 8007b50:	51eb851f 	.word	0x51eb851f

08007b54 <LL_USART_ConfigAsyncMode>:
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	615a      	str	r2, [r3, #20]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f043 0210 	orr.w	r2, r3, #16
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60da      	str	r2, [r3, #12]
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	615a      	str	r2, [r3, #20]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <LL_GPIO_SetOutputPin>:
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	619a      	str	r2, [r3, #24]
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_GPIO_ResetOutputPin>:
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	041a      	lsls	r2, r3, #16
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	619a      	str	r2, [r3, #24]
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <sim7600_delay_ms>:
const char* res2; int res2Length;
uint32_t playTime; //in ms
int offsetTimer;

__STATIC_INLINE void sim7600_delay_ms(int _ms)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	osDelay(_ms);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fc fd3f 	bl	80046f2 <osDelay>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <sim7600_powerON>:
mp3PacketStruct mp3Packet[mp3PacketSize];

//init gpio, uart, dma(no fifo, byte->byte)

void sim7600_powerON()
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 8007c80:	2101      	movs	r1, #1
 8007c82:	480c      	ldr	r0, [pc, #48]	; (8007cb4 <sim7600_powerON+0x38>)
 8007c84:	f7ff ffd1 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8007c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c8c:	f7ff ffea 	bl	8007c64 <sim7600_delay_ms>

  Sim_PWR(0);
 8007c90:	2101      	movs	r1, #1
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <sim7600_powerON+0x38>)
 8007c94:	f7ff ffd7 	bl	8007c46 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(500);
 8007c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c9c:	f7ff ffe2 	bl	8007c64 <sim7600_delay_ms>

  Sim_PWR(1);
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4804      	ldr	r0, [pc, #16]	; (8007cb4 <sim7600_powerON+0x38>)
 8007ca4:	f7ff ffc1 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(16000);
 8007ca8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007cac:	f7ff ffda 	bl	8007c64 <sim7600_delay_ms>
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40021000 	.word	0x40021000

08007cb8 <sim7600_powerOFF>:

void sim7600_powerOFF()
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  Sim_PWR(1);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	480c      	ldr	r0, [pc, #48]	; (8007cf0 <sim7600_powerOFF+0x38>)
 8007cc0:	f7ff ffb3 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8007cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cc8:	f7ff ffcc 	bl	8007c64 <sim7600_delay_ms>

  Sim_PWR(0);
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <sim7600_powerOFF+0x38>)
 8007cd0:	f7ff ffb9 	bl	8007c46 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(4000);
 8007cd4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007cd8:	f7ff ffc4 	bl	8007c64 <sim7600_delay_ms>

  Sim_PWR(1);
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4804      	ldr	r0, [pc, #16]	; (8007cf0 <sim7600_powerOFF+0x38>)
 8007ce0:	f7ff ffa3 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(26000);
 8007ce4:	f246 5090 	movw	r0, #26000	; 0x6590
 8007ce8:	f7ff ffbc 	bl	8007c64 <sim7600_delay_ms>
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40021000 	.word	0x40021000

08007cf4 <sim7600_reset>:

void sim7600_reset()
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  Sim_RST(1);
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	480c      	ldr	r0, [pc, #48]	; (8007d2c <sim7600_reset+0x38>)
 8007cfc:	f7ff ff95 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(500);
 8007d00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d04:	f7ff ffae 	bl	8007c64 <sim7600_delay_ms>

  Sim_RST(0);
 8007d08:	2102      	movs	r1, #2
 8007d0a:	4808      	ldr	r0, [pc, #32]	; (8007d2c <sim7600_reset+0x38>)
 8007d0c:	f7ff ff9b 	bl	8007c46 <LL_GPIO_ResetOutputPin>
  sim7600_delay_ms(350);
 8007d10:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8007d14:	f7ff ffa6 	bl	8007c64 <sim7600_delay_ms>

  Sim_RST(1);
 8007d18:	2102      	movs	r1, #2
 8007d1a:	4804      	ldr	r0, [pc, #16]	; (8007d2c <sim7600_reset+0x38>)
 8007d1c:	f7ff ff85 	bl	8007c2a <LL_GPIO_SetOutputPin>
  sim7600_delay_ms(2000);
 8007d20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007d24:	f7ff ff9e 	bl	8007c64 <sim7600_delay_ms>
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40021000 	.word	0x40021000

08007d30 <sim7600_gpio_init>:

void sim7600_gpio_init()
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
  //gpio init
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d36:	463b      	mov	r3, r7
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	611a      	str	r2, [r3, #16]
 8007d44:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8007d46:	2010      	movs	r0, #16
 8007d48:	f7ff fd24 	bl	8007794 <LL_AHB1_GRP1_EnableClock>

  //set default state at begin (high or low depend on hardware / circuit)
  LL_GPIO_SetOutputPin(GPIOE, pwrSIM_Pin | rstSIM_Pin);
 8007d4c:	2103      	movs	r1, #3
 8007d4e:	480b      	ldr	r0, [pc, #44]	; (8007d7c <sim7600_gpio_init+0x4c>)
 8007d50:	f7ff ff6b 	bl	8007c2a <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = pwrSIM_Pin | rstSIM_Pin;
 8007d54:	2303      	movs	r3, #3
 8007d56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007d64:	2301      	movs	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d68:	463b      	mov	r3, r7
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4803      	ldr	r0, [pc, #12]	; (8007d7c <sim7600_gpio_init+0x4c>)
 8007d6e:	f7fb ff5b 	bl	8003c28 <LL_GPIO_Init>
}
 8007d72:	bf00      	nop
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40021000 	.word	0x40021000

08007d80 <sim7600_init>:

void sim7600_init()
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b094      	sub	sp, #80	; 0x50
 8007d84:	af00      	add	r7, sp, #0
  //init udp var
  int i, limit = mp3PacketSize;
 8007d86:	2314      	movs	r3, #20
 8007d88:	64bb      	str	r3, [r7, #72]	; 0x48
  for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d8e:	e00d      	b.n	8007dac <sim7600_init+0x2c>
 8007d90:	4a6f      	ldr	r2, [pc, #444]	; (8007f50 <sim7600_init+0x1d0>)
 8007d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d94:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8007da2:	2201      	movs	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da8:	3301      	adds	r3, #1
 8007daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dbed      	blt.n	8007d90 <sim7600_init+0x10>

  sim_buff[sim_buff_size] = '\0'; //initialize last bytes to ensure end of string (with strstr at handle receive data)
 8007db4:	4b67      	ldr	r3, [pc, #412]	; (8007f54 <sim7600_init+0x1d4>)
 8007db6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007dba:	3308      	adds	r3, #8
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	701a      	strb	r2, [r3, #0]

  //init semaphore to be ensure tx uart (share resource) use properly (place at main.c)
  osSemaphoreDef(BinSemsim7600UartTx);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	647b      	str	r3, [r7, #68]	; 0x44
  BinSemsim7600UartTxHandle = osSemaphoreCreate(osSemaphore(BinSemsim7600UartTx), 1);
 8007dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dcc:	2101      	movs	r1, #1
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc fca3 	bl	800471a <osSemaphoreCreate>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4a60      	ldr	r2, [pc, #384]	; (8007f58 <sim7600_init+0x1d8>)
 8007dd8:	6013      	str	r3, [r2, #0]

  //semaphore to make sure that response is check properly
  osSemaphoreDef(BinSemPlayMp3);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemPlayMp3Handle = osSemaphoreCreate(osSemaphore(BinSemPlayMp3), 1);
 8007de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fc fc96 	bl	800471a <osSemaphoreCreate>
 8007dee:	4603      	mov	r3, r0
 8007df0:	4a5a      	ldr	r2, [pc, #360]	; (8007f5c <sim7600_init+0x1dc>)
 8007df2:	6013      	str	r3, [r2, #0]

  sim7600_gpio_init();
 8007df4:	f7ff ff9c 	bl	8007d30 <sim7600_gpio_init>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df8:	f107 0320 	add.w	r3, r7, #32
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	611a      	str	r2, [r3, #16]
 8007e08:	615a      	str	r2, [r3, #20]
  //uart1 + DMA2 stream 2, channel 2 init
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8007e0a:	1d3b      	adds	r3, r7, #4
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	605a      	str	r2, [r3, #4]
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	60da      	str	r2, [r3, #12]
 8007e16:	611a      	str	r2, [r3, #16]
 8007e18:	615a      	str	r2, [r3, #20]
 8007e1a:	619a      	str	r2, [r3, #24]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8007e1c:	2010      	movs	r0, #16
 8007e1e:	f7ff fcd1 	bl	80077c4 <LL_APB2_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007e22:	2001      	movs	r0, #1
 8007e24:	f7ff fcb6 	bl	8007794 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8007e28:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007e2c:	f7ff fcb2 	bl	8007794 <LL_AHB1_GRP1_EnableClock>
       * USART1 GPIO Configuration
       *
       * PA9   ------> USART1_TX
       * PA10   ------> USART1_RX
       */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8007e30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007e36:	2302      	movs	r3, #2
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007e42:	2301      	movs	r3, #1
 8007e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7; // AF_7 ~ USART1..3 see at datasheet (Figure.. Selecting an alternate function...)
 8007e46:	2307      	movs	r3, #7
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4a:	f107 0320 	add.w	r3, r7, #32
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4843      	ldr	r0, [pc, #268]	; (8007f60 <sim7600_init+0x1e0>)
 8007e52:	f7fb fee9 	bl	8003c28 <LL_GPIO_Init>

  /* USART1 RX DMA 2 stream 2 channel 4 Init */

  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8007e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	4841      	ldr	r0, [pc, #260]	; (8007f64 <sim7600_init+0x1e4>)
 8007e5e:	f7ff fc25 	bl	80076ac <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2102      	movs	r1, #2
 8007e66:	483f      	ldr	r0, [pc, #252]	; (8007f64 <sim7600_init+0x1e4>)
 8007e68:	f7ff faea 	bl	8007440 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8007e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e70:	2102      	movs	r1, #2
 8007e72:	483c      	ldr	r0, [pc, #240]	; (8007f64 <sim7600_init+0x1e4>)
 8007e74:	f7ff fbbc 	bl	80075f0 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8007e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	4839      	ldr	r0, [pc, #228]	; (8007f64 <sim7600_init+0x1e4>)
 8007e80:	f7ff fb02 	bl	8007488 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8007e84:	2200      	movs	r2, #0
 8007e86:	2102      	movs	r1, #2
 8007e88:	4836      	ldr	r0, [pc, #216]	; (8007f64 <sim7600_init+0x1e4>)
 8007e8a:	f7ff fb21 	bl	80074d0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8007e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e92:	2102      	movs	r1, #2
 8007e94:	4833      	ldr	r0, [pc, #204]	; (8007f64 <sim7600_init+0x1e4>)
 8007e96:	f7ff fb3f 	bl	8007518 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	4831      	ldr	r0, [pc, #196]	; (8007f64 <sim7600_init+0x1e4>)
 8007ea0:	f7ff fb5e 	bl	8007560 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	482e      	ldr	r0, [pc, #184]	; (8007f64 <sim7600_init+0x1e4>)
 8007eaa:	f7ff fb7d 	bl	80075a8 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8007eae:	2102      	movs	r1, #2
 8007eb0:	482c      	ldr	r0, [pc, #176]	; (8007f64 <sim7600_init+0x1e4>)
 8007eb2:	f7ff fc1f 	bl	80076f4 <LL_DMA_DisableFifoMode>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8007eb6:	4a2c      	ldr	r2, [pc, #176]	; (8007f68 <sim7600_init+0x1e8>)
 8007eb8:	2102      	movs	r1, #2
 8007eba:	482a      	ldr	r0, [pc, #168]	; (8007f64 <sim7600_init+0x1e4>)
 8007ebc:	f7ff fc52 	bl	8007764 <LL_DMA_SetPeriphAddress>

  //set uart rx buffer receive
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)sim_dma_buffer);
 8007ec0:	4b2a      	ldr	r3, [pc, #168]	; (8007f6c <sim7600_init+0x1ec>)
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	4827      	ldr	r0, [pc, #156]	; (8007f64 <sim7600_init+0x1e4>)
 8007ec8:	f7ff fc34 	bl	8007734 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, sim_dma_buffer_size);
 8007ecc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4823      	ldr	r0, [pc, #140]	; (8007f64 <sim7600_init+0x1e4>)
 8007ed6:	f7ff fbaf 	bl	8007638 <LL_DMA_SetDataLength>
  /* DMA interrupt init */
  //NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 6, 0));
  //NVIC_EnableIRQ(DMA2_Stream2_IRQn);

  /* USART configuration */
  USART_InitStruct.BaudRate = Sim7600BaudDefaul;
 8007eda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007ede:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007eec:	230c      	movs	r3, #12
 8007eee:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61fb      	str	r3, [r7, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8007ef8:	1d3b      	adds	r3, r7, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	481c      	ldr	r0, [pc, #112]	; (8007f70 <sim7600_init+0x1f0>)
 8007efe:	f7fc fadf 	bl	80044c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8007f02:	481b      	ldr	r0, [pc, #108]	; (8007f70 <sim7600_init+0x1f0>)
 8007f04:	f7ff fe26 	bl	8007b54 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 8007f08:	4819      	ldr	r0, [pc, #100]	; (8007f70 <sim7600_init+0x1f0>)
 8007f0a:	f7ff fe6f 	bl	8007bec <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8007f0e:	4818      	ldr	r0, [pc, #96]	; (8007f70 <sim7600_init+0x1f0>)
 8007f10:	f7ff fe5c 	bl	8007bcc <LL_USART_EnableIT_IDLE>

  /* USART interrupt */
  //priority high (6) after spi and dma for vs1003
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
 8007f14:	f7ff f9ea 	bl	80072ec <__NVIC_GetPriorityGrouping>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	210f      	movs	r1, #15
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fa3a 	bl	8007398 <NVIC_EncodePriority>
 8007f24:	4603      	mov	r3, r0
 8007f26:	4619      	mov	r1, r3
 8007f28:	2025      	movs	r0, #37	; 0x25
 8007f2a:	f7ff fa0b 	bl	8007344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8007f2e:	2025      	movs	r0, #37	; 0x25
 8007f30:	f7ff f9ea 	bl	8007308 <__NVIC_EnableIRQ>

  /* Enable USART and DMA */
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8007f34:	2102      	movs	r1, #2
 8007f36:	480b      	ldr	r0, [pc, #44]	; (8007f64 <sim7600_init+0x1e4>)
 8007f38:	f7ff fa62 	bl	8007400 <LL_DMA_EnableStream>
  LL_USART_Enable(USART1);
 8007f3c:	480c      	ldr	r0, [pc, #48]	; (8007f70 <sim7600_init+0x1f0>)
 8007f3e:	f7ff fc59 	bl	80077f4 <LL_USART_Enable>

  //power on sim7600
  sim7600_powerON();
 8007f42:	f7ff fe9b 	bl	8007c7c <sim7600_powerON>
  // {
	//  while(!LL_USART_IsActiveFlag_RXNE(usartSim7600));
  //    LL_USART_ReceiveData8(usartSim7600);
  // }
  //sim7600_usart_send_string("ATE0\r\n");
}
 8007f46:	bf00      	nop
 8007f48:	3750      	adds	r7, #80	; 0x50
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	200056dc 	.word	0x200056dc
 8007f54:	20007af0 	.word	0x20007af0
 8007f58:	200056d8 	.word	0x200056d8
 8007f5c:	200056c0 	.word	0x200056c0
 8007f60:	40020000 	.word	0x40020000
 8007f64:	40026400 	.word	0x40026400
 8007f68:	40011004 	.word	0x40011004
 8007f6c:	20004330 	.word	0x20004330
 8007f70:	40011000 	.word	0x40011000

08007f74 <sim7600_config>:

bool Sim7600BasicConfigSuccess = false;

bool sim7600_config()
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  Sim7600BasicConfigSuccess = false;
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <sim7600_config+0x144>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
  //config until success (connect to server)

  //echo cmd off
  if (!sim7600_send_cmd("ATE0\r\n", "OK", "", 500))
 8007f7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f82:	4a4e      	ldr	r2, [pc, #312]	; (80080bc <sim7600_config+0x148>)
 8007f84:	494e      	ldr	r1, [pc, #312]	; (80080c0 <sim7600_config+0x14c>)
 8007f86:	484f      	ldr	r0, [pc, #316]	; (80080c4 <sim7600_config+0x150>)
 8007f88:	f000 fa96 	bl	80084b8 <sim7600_send_cmd>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f083 0301 	eor.w	r3, r3, #1
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <sim7600_config+0x28>
    return false;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e08b      	b.n	80080b4 <sim7600_config+0x140>
  restartSimstatus = 0; //reset
 8007f9c:	4b4a      	ldr	r3, [pc, #296]	; (80080c8 <sim7600_config+0x154>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

  //change to main baudrate
  sprintf(sim7600_cmd_buff, "AT+IPR=%d\r\n", Sim7600BaudMain);
 8007fa2:	4a4a      	ldr	r2, [pc, #296]	; (80080cc <sim7600_config+0x158>)
 8007fa4:	494a      	ldr	r1, [pc, #296]	; (80080d0 <sim7600_config+0x15c>)
 8007fa6:	484b      	ldr	r0, [pc, #300]	; (80080d4 <sim7600_config+0x160>)
 8007fa8:	f001 fab2 	bl	8009510 <siprintf>
  if (!sim7600_send_cmd(sim7600_cmd_buff, "OK", "", 500))
 8007fac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fb0:	4a42      	ldr	r2, [pc, #264]	; (80080bc <sim7600_config+0x148>)
 8007fb2:	4943      	ldr	r1, [pc, #268]	; (80080c0 <sim7600_config+0x14c>)
 8007fb4:	4847      	ldr	r0, [pc, #284]	; (80080d4 <sim7600_config+0x160>)
 8007fb6:	f000 fa7f 	bl	80084b8 <sim7600_send_cmd>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f083 0301 	eor.w	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <sim7600_config+0x56>
    return false;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e074      	b.n	80080b4 <sim7600_config+0x140>
  sim7600_change_baud(Sim7600BaudMain);
 8007fca:	4840      	ldr	r0, [pc, #256]	; (80080cc <sim7600_config+0x158>)
 8007fcc:	f000 ff84 	bl	8008ed8 <sim7600_change_baud>

  //check sim
  if (!sim7600_send_cmd("at+ciccid\r\n", "+ICCID:", "", 500))
 8007fd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fd4:	4a39      	ldr	r2, [pc, #228]	; (80080bc <sim7600_config+0x148>)
 8007fd6:	4940      	ldr	r1, [pc, #256]	; (80080d8 <sim7600_config+0x164>)
 8007fd8:	4840      	ldr	r0, [pc, #256]	; (80080dc <sim7600_config+0x168>)
 8007fda:	f000 fa6d 	bl	80084b8 <sim7600_send_cmd>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f083 0301 	eor.w	r3, r3, #1
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <sim7600_config+0x7a>
    return false;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e062      	b.n	80080b4 <sim7600_config+0x140>
  if (!sim7600_send_cmd("at+csq\r\n", "+CSQ: ", "", 500))
 8007fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ff2:	4a32      	ldr	r2, [pc, #200]	; (80080bc <sim7600_config+0x148>)
 8007ff4:	493a      	ldr	r1, [pc, #232]	; (80080e0 <sim7600_config+0x16c>)
 8007ff6:	483b      	ldr	r0, [pc, #236]	; (80080e4 <sim7600_config+0x170>)
 8007ff8:	f000 fa5e 	bl	80084b8 <sim7600_send_cmd>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f083 0301 	eor.w	r3, r3, #1
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <sim7600_config+0x98>
    return false;
 8008008:	2300      	movs	r3, #0
 800800a:	e053      	b.n	80080b4 <sim7600_config+0x140>

  // set timeout value for AT+NETOPEN/AT+CIPOPEN/AT+CIPSEND
  //AT+CIPTIMEOUT=10000,10000,5000 ~ 10s, 10s, 5s
  if (!sim7600_send_cmd("AT+CIPTIMEOUT=10000,10000,5000\r\n", "OK", "", 500))
 800800c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008010:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <sim7600_config+0x148>)
 8008012:	492b      	ldr	r1, [pc, #172]	; (80080c0 <sim7600_config+0x14c>)
 8008014:	4834      	ldr	r0, [pc, #208]	; (80080e8 <sim7600_config+0x174>)
 8008016:	f000 fa4f 	bl	80084b8 <sim7600_send_cmd>
 800801a:	4603      	mov	r3, r0
 800801c:	f083 0301 	eor.w	r3, r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <sim7600_config+0xb6>
    return false;
 8008026:	2300      	movs	r3, #0
 8008028:	e044      	b.n	80080b4 <sim7600_config+0x140>
  //10 times retranmission IP packet, no(0) delay to output data received
  //ack=0, 1:error result code with string values
  //1:add data header, the format is â€œ+RECEIVE,<link num>,<data length>â€�
  //< AsyncMode > = 0
  //minimum retransmission timeout value for TCP connection in ms : 12000(max)
  if (!sim7600_send_cmd("AT+CIPCCFG=10,0,0,1,1,0,3000\r\n", "OK", "", 500))
 800802a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800802e:	4a23      	ldr	r2, [pc, #140]	; (80080bc <sim7600_config+0x148>)
 8008030:	4923      	ldr	r1, [pc, #140]	; (80080c0 <sim7600_config+0x14c>)
 8008032:	482e      	ldr	r0, [pc, #184]	; (80080ec <sim7600_config+0x178>)
 8008034:	f000 fa40 	bl	80084b8 <sim7600_send_cmd>
 8008038:	4603      	mov	r3, r0
 800803a:	f083 0301 	eor.w	r3, r3, #1
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <sim7600_config+0xd4>
    return false;
 8008044:	2300      	movs	r3, #0
 8008046:	e035      	b.n	80080b4 <sim7600_config+0x140>

  //display header when receive â€œ+RECEIVE,<link num>,<data length>â€�
  //AT+CIPHEAD=1 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPHEAD=1\r\n", "OK", "", 500))
 8008048:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800804c:	4a1b      	ldr	r2, [pc, #108]	; (80080bc <sim7600_config+0x148>)
 800804e:	491c      	ldr	r1, [pc, #112]	; (80080c0 <sim7600_config+0x14c>)
 8008050:	4827      	ldr	r0, [pc, #156]	; (80080f0 <sim7600_config+0x17c>)
 8008052:	f000 fa31 	bl	80084b8 <sim7600_send_cmd>
 8008056:	4603      	mov	r3, r0
 8008058:	f083 0301 	eor.w	r3, r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <sim7600_config+0xf2>
    return false;
 8008062:	2300      	movs	r3, #0
 8008064:	e026      	b.n	80080b4 <sim7600_config+0x140>

  //don't display remote IP (server ip)
  //AT+CIPSRIP=0 : \r\nOK\r\n
  if (!sim7600_send_cmd("AT+CIPSRIP=0\r\n", "OK", "", 500))
 8008066:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800806a:	4a14      	ldr	r2, [pc, #80]	; (80080bc <sim7600_config+0x148>)
 800806c:	4914      	ldr	r1, [pc, #80]	; (80080c0 <sim7600_config+0x14c>)
 800806e:	4821      	ldr	r0, [pc, #132]	; (80080f4 <sim7600_config+0x180>)
 8008070:	f000 fa22 	bl	80084b8 <sim7600_send_cmd>
 8008074:	4603      	mov	r3, r0
 8008076:	f083 0301 	eor.w	r3, r3, #1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <sim7600_config+0x110>
    return false;
 8008080:	2300      	movs	r3, #0
 8008082:	e017      	b.n	80080b4 <sim7600_config+0x140>

  Sim7600BasicConfigSuccess = true;
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <sim7600_config+0x144>)
 8008086:	2201      	movs	r2, #1
 8008088:	701a      	strb	r2, [r3, #0]

  //open net
  if (!sim7600_open_network())
 800808a:	f000 f86b 	bl	8008164 <sim7600_open_network>
 800808e:	4603      	mov	r3, r0
 8008090:	f083 0301 	eor.w	r3, r3, #1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <sim7600_config+0x12a>
    return false;
 800809a:	2300      	movs	r3, #0
 800809c:	e00a      	b.n	80080b4 <sim7600_config+0x140>

  //open udp connect
  //create UDP connect socket at link 1, local port (mot important) 8080
  //AT+CIPOPEN=1,"UDP",,,8080 : \r\n+CIPOPEN: 1,0 or \r\n+CIPOPEN: 1,4
  if (!sim7600_open_udp_connect())
 800809e:	f000 f8b3 	bl	8008208 <sim7600_open_udp_connect>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f083 0301 	eor.w	r3, r3, #1
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <sim7600_config+0x13e>
    return false;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e000      	b.n	80080b4 <sim7600_config+0x140>
  //open TCP socket with domain
  // if (!sim7600_open_tcp_connect())
  //   return false;

  //success config
  return true;
 80080b2:	2301      	movs	r3, #1
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	200040c9 	.word	0x200040c9
 80080bc:	0800a8ac 	.word	0x0800a8ac
 80080c0:	0800a8b0 	.word	0x0800a8b0
 80080c4:	0800a8b4 	.word	0x0800a8b4
 80080c8:	200040c0 	.word	0x200040c0
 80080cc:	002dc6c0 	.word	0x002dc6c0
 80080d0:	0800a8bc 	.word	0x0800a8bc
 80080d4:	20004268 	.word	0x20004268
 80080d8:	0800a8c8 	.word	0x0800a8c8
 80080dc:	0800a8d0 	.word	0x0800a8d0
 80080e0:	0800a8dc 	.word	0x0800a8dc
 80080e4:	0800a8e4 	.word	0x0800a8e4
 80080e8:	0800a8f0 	.word	0x0800a8f0
 80080ec:	0800a914 	.word	0x0800a914
 80080f0:	0800a934 	.word	0x0800a934
 80080f4:	0800a944 	.word	0x0800a944

080080f8 <sim7600_update_response>:
//param bool openWithIPv4
//return: 0-success, 1:TCP error(net is good but can't connect). 2:error need to start
//

void sim7600_update_response(const char* _res1, const char* _res2)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  res1Length = strlen(_res1);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7f8 f864 	bl	80001d0 <strlen>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <sim7600_update_response+0x5c>)
 800810e:	601a      	str	r2, [r3, #0]
  res2Length = strlen(_res2);
 8008110:	6838      	ldr	r0, [r7, #0]
 8008112:	f7f8 f85d 	bl	80001d0 <strlen>
 8008116:	4603      	mov	r3, r0
 8008118:	461a      	mov	r2, r3
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <sim7600_update_response+0x60>)
 800811c:	601a      	str	r2, [r3, #0]
  if(res1Length > 0)  res1 = _res1;
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <sim7600_update_response+0x5c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd03      	ble.n	800812e <sim7600_update_response+0x36>
 8008126:	4a0d      	ldr	r2, [pc, #52]	; (800815c <sim7600_update_response+0x64>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	e002      	b.n	8008134 <sim7600_update_response+0x3c>
  else res1 = NULL;
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <sim7600_update_response+0x64>)
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
  if(res2Length > 0) res2 = _res2;
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <sim7600_update_response+0x60>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dd03      	ble.n	8008144 <sim7600_update_response+0x4c>
 800813c:	4a08      	ldr	r2, [pc, #32]	; (8008160 <sim7600_update_response+0x68>)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6013      	str	r3, [r2, #0]
  else res2 = NULL;
}
 8008142:	e002      	b.n	800814a <sim7600_update_response+0x52>
  else res2 = NULL;
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <sim7600_update_response+0x68>)
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20004194 	.word	0x20004194
 8008158:	200041a0 	.word	0x200041a0
 800815c:	2000418c 	.word	0x2000418c
 8008160:	20004188 	.word	0x20004188

08008164 <sim7600_open_network>:

int sim7600_open_netStatus = 0; // 0 : none, 1 : send cmd, 2 : success
bool sim7600_open_network()
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 800816a:	4b20      	ldr	r3, [pc, #128]	; (80081ec <sim7600_open_network+0x88>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2164      	movs	r1, #100	; 0x64
 8008170:	4618      	mov	r0, r3
 8008172:	f7fc fb05 	bl	8004780 <osSemaphoreWait>

  sim7600_update_response("OK", "Network is already opened");
 8008176:	491e      	ldr	r1, [pc, #120]	; (80081f0 <sim7600_open_network+0x8c>)
 8008178:	481e      	ldr	r0, [pc, #120]	; (80081f4 <sim7600_open_network+0x90>)
 800817a:	f7ff ffbd 	bl	80080f8 <sim7600_update_response>

  sim7600_usart_send_string("AT+NETOPEN\r\n");
 800817e:	481e      	ldr	r0, [pc, #120]	; (80081f8 <sim7600_open_network+0x94>)
 8008180:	f000 f9de 	bl	8008540 <sim7600_usart_send_string>

  sim7600_open_netStatus = 1;
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <sim7600_open_network+0x98>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
  int try = 24; // ~ 12s
 800818a:	2318      	movs	r3, #24
 800818c:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(100); 
 800818e:	2064      	movs	r0, #100	; 0x64
 8008190:	f7ff fd68 	bl	8007c64 <sim7600_delay_ms>
    if (sim7600_open_netStatus == 2)
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <sim7600_open_network+0x98>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d103      	bne.n	80081a4 <sim7600_open_network+0x40>
    {
      //sim7600_open_netStatus = 0;
      sim7600_network_IsOpen = true;
 800819c:	4b18      	ldr	r3, [pc, #96]	; (8008200 <sim7600_open_network+0x9c>)
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
      //return true;
      break;
 80081a2:	e005      	b.n	80081b0 <sim7600_open_network+0x4c>
    }
  } while (--try);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1ee      	bne.n	800818e <sim7600_open_network+0x2a>

  sim7600_open_netStatus = 0;
 80081b0:	4b12      	ldr	r3, [pc, #72]	; (80081fc <sim7600_open_network+0x98>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

  // if(!sim7600_network_IsOpen)//can't open network
  //   sim7600_error = true;
  sim7600_error = !sim7600_network_IsOpen;
 80081b6:	4b12      	ldr	r3, [pc, #72]	; (8008200 <sim7600_open_network+0x9c>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bf14      	ite	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	2300      	moveq	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f083 0301 	eor.w	r3, r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <sim7600_open_network+0xa0>)
 80081d2:	701a      	strb	r2, [r3, #0]
  
  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <sim7600_open_network+0x88>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fc fb1f 	bl	800481c <osSemaphoreRelease>

  return sim7600_network_IsOpen;
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <sim7600_open_network+0x9c>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200056d8 	.word	0x200056d8
 80081f0:	0800a954 	.word	0x0800a954
 80081f4:	0800a8b0 	.word	0x0800a8b0
 80081f8:	0800a970 	.word	0x0800a970
 80081fc:	200040d0 	.word	0x200040d0
 8008200:	200040c5 	.word	0x200040c5
 8008204:	200040c4 	.word	0x200040c4

08008208 <sim7600_open_udp_connect>:

int sim7600_open_udp_connectStatus = 0; // 0 : none, 1 : send cmd, 2 : success
bool sim7600_open_udp_connect()
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 800820e:	4b1f      	ldr	r3, [pc, #124]	; (800828c <sim7600_open_udp_connect+0x84>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2164      	movs	r1, #100	; 0x64
 8008214:	4618      	mov	r0, r3
 8008216:	f7fc fab3 	bl	8004780 <osSemaphoreWait>

  sim7600_update_response("+CIPOPEN: 1,0", "+CIPOPEN: 1,4");
 800821a:	491d      	ldr	r1, [pc, #116]	; (8008290 <sim7600_open_udp_connect+0x88>)
 800821c:	481d      	ldr	r0, [pc, #116]	; (8008294 <sim7600_open_udp_connect+0x8c>)
 800821e:	f7ff ff6b 	bl	80080f8 <sim7600_update_response>

  sim7600_usart_send_string("AT+CIPOPEN=1,\"UDP\",,,8080\r\n");
 8008222:	481d      	ldr	r0, [pc, #116]	; (8008298 <sim7600_open_udp_connect+0x90>)
 8008224:	f000 f98c 	bl	8008540 <sim7600_usart_send_string>

  sim7600_open_udp_connectStatus = 1;
 8008228:	4b1c      	ldr	r3, [pc, #112]	; (800829c <sim7600_open_udp_connect+0x94>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
  int try = 24; // ~ 12s
 800822e:	2318      	movs	r3, #24
 8008230:	607b      	str	r3, [r7, #4]
  do
  {
    sim7600_delay_ms(100); 
 8008232:	2064      	movs	r0, #100	; 0x64
 8008234:	f7ff fd16 	bl	8007c64 <sim7600_delay_ms>
    if (sim7600_open_udp_connectStatus == 2)
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <sim7600_open_udp_connect+0x94>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d102      	bne.n	8008246 <sim7600_open_udp_connect+0x3e>
    {
      //sim7600_open_udp_connectStatus = 0;
      sim7600_udp_IsOpen = true;
 8008240:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <sim7600_open_udp_connect+0x98>)
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
      //return true;
    }
  } while (--try);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3b01      	subs	r3, #1
 800824a:	607b      	str	r3, [r7, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1ef      	bne.n	8008232 <sim7600_open_udp_connect+0x2a>

  sim7600_open_udp_connectStatus = 0;
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <sim7600_open_udp_connect+0x94>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

  // if(!sim7600_udp_IsOpen)//can't open udp connect
  //   sim7600_error = true;
  sim7600_error = !sim7600_udp_IsOpen;
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <sim7600_open_udp_connect+0x98>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f083 0301 	eor.w	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <sim7600_open_udp_connect+0x9c>)
 8008274:	701a      	strb	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <sim7600_open_udp_connect+0x84>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f7fc face 	bl	800481c <osSemaphoreRelease>

  return sim7600_udp_IsOpen;
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <sim7600_open_udp_connect+0x98>)
 8008282:	781b      	ldrb	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200056d8 	.word	0x200056d8
 8008290:	0800a980 	.word	0x0800a980
 8008294:	0800a990 	.word	0x0800a990
 8008298:	0800a9a0 	.word	0x0800a9a0
 800829c:	200040d4 	.word	0x200040d4
 80082a0:	200040c7 	.word	0x200040c7
 80082a4:	200040c4 	.word	0x200040c4

080082a8 <sim7600_send_packet_ip>:
AT+CIPSEND=0,5<CR> //5:size of data in bytes
>hello : \r\nOK */

//send packet, type:1 - UDP , type:0 - TCP
bool sim7600_send_packet_ip(int type, uint8_t* data, int data_length)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, osWaitForever);
 80082b4:	4b2e      	ldr	r3, [pc, #184]	; (8008370 <sim7600_send_packet_ip+0xc8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f04f 31ff 	mov.w	r1, #4294967295
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fc fa5f 	bl	8004780 <osSemaphoreWait>

  sim7600_update_response(">", "");
 80082c2:	492c      	ldr	r1, [pc, #176]	; (8008374 <sim7600_send_packet_ip+0xcc>)
 80082c4:	482c      	ldr	r0, [pc, #176]	; (8008378 <sim7600_send_packet_ip+0xd0>)
 80082c6:	f7ff ff17 	bl	80080f8 <sim7600_update_response>
  if(type == 1) // udp
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d109      	bne.n	80082e4 <sim7600_send_packet_ip+0x3c>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=1,%d,\"%s\",%d\r", data_length, serverDomain, serverPort);
 80082d0:	4b2a      	ldr	r3, [pc, #168]	; (800837c <sim7600_send_packet_ip+0xd4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4b2a      	ldr	r3, [pc, #168]	; (8008380 <sim7600_send_packet_ip+0xd8>)
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	492a      	ldr	r1, [pc, #168]	; (8008384 <sim7600_send_packet_ip+0xdc>)
 80082dc:	482a      	ldr	r0, [pc, #168]	; (8008388 <sim7600_send_packet_ip+0xe0>)
 80082de:	f001 f917 	bl	8009510 <siprintf>
 80082e2:	e00d      	b.n	8008300 <sim7600_send_packet_ip+0x58>
  }
  else if(type == 0) //tcp
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <sim7600_send_packet_ip+0x4e>
  {
    sprintf(sim7600_cmd_buff, "AT+CIPSEND=0,%d\r", data_length);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4927      	ldr	r1, [pc, #156]	; (800838c <sim7600_send_packet_ip+0xe4>)
 80082ee:	4826      	ldr	r0, [pc, #152]	; (8008388 <sim7600_send_packet_ip+0xe0>)
 80082f0:	f001 f90e 	bl	8009510 <siprintf>
 80082f4:	e004      	b.n	8008300 <sim7600_send_packet_ip+0x58>
  }
  else //ssl AT+CCHSEND=0,2
  {
	  sprintf(sim7600_cmd_buff, "AT+CCHSEND=0,%d\r", data_length);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	4925      	ldr	r1, [pc, #148]	; (8008390 <sim7600_send_packet_ip+0xe8>)
 80082fa:	4823      	ldr	r0, [pc, #140]	; (8008388 <sim7600_send_packet_ip+0xe0>)
 80082fc:	f001 f908 	bl	8009510 <siprintf>
  }

  sim7600_usart_send_string(sim7600_cmd_buff);
 8008300:	4821      	ldr	r0, [pc, #132]	; (8008388 <sim7600_send_packet_ip+0xe0>)
 8008302:	f000 f91d 	bl	8008540 <sim7600_usart_send_string>
  sim7600_send_packetStatus = 1;
 8008306:	4b23      	ldr	r3, [pc, #140]	; (8008394 <sim7600_send_packet_ip+0xec>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  bool send_ip_packet_success = false;
 800830c:	2300      	movs	r3, #0
 800830e:	75fb      	strb	r3, [r7, #23]
  int try = 60; // ~ 6s, since timeout set up for AT+CIPSEND is 5s
 8008310:	233c      	movs	r3, #60	; 0x3c
 8008312:	613b      	str	r3, [r7, #16]
  do
  {
    sim7600_delay_ms(100); 
 8008314:	2064      	movs	r0, #100	; 0x64
 8008316:	f7ff fca5 	bl	8007c64 <sim7600_delay_ms>
    if (sim7600_send_packetStatus == 2)
 800831a:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <sim7600_send_packet_ip+0xec>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d10b      	bne.n	800833a <sim7600_send_packet_ip+0x92>
    {
      //send data
      sim7600_update_response("OK", "");
 8008322:	4914      	ldr	r1, [pc, #80]	; (8008374 <sim7600_send_packet_ip+0xcc>)
 8008324:	481c      	ldr	r0, [pc, #112]	; (8008398 <sim7600_send_packet_ip+0xf0>)
 8008326:	f7ff fee7 	bl	80080f8 <sim7600_update_response>
      sim7600_usart_send_byte(data, data_length);
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	68b8      	ldr	r0, [r7, #8]
 800832e:	f000 f917 	bl	8008560 <sim7600_usart_send_byte>
      sim7600_send_packetStatus = 3;
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <sim7600_send_packet_ip+0xec>)
 8008334:	2203      	movs	r2, #3
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	e006      	b.n	8008348 <sim7600_send_packet_ip+0xa0>
    }
    else if(sim7600_send_packetStatus == 4) //success
 800833a:	4b16      	ldr	r3, [pc, #88]	; (8008394 <sim7600_send_packet_ip+0xec>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b04      	cmp	r3, #4
 8008340:	d102      	bne.n	8008348 <sim7600_send_packet_ip+0xa0>
    {
      //sim7600_send_packetStatus = 0;
      //release semaphore
      //osSemaphoreRelease(BinSemsim7600UartTxHandle);
      //return true;
      send_ip_packet_success = true;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
      break;
 8008346:	e005      	b.n	8008354 <sim7600_send_packet_ip+0xac>
    }
  } while (--try);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	3b01      	subs	r3, #1
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1df      	bne.n	8008314 <sim7600_send_packet_ip+0x6c>

  sim7600_send_packetStatus = 0;
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <sim7600_send_packet_ip+0xec>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]

  //if(!send_ip_packet_success)//can't send
  // sim7600_error = true;

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <sim7600_send_packet_ip+0xc8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f7fc fa5c 	bl	800481c <osSemaphoreRelease>

  return send_ip_packet_success;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200056d8 	.word	0x200056d8
 8008374:	0800a8ac 	.word	0x0800a8ac
 8008378:	0800a9bc 	.word	0x0800a9bc
 800837c:	20000074 	.word	0x20000074
 8008380:	20000010 	.word	0x20000010
 8008384:	0800a9c0 	.word	0x0800a9c0
 8008388:	20004268 	.word	0x20004268
 800838c:	0800a9dc 	.word	0x0800a9dc
 8008390:	0800a9f0 	.word	0x0800a9f0
 8008394:	200040d8 	.word	0x200040d8
 8008398:	0800a8b0 	.word	0x0800a8b0

0800839c <sim7600_keepAlive_udp>:

void sim7600_keepAlive_udp()
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  static int keep_alive_udp_error = 0;
  //static firstSendNum = 10;
  
  //send udp, tcp keep alive every 30s
  if(sim7600_udp_IsOpen)
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <sim7600_keepAlive_udp+0x4c>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00f      	beq.n	80083c8 <sim7600_keepAlive_udp+0x2c>
  {
    if(!sim7600_send_packet_ip(1, "00000002", 8)) keep_alive_udp_error++;
 80083a8:	2208      	movs	r2, #8
 80083aa:	4910      	ldr	r1, [pc, #64]	; (80083ec <sim7600_keepAlive_udp+0x50>)
 80083ac:	2001      	movs	r0, #1
 80083ae:	f7ff ff7b 	bl	80082a8 <sim7600_send_packet_ip>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f083 0301 	eor.w	r3, r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <sim7600_keepAlive_udp+0x2c>
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <sim7600_keepAlive_udp+0x54>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a0a      	ldr	r2, [pc, #40]	; (80083f0 <sim7600_keepAlive_udp+0x54>)
 80083c6:	6013      	str	r3, [r2, #0]
  }
  //after 2 time
  if(keep_alive_udp_error >= 2) 
 80083c8:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <sim7600_keepAlive_udp+0x54>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	dd08      	ble.n	80083e2 <sim7600_keepAlive_udp+0x46>
  {
    keep_alive_udp_error = 0; // reset
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <sim7600_keepAlive_udp+0x54>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
    sim7600_udp_IsOpen = false;
 80083d6:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <sim7600_keepAlive_udp+0x4c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
    sim7600_error= true;
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <sim7600_keepAlive_udp+0x58>)
 80083de:	2201      	movs	r2, #1
 80083e0:	701a      	strb	r2, [r3, #0]
  // {
  //   //reset
  //   firstSendNum = 10;
  //   osThreadSuspend(NULL); //self suspend
  // }
}
 80083e2:	bf00      	nop
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200040c7 	.word	0x200040c7
 80083ec:	0800aa04 	.word	0x0800aa04
 80083f0:	20004114 	.word	0x20004114
 80083f4:	200040c4 	.word	0x200040c4

080083f8 <sim7600_handle_error>:
}

//this function run in seperate task have highest priority
//error occur when network or tcp connect is close
void sim7600_handle_error()
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  if(sim7600_have_call)
 80083fc:	4b26      	ldr	r3, [pc, #152]	; (8008498 <sim7600_handle_error+0xa0>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <sim7600_handle_error+0x30>
  {
    sim7600_have_call = false;
 8008404:	4b24      	ldr	r3, [pc, #144]	; (8008498 <sim7600_handle_error+0xa0>)
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]

    //wait to aquire to send, wait until 
    osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreCallHangUp_wait_ms);
 800840a:	4b24      	ldr	r3, [pc, #144]	; (800849c <sim7600_handle_error+0xa4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008412:	4618      	mov	r0, r3
 8008414:	f7fc f9b4 	bl	8004780 <osSemaphoreWait>
    sim7600_usart_send_string("AT+CHUP\r\n");
 8008418:	4821      	ldr	r0, [pc, #132]	; (80084a0 <sim7600_handle_error+0xa8>)
 800841a:	f000 f891 	bl	8008540 <sim7600_usart_send_string>
    //release semaphore
    osSemaphoreRelease(BinSemsim7600UartTxHandle);
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <sim7600_handle_error+0xa4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7fc f9fa 	bl	800481c <osSemaphoreRelease>
  }
  if (sim7600_error)
 8008428:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <sim7600_handle_error+0xac>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d031      	beq.n	8008494 <sim7600_handle_error+0x9c>
  {
    //turn of led
    sim7600_tcp_led_status(0);
 8008430:	2140      	movs	r1, #64	; 0x40
 8008432:	481d      	ldr	r0, [pc, #116]	; (80084a8 <sim7600_handle_error+0xb0>)
 8008434:	f7ff fbf9 	bl	8007c2a <LL_GPIO_SetOutputPin>
    //check whether basic config is success?
    //if success, check network again, if network false, restart, if still work, open tcp and udp again (then return -> don not restart)
    if (Sim7600BasicConfigSuccess)
 8008438:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <sim7600_handle_error+0xb4>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01d      	beq.n	800847c <sim7600_handle_error+0x84>
    {
      //check network is open or closed(open again)
      if(!sim7600_network_IsOpen) sim7600_open_network();
 8008440:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <sim7600_handle_error+0xb8>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f083 0301 	eor.w	r3, r3, #1
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <sim7600_handle_error+0x5a>
 800844e:	f7ff fe89 	bl	8008164 <sim7600_open_network>

      //after above step if network open success, continue open tcp
      if (sim7600_network_IsOpen)
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <sim7600_handle_error+0xb8>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <sim7600_handle_error+0x84>
      {
        //network still open, check udp, tcp connect
        if(!sim7600_udp_IsOpen) sim7600_open_udp_connect();
 800845a:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <sim7600_handle_error+0xbc>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f083 0301 	eor.w	r3, r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <sim7600_handle_error+0x74>
 8008468:	f7ff fece 	bl	8008208 <sim7600_open_udp_connect>
        //if(!sim7600_tcp_IsOpen) sim7600_open_tcp_connect();
        if(sim7600_udp_IsOpen) sim7600_error = false;
 800846c:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <sim7600_handle_error+0xbc>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00e      	beq.n	8008492 <sim7600_handle_error+0x9a>
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <sim7600_handle_error+0xac>)
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
        return;
 800847a:	e00a      	b.n	8008492 <sim7600_handle_error+0x9a>
      }
    }

    //if basic config is not success or network false -> restart and config again
    //turn status (play->stop) and disable uart before restart
    sim7600_restart();
 800847c:	f000 fd44 	bl	8008f08 <sim7600_restart>
    if (sim7600_config())
 8008480:	f7ff fd78 	bl	8007f74 <sim7600_config>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <sim7600_handle_error+0x9c>
      sim7600_error = false;
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <sim7600_handle_error+0xac>)
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e000      	b.n	8008494 <sim7600_handle_error+0x9c>
        return;
 8008492:	bf00      	nop
  }

  //update led error
  //if sim7600_error == true, turn on and vice versa
}
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200040c8 	.word	0x200040c8
 800849c:	200056d8 	.word	0x200056d8
 80084a0:	0800aa50 	.word	0x0800aa50
 80084a4:	200040c4 	.word	0x200040c4
 80084a8:	40020000 	.word	0x40020000
 80084ac:	200040c9 	.word	0x200040c9
 80084b0:	200040c5 	.word	0x200040c5
 80084b4:	200040c7 	.word	0x200040c7

080084b8 <sim7600_send_cmd>:

//send command (auto add "\r\n"), with timeout, if > timeout -> reset by
int cmdSendStatus = 0; // 0: none, 1: sended, 2: ok
bool sim7600_send_cmd(const char *cmd, const char *response1, const char *response2, int timeout)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  //wait to aquire to update res
  osSemaphoreWait(BinSemsim7600UartTxHandle, semaphoreUART_TXwait_ms);
 80084c6:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <sim7600_send_cmd+0x7c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2164      	movs	r1, #100	; 0x64
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fc f957 	bl	8004780 <osSemaphoreWait>

  sim7600_update_response(response1, response2);
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	68b8      	ldr	r0, [r7, #8]
 80084d6:	f7ff fe0f 	bl	80080f8 <sim7600_update_response>
  int try = timeout / 50;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	4a16      	ldr	r2, [pc, #88]	; (8008538 <sim7600_send_cmd+0x80>)
 80084de:	fb82 1203 	smull	r1, r2, r2, r3
 80084e2:	1112      	asrs	r2, r2, #4
 80084e4:	17db      	asrs	r3, r3, #31
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	617b      	str	r3, [r7, #20]
  bool send_cmd_success = false;
 80084ea:	2300      	movs	r3, #0
 80084ec:	74fb      	strb	r3, [r7, #19]
  do
  {
    sim7600_usart_send_string(cmd);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f826 	bl	8008540 <sim7600_usart_send_string>

    cmdSendStatus = 1;
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <sim7600_send_cmd+0x84>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
    sim7600_delay_ms(50); //10ms receive max 100 bytes with baud = 115200
 80084fa:	2032      	movs	r0, #50	; 0x32
 80084fc:	f7ff fbb2 	bl	8007c64 <sim7600_delay_ms>
    if (cmdSendStatus == 2)
 8008500:	4b0e      	ldr	r3, [pc, #56]	; (800853c <sim7600_send_cmd+0x84>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d102      	bne.n	800850e <sim7600_send_cmd+0x56>
    {
    	//cmdSendStatus = 0; // reset
      //return true;
      send_cmd_success = true;
 8008508:	2301      	movs	r3, #1
 800850a:	74fb      	strb	r3, [r7, #19]
      break;
 800850c:	e005      	b.n	800851a <sim7600_send_cmd+0x62>
    }
  } while (--try);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3b01      	subs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e9      	bne.n	80084ee <sim7600_send_cmd+0x36>

  cmdSendStatus = 0; // reset
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <sim7600_send_cmd+0x84>)
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]

  //release semaphore
  osSemaphoreRelease(BinSemsim7600UartTxHandle);
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <sim7600_send_cmd+0x7c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f7fc f979 	bl	800481c <osSemaphoreRelease>

  return send_cmd_success;
 800852a:	7cfb      	ldrb	r3, [r7, #19]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200056d8 	.word	0x200056d8
 8008538:	51eb851f 	.word	0x51eb851f
 800853c:	200040e0 	.word	0x200040e0

08008540 <sim7600_usart_send_string>:

void sim7600_usart_send_string(const char *str)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  sim7600_usart_send_byte(str, strlen(str));
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f7 fe41 	bl	80001d0 <strlen>
 800854e:	4603      	mov	r3, r0
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f804 	bl	8008560 <sim7600_usart_send_byte>
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <sim7600_usart_send_byte>:
// __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
// {
//   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
// }
void sim7600_usart_send_byte(const void *data, int len)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  const uint8_t *d = data;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  for (; len > 0; --len, ++d)
 800856e:	e016      	b.n	800859e <sim7600_usart_send_byte+0x3e>
  {
    LL_USART_TransmitData8(usartSim7600, *d);
 8008570:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <sim7600_usart_send_byte+0x60>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7ff fb46 	bl	8007c0c <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TXE(usartSim7600));
 8008580:	bf00      	nop
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <sim7600_usart_send_byte+0x60>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fb0d 	bl	8007ba6 <LL_USART_IsActiveFlag_TXE>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f7      	beq.n	8008582 <sim7600_usart_send_byte+0x22>
  for (; len > 0; --len, ++d)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	3b01      	subs	r3, #1
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dce5      	bgt.n	8008570 <sim7600_usart_send_byte+0x10>
  }
  while (!LL_USART_IsActiveFlag_TC(usartSim7600));
 80085a4:	bf00      	nop
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <sim7600_usart_send_byte+0x60>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fae8 	bl	8007b80 <LL_USART_IsActiveFlag_TC>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f7      	beq.n	80085a6 <sim7600_usart_send_byte+0x46>
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	2000000c 	.word	0x2000000c

080085c4 <sim7600_usart_rx_check>:
// }
//0 1 2 3 4
static volatile int old_pos = 0;
volatile int pos = 0;
void sim7600_usart_rx_check()
{
 80085c4:	b598      	push	{r3, r4, r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* Calculate current position in buffer */
  pos = sim_dma_buffer_size - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 80085c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80085cc:	461c      	mov	r4, r3
 80085ce:	2102      	movs	r1, #2
 80085d0:	4834      	ldr	r0, [pc, #208]	; (80086a4 <sim7600_usart_rx_check+0xe0>)
 80085d2:	f7ff f855 	bl	8007680 <LL_DMA_GetDataLength>
 80085d6:	4603      	mov	r3, r0
 80085d8:	1ae3      	subs	r3, r4, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	4b32      	ldr	r3, [pc, #200]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 80085de:	601a      	str	r2, [r3, #0]
  //pos = sim_dma_buffer_size - dma_NDTR;
  if (pos != old_pos)
 80085e0:	4b31      	ldr	r3, [pc, #196]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	4b31      	ldr	r3, [pc, #196]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d059      	beq.n	80086a0 <sim7600_usart_rx_check+0xdc>
  { /* Check change in received data */
    if (pos > old_pos)
 80085ec:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b2e      	ldr	r3, [pc, #184]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	dd12      	ble.n	800861e <sim7600_usart_rx_check+0x5a>
    { /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      //usart_process_data(&usart_rx_dma_buffer[old_pos], pos - old_pos);
      sim_buff_length = pos - old_pos;
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	4a2b      	ldr	r2, [pc, #172]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 8008604:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <sim7600_usart_rx_check+0xf0>)
 800860e:	4413      	add	r3, r2
 8008610:	4a27      	ldr	r2, [pc, #156]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	4828      	ldr	r0, [pc, #160]	; (80086b8 <sim7600_usart_rx_check+0xf4>)
 8008618:	f000 fec0 	bl	800939c <memcpy>
 800861c:	e027      	b.n	800866e <sim7600_usart_rx_check+0xaa>
    }
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      sim_buff_length = sim_dma_buffer_size - old_pos;
 800861e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008622:	4b22      	ldr	r3, [pc, #136]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 800862a:	6013      	str	r3, [r2, #0]
      memcpy(sim_buff, sim_dma_buffer + old_pos, sim_buff_length);
 800862c:	4b1f      	ldr	r3, [pc, #124]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <sim7600_usart_rx_check+0xf0>)
 8008634:	4413      	add	r3, r2
 8008636:	4a1e      	ldr	r2, [pc, #120]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	4619      	mov	r1, r3
 800863c:	481e      	ldr	r0, [pc, #120]	; (80086b8 <sim7600_usart_rx_check+0xf4>)
 800863e:	f000 fead 	bl	800939c <memcpy>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8008642:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	dd11      	ble.n	800866e <sim7600_usart_rx_check+0xaa>
      {
        //usart_process_data(&usart_rx_dma_buffer[0], pos);
        memcpy(sim_buff + sim_buff_length, sim_dma_buffer, pos);
 800864a:	4b19      	ldr	r3, [pc, #100]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	4b19      	ldr	r3, [pc, #100]	; (80086b8 <sim7600_usart_rx_check+0xf4>)
 8008652:	4413      	add	r3, r2
 8008654:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	4916      	ldr	r1, [pc, #88]	; (80086b4 <sim7600_usart_rx_check+0xf0>)
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fe9e 	bl	800939c <memcpy>
        sim_buff_length += pos;
 8008660:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <sim7600_usart_rx_check+0xe4>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4413      	add	r3, r2
 800866a:	4a11      	ldr	r2, [pc, #68]	; (80086b0 <sim7600_usart_rx_check+0xec>)
 800866c:	6013      	str	r3, [r2, #0]
      }
    }
    //old_pos = pos; /* Save current position as old */
    old_pos += sim7600_handle_received_data();
 800866e:	f000 f86f 	bl	8008750 <sim7600_handle_received_data>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4413      	add	r3, r2
 800867a:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 800867c:	6013      	str	r3, [r2, #0]
    if(old_pos > sim_dma_buffer_size_minus_1) old_pos %= sim_dma_buffer_size; // ~ if(old_pos >= sim_dma_buffer_size) old_pos -= sim_dma_buffer_size;
 800867e:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f241 3287 	movw	r2, #4999	; 0x1387
 8008686:	4293      	cmp	r3, r2
 8008688:	dd0a      	ble.n	80086a0 <sim7600_usart_rx_check+0xdc>
 800868a:	4b08      	ldr	r3, [pc, #32]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	fb93 f1f2 	sdiv	r1, r3, r2
 8008696:	fb02 f201 	mul.w	r2, r2, r1
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	4a03      	ldr	r2, [pc, #12]	; (80086ac <sim7600_usart_rx_check+0xe8>)
 800869e:	6013      	str	r3, [r2, #0]
  }
}
 80086a0:	bf00      	nop
 80086a2:	bd98      	pop	{r3, r4, r7, pc}
 80086a4:	40026400 	.word	0x40026400
 80086a8:	200040e8 	.word	0x200040e8
 80086ac:	200040e4 	.word	0x200040e4
 80086b0:	200056b8 	.word	0x200056b8
 80086b4:	20004330 	.word	0x20004330
 80086b8:	20007af0 	.word	0x20007af0

080086bc <check_normal_response>:
int errorSizeFrameNum = 0, errorSizeFrameNum2 = 0;
int errorSizeFrame;

//return 0 ~ success + continue, 1~ no success,2 ~ return sim_buff_index, 3~not sastify response
__STATIC_INLINE int check_normal_response(const char* response, int* sim_buff_index ) //macro
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint8_t* posOfSubStr = strstr(sim_buff + (*sim_buff_index), response);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	4b1d      	ldr	r3, [pc, #116]	; (8008744 <check_normal_response+0x88>)
 80086ce:	4413      	add	r3, r2
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 ff3c 	bl	8009550 <strstr>
 80086d8:	60f8      	str	r0, [r7, #12]
  if(posOfSubStr != NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d02b      	beq.n	8008738 <check_normal_response+0x7c>
  {
    //check whether have \r\n at the end of this response
    posOfSubStr += strlen(response); //point to position right after the last character of response on sim_buff
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7f7 fd75 	bl	80001d0 <strlen>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
    //in the worst case the last character of response is last character of sim_buff
    // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
    uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 80086ee:	4916      	ldr	r1, [pc, #88]	; (8008748 <check_normal_response+0x8c>)
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 ff2d 	bl	8009550 <strstr>
 80086f6:	60b8      	str	r0, [r7, #8]
    if(pointerTo_r_n != NULL)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <check_normal_response+0x52>
    {
      //perfect sastified 
      //change sim_buff_index
      *sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4a10      	ldr	r2, [pc, #64]	; (8008744 <check_normal_response+0x88>)
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	601a      	str	r2, [r3, #0]
      return 0;
 800870a:	2300      	movs	r3, #0
 800870c:	e015      	b.n	800873a <check_normal_response+0x7e>
    }
    else if(posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case, have enough bytes but can't sastified
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <check_normal_response+0x90>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <check_normal_response+0x88>)
 800871c:	440b      	add	r3, r1
 800871e:	429a      	cmp	r2, r3
 8008720:	d208      	bcs.n	8008734 <check_normal_response+0x78>
    {
      //data may be error-bit 
      *sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a07      	ldr	r2, [pc, #28]	; (8008744 <check_normal_response+0x88>)
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	601a      	str	r2, [r3, #0]
      return 1;
 8008730:	2301      	movs	r3, #1
 8008732:	e002      	b.n	800873a <check_normal_response+0x7e>
    }
    else
      //return sim_buff_index; don't have enough data
      return 2;
 8008734:	2302      	movs	r3, #2
 8008736:	e000      	b.n	800873a <check_normal_response+0x7e>
  }
  return 3; 
 8008738:	2303      	movs	r3, #3
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20007af0 	.word	0x20007af0
 8008748:	0800aa5c 	.word	0x0800aa5c
 800874c:	200056b8 	.word	0x200056b8

08008750 <sim7600_handle_received_data>:

//return num of bytes handled
int sim7600_handle_received_data()
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af00      	add	r7, sp, #0
  //handle received data

  //make sure sim_buff is string
  sim_buff[sim_buff_length] = '\0'; //can do this since real size of sim_buff = sim_buff_size + 1, so even sim_buff_length (max) = sim_buff_size, it is still oke
 8008756:	4b91      	ldr	r3, [pc, #580]	; (800899c <sim7600_handle_received_data+0x24c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a91      	ldr	r2, [pc, #580]	; (80089a0 <sim7600_handle_received_data+0x250>)
 800875c:	2100      	movs	r1, #0
 800875e:	54d1      	strb	r1, [r2, r3]
  uint8_t *posOfSubStr;
  int sim_buff_index = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	603b      	str	r3, [r7, #0]

  memcpy(printf_buff, sim_buff, 19);
 8008764:	2213      	movs	r2, #19
 8008766:	498e      	ldr	r1, [pc, #568]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008768:	488e      	ldr	r0, [pc, #568]	; (80089a4 <sim7600_handle_received_data+0x254>)
 800876a:	f000 fe17 	bl	800939c <memcpy>
  printf("%s : %d", sim_buff, sim_buff_length);
 800876e:	4b8b      	ldr	r3, [pc, #556]	; (800899c <sim7600_handle_received_data+0x24c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	498a      	ldr	r1, [pc, #552]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008776:	488c      	ldr	r0, [pc, #560]	; (80089a8 <sim7600_handle_received_data+0x258>)
 8008778:	f000 fe26 	bl	80093c8 <iprintf>

  while (true)
  {
    posOfSubStr = NULL;
 800877c:	2300      	movs	r3, #0
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
    if(sim_buff_index >= sim_buff_length) return sim_buff_length;
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	4b86      	ldr	r3, [pc, #536]	; (800899c <sim7600_handle_received_data+0x24c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	db02      	blt.n	8008790 <sim7600_handle_received_data+0x40>
 800878a:	4b84      	ldr	r3, [pc, #528]	; (800899c <sim7600_handle_received_data+0x24c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	e1cb      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>

    //check cmd response
    if (cmdSendStatus || sim7600_open_tcp_connectStatus || sim7600_open_udp_connectStatus || sim7600_open_netStatus 
 8008790:	4b86      	ldr	r3, [pc, #536]	; (80089ac <sim7600_handle_received_data+0x25c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d110      	bne.n	80087ba <sim7600_handle_received_data+0x6a>
 8008798:	4b85      	ldr	r3, [pc, #532]	; (80089b0 <sim7600_handle_received_data+0x260>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10c      	bne.n	80087ba <sim7600_handle_received_data+0x6a>
 80087a0:	4b84      	ldr	r3, [pc, #528]	; (80089b4 <sim7600_handle_received_data+0x264>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <sim7600_handle_received_data+0x6a>
 80087a8:	4b83      	ldr	r3, [pc, #524]	; (80089b8 <sim7600_handle_received_data+0x268>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <sim7600_handle_received_data+0x6a>
      || sim7600_send_packetStatus)
 80087b0:	4b82      	ldr	r3, [pc, #520]	; (80089bc <sim7600_handle_received_data+0x26c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8084 	beq.w	80088c2 <sim7600_handle_received_data+0x172>
    {
      int resLengthTmp;
      if(res1 != NULL)
 80087ba:	4b81      	ldr	r3, [pc, #516]	; (80089c0 <sim7600_handle_received_data+0x270>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00d      	beq.n	80087de <sim7600_handle_received_data+0x8e>
      {
        posOfSubStr = strstr(sim_buff + sim_buff_index, res1);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b76      	ldr	r3, [pc, #472]	; (80089a0 <sim7600_handle_received_data+0x250>)
 80087c8:	4413      	add	r3, r2
 80087ca:	4a7d      	ldr	r2, [pc, #500]	; (80089c0 <sim7600_handle_received_data+0x270>)
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 febd 	bl	8009550 <strstr>
 80087d6:	6378      	str	r0, [r7, #52]	; 0x34
        resLengthTmp = res1Length;
 80087d8:	4b7a      	ldr	r3, [pc, #488]	; (80089c4 <sim7600_handle_received_data+0x274>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      if (posOfSubStr == NULL && res2 != NULL)
 80087de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d111      	bne.n	8008808 <sim7600_handle_received_data+0xb8>
 80087e4:	4b78      	ldr	r3, [pc, #480]	; (80089c8 <sim7600_handle_received_data+0x278>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00d      	beq.n	8008808 <sim7600_handle_received_data+0xb8>
      {
          posOfSubStr = strstr(sim_buff + sim_buff_index, res2);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b6b      	ldr	r3, [pc, #428]	; (80089a0 <sim7600_handle_received_data+0x250>)
 80087f2:	4413      	add	r3, r2
 80087f4:	4a74      	ldr	r2, [pc, #464]	; (80089c8 <sim7600_handle_received_data+0x278>)
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fea8 	bl	8009550 <strstr>
 8008800:	6378      	str	r0, [r7, #52]	; 0x34
          resLengthTmp = res2Length;
 8008802:	4b72      	ldr	r3, [pc, #456]	; (80089cc <sim7600_handle_received_data+0x27c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
      }
      if (posOfSubStr != NULL)
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	2b00      	cmp	r3, #0
 800880c:	d059      	beq.n	80088c2 <sim7600_handle_received_data+0x172>
      {
        //check whether have \r\n at the end of this response
        posOfSubStr += resLengthTmp - 1; //point to the last charater of respose
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	3b01      	subs	r3, #1
 8008812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008814:	4413      	add	r3, r2
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n");
 8008818:	496d      	ldr	r1, [pc, #436]	; (80089d0 <sim7600_handle_received_data+0x280>)
 800881a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800881c:	f000 fe98 	bl	8009550 <strstr>
 8008820:	62b8      	str	r0, [r7, #40]	; 0x28
        if(pointerTo_r_n != NULL)
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	2b00      	cmp	r3, #0
 8008826:	d03a      	beq.n	800889e <sim7600_handle_received_data+0x14e>
        {
          if (cmdSendStatus == 1)
 8008828:	4b60      	ldr	r3, [pc, #384]	; (80089ac <sim7600_handle_received_data+0x25c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d103      	bne.n	8008838 <sim7600_handle_received_data+0xe8>
            cmdSendStatus = 2;
 8008830:	4b5e      	ldr	r3, [pc, #376]	; (80089ac <sim7600_handle_received_data+0x25c>)
 8008832:	2202      	movs	r2, #2
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e026      	b.n	8008886 <sim7600_handle_received_data+0x136>
          else if (sim7600_open_tcp_connectStatus == 1)
 8008838:	4b5d      	ldr	r3, [pc, #372]	; (80089b0 <sim7600_handle_received_data+0x260>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d103      	bne.n	8008848 <sim7600_handle_received_data+0xf8>
            sim7600_open_tcp_connectStatus = 2;
 8008840:	4b5b      	ldr	r3, [pc, #364]	; (80089b0 <sim7600_handle_received_data+0x260>)
 8008842:	2202      	movs	r2, #2
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	e01e      	b.n	8008886 <sim7600_handle_received_data+0x136>
          else if (sim7600_open_udp_connectStatus == 1)
 8008848:	4b5a      	ldr	r3, [pc, #360]	; (80089b4 <sim7600_handle_received_data+0x264>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d103      	bne.n	8008858 <sim7600_handle_received_data+0x108>
            sim7600_open_udp_connectStatus = 2;
 8008850:	4b58      	ldr	r3, [pc, #352]	; (80089b4 <sim7600_handle_received_data+0x264>)
 8008852:	2202      	movs	r2, #2
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e016      	b.n	8008886 <sim7600_handle_received_data+0x136>
          else if (sim7600_open_netStatus == 1)
 8008858:	4b57      	ldr	r3, [pc, #348]	; (80089b8 <sim7600_handle_received_data+0x268>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d103      	bne.n	8008868 <sim7600_handle_received_data+0x118>
            sim7600_open_netStatus = 2;
 8008860:	4b55      	ldr	r3, [pc, #340]	; (80089b8 <sim7600_handle_received_data+0x268>)
 8008862:	2202      	movs	r2, #2
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e00e      	b.n	8008886 <sim7600_handle_received_data+0x136>
          else if (sim7600_send_packetStatus == 1)
 8008868:	4b54      	ldr	r3, [pc, #336]	; (80089bc <sim7600_handle_received_data+0x26c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d103      	bne.n	8008878 <sim7600_handle_received_data+0x128>
            sim7600_send_packetStatus = 2;
 8008870:	4b52      	ldr	r3, [pc, #328]	; (80089bc <sim7600_handle_received_data+0x26c>)
 8008872:	2202      	movs	r2, #2
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e006      	b.n	8008886 <sim7600_handle_received_data+0x136>
          else if (sim7600_send_packetStatus == 3)
 8008878:	4b50      	ldr	r3, [pc, #320]	; (80089bc <sim7600_handle_received_data+0x26c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b03      	cmp	r3, #3
 800887e:	d102      	bne.n	8008886 <sim7600_handle_received_data+0x136>
            sim7600_send_packetStatus = 4;
 8008880:	4b4e      	ldr	r3, [pc, #312]	; (80089bc <sim7600_handle_received_data+0x26c>)
 8008882:	2204      	movs	r2, #4
 8008884:	601a      	str	r2, [r3, #0]
          res1 = NULL;
 8008886:	4b4e      	ldr	r3, [pc, #312]	; (80089c0 <sim7600_handle_received_data+0x270>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
          res2 = NULL;
 800888c:	4b4e      	ldr	r3, [pc, #312]	; (80089c8 <sim7600_handle_received_data+0x278>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
          //change sim_buff_index
          sim_buff_index = pointerTo_r_n - sim_buff + 2; // + 2 for "\r\n"
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	4a42      	ldr	r2, [pc, #264]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	3302      	adds	r3, #2
 800889a:	603b      	str	r3, [r7, #0]
          continue;
 800889c:	e142      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
        }
        else if(posOfSubStr + max_data_length_of_response_r_n < sim_buff + sim_buff_length) //the worst case
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80088a4:	4b3d      	ldr	r3, [pc, #244]	; (800899c <sim7600_handle_received_data+0x24c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	4b3d      	ldr	r3, [pc, #244]	; (80089a0 <sim7600_handle_received_data+0x250>)
 80088ac:	440b      	add	r3, r1
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d205      	bcs.n	80088be <sim7600_handle_received_data+0x16e>
        {
          //data may be error-bit 
          sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	4a3a      	ldr	r2, [pc, #232]	; (80089a0 <sim7600_handle_received_data+0x250>)
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	3364      	adds	r3, #100	; 0x64
 80088ba:	603b      	str	r3, [r7, #0]
          continue;
 80088bc:	e132      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
        }
        else //don't have enough data
          return sim_buff_index;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	e132      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>
    //sms (reserved)

    //call (reserved)

    /// new receive UDP///////
    const char *receiveUdpRes = "+RECEIVE,1,";
 80088c2:	4b44      	ldr	r3, [pc, #272]	; (80089d4 <sim7600_handle_received_data+0x284>)
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
    posOfSubStr = strstr(sim_buff + sim_buff_index, receiveUdpRes);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	4b35      	ldr	r3, [pc, #212]	; (80089a0 <sim7600_handle_received_data+0x250>)
 80088cc:	4413      	add	r3, r2
 80088ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fe3d 	bl	8009550 <strstr>
 80088d6:	6378      	str	r0, [r7, #52]	; 0x34
    if (posOfSubStr != NULL) //receive something from UDP port
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d07c      	beq.n	80089d8 <sim7600_handle_received_data+0x288>
    {
      //check whether have \r\n at buffer
      posOfSubStr += strlen(receiveUdpRes); //point to lenght of udp packet (right after ",1,")
 80088de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088e0:	f7f7 fc76 	bl	80001d0 <strlen>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	4413      	add	r3, r2
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint8_t* pointerTo_r_n = strstr(posOfSubStr, "\r\n"); //point to '\r'
 80088ec:	4938      	ldr	r1, [pc, #224]	; (80089d0 <sim7600_handle_received_data+0x280>)
 80088ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088f0:	f000 fe2e 	bl	8009550 <strstr>
 80088f4:	60b8      	str	r0, [r7, #8]
      //in the worst case ',' after  "+RECEIVE,1" is last character of sim_buff
      // ->  posOfSubStr point to sim_buff[sim_buff_length] = '\0' (initialize above) -> pointerTo_r_n == NULL
      if (pointerTo_r_n != NULL)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d03d      	beq.n	8008978 <sim7600_handle_received_data+0x228>
      {
        int lengthOfUdpPacket = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (posOfSubStr != pointerTo_r_n) //make sure break when meet '\r'
 8008900:	e01c      	b.n	800893c <sim7600_handle_received_data+0x1ec>
        {
          char numberTmp = (*posOfSubStr);
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	71fb      	strb	r3, [r7, #7]
          if (numberTmp >= '0' && numberTmp <= '9')
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b2f      	cmp	r3, #47	; 0x2f
 800890c:	d910      	bls.n	8008930 <sim7600_handle_received_data+0x1e0>
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	2b39      	cmp	r3, #57	; 0x39
 8008912:	d80d      	bhi.n	8008930 <sim7600_handle_received_data+0x1e0>
          {
            lengthOfUdpPacket = lengthOfUdpPacket * 10 + numberTmp - '0';
 8008914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	461a      	mov	r2, r3
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	4413      	add	r3, r2
 8008924:	3b30      	subs	r3, #48	; 0x30
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
          else //data maybe bit-error
          {
            sim_buff_index = pointerTo_r_n - sim_buff + 2;// +2 since "\r\n"
            continue;
          }
          posOfSubStr++;
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	3301      	adds	r3, #1
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
 800892e:	e005      	b.n	800893c <sim7600_handle_received_data+0x1ec>
            sim_buff_index = pointerTo_r_n - sim_buff + 2;// +2 since "\r\n"
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	3302      	adds	r3, #2
 8008938:	603b      	str	r3, [r7, #0]
            continue;
 800893a:	bf00      	nop
        while (posOfSubStr != pointerTo_r_n) //make sure break when meet '\r'
 800893c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	429a      	cmp	r2, r3
 8008942:	d1de      	bne.n	8008902 <sim7600_handle_received_data+0x1b2>
        }
        posOfSubStr += 2; //point to data
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	3302      	adds	r3, #2
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
        if(posOfSubStr + lengthOfUdpPacket > sim_buff + sim_buff_length) // don't have enough data
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800894e:	441a      	add	r2, r3
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <sim7600_handle_received_data+0x24c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4619      	mov	r1, r3
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008958:	440b      	add	r3, r1
 800895a:	429a      	cmp	r2, r3
 800895c:	d901      	bls.n	8008962 <sim7600_handle_received_data+0x212>
          return sim_buff_index;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	e0e2      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>
        //else data is sastified
        sim7600_handle_udp_packet(posOfSubStr, lengthOfUdpPacket);
 8008962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008964:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008966:	f000 f8f5 	bl	8008b54 <sim7600_handle_udp_packet>
        sim_buff_index = posOfSubStr - sim_buff + lengthOfUdpPacket;
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <sim7600_handle_received_data+0x250>)
 800896e:	1a9a      	subs	r2, r3, r2
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	4413      	add	r3, r2
 8008974:	603b      	str	r3, [r7, #0]
        continue;
 8008976:	e0d5      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
      }
      else if(posOfSubStr + 6 < sim_buff + sim_buff_length) //the worst case: +RECEIVE,1,9999\r\n
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	1d9a      	adds	r2, r3, #6
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <sim7600_handle_received_data+0x24c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4619      	mov	r1, r3
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <sim7600_handle_received_data+0x250>)
 8008984:	440b      	add	r3, r1
 8008986:	429a      	cmp	r2, r3
 8008988:	d205      	bcs.n	8008996 <sim7600_handle_received_data+0x246>
      {
        //data may be error-bit 
        sim_buff_index = posOfSubStr - sim_buff + 6;
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <sim7600_handle_received_data+0x250>)
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	3306      	adds	r3, #6
 8008992:	603b      	str	r3, [r7, #0]
        continue;
 8008994:	e0c6      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
      }
      else 
        return sim_buff_index;  //dont have enough data
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	e0c6      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>
 800899a:	bf00      	nop
 800899c:	200056b8 	.word	0x200056b8
 80089a0:	20007af0 	.word	0x20007af0
 80089a4:	200056c4 	.word	0x200056c4
 80089a8:	0800aa60 	.word	0x0800aa60
 80089ac:	200040e0 	.word	0x200040e0
 80089b0:	200040dc 	.word	0x200040dc
 80089b4:	200040d4 	.word	0x200040d4
 80089b8:	200040d0 	.word	0x200040d0
 80089bc:	200040d8 	.word	0x200040d8
 80089c0:	2000418c 	.word	0x2000418c
 80089c4:	20004194 	.word	0x20004194
 80089c8:	20004188 	.word	0x20004188
 80089cc:	200041a0 	.word	0x200041a0
 80089d0:	0800aa5c 	.word	0x0800aa5c
 80089d4:	0800aa68 	.word	0x0800aa68
    int resultTmp;

    //received error
    //when network error (many reason, one of those is "sim not found") : \r\n+CIPEVENT: NETWORK CLOSED UNEXPECTEDLY
    //then restart module with pwr or rst pin
    const char* netErrorRes = "+CIPEVENT: NETWORK CLOSED UNEXPECTEDLY";
 80089d8:	4b55      	ldr	r3, [pc, #340]	; (8008b30 <sim7600_handle_received_data+0x3e0>)
 80089da:	623b      	str	r3, [r7, #32]
    resultTmp = check_normal_response(netErrorRes, &sim_buff_index);
 80089dc:	463b      	mov	r3, r7
 80089de:	4619      	mov	r1, r3
 80089e0:	6a38      	ldr	r0, [r7, #32]
 80089e2:	f7ff fe6b 	bl	80086bc <check_normal_response>
 80089e6:	61f8      	str	r0, [r7, #28]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d017      	beq.n	8008a1e <sim7600_handle_received_data+0x2ce>
    else if(resultTmp == 0) // success find
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <sim7600_handle_received_data+0x2be>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_network_IsOpen = false;
 80089f4:	4b4f      	ldr	r3, [pc, #316]	; (8008b34 <sim7600_handle_received_data+0x3e4>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
      sim7600_udp_IsOpen = false;
 80089fa:	4b4f      	ldr	r3, [pc, #316]	; (8008b38 <sim7600_handle_received_data+0x3e8>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]
      sim7600_tcp_IsOpen = false;
 8008a00:	4b4e      	ldr	r3, [pc, #312]	; (8008b3c <sim7600_handle_received_data+0x3ec>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]

      sim7600_error = true;
 8008a06:	4b4e      	ldr	r3, [pc, #312]	; (8008b40 <sim7600_handle_received_data+0x3f0>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
      continue;
 8008a0c:	e08a      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d07e      	beq.n	8008b12 <sim7600_handle_received_data+0x3c2>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d101      	bne.n	8008a1e <sim7600_handle_received_data+0x2ce>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	e084      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>

    // //when tcp connect is close +IPCLOSE: 0
    const char* tcpErrorRes = "\r\n+IPCLOSE: 0";
 8008a1e:	4b49      	ldr	r3, [pc, #292]	; (8008b44 <sim7600_handle_received_data+0x3f4>)
 8008a20:	61bb      	str	r3, [r7, #24]
    //   //sim7600 error, handle in a task sim7600 config task
    //   sim7600_tcp_IsOpen = false;
    //   sim7600_error = true;
    //   //return;
    // }
    resultTmp = check_normal_response(tcpErrorRes, &sim_buff_index);
 8008a22:	463b      	mov	r3, r7
 8008a24:	4619      	mov	r1, r3
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f7ff fe48 	bl	80086bc <check_normal_response>
 8008a2c:	61f8      	str	r0, [r7, #28]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d011      	beq.n	8008a58 <sim7600_handle_received_data+0x308>
    else if(resultTmp == 0) // success find
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <sim7600_handle_received_data+0x2f8>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_tcp_IsOpen = false;
 8008a3a:	4b40      	ldr	r3, [pc, #256]	; (8008b3c <sim7600_handle_received_data+0x3ec>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
      sim7600_error = true;
 8008a40:	4b3f      	ldr	r3, [pc, #252]	; (8008b40 <sim7600_handle_received_data+0x3f0>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
      continue;
 8008a46:	e06d      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d063      	beq.n	8008b16 <sim7600_handle_received_data+0x3c6>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d101      	bne.n	8008a58 <sim7600_handle_received_data+0x308>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	e067      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>

    // //when udp connect is close +IPCLOSE: 1
    const char* udpErrorRes = "\r\n+IPCLOSE: 1";
 8008a58:	4b3b      	ldr	r3, [pc, #236]	; (8008b48 <sim7600_handle_received_data+0x3f8>)
 8008a5a:	617b      	str	r3, [r7, #20]
    //   //sim7600 error, handle in a task sim7600 config task
    //   sim7600_udp_IsOpen = false;
    //   sim7600_error = true;
    //   return;
    // }
    resultTmp = check_normal_response(udpErrorRes, &sim_buff_index);
 8008a5c:	463b      	mov	r3, r7
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6978      	ldr	r0, [r7, #20]
 8008a62:	f7ff fe2b 	bl	80086bc <check_normal_response>
 8008a66:	61f8      	str	r0, [r7, #28]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d011      	beq.n	8008a92 <sim7600_handle_received_data+0x342>
    else if(resultTmp == 0) // success find
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <sim7600_handle_received_data+0x332>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_udp_IsOpen = false;
 8008a74:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <sim7600_handle_received_data+0x3e8>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
      sim7600_error = true;
 8008a7a:	4b31      	ldr	r3, [pc, #196]	; (8008b40 <sim7600_handle_received_data+0x3f0>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
      continue;
 8008a80:	e050      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d048      	beq.n	8008b1a <sim7600_handle_received_data+0x3ca>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d101      	bne.n	8008a92 <sim7600_handle_received_data+0x342>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	e04a      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>

    // //+CIPOPEN: 0,2
    // //tcp connect can't open since network is close
    const char* netTcpCloseRes = "\r\n+CIPOPEN: 0,2";
 8008a92:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <sim7600_handle_received_data+0x3fc>)
 8008a94:	613b      	str	r3, [r7, #16]
    //   sim7600_network_IsOpen = false;
    //   sim7600_tcp_IsOpen = false;
    //   sim7600_error = true;
    //   return;
    // }
    resultTmp = check_normal_response(netTcpCloseRes, &sim_buff_index);
 8008a96:	463b      	mov	r3, r7
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6938      	ldr	r0, [r7, #16]
 8008a9c:	f7ff fe0e 	bl	80086bc <check_normal_response>
 8008aa0:	61f8      	str	r0, [r7, #28]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d014      	beq.n	8008ad2 <sim7600_handle_received_data+0x382>
    else if(resultTmp == 0) // success find
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <sim7600_handle_received_data+0x372>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_network_IsOpen = false;
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <sim7600_handle_received_data+0x3e4>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
      sim7600_tcp_IsOpen = false;
 8008ab4:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <sim7600_handle_received_data+0x3ec>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
      sim7600_error = true;
 8008aba:	4b21      	ldr	r3, [pc, #132]	; (8008b40 <sim7600_handle_received_data+0x3f0>)
 8008abc:	2201      	movs	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
      continue;
 8008ac0:	e030      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d02a      	beq.n	8008b1e <sim7600_handle_received_data+0x3ce>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d101      	bne.n	8008ad2 <sim7600_handle_received_data+0x382>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	e02a      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>

    // //+CIPOPEN: 1,2
    // //udp connect can't open since network is close
    const char* netUdpCloseRes = "\r\n+CIPOPEN: 1,2";
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <sim7600_handle_received_data+0x400>)
 8008ad4:	60fb      	str	r3, [r7, #12]
    //   sim7600_network_IsOpen = false;
    //   sim7600_udp_IsOpen = false;
    //   sim7600_error = true;
    //   return;
    // }
    resultTmp = check_normal_response(netUdpCloseRes, &sim_buff_index);
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	4619      	mov	r1, r3
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fdee 	bl	80086bc <check_normal_response>
 8008ae0:	61f8      	str	r0, [r7, #28]
    if(resultTmp == 3){} //reponse can't find -> do nothing
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d01e      	beq.n	8008b26 <sim7600_handle_received_data+0x3d6>
    else if(resultTmp == 0) // success find
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d109      	bne.n	8008b02 <sim7600_handle_received_data+0x3b2>
    {
      //sim7600 error, handle in a task sim7600 config task
      sim7600_network_IsOpen = false;
 8008aee:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <sim7600_handle_received_data+0x3e4>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
      sim7600_udp_IsOpen = false;
 8008af4:	4b10      	ldr	r3, [pc, #64]	; (8008b38 <sim7600_handle_received_data+0x3e8>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
      sim7600_error = true;
 8008afa:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <sim7600_handle_received_data+0x3f0>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	701a      	strb	r2, [r3, #0]
      continue;
 8008b00:	e010      	b.n	8008b24 <sim7600_handle_received_data+0x3d4>
    }
    //data maybe bit-error sim_buff_index = posOfSubStr - sim_buff + max_data_length_of_response_r_n;
    else if(resultTmp == 1) continue;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d00c      	beq.n	8008b22 <sim7600_handle_received_data+0x3d2>
    //dont have enough data
    else if(resultTmp == 2) return sim_buff_index;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d10b      	bne.n	8008b26 <sim7600_handle_received_data+0x3d6>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	e00a      	b.n	8008b28 <sim7600_handle_received_data+0x3d8>
    else if(resultTmp == 1) continue;
 8008b12:	bf00      	nop
 8008b14:	e632      	b.n	800877c <sim7600_handle_received_data+0x2c>
    else if(resultTmp == 1) continue;
 8008b16:	bf00      	nop
 8008b18:	e630      	b.n	800877c <sim7600_handle_received_data+0x2c>
    else if(resultTmp == 1) continue;
 8008b1a:	bf00      	nop
 8008b1c:	e62e      	b.n	800877c <sim7600_handle_received_data+0x2c>
    else if(resultTmp == 1) continue;
 8008b1e:	bf00      	nop
 8008b20:	e62c      	b.n	800877c <sim7600_handle_received_data+0x2c>
    else if(resultTmp == 1) continue;
 8008b22:	bf00      	nop
  {
 8008b24:	e62a      	b.n	800877c <sim7600_handle_received_data+0x2c>
    //   //sim7600 error, handle in a task sim7600 config task
    //   sim7600_have_call = true;
    //   return;
    // }

    break;
 8008b26:	bf00      	nop
  }
  
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3738      	adds	r7, #56	; 0x38
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0800aa74 	.word	0x0800aa74
 8008b34:	200040c5 	.word	0x200040c5
 8008b38:	200040c7 	.word	0x200040c7
 8008b3c:	200040c6 	.word	0x200040c6
 8008b40:	200040c4 	.word	0x200040c4
 8008b44:	0800aa9c 	.word	0x0800aa9c
 8008b48:	0800aaac 	.word	0x0800aaac
 8008b4c:	0800aabc 	.word	0x0800aabc
 8008b50:	0800aacc 	.word	0x0800aacc

08008b54 <sim7600_handle_udp_packet>:
int late_frame = 0;
int old_ID_frame = 0;
int songID = 0, IDframePlayed = 0;
bool IsPlaying = false;
void sim7600_handle_udp_packet(uint8_t* udpPacket, int length)
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b089      	sub	sp, #36	; 0x24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
 packetMP3HeaderStruct *packetMP3Header = (packetMP3HeaderStruct*)udpPacket;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	61bb      	str	r3, [r7, #24]
  //check sum to confirm it is head of a packet
  if (packetMP3Header->checkSumHeader == sim7600_check_sum_data(udpPacket + 2, length - 2))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29c      	uxth	r4, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	1c9a      	adds	r2, r3, #2
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	3b02      	subs	r3, #2
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f000 f94c 	bl	8008e10 <sim7600_check_sum_data>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	429c      	cmp	r4, r3
 8008b7c:	f040 80af 	bne.w	8008cde <sim7600_handle_udp_packet+0x18a>
  {
    numOfPacketUDPReceived++;
 8008b80:	4b5b      	ldr	r3, [pc, #364]	; (8008cf0 <sim7600_handle_udp_packet+0x19c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a5a      	ldr	r2, [pc, #360]	; (8008cf0 <sim7600_handle_udp_packet+0x19c>)
 8008b88:	6013      	str	r3, [r2, #0]

    //wait to aquire to update res
    osSemaphoreWait(BinSemPlayMp3Handle, semaphorePlayMp3_wait_ms);
 8008b8a:	4b5a      	ldr	r3, [pc, #360]	; (8008cf4 <sim7600_handle_udp_packet+0x1a0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	210a      	movs	r1, #10
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fb fdf5 	bl	8004780 <osSemaphoreWait>

    if (packetMP3Header->songID != songID)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8008b9c:	4b56      	ldr	r3, [pc, #344]	; (8008cf8 <sim7600_handle_udp_packet+0x1a4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d021      	beq.n	8008be8 <sim7600_handle_udp_packet+0x94>
    {
      songID = packetMP3Header->songID;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8008baa:	4a53      	ldr	r2, [pc, #332]	; (8008cf8 <sim7600_handle_udp_packet+0x1a4>)
 8008bac:	6013      	str	r3, [r2, #0]
      //clear status of mp3Packet
      int i, limit = mp3PacketSize;
 8008bae:	2314      	movs	r3, #20
 8008bb0:	617b      	str	r3, [r7, #20]
      for (i = 0; i < limit; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	e00d      	b.n	8008bd4 <sim7600_handle_udp_packet+0x80>
        mp3Packet[i].IsEmpty = true;
 8008bb8:	4a50      	ldr	r2, [pc, #320]	; (8008cfc <sim7600_handle_udp_packet+0x1a8>)
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < limit; i++)
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	dbed      	blt.n	8008bb8 <sim7600_handle_udp_packet+0x64>
      IDframePlayed = 0;
 8008bdc:	4b48      	ldr	r3, [pc, #288]	; (8008d00 <sim7600_handle_udp_packet+0x1ac>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
      old_ID_frame = 0;
 8008be2:	4b48      	ldr	r3, [pc, #288]	; (8008d04 <sim7600_handle_udp_packet+0x1b0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
    }

    uint32_t IDtmp = packetMP3Header->IDframe;
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008bee:	613b      	str	r3, [r7, #16]
    if (IDtmp > old_ID_frame)
 8008bf0:	4b44      	ldr	r3, [pc, #272]	; (8008d04 <sim7600_handle_udp_packet+0x1b0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d90f      	bls.n	8008c1c <sim7600_handle_udp_packet+0xc8>
    {
      miss_frame += IDtmp - old_ID_frame - 1;
 8008bfc:	4b41      	ldr	r3, [pc, #260]	; (8008d04 <sim7600_handle_udp_packet+0x1b0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	4a40      	ldr	r2, [pc, #256]	; (8008d08 <sim7600_handle_udp_packet+0x1b4>)
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	461a      	mov	r2, r3
 8008c10:	4b3d      	ldr	r3, [pc, #244]	; (8008d08 <sim7600_handle_udp_packet+0x1b4>)
 8008c12:	601a      	str	r2, [r3, #0]
      old_ID_frame = IDtmp;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	4a3b      	ldr	r2, [pc, #236]	; (8008d04 <sim7600_handle_udp_packet+0x1b0>)
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e004      	b.n	8008c26 <sim7600_handle_udp_packet+0xd2>
    }
    else
    {
      late_frame++;
 8008c1c:	4b3b      	ldr	r3, [pc, #236]	; (8008d0c <sim7600_handle_udp_packet+0x1b8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	4a3a      	ldr	r2, [pc, #232]	; (8008d0c <sim7600_handle_udp_packet+0x1b8>)
 8008c24:	6013      	str	r3, [r2, #0]
    }

    //copy frame
    int index_mp3_packet = packetMP3Header->IDframe % mp3PacketSize;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008c2c:	4b38      	ldr	r3, [pc, #224]	; (8008d10 <sim7600_handle_udp_packet+0x1bc>)
 8008c2e:	fb83 1302 	smull	r1, r3, r3, r2
 8008c32:	10d9      	asrs	r1, r3, #3
 8008c34:	17d3      	asrs	r3, r2, #31
 8008c36:	1ac9      	subs	r1, r1, r3
 8008c38:	460b      	mov	r3, r1
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	60fb      	str	r3, [r7, #12]
    if (mp3Packet[index_mp3_packet].IsEmpty == true)
 8008c44:	4a2d      	ldr	r2, [pc, #180]	; (8008cfc <sim7600_handle_udp_packet+0x1a8>)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008c4c:	fb01 f303 	mul.w	r3, r1, r3
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02a      	beq.n	8008cb2 <sim7600_handle_udp_packet+0x15e>
    {
      //clear first
      int adu_length = length - packetMP3HeaderLength;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	3b0a      	subs	r3, #10
 8008c60:	60bb      	str	r3, [r7, #8]
      memset(mp3Packet[index_mp3_packet].frames + adu_length, 0, mp3PacketFrameSize - adu_length);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008c68:	fb02 f303 	mul.w	r3, r2, r3
 8008c6c:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <sim7600_handle_udp_packet+0x1a8>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	18d0      	adds	r0, r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	f000 fb9b 	bl	80093b8 <memset>
      memcpy(mp3Packet[index_mp3_packet].frames, packetMP3Header->frame, adu_length);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008c88:	fb02 f303 	mul.w	r3, r2, r3
 8008c8c:	4a1b      	ldr	r2, [pc, #108]	; (8008cfc <sim7600_handle_udp_packet+0x1a8>)
 8008c8e:	1898      	adds	r0, r3, r2
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	330a      	adds	r3, #10
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	4619      	mov	r1, r3
 8008c98:	f000 fb80 	bl	800939c <memcpy>
      mp3Packet[index_mp3_packet].IsEmpty = false;
 8008c9c:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <sim7600_handle_udp_packet+0x1a8>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008ca4:	fb01 f303 	mul.w	r3, r1, r3
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
    }
    //release semaphore
    osSemaphoreRelease(BinSemPlayMp3Handle);
 8008cb2:	4b10      	ldr	r3, [pc, #64]	; (8008cf4 <sim7600_handle_udp_packet+0x1a0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fb fdb0 	bl	800481c <osSemaphoreRelease>

    if (!IsPlaying && numOfPacketUDPReceived > 10)
 8008cbc:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <sim7600_handle_udp_packet+0x1c0>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f083 0301 	eor.w	r3, r3, #1
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00e      	beq.n	8008ce8 <sim7600_handle_udp_packet+0x194>
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <sim7600_handle_udp_packet+0x19c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b0a      	cmp	r3, #10
 8008cd0:	dd0a      	ble.n	8008ce8 <sim7600_handle_udp_packet+0x194>
    {
      IsPlaying = true;
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <sim7600_handle_udp_packet+0x1c0>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	701a      	strb	r2, [r3, #0]
      playMp3DMA();
 8008cd8:	f000 f820 	bl	8008d1c <playMp3DMA>
  }
  else
  {
	  error_frame++;
  }
}
 8008cdc:	e004      	b.n	8008ce8 <sim7600_handle_udp_packet+0x194>
	  error_frame++;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <sim7600_handle_udp_packet+0x1c4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <sim7600_handle_udp_packet+0x1c4>)
 8008ce6:	6013      	str	r3, [r2, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	; 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd90      	pop	{r4, r7, pc}
 8008cf0:	200040ec 	.word	0x200040ec
 8008cf4:	200056c0 	.word	0x200056c0
 8008cf8:	20004100 	.word	0x20004100
 8008cfc:	200056dc 	.word	0x200056dc
 8008d00:	20004104 	.word	0x20004104
 8008d04:	200040fc 	.word	0x200040fc
 8008d08:	200040f4 	.word	0x200040f4
 8008d0c:	200040f8 	.word	0x200040f8
 8008d10:	66666667 	.word	0x66666667
 8008d14:	20004108 	.word	0x20004108
 8008d18:	200040f0 	.word	0x200040f0

08008d1c <playMp3DMA>:

int playPacketIndex = 0;
uint8_t playBuff[mp3PacketFrameSize];
int miss_adu = 0;
void playMp3DMA()
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  

  if(mp3Packet[playPacketIndex].IsEmpty == false)
 8008d20:	4b35      	ldr	r3, [pc, #212]	; (8008df8 <playMp3DMA+0xdc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a35      	ldr	r2, [pc, #212]	; (8008dfc <playMp3DMA+0xe0>)
 8008d26:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f083 0301 	eor.w	r3, r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d03d      	beq.n	8008dbc <playMp3DMA+0xa0>
  {
    //wait to aquire to update res
    osSemaphoreWait(BinSemPlayMp3Handle, semaphorePlayMp3_wait_ms);
 8008d40:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <playMp3DMA+0xe4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	210a      	movs	r1, #10
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fb fd1a 	bl	8004780 <osSemaphoreWait>

    memcpy(playBuff, mp3Packet[playPacketIndex].frames, mp3PacketFrameSize);
 8008d4c:	4b2a      	ldr	r3, [pc, #168]	; (8008df8 <playMp3DMA+0xdc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	4a28      	ldr	r2, [pc, #160]	; (8008dfc <playMp3DMA+0xe0>)
 8008d5a:	4413      	add	r3, r2
 8008d5c:	4a29      	ldr	r2, [pc, #164]	; (8008e04 <playMp3DMA+0xe8>)
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8008d66:	461a      	mov	r2, r3
 8008d68:	f000 fb18 	bl	800939c <memcpy>
    mp3Packet[playPacketIndex].IsEmpty = true;
 8008d6c:	4b22      	ldr	r3, [pc, #136]	; (8008df8 <playMp3DMA+0xdc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <playMp3DMA+0xe0>)
 8008d72:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008d80:	2201      	movs	r2, #1
 8008d82:	701a      	strb	r2, [r3, #0]
    
    //release semaphore
    osSemaphoreRelease(BinSemPlayMp3Handle);
 8008d84:	4b1e      	ldr	r3, [pc, #120]	; (8008e00 <playMp3DMA+0xe4>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fb fd47 	bl	800481c <osSemaphoreRelease>

    //change bitrate to 144kbps
    playBuff[2] &= 0x0F;
 8008d8e:	4b1d      	ldr	r3, [pc, #116]	; (8008e04 <playMp3DMA+0xe8>)
 8008d90:	789b      	ldrb	r3, [r3, #2]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <playMp3DMA+0xe8>)
 8008d9a:	709a      	strb	r2, [r3, #2]
    playBuff[2] |= 0xD0; //0b1101 0000
 8008d9c:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <playMp3DMA+0xe8>)
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <playMp3DMA+0xe8>)
 8008da8:	709a      	strb	r2, [r3, #2]
    //clear backpoint of playbuff
    playBuff[4] = 0;
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <playMp3DMA+0xe8>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	711a      	strb	r2, [r3, #4]
    VS1003_Play_Data_DMA(playBuff, mp3PacketFrameSize);
 8008db0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008db4:	4813      	ldr	r0, [pc, #76]	; (8008e04 <playMp3DMA+0xe8>)
 8008db6:	f000 fa6b 	bl	8009290 <VS1003_Play_Data_DMA>
 8008dba:	e006      	b.n	8008dca <playMp3DMA+0xae>
  }
  else
  {
    //play mute
    VS1003_Play_1frameMute_DMA();
 8008dbc:	f000 fa8a 	bl	80092d4 <VS1003_Play_1frameMute_DMA>
    miss_adu++;
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <playMp3DMA+0xec>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	4a10      	ldr	r2, [pc, #64]	; (8008e08 <playMp3DMA+0xec>)
 8008dc8:	6013      	str	r3, [r2, #0]
    //VS1003_PlayBeep_DMA();
  }
  playPacketIndex++;
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <playMp3DMA+0xdc>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	4a09      	ldr	r2, [pc, #36]	; (8008df8 <playMp3DMA+0xdc>)
 8008dd2:	6013      	str	r3, [r2, #0]
  playPacketIndex %= mp3PacketSize;
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <playMp3DMA+0xdc>)
 8008dd6:	6819      	ldr	r1, [r3, #0]
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <playMp3DMA+0xf0>)
 8008dda:	fb83 2301 	smull	r2, r3, r3, r1
 8008dde:	10da      	asrs	r2, r3, #3
 8008de0:	17cb      	asrs	r3, r1, #31
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	1aca      	subs	r2, r1, r3
 8008dee:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <playMp3DMA+0xdc>)
 8008df0:	601a      	str	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	2000410c 	.word	0x2000410c
 8008dfc:	200056dc 	.word	0x200056dc
 8008e00:	200056c0 	.word	0x200056c0
 8008e04:	20007940 	.word	0x20007940
 8008e08:	20004110 	.word	0x20004110
 8008e0c:	66666667 	.word	0x66666667

08008e10 <sim7600_check_sum_data>:

uint16_t sim7600_check_sum_data(uint8_t *ptr, int length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	uint32_t checksum = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]

	while (length > 1) //cong het cac byte16 lai
 8008e1e:	e00f      	b.n	8008e40 <sim7600_check_sum_data+0x30>
	{
		checksum += ((uint32_t)*ptr << 8) | (uint32_t) *(ptr + 1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	3201      	adds	r2, #1
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
		ptr += 2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3302      	adds	r3, #2
 8008e38:	607b      	str	r3, [r7, #4]
		length -= 2;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	3b02      	subs	r3, #2
 8008e3e:	603b      	str	r3, [r7, #0]
	while (length > 1) //cong het cac byte16 lai
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	dcec      	bgt.n	8008e20 <sim7600_check_sum_data+0x10>
	}
	if (length)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00c      	beq.n	8008e66 <sim7600_check_sum_data+0x56>
	{
		checksum += ((uint32_t)*ptr) << 8; //neu con le 1 byte
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
	}
	while (checksum >> 16)
 8008e58:	e005      	b.n	8008e66 <sim7600_check_sum_data+0x56>
	{
		checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	0c1b      	lsrs	r3, r3, #16
 8008e62:	4413      	add	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]
	while (checksum >> 16)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	0c1b      	lsrs	r3, r3, #16
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1f5      	bne.n	8008e5a <sim7600_check_sum_data+0x4a>
	}
	//nghich dao bit
	checksum = ~checksum;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	60fb      	str	r3, [r7, #12]
	//hoan vi byte thap byte cao
	return (uint16_t)checksum;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	b29b      	uxth	r3, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <sim7600_usart_IRQHandler>:

/**
 * \brief           usartSim7600 global interrupt handler
 */
void sim7600_usart_IRQHandler(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
  //if (LL_USART_IsEnabledIT_IDLE(usartSim7600) && LL_USART_IsActiveFlag_IDLE(usartSim7600)) {
  //    LL_USART_ClearFlag_IDLE(usartSim7600);        /* Clear IDLE line flag */
  //   sim7600_usart_rx_check();                       /* Check for data to process */
  //}

  if ((usartSim7600->CR1 & USART_CR1_IDLEIE) == USART_CR1_IDLEIE && (usartSim7600->SR & USART_SR_IDLE) == (USART_SR_IDLE))
 8008e8a:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <sim7600_usart_IRQHandler+0x4c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d117      	bne.n	8008ec8 <sim7600_usart_IRQHandler+0x44>
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <sim7600_usart_IRQHandler+0x4c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b10      	cmp	r3, #16
 8008ea4:	d110      	bne.n	8008ec8 <sim7600_usart_IRQHandler+0x44>
  {
    // Clear IDLE line flag
    volatile uint32_t tmpreg;
    tmpreg = usartSim7600->SR;
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <sim7600_usart_IRQHandler+0x4c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8008eae:	687b      	ldr	r3, [r7, #4]
    tmpreg = usartSim7600->DR;
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <sim7600_usart_IRQHandler+0x4c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	607b      	str	r3, [r7, #4]
    (void)tmpreg;
 8008eb8:	687b      	ldr	r3, [r7, #4]

    //sim7600_usart_rx_check(); // Check for data to process
    //put data to queue to invoke task handle rx data
    osMessagePut(usart_rx_dma_queue_id, 1, 0);
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <sim7600_usart_IRQHandler+0x50>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fb fd08 	bl	80048d8 <osMessagePut>
  }
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	2000000c 	.word	0x2000000c
 8008ed4:	2000419c 	.word	0x2000419c

08008ed8 <sim7600_change_baud>:

void sim7600_change_baud(uint32_t baudrate)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  LL_USART_Disable(USART1);
 8008ee0:	4807      	ldr	r0, [pc, #28]	; (8008f00 <sim7600_change_baud+0x28>)
 8008ee2:	f7fe fc97 	bl	8007814 <LL_USART_Disable>
  sim7600SetBaudrate(baudrate);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4906      	ldr	r1, [pc, #24]	; (8008f04 <sim7600_change_baud+0x2c>)
 8008eec:	4804      	ldr	r0, [pc, #16]	; (8008f00 <sim7600_change_baud+0x28>)
 8008eee:	f7fe fca1 	bl	8007834 <LL_USART_SetBaudRate>
  LL_USART_Enable(USART1);
 8008ef2:	4803      	ldr	r0, [pc, #12]	; (8008f00 <sim7600_change_baud+0x28>)
 8008ef4:	f7fe fc7e 	bl	80077f4 <LL_USART_Enable>
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40011000 	.word	0x40011000
 8008f04:	0501bd00 	.word	0x0501bd00

08008f08 <sim7600_restart>:
//restart/reset module
//1st use pwr pin
//2nd use rst pin

void sim7600_restart()
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
  LL_USART_Disable(USART1);
 8008f0e:	483d      	ldr	r0, [pc, #244]	; (8009004 <sim7600_restart+0xfc>)
 8008f10:	f7fe fc80 	bl	8007814 <LL_USART_Disable>
  printf("%s", "rst\n");
 8008f14:	483c      	ldr	r0, [pc, #240]	; (8009008 <sim7600_restart+0x100>)
 8008f16:	f000 faf3 	bl	8009500 <puts>
    //int
  UDPsendStatus = 0;
 8008f1a:	4b3c      	ldr	r3, [pc, #240]	; (800900c <sim7600_restart+0x104>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]
  cmdSendStatus = 0;
 8008f20:	4b3b      	ldr	r3, [pc, #236]	; (8009010 <sim7600_restart+0x108>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
  sim7600_open_tcp_connectStatus = 0;
 8008f26:	4b3b      	ldr	r3, [pc, #236]	; (8009014 <sim7600_restart+0x10c>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
  sim7600_open_udp_connectStatus = 0;
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	; (8009018 <sim7600_restart+0x110>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
  sim7600_open_netStatus = 0;
 8008f32:	4b3a      	ldr	r3, [pc, #232]	; (800901c <sim7600_restart+0x114>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
  sim7600_send_packetStatus = 0;
 8008f38:	4b39      	ldr	r3, [pc, #228]	; (8009020 <sim7600_restart+0x118>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
  old_pos = 0;
 8008f3e:	4b39      	ldr	r3, [pc, #228]	; (8009024 <sim7600_restart+0x11c>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
  pos = 0;
 8008f44:	4b38      	ldr	r3, [pc, #224]	; (8009028 <sim7600_restart+0x120>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]
  playPacketIndex = 0;
 8008f4a:	4b38      	ldr	r3, [pc, #224]	; (800902c <sim7600_restart+0x124>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]

  //bool
  Sim7600BasicConfigSuccess = false;
 8008f50:	4b37      	ldr	r3, [pc, #220]	; (8009030 <sim7600_restart+0x128>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
  sim7600_error = false;
 8008f56:	4b37      	ldr	r3, [pc, #220]	; (8009034 <sim7600_restart+0x12c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	701a      	strb	r2, [r3, #0]
  sim7600_network_IsOpen = false;
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <sim7600_restart+0x130>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
  sim7600_tcp_IsOpen = false;
 8008f62:	4b36      	ldr	r3, [pc, #216]	; (800903c <sim7600_restart+0x134>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
  sim7600_udp_IsOpen = false;
 8008f68:	4b35      	ldr	r3, [pc, #212]	; (8009040 <sim7600_restart+0x138>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
  sim7600_have_call = false;
 8008f6e:	4b35      	ldr	r3, [pc, #212]	; (8009044 <sim7600_restart+0x13c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
  IsPlaying = false;
 8008f74:	4b34      	ldr	r3, [pc, #208]	; (8009048 <sim7600_restart+0x140>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
  //init udp var
  int i, limit = mp3PacketSize;
 8008f7a:	2314      	movs	r3, #20
 8008f7c:	603b      	str	r3, [r7, #0]
  for(i = 0; i < limit; i++) mp3Packet[i].IsEmpty = true;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	e00d      	b.n	8008fa0 <sim7600_restart+0x98>
 8008f84:	4a31      	ldr	r2, [pc, #196]	; (800904c <sim7600_restart+0x144>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8008f8c:	fb01 f303 	mul.w	r3, r1, r3
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8008f96:	2201      	movs	r2, #1
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	dbed      	blt.n	8008f84 <sim7600_restart+0x7c>

  if (restartSimstatus < max_num_restart_sim7600) //0-19
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <sim7600_restart+0x148>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b13      	cmp	r3, #19
 8008fae:	dc07      	bgt.n	8008fc0 <sim7600_restart+0xb8>
  {
    //use pwr pin to power off
    sim7600_powerOFF();
 8008fb0:	f7fe fe82 	bl	8007cb8 <sim7600_powerOFF>
    restartSimstatus++;
 8008fb4:	4b26      	ldr	r3, [pc, #152]	; (8009050 <sim7600_restart+0x148>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a25      	ldr	r2, [pc, #148]	; (8009050 <sim7600_restart+0x148>)
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	e013      	b.n	8008fe8 <sim7600_restart+0xe0>
  }
  else if (restartSimstatus < (max_num_restart_sim7600 + max_num_reset_sim7600)) // 20-21
 8008fc0:	4b23      	ldr	r3, [pc, #140]	; (8009050 <sim7600_restart+0x148>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b15      	cmp	r3, #21
 8008fc6:	dc09      	bgt.n	8008fdc <sim7600_restart+0xd4>
  {
    sim7600_reset();
 8008fc8:	f7fe fe94 	bl	8007cf4 <sim7600_reset>
    sim7600_powerOFF();
 8008fcc:	f7fe fe74 	bl	8007cb8 <sim7600_powerOFF>
    restartSimstatus++;
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <sim7600_restart+0x148>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <sim7600_restart+0x148>)
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e005      	b.n	8008fe8 <sim7600_restart+0xe0>
  }
  else // >=22
  {
    //delay to wait
    sim7600_delay_ms(sleep_minutes_sim7600 * 60 * 1000); // sleep_minutes_sim7600 minutes
 8008fdc:	481d      	ldr	r0, [pc, #116]	; (8009054 <sim7600_restart+0x14c>)
 8008fde:	f7fe fe41 	bl	8007c64 <sim7600_delay_ms>
    restartSimstatus = 0;
 8008fe2:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <sim7600_restart+0x148>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
  }

  //power on again
  sim7600_powerON();
 8008fe8:	f7fe fe48 	bl	8007c7c <sim7600_powerON>
  //change baud rate to default
  sim7600_change_baud(Sim7600BaudDefaul); // in this function usart is enable again
 8008fec:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8008ff0:	f7ff ff72 	bl	8008ed8 <sim7600_change_baud>

  LL_USART_Enable(USART1);
 8008ff4:	4803      	ldr	r0, [pc, #12]	; (8009004 <sim7600_restart+0xfc>)
 8008ff6:	f7fe fbfd 	bl	80077f4 <LL_USART_Enable>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40011000 	.word	0x40011000
 8009008:	0800aadc 	.word	0x0800aadc
 800900c:	200040cc 	.word	0x200040cc
 8009010:	200040e0 	.word	0x200040e0
 8009014:	200040dc 	.word	0x200040dc
 8009018:	200040d4 	.word	0x200040d4
 800901c:	200040d0 	.word	0x200040d0
 8009020:	200040d8 	.word	0x200040d8
 8009024:	200040e4 	.word	0x200040e4
 8009028:	200040e8 	.word	0x200040e8
 800902c:	2000410c 	.word	0x2000410c
 8009030:	200040c9 	.word	0x200040c9
 8009034:	200040c4 	.word	0x200040c4
 8009038:	200040c5 	.word	0x200040c5
 800903c:	200040c6 	.word	0x200040c6
 8009040:	200040c7 	.word	0x200040c7
 8009044:	200040c8 	.word	0x200040c8
 8009048:	20004108 	.word	0x20004108
 800904c:	200056dc 	.word	0x200056dc
 8009050:	200040c0 	.word	0x200040c0
 8009054:	02932e00 	.word	0x02932e00

08009058 <VS1003_SPI_ReadByte>:


/*******************************************************************************
*******************************************************************************/ 
static uint8_t VS1003_SPI_ReadByte(void)
{	
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res;
	uint8_t rxData[1] = {0, };
 800905e:	2300      	movs	r3, #0
 8009060:	713b      	strb	r3, [r7, #4]

	res = HAL_SPI_Receive(hspiVS1003, rxData, sizeof(rxData), HAL_MAX_DELAY);
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <VS1003_SPI_ReadByte+0x28>)
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	1d39      	adds	r1, r7, #4
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	2201      	movs	r2, #1
 800906e:	f7f9 fb9c 	bl	80027aa <HAL_SPI_Receive>
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
	if (res != HAL_OK);
		//printf("HAL_SPI_Receive Error\r\n");

  return rxData[0];
 8009076:	793b      	ldrb	r3, [r7, #4]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20008e7c 	.word	0x20008e7c

08009084 <VS1003_SPI_WriteByte>:

/*******************************************************************************
*******************************************************************************/ 
static uint8_t VS1003_SPI_WriteByte( uint8_t TxData )
{	
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	uint8_t cmd[1] = {0, };
 800908e:	2300      	movs	r3, #0
 8009090:	733b      	strb	r3, [r7, #12]

	cmd[0] = TxData;
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	733b      	strb	r3, [r7, #12]
	res = HAL_SPI_Transmit(hspiVS1003, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8009096:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <VS1003_SPI_WriteByte+0x34>)
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f107 010c 	add.w	r1, r7, #12
 800909e:	f04f 33ff 	mov.w	r3, #4294967295
 80090a2:	2201      	movs	r2, #1
 80090a4:	f7f9 fa45 	bl	8002532 <HAL_SPI_Transmit>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK);
		//printf("HAL_SPI_Transmit Error\r\n");

  return 0;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20008e7c 	.word	0x20008e7c

080090bc <VS1003_Init>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_Init(void)
{		  
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  hspiVS1003 = &hspi2;
 80090c0:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <VS1003_Init+0x40>)
 80090c2:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <VS1003_Init+0x44>)
 80090c4:	601a      	str	r2, [r3, #0]
  MP3_Reset(0);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	480e      	ldr	r0, [pc, #56]	; (8009104 <VS1003_Init+0x48>)
 80090cc:	f7f9 f93c 	bl	8002348 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80090d0:	2064      	movs	r0, #100	; 0x64
 80090d2:	f7f8 fb0f 	bl	80016f4 <HAL_Delay>
  MP3_Reset(1);
 80090d6:	2201      	movs	r2, #1
 80090d8:	2180      	movs	r1, #128	; 0x80
 80090da:	480a      	ldr	r0, [pc, #40]	; (8009104 <VS1003_Init+0x48>)
 80090dc:	f7f9 f934 	bl	8002348 <HAL_GPIO_WritePin>

  MP3_DCS(1); 
 80090e0:	2201      	movs	r2, #1
 80090e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80090e6:	4807      	ldr	r0, [pc, #28]	; (8009104 <VS1003_Init+0x48>)
 80090e8:	f7f9 f92e 	bl	8002348 <HAL_GPIO_WritePin>
  MP3_CCS(1); 
 80090ec:	2201      	movs	r2, #1
 80090ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <VS1003_Init+0x48>)
 80090f4:	f7f9 f928 	bl	8002348 <HAL_GPIO_WritePin>
}
 80090f8:	bf00      	nop
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20008e7c 	.word	0x20008e7c
 8009100:	20004128 	.word	0x20004128
 8009104:	40021000 	.word	0x40021000

08009108 <VS1003_WriteReg>:

/*******************************************************************************
*******************************************************************************/ 
void VS1003_WriteReg( uint8_t reg, uint16_t value )
{  
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	460a      	mov	r2, r1
 8009112:	71fb      	strb	r3, [r7, #7]
 8009114:	4613      	mov	r3, r2
 8009116:	80bb      	strh	r3, [r7, #4]
	while(  MP3_DREQ ==0 );           /* */
 8009118:	bf00      	nop
 800911a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800911e:	4817      	ldr	r0, [pc, #92]	; (800917c <VS1003_WriteReg+0x74>)
 8009120:	f7f9 f8fa 	bl	8002318 <HAL_GPIO_ReadPin>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0f7      	beq.n	800911a <VS1003_WriteReg+0x12>

	//VS1003_SPI_SetSpeed( SPI_SPEED_LOW );
	MP3_DCS(1); 
 800912a:	2201      	movs	r2, #1
 800912c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009130:	4812      	ldr	r0, [pc, #72]	; (800917c <VS1003_WriteReg+0x74>)
 8009132:	f7f9 f909 	bl	8002348 <HAL_GPIO_WritePin>
	MP3_CCS(0); 
 8009136:	2200      	movs	r2, #0
 8009138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800913c:	480f      	ldr	r0, [pc, #60]	; (800917c <VS1003_WriteReg+0x74>)
 800913e:	f7f9 f903 	bl	8002348 <HAL_GPIO_WritePin>
	VS1003_SPI_WriteByte(VS_WRITE_COMMAND); /*  VS1003 */
 8009142:	2002      	movs	r0, #2
 8009144:	f7ff ff9e 	bl	8009084 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(reg);             
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff ff9a 	bl	8009084 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value>>8);        
 8009150:	88bb      	ldrh	r3, [r7, #4]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	b2db      	uxtb	r3, r3
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff ff93 	bl	8009084 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte(value);	          
 800915e:	88bb      	ldrh	r3, [r7, #4]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff ff8e 	bl	8009084 <VS1003_SPI_WriteByte>
	MP3_CCS(1); 
 8009168:	2201      	movs	r2, #1
 800916a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800916e:	4803      	ldr	r0, [pc, #12]	; (800917c <VS1003_WriteReg+0x74>)
 8009170:	f7f9 f8ea 	bl	8002348 <HAL_GPIO_WritePin>
	//VS1003_SPI_SetSpeed( SPI_SPEED_HIGH );
} 
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	40021000 	.word	0x40021000

08009180 <VS1003_ReadReg>:

/*******************************************************************************
*******************************************************************************/ 
uint16_t VS1003_ReadReg( uint8_t reg)
{ 
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	71fb      	strb	r3, [r7, #7]
	uint16_t value;

	while(  MP3_DREQ ==0 );
 800918a:	bf00      	nop
 800918c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009190:	4818      	ldr	r0, [pc, #96]	; (80091f4 <VS1003_ReadReg+0x74>)
 8009192:	f7f9 f8c1 	bl	8002318 <HAL_GPIO_ReadPin>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0f7      	beq.n	800918c <VS1003_ReadReg+0xc>
	
	//VS1003_SPI_SetSpeed( SPI_SPEED_LOW );
	
	MP3_DCS(1);     
 800919c:	2201      	movs	r2, #1
 800919e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80091a2:	4814      	ldr	r0, [pc, #80]	; (80091f4 <VS1003_ReadReg+0x74>)
 80091a4:	f7f9 f8d0 	bl	8002348 <HAL_GPIO_WritePin>
	MP3_CCS(0); 
 80091a8:	2200      	movs	r2, #0
 80091aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091ae:	4811      	ldr	r0, [pc, #68]	; (80091f4 <VS1003_ReadReg+0x74>)
 80091b0:	f7f9 f8ca 	bl	8002348 <HAL_GPIO_WritePin>
	
	VS1003_SPI_WriteByte(VS_READ_COMMAND);/* VS1003 */
 80091b4:	2003      	movs	r0, #3
 80091b6:	f7ff ff65 	bl	8009084 <VS1003_SPI_WriteByte>
	VS1003_SPI_WriteByte( reg );   
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff ff61 	bl	8009084 <VS1003_SPI_WriteByte>
	value = VS1003_SPI_ReadByte();		
 80091c2:	f7ff ff49 	bl	8009058 <VS1003_SPI_ReadByte>
 80091c6:	4603      	mov	r3, r0
 80091c8:	81fb      	strh	r3, [r7, #14]
	value = value << 8;
 80091ca:	89fb      	ldrh	r3, [r7, #14]
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	81fb      	strh	r3, [r7, #14]
	value |= VS1003_SPI_ReadByte(); 
 80091d0:	f7ff ff42 	bl	8009058 <VS1003_SPI_ReadByte>
 80091d4:	4603      	mov	r3, r0
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	89fb      	ldrh	r3, [r7, #14]
 80091da:	4313      	orrs	r3, r2
 80091dc:	81fb      	strh	r3, [r7, #14]
	
	MP3_CCS(1);
 80091de:	2201      	movs	r2, #1
 80091e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091e4:	4803      	ldr	r0, [pc, #12]	; (80091f4 <VS1003_ReadReg+0x74>)
 80091e6:	f7f9 f8af 	bl	8002348 <HAL_GPIO_WritePin>
	
	//VS1003_SPI_SetSpeed( SPI_SPEED_HIGH );
	
	return value; 
 80091ea:	89fb      	ldrh	r3, [r7, #14]
} 
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40021000 	.word	0x40021000

080091f8 <VS1003_ResetDecodeTime>:

/*******************************************************************************
*******************************************************************************/                       
void VS1003_ResetDecodeTime(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 80091fc:	2100      	movs	r1, #0
 80091fe:	2004      	movs	r0, #4
 8009200:	f7ff ff82 	bl	8009108 <VS1003_WriteReg>
   VS1003_WriteReg(SPI_DECODE_TIME, 0x0000); /* */
 8009204:	2100      	movs	r1, #0
 8009206:	2004      	movs	r0, #4
 8009208:	f7ff ff7e 	bl	8009108 <VS1003_WriteReg>
}
 800920c:	bf00      	nop
 800920e:	bd80      	pop	{r7, pc}

08009210 <VS1003_SoftReset>:
} 

/*******************************************************************************
*******************************************************************************/
void VS1003_SoftReset(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
	uint8_t retry; 	
				 
	while(  MP3_DREQ ==0 );
 8009216:	bf00      	nop
 8009218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800921c:	481b      	ldr	r0, [pc, #108]	; (800928c <VS1003_SoftReset+0x7c>)
 800921e:	f7f9 f87b 	bl	8002318 <HAL_GPIO_ReadPin>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f7      	beq.n	8009218 <VS1003_SoftReset+0x8>

	VS1003_WriteReg(SPI_MODE, (SM_SDINEW | SM_RESET));  /* */
 8009228:	f640 0104 	movw	r1, #2052	; 0x804
 800922c:	2000      	movs	r0, #0
 800922e:	f7ff ff6b 	bl	8009108 <VS1003_WriteReg>
	HAL_Delay(2);                        /* 1.35ms */
 8009232:	2002      	movs	r0, #2
 8009234:	f7f8 fa5e 	bl	80016f4 <HAL_Delay>
	
	while(  MP3_DREQ ==0 );
 8009238:	bf00      	nop
 800923a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800923e:	4813      	ldr	r0, [pc, #76]	; (800928c <VS1003_SoftReset+0x7c>)
 8009240:	f7f9 f86a 	bl	8002318 <HAL_GPIO_ReadPin>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0f7      	beq.n	800923a <VS1003_SoftReset+0x2a>

	retry = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	71fb      	strb	r3, [r7, #7]

	while( VS1003_ReadReg(SPI_CLOCKF) != 0X9800 )  
 800924e:	e009      	b.n	8009264 <VS1003_SoftReset+0x54>
	{
		VS1003_WriteReg(SPI_CLOCKF, 0X9800);
 8009250:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8009254:	2003      	movs	r0, #3
 8009256:	f7ff ff57 	bl	8009108 <VS1003_WriteReg>
		if( retry++ > 100 )
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	71fa      	strb	r2, [r7, #7]
 8009260:	2b64      	cmp	r3, #100	; 0x64
 8009262:	d807      	bhi.n	8009274 <VS1003_SoftReset+0x64>
	while( VS1003_ReadReg(SPI_CLOCKF) != 0X9800 )  
 8009264:	2003      	movs	r0, #3
 8009266:	f7ff ff8b 	bl	8009180 <VS1003_ReadReg>
 800926a:	4603      	mov	r3, r0
 800926c:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8009270:	d1ee      	bne.n	8009250 <VS1003_SoftReset+0x40>
 8009272:	e000      	b.n	8009276 <VS1003_SoftReset+0x66>
		{ 
			//printf("SPI_CLOCKF Set Error\r\n");
			break; 
 8009274:	bf00      	nop
		}
	}

	VS1003_WriteReg(SPI_VOL, 0x3030);
 8009276:	f243 0130 	movw	r1, #12336	; 0x3030
 800927a:	200b      	movs	r0, #11
 800927c:	f7ff ff44 	bl	8009108 <VS1003_WriteReg>
	VS1003_ResetDecodeTime();
 8009280:	f7ff ffba 	bl	80091f8 <VS1003_ResetDecodeTime>
} 
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40021000 	.word	0x40021000

08009290 <VS1003_Play_Data_DMA>:
	HAL_SPI_Transmit_DMA(hspiVS1003, szBeepMP3, sizeof(szBeepMP3));

}

void VS1003_Play_Data_DMA(uint8_t *data, int length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	MP3_CCS(1);
 800929a:	2201      	movs	r2, #1
 800929c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80092a0:	480a      	ldr	r0, [pc, #40]	; (80092cc <VS1003_Play_Data_DMA+0x3c>)
 80092a2:	f7f9 f851 	bl	8002348 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 80092a6:	2200      	movs	r2, #0
 80092a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092ac:	4807      	ldr	r0, [pc, #28]	; (80092cc <VS1003_Play_Data_DMA+0x3c>)
 80092ae:	f7f9 f84b 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, data, length);
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <VS1003_Play_Data_DMA+0x40>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	b292      	uxth	r2, r2
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f9 fd27 	bl	8002d10 <HAL_SPI_Transmit_DMA>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40021000 	.word	0x40021000
 80092d0:	20008e7c 	.word	0x20008e7c

080092d4 <VS1003_Play_1frameMute_DMA>:

void VS1003_Play_1frameMute_DMA()
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
	MP3_CCS(1);
 80092d8:	2201      	movs	r2, #1
 80092da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80092de:	4809      	ldr	r0, [pc, #36]	; (8009304 <VS1003_Play_1frameMute_DMA+0x30>)
 80092e0:	f7f9 f832 	bl	8002348 <HAL_GPIO_WritePin>
    MP3_DCS(0);
 80092e4:	2200      	movs	r2, #0
 80092e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80092ea:	4806      	ldr	r0, [pc, #24]	; (8009304 <VS1003_Play_1frameMute_DMA+0x30>)
 80092ec:	f7f9 f82c 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(hspiVS1003, mute1framse, 24);
 80092f0:	4b05      	ldr	r3, [pc, #20]	; (8009308 <VS1003_Play_1frameMute_DMA+0x34>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2218      	movs	r2, #24
 80092f6:	4905      	ldr	r1, [pc, #20]	; (800930c <VS1003_Play_1frameMute_DMA+0x38>)
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7f9 fd09 	bl	8002d10 <HAL_SPI_Transmit_DMA>
}
 80092fe:	bf00      	nop
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	40021000 	.word	0x40021000
 8009308:	20008e7c 	.word	0x20008e7c
 800930c:	20000078 	.word	0x20000078

08009310 <DREQ_VS1003_IRQhandler>:

void DREQ_VS1003_IRQhandler()
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
	if (!MP3_DREQ) //falling
 8009314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009318:	4809      	ldr	r0, [pc, #36]	; (8009340 <DREQ_VS1003_IRQhandler+0x30>)
 800931a:	f7f8 fffd 	bl	8002318 <HAL_GPIO_ReadPin>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <DREQ_VS1003_IRQhandler+0x20>
	    {
	      //pause DMA
	      HAL_SPI_DMAPause(hspiVS1003);
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <DREQ_VS1003_IRQhandler+0x34>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	f7f9 fda7 	bl	8002e7c <HAL_SPI_DMAPause>
	    else //rising
	    {
	      //resume DMA
	      HAL_SPI_DMAResume(hspiVS1003);
	    }
}
 800932e:	e004      	b.n	800933a <DREQ_VS1003_IRQhandler+0x2a>
	      HAL_SPI_DMAResume(hspiVS1003);
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <DREQ_VS1003_IRQhandler+0x34>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f7f9 fdc3 	bl	8002ec0 <HAL_SPI_DMAResume>
}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40021000 	.word	0x40021000
 8009344:	20008e7c 	.word	0x20008e7c

08009348 <__errno>:
 8009348:	4b01      	ldr	r3, [pc, #4]	; (8009350 <__errno+0x8>)
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000090 	.word	0x20000090

08009354 <__libc_init_array>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4d0d      	ldr	r5, [pc, #52]	; (800938c <__libc_init_array+0x38>)
 8009358:	4c0d      	ldr	r4, [pc, #52]	; (8009390 <__libc_init_array+0x3c>)
 800935a:	1b64      	subs	r4, r4, r5
 800935c:	10a4      	asrs	r4, r4, #2
 800935e:	2600      	movs	r6, #0
 8009360:	42a6      	cmp	r6, r4
 8009362:	d109      	bne.n	8009378 <__libc_init_array+0x24>
 8009364:	4d0b      	ldr	r5, [pc, #44]	; (8009394 <__libc_init_array+0x40>)
 8009366:	4c0c      	ldr	r4, [pc, #48]	; (8009398 <__libc_init_array+0x44>)
 8009368:	f001 fa34 	bl	800a7d4 <_init>
 800936c:	1b64      	subs	r4, r4, r5
 800936e:	10a4      	asrs	r4, r4, #2
 8009370:	2600      	movs	r6, #0
 8009372:	42a6      	cmp	r6, r4
 8009374:	d105      	bne.n	8009382 <__libc_init_array+0x2e>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	f855 3b04 	ldr.w	r3, [r5], #4
 800937c:	4798      	blx	r3
 800937e:	3601      	adds	r6, #1
 8009380:	e7ee      	b.n	8009360 <__libc_init_array+0xc>
 8009382:	f855 3b04 	ldr.w	r3, [r5], #4
 8009386:	4798      	blx	r3
 8009388:	3601      	adds	r6, #1
 800938a:	e7f2      	b.n	8009372 <__libc_init_array+0x1e>
 800938c:	0800aba8 	.word	0x0800aba8
 8009390:	0800aba8 	.word	0x0800aba8
 8009394:	0800aba8 	.word	0x0800aba8
 8009398:	0800abac 	.word	0x0800abac

0800939c <memcpy>:
 800939c:	440a      	add	r2, r1
 800939e:	4291      	cmp	r1, r2
 80093a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093a4:	d100      	bne.n	80093a8 <memcpy+0xc>
 80093a6:	4770      	bx	lr
 80093a8:	b510      	push	{r4, lr}
 80093aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093b2:	4291      	cmp	r1, r2
 80093b4:	d1f9      	bne.n	80093aa <memcpy+0xe>
 80093b6:	bd10      	pop	{r4, pc}

080093b8 <memset>:
 80093b8:	4402      	add	r2, r0
 80093ba:	4603      	mov	r3, r0
 80093bc:	4293      	cmp	r3, r2
 80093be:	d100      	bne.n	80093c2 <memset+0xa>
 80093c0:	4770      	bx	lr
 80093c2:	f803 1b01 	strb.w	r1, [r3], #1
 80093c6:	e7f9      	b.n	80093bc <memset+0x4>

080093c8 <iprintf>:
 80093c8:	b40f      	push	{r0, r1, r2, r3}
 80093ca:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <iprintf+0x2c>)
 80093cc:	b513      	push	{r0, r1, r4, lr}
 80093ce:	681c      	ldr	r4, [r3, #0]
 80093d0:	b124      	cbz	r4, 80093dc <iprintf+0x14>
 80093d2:	69a3      	ldr	r3, [r4, #24]
 80093d4:	b913      	cbnz	r3, 80093dc <iprintf+0x14>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 faac 	bl	8009934 <__sinit>
 80093dc:	ab05      	add	r3, sp, #20
 80093de:	9a04      	ldr	r2, [sp, #16]
 80093e0:	68a1      	ldr	r1, [r4, #8]
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fdd9 	bl	8009f9c <_vfiprintf_r>
 80093ea:	b002      	add	sp, #8
 80093ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f0:	b004      	add	sp, #16
 80093f2:	4770      	bx	lr
 80093f4:	20000090 	.word	0x20000090

080093f8 <putchar>:
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <putchar+0x28>)
 80093fa:	b513      	push	{r0, r1, r4, lr}
 80093fc:	681c      	ldr	r4, [r3, #0]
 80093fe:	4601      	mov	r1, r0
 8009400:	b134      	cbz	r4, 8009410 <putchar+0x18>
 8009402:	69a3      	ldr	r3, [r4, #24]
 8009404:	b923      	cbnz	r3, 8009410 <putchar+0x18>
 8009406:	9001      	str	r0, [sp, #4]
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fa93 	bl	8009934 <__sinit>
 800940e:	9901      	ldr	r1, [sp, #4]
 8009410:	68a2      	ldr	r2, [r4, #8]
 8009412:	4620      	mov	r0, r4
 8009414:	b002      	add	sp, #8
 8009416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941a:	f001 b883 	b.w	800a524 <_putc_r>
 800941e:	bf00      	nop
 8009420:	20000090 	.word	0x20000090

08009424 <_puts_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4605      	mov	r5, r0
 800942a:	b118      	cbz	r0, 8009434 <_puts_r+0x10>
 800942c:	6983      	ldr	r3, [r0, #24]
 800942e:	b90b      	cbnz	r3, 8009434 <_puts_r+0x10>
 8009430:	f000 fa80 	bl	8009934 <__sinit>
 8009434:	69ab      	ldr	r3, [r5, #24]
 8009436:	68ac      	ldr	r4, [r5, #8]
 8009438:	b913      	cbnz	r3, 8009440 <_puts_r+0x1c>
 800943a:	4628      	mov	r0, r5
 800943c:	f000 fa7a 	bl	8009934 <__sinit>
 8009440:	4b2c      	ldr	r3, [pc, #176]	; (80094f4 <_puts_r+0xd0>)
 8009442:	429c      	cmp	r4, r3
 8009444:	d120      	bne.n	8009488 <_puts_r+0x64>
 8009446:	686c      	ldr	r4, [r5, #4]
 8009448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800944a:	07db      	lsls	r3, r3, #31
 800944c:	d405      	bmi.n	800945a <_puts_r+0x36>
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	0598      	lsls	r0, r3, #22
 8009452:	d402      	bmi.n	800945a <_puts_r+0x36>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f000 fb0b 	bl	8009a70 <__retarget_lock_acquire_recursive>
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	0719      	lsls	r1, r3, #28
 800945e:	d51d      	bpl.n	800949c <_puts_r+0x78>
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	b1db      	cbz	r3, 800949c <_puts_r+0x78>
 8009464:	3e01      	subs	r6, #1
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800946c:	3b01      	subs	r3, #1
 800946e:	60a3      	str	r3, [r4, #8]
 8009470:	bb39      	cbnz	r1, 80094c2 <_puts_r+0x9e>
 8009472:	2b00      	cmp	r3, #0
 8009474:	da38      	bge.n	80094e8 <_puts_r+0xc4>
 8009476:	4622      	mov	r2, r4
 8009478:	210a      	movs	r1, #10
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f880 	bl	8009580 <__swbuf_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d011      	beq.n	80094a8 <_puts_r+0x84>
 8009484:	250a      	movs	r5, #10
 8009486:	e011      	b.n	80094ac <_puts_r+0x88>
 8009488:	4b1b      	ldr	r3, [pc, #108]	; (80094f8 <_puts_r+0xd4>)
 800948a:	429c      	cmp	r4, r3
 800948c:	d101      	bne.n	8009492 <_puts_r+0x6e>
 800948e:	68ac      	ldr	r4, [r5, #8]
 8009490:	e7da      	b.n	8009448 <_puts_r+0x24>
 8009492:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <_puts_r+0xd8>)
 8009494:	429c      	cmp	r4, r3
 8009496:	bf08      	it	eq
 8009498:	68ec      	ldreq	r4, [r5, #12]
 800949a:	e7d5      	b.n	8009448 <_puts_r+0x24>
 800949c:	4621      	mov	r1, r4
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f8c0 	bl	8009624 <__swsetup_r>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d0dd      	beq.n	8009464 <_puts_r+0x40>
 80094a8:	f04f 35ff 	mov.w	r5, #4294967295
 80094ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ae:	07da      	lsls	r2, r3, #31
 80094b0:	d405      	bmi.n	80094be <_puts_r+0x9a>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	059b      	lsls	r3, r3, #22
 80094b6:	d402      	bmi.n	80094be <_puts_r+0x9a>
 80094b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ba:	f000 fada 	bl	8009a72 <__retarget_lock_release_recursive>
 80094be:	4628      	mov	r0, r5
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da04      	bge.n	80094d0 <_puts_r+0xac>
 80094c6:	69a2      	ldr	r2, [r4, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	dc06      	bgt.n	80094da <_puts_r+0xb6>
 80094cc:	290a      	cmp	r1, #10
 80094ce:	d004      	beq.n	80094da <_puts_r+0xb6>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	7019      	strb	r1, [r3, #0]
 80094d8:	e7c5      	b.n	8009466 <_puts_r+0x42>
 80094da:	4622      	mov	r2, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 f84f 	bl	8009580 <__swbuf_r>
 80094e2:	3001      	adds	r0, #1
 80094e4:	d1bf      	bne.n	8009466 <_puts_r+0x42>
 80094e6:	e7df      	b.n	80094a8 <_puts_r+0x84>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	250a      	movs	r5, #10
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	701d      	strb	r5, [r3, #0]
 80094f2:	e7db      	b.n	80094ac <_puts_r+0x88>
 80094f4:	0800ab2c 	.word	0x0800ab2c
 80094f8:	0800ab4c 	.word	0x0800ab4c
 80094fc:	0800ab0c 	.word	0x0800ab0c

08009500 <puts>:
 8009500:	4b02      	ldr	r3, [pc, #8]	; (800950c <puts+0xc>)
 8009502:	4601      	mov	r1, r0
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	f7ff bf8d 	b.w	8009424 <_puts_r>
 800950a:	bf00      	nop
 800950c:	20000090 	.word	0x20000090

08009510 <siprintf>:
 8009510:	b40e      	push	{r1, r2, r3}
 8009512:	b500      	push	{lr}
 8009514:	b09c      	sub	sp, #112	; 0x70
 8009516:	ab1d      	add	r3, sp, #116	; 0x74
 8009518:	9002      	str	r0, [sp, #8]
 800951a:	9006      	str	r0, [sp, #24]
 800951c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009520:	4809      	ldr	r0, [pc, #36]	; (8009548 <siprintf+0x38>)
 8009522:	9107      	str	r1, [sp, #28]
 8009524:	9104      	str	r1, [sp, #16]
 8009526:	4909      	ldr	r1, [pc, #36]	; (800954c <siprintf+0x3c>)
 8009528:	f853 2b04 	ldr.w	r2, [r3], #4
 800952c:	9105      	str	r1, [sp, #20]
 800952e:	6800      	ldr	r0, [r0, #0]
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	a902      	add	r1, sp, #8
 8009534:	f000 fc08 	bl	8009d48 <_svfiprintf_r>
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	b01c      	add	sp, #112	; 0x70
 8009540:	f85d eb04 	ldr.w	lr, [sp], #4
 8009544:	b003      	add	sp, #12
 8009546:	4770      	bx	lr
 8009548:	20000090 	.word	0x20000090
 800954c:	ffff0208 	.word	0xffff0208

08009550 <strstr>:
 8009550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009552:	780c      	ldrb	r4, [r1, #0]
 8009554:	b164      	cbz	r4, 8009570 <strstr+0x20>
 8009556:	4603      	mov	r3, r0
 8009558:	781a      	ldrb	r2, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	1c5e      	adds	r6, r3, #1
 800955e:	b90a      	cbnz	r2, 8009564 <strstr+0x14>
 8009560:	4610      	mov	r0, r2
 8009562:	e005      	b.n	8009570 <strstr+0x20>
 8009564:	4294      	cmp	r4, r2
 8009566:	d108      	bne.n	800957a <strstr+0x2a>
 8009568:	460d      	mov	r5, r1
 800956a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800956e:	b902      	cbnz	r2, 8009572 <strstr+0x22>
 8009570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009572:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009576:	4297      	cmp	r7, r2
 8009578:	d0f7      	beq.n	800956a <strstr+0x1a>
 800957a:	4633      	mov	r3, r6
 800957c:	e7ec      	b.n	8009558 <strstr+0x8>
	...

08009580 <__swbuf_r>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	460e      	mov	r6, r1
 8009584:	4614      	mov	r4, r2
 8009586:	4605      	mov	r5, r0
 8009588:	b118      	cbz	r0, 8009592 <__swbuf_r+0x12>
 800958a:	6983      	ldr	r3, [r0, #24]
 800958c:	b90b      	cbnz	r3, 8009592 <__swbuf_r+0x12>
 800958e:	f000 f9d1 	bl	8009934 <__sinit>
 8009592:	4b21      	ldr	r3, [pc, #132]	; (8009618 <__swbuf_r+0x98>)
 8009594:	429c      	cmp	r4, r3
 8009596:	d12b      	bne.n	80095f0 <__swbuf_r+0x70>
 8009598:	686c      	ldr	r4, [r5, #4]
 800959a:	69a3      	ldr	r3, [r4, #24]
 800959c:	60a3      	str	r3, [r4, #8]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	071a      	lsls	r2, r3, #28
 80095a2:	d52f      	bpl.n	8009604 <__swbuf_r+0x84>
 80095a4:	6923      	ldr	r3, [r4, #16]
 80095a6:	b36b      	cbz	r3, 8009604 <__swbuf_r+0x84>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	6820      	ldr	r0, [r4, #0]
 80095ac:	1ac0      	subs	r0, r0, r3
 80095ae:	6963      	ldr	r3, [r4, #20]
 80095b0:	b2f6      	uxtb	r6, r6
 80095b2:	4283      	cmp	r3, r0
 80095b4:	4637      	mov	r7, r6
 80095b6:	dc04      	bgt.n	80095c2 <__swbuf_r+0x42>
 80095b8:	4621      	mov	r1, r4
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 f926 	bl	800980c <_fflush_r>
 80095c0:	bb30      	cbnz	r0, 8009610 <__swbuf_r+0x90>
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	60a3      	str	r3, [r4, #8]
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	6022      	str	r2, [r4, #0]
 80095ce:	701e      	strb	r6, [r3, #0]
 80095d0:	6963      	ldr	r3, [r4, #20]
 80095d2:	3001      	adds	r0, #1
 80095d4:	4283      	cmp	r3, r0
 80095d6:	d004      	beq.n	80095e2 <__swbuf_r+0x62>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	07db      	lsls	r3, r3, #31
 80095dc:	d506      	bpl.n	80095ec <__swbuf_r+0x6c>
 80095de:	2e0a      	cmp	r6, #10
 80095e0:	d104      	bne.n	80095ec <__swbuf_r+0x6c>
 80095e2:	4621      	mov	r1, r4
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 f911 	bl	800980c <_fflush_r>
 80095ea:	b988      	cbnz	r0, 8009610 <__swbuf_r+0x90>
 80095ec:	4638      	mov	r0, r7
 80095ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <__swbuf_r+0x9c>)
 80095f2:	429c      	cmp	r4, r3
 80095f4:	d101      	bne.n	80095fa <__swbuf_r+0x7a>
 80095f6:	68ac      	ldr	r4, [r5, #8]
 80095f8:	e7cf      	b.n	800959a <__swbuf_r+0x1a>
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <__swbuf_r+0xa0>)
 80095fc:	429c      	cmp	r4, r3
 80095fe:	bf08      	it	eq
 8009600:	68ec      	ldreq	r4, [r5, #12]
 8009602:	e7ca      	b.n	800959a <__swbuf_r+0x1a>
 8009604:	4621      	mov	r1, r4
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f80c 	bl	8009624 <__swsetup_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	d0cb      	beq.n	80095a8 <__swbuf_r+0x28>
 8009610:	f04f 37ff 	mov.w	r7, #4294967295
 8009614:	e7ea      	b.n	80095ec <__swbuf_r+0x6c>
 8009616:	bf00      	nop
 8009618:	0800ab2c 	.word	0x0800ab2c
 800961c:	0800ab4c 	.word	0x0800ab4c
 8009620:	0800ab0c 	.word	0x0800ab0c

08009624 <__swsetup_r>:
 8009624:	4b32      	ldr	r3, [pc, #200]	; (80096f0 <__swsetup_r+0xcc>)
 8009626:	b570      	push	{r4, r5, r6, lr}
 8009628:	681d      	ldr	r5, [r3, #0]
 800962a:	4606      	mov	r6, r0
 800962c:	460c      	mov	r4, r1
 800962e:	b125      	cbz	r5, 800963a <__swsetup_r+0x16>
 8009630:	69ab      	ldr	r3, [r5, #24]
 8009632:	b913      	cbnz	r3, 800963a <__swsetup_r+0x16>
 8009634:	4628      	mov	r0, r5
 8009636:	f000 f97d 	bl	8009934 <__sinit>
 800963a:	4b2e      	ldr	r3, [pc, #184]	; (80096f4 <__swsetup_r+0xd0>)
 800963c:	429c      	cmp	r4, r3
 800963e:	d10f      	bne.n	8009660 <__swsetup_r+0x3c>
 8009640:	686c      	ldr	r4, [r5, #4]
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009648:	0719      	lsls	r1, r3, #28
 800964a:	d42c      	bmi.n	80096a6 <__swsetup_r+0x82>
 800964c:	06dd      	lsls	r5, r3, #27
 800964e:	d411      	bmi.n	8009674 <__swsetup_r+0x50>
 8009650:	2309      	movs	r3, #9
 8009652:	6033      	str	r3, [r6, #0]
 8009654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	f04f 30ff 	mov.w	r0, #4294967295
 800965e:	e03e      	b.n	80096de <__swsetup_r+0xba>
 8009660:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <__swsetup_r+0xd4>)
 8009662:	429c      	cmp	r4, r3
 8009664:	d101      	bne.n	800966a <__swsetup_r+0x46>
 8009666:	68ac      	ldr	r4, [r5, #8]
 8009668:	e7eb      	b.n	8009642 <__swsetup_r+0x1e>
 800966a:	4b24      	ldr	r3, [pc, #144]	; (80096fc <__swsetup_r+0xd8>)
 800966c:	429c      	cmp	r4, r3
 800966e:	bf08      	it	eq
 8009670:	68ec      	ldreq	r4, [r5, #12]
 8009672:	e7e6      	b.n	8009642 <__swsetup_r+0x1e>
 8009674:	0758      	lsls	r0, r3, #29
 8009676:	d512      	bpl.n	800969e <__swsetup_r+0x7a>
 8009678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800967a:	b141      	cbz	r1, 800968e <__swsetup_r+0x6a>
 800967c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009680:	4299      	cmp	r1, r3
 8009682:	d002      	beq.n	800968a <__swsetup_r+0x66>
 8009684:	4630      	mov	r0, r6
 8009686:	f000 fa59 	bl	8009b3c <_free_r>
 800968a:	2300      	movs	r3, #0
 800968c:	6363      	str	r3, [r4, #52]	; 0x34
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	2300      	movs	r3, #0
 8009698:	6063      	str	r3, [r4, #4]
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f043 0308 	orr.w	r3, r3, #8
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	6923      	ldr	r3, [r4, #16]
 80096a8:	b94b      	cbnz	r3, 80096be <__swsetup_r+0x9a>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b4:	d003      	beq.n	80096be <__swsetup_r+0x9a>
 80096b6:	4621      	mov	r1, r4
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f9ff 	bl	8009abc <__smakebuf_r>
 80096be:	89a0      	ldrh	r0, [r4, #12]
 80096c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c4:	f010 0301 	ands.w	r3, r0, #1
 80096c8:	d00a      	beq.n	80096e0 <__swsetup_r+0xbc>
 80096ca:	2300      	movs	r3, #0
 80096cc:	60a3      	str	r3, [r4, #8]
 80096ce:	6963      	ldr	r3, [r4, #20]
 80096d0:	425b      	negs	r3, r3
 80096d2:	61a3      	str	r3, [r4, #24]
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	b943      	cbnz	r3, 80096ea <__swsetup_r+0xc6>
 80096d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096dc:	d1ba      	bne.n	8009654 <__swsetup_r+0x30>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	0781      	lsls	r1, r0, #30
 80096e2:	bf58      	it	pl
 80096e4:	6963      	ldrpl	r3, [r4, #20]
 80096e6:	60a3      	str	r3, [r4, #8]
 80096e8:	e7f4      	b.n	80096d4 <__swsetup_r+0xb0>
 80096ea:	2000      	movs	r0, #0
 80096ec:	e7f7      	b.n	80096de <__swsetup_r+0xba>
 80096ee:	bf00      	nop
 80096f0:	20000090 	.word	0x20000090
 80096f4:	0800ab2c 	.word	0x0800ab2c
 80096f8:	0800ab4c 	.word	0x0800ab4c
 80096fc:	0800ab0c 	.word	0x0800ab0c

08009700 <__sflush_r>:
 8009700:	898a      	ldrh	r2, [r1, #12]
 8009702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009706:	4605      	mov	r5, r0
 8009708:	0710      	lsls	r0, r2, #28
 800970a:	460c      	mov	r4, r1
 800970c:	d458      	bmi.n	80097c0 <__sflush_r+0xc0>
 800970e:	684b      	ldr	r3, [r1, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	dc05      	bgt.n	8009720 <__sflush_r+0x20>
 8009714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	dc02      	bgt.n	8009720 <__sflush_r+0x20>
 800971a:	2000      	movs	r0, #0
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009722:	2e00      	cmp	r6, #0
 8009724:	d0f9      	beq.n	800971a <__sflush_r+0x1a>
 8009726:	2300      	movs	r3, #0
 8009728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800972c:	682f      	ldr	r7, [r5, #0]
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	d032      	beq.n	8009798 <__sflush_r+0x98>
 8009732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	075a      	lsls	r2, r3, #29
 8009738:	d505      	bpl.n	8009746 <__sflush_r+0x46>
 800973a:	6863      	ldr	r3, [r4, #4]
 800973c:	1ac0      	subs	r0, r0, r3
 800973e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009740:	b10b      	cbz	r3, 8009746 <__sflush_r+0x46>
 8009742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009744:	1ac0      	subs	r0, r0, r3
 8009746:	2300      	movs	r3, #0
 8009748:	4602      	mov	r2, r0
 800974a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800974c:	6a21      	ldr	r1, [r4, #32]
 800974e:	4628      	mov	r0, r5
 8009750:	47b0      	blx	r6
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	d106      	bne.n	8009766 <__sflush_r+0x66>
 8009758:	6829      	ldr	r1, [r5, #0]
 800975a:	291d      	cmp	r1, #29
 800975c:	d82c      	bhi.n	80097b8 <__sflush_r+0xb8>
 800975e:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <__sflush_r+0x108>)
 8009760:	40ca      	lsrs	r2, r1
 8009762:	07d6      	lsls	r6, r2, #31
 8009764:	d528      	bpl.n	80097b8 <__sflush_r+0xb8>
 8009766:	2200      	movs	r2, #0
 8009768:	6062      	str	r2, [r4, #4]
 800976a:	04d9      	lsls	r1, r3, #19
 800976c:	6922      	ldr	r2, [r4, #16]
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	d504      	bpl.n	800977c <__sflush_r+0x7c>
 8009772:	1c42      	adds	r2, r0, #1
 8009774:	d101      	bne.n	800977a <__sflush_r+0x7a>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b903      	cbnz	r3, 800977c <__sflush_r+0x7c>
 800977a:	6560      	str	r0, [r4, #84]	; 0x54
 800977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977e:	602f      	str	r7, [r5, #0]
 8009780:	2900      	cmp	r1, #0
 8009782:	d0ca      	beq.n	800971a <__sflush_r+0x1a>
 8009784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009788:	4299      	cmp	r1, r3
 800978a:	d002      	beq.n	8009792 <__sflush_r+0x92>
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f9d5 	bl	8009b3c <_free_r>
 8009792:	2000      	movs	r0, #0
 8009794:	6360      	str	r0, [r4, #52]	; 0x34
 8009796:	e7c1      	b.n	800971c <__sflush_r+0x1c>
 8009798:	6a21      	ldr	r1, [r4, #32]
 800979a:	2301      	movs	r3, #1
 800979c:	4628      	mov	r0, r5
 800979e:	47b0      	blx	r6
 80097a0:	1c41      	adds	r1, r0, #1
 80097a2:	d1c7      	bne.n	8009734 <__sflush_r+0x34>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c4      	beq.n	8009734 <__sflush_r+0x34>
 80097aa:	2b1d      	cmp	r3, #29
 80097ac:	d001      	beq.n	80097b2 <__sflush_r+0xb2>
 80097ae:	2b16      	cmp	r3, #22
 80097b0:	d101      	bne.n	80097b6 <__sflush_r+0xb6>
 80097b2:	602f      	str	r7, [r5, #0]
 80097b4:	e7b1      	b.n	800971a <__sflush_r+0x1a>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e7ad      	b.n	800971c <__sflush_r+0x1c>
 80097c0:	690f      	ldr	r7, [r1, #16]
 80097c2:	2f00      	cmp	r7, #0
 80097c4:	d0a9      	beq.n	800971a <__sflush_r+0x1a>
 80097c6:	0793      	lsls	r3, r2, #30
 80097c8:	680e      	ldr	r6, [r1, #0]
 80097ca:	bf08      	it	eq
 80097cc:	694b      	ldreq	r3, [r1, #20]
 80097ce:	600f      	str	r7, [r1, #0]
 80097d0:	bf18      	it	ne
 80097d2:	2300      	movne	r3, #0
 80097d4:	eba6 0807 	sub.w	r8, r6, r7
 80097d8:	608b      	str	r3, [r1, #8]
 80097da:	f1b8 0f00 	cmp.w	r8, #0
 80097de:	dd9c      	ble.n	800971a <__sflush_r+0x1a>
 80097e0:	6a21      	ldr	r1, [r4, #32]
 80097e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097e4:	4643      	mov	r3, r8
 80097e6:	463a      	mov	r2, r7
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b0      	blx	r6
 80097ec:	2800      	cmp	r0, #0
 80097ee:	dc06      	bgt.n	80097fe <__sflush_r+0xfe>
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	e78e      	b.n	800971c <__sflush_r+0x1c>
 80097fe:	4407      	add	r7, r0
 8009800:	eba8 0800 	sub.w	r8, r8, r0
 8009804:	e7e9      	b.n	80097da <__sflush_r+0xda>
 8009806:	bf00      	nop
 8009808:	20400001 	.word	0x20400001

0800980c <_fflush_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	690b      	ldr	r3, [r1, #16]
 8009810:	4605      	mov	r5, r0
 8009812:	460c      	mov	r4, r1
 8009814:	b913      	cbnz	r3, 800981c <_fflush_r+0x10>
 8009816:	2500      	movs	r5, #0
 8009818:	4628      	mov	r0, r5
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	b118      	cbz	r0, 8009826 <_fflush_r+0x1a>
 800981e:	6983      	ldr	r3, [r0, #24]
 8009820:	b90b      	cbnz	r3, 8009826 <_fflush_r+0x1a>
 8009822:	f000 f887 	bl	8009934 <__sinit>
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <_fflush_r+0x6c>)
 8009828:	429c      	cmp	r4, r3
 800982a:	d11b      	bne.n	8009864 <_fflush_r+0x58>
 800982c:	686c      	ldr	r4, [r5, #4]
 800982e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0ef      	beq.n	8009816 <_fflush_r+0xa>
 8009836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009838:	07d0      	lsls	r0, r2, #31
 800983a:	d404      	bmi.n	8009846 <_fflush_r+0x3a>
 800983c:	0599      	lsls	r1, r3, #22
 800983e:	d402      	bmi.n	8009846 <_fflush_r+0x3a>
 8009840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009842:	f000 f915 	bl	8009a70 <__retarget_lock_acquire_recursive>
 8009846:	4628      	mov	r0, r5
 8009848:	4621      	mov	r1, r4
 800984a:	f7ff ff59 	bl	8009700 <__sflush_r>
 800984e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009850:	07da      	lsls	r2, r3, #31
 8009852:	4605      	mov	r5, r0
 8009854:	d4e0      	bmi.n	8009818 <_fflush_r+0xc>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	059b      	lsls	r3, r3, #22
 800985a:	d4dd      	bmi.n	8009818 <_fflush_r+0xc>
 800985c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985e:	f000 f908 	bl	8009a72 <__retarget_lock_release_recursive>
 8009862:	e7d9      	b.n	8009818 <_fflush_r+0xc>
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <_fflush_r+0x70>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d101      	bne.n	800986e <_fflush_r+0x62>
 800986a:	68ac      	ldr	r4, [r5, #8]
 800986c:	e7df      	b.n	800982e <_fflush_r+0x22>
 800986e:	4b04      	ldr	r3, [pc, #16]	; (8009880 <_fflush_r+0x74>)
 8009870:	429c      	cmp	r4, r3
 8009872:	bf08      	it	eq
 8009874:	68ec      	ldreq	r4, [r5, #12]
 8009876:	e7da      	b.n	800982e <_fflush_r+0x22>
 8009878:	0800ab2c 	.word	0x0800ab2c
 800987c:	0800ab4c 	.word	0x0800ab4c
 8009880:	0800ab0c 	.word	0x0800ab0c

08009884 <std>:
 8009884:	2300      	movs	r3, #0
 8009886:	b510      	push	{r4, lr}
 8009888:	4604      	mov	r4, r0
 800988a:	e9c0 3300 	strd	r3, r3, [r0]
 800988e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009892:	6083      	str	r3, [r0, #8]
 8009894:	8181      	strh	r1, [r0, #12]
 8009896:	6643      	str	r3, [r0, #100]	; 0x64
 8009898:	81c2      	strh	r2, [r0, #14]
 800989a:	6183      	str	r3, [r0, #24]
 800989c:	4619      	mov	r1, r3
 800989e:	2208      	movs	r2, #8
 80098a0:	305c      	adds	r0, #92	; 0x5c
 80098a2:	f7ff fd89 	bl	80093b8 <memset>
 80098a6:	4b05      	ldr	r3, [pc, #20]	; (80098bc <std+0x38>)
 80098a8:	6263      	str	r3, [r4, #36]	; 0x24
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <std+0x3c>)
 80098ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <std+0x40>)
 80098b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <std+0x44>)
 80098b4:	6224      	str	r4, [r4, #32]
 80098b6:	6323      	str	r3, [r4, #48]	; 0x30
 80098b8:	bd10      	pop	{r4, pc}
 80098ba:	bf00      	nop
 80098bc:	0800a5d5 	.word	0x0800a5d5
 80098c0:	0800a5f7 	.word	0x0800a5f7
 80098c4:	0800a62f 	.word	0x0800a62f
 80098c8:	0800a653 	.word	0x0800a653

080098cc <_cleanup_r>:
 80098cc:	4901      	ldr	r1, [pc, #4]	; (80098d4 <_cleanup_r+0x8>)
 80098ce:	f000 b8af 	b.w	8009a30 <_fwalk_reent>
 80098d2:	bf00      	nop
 80098d4:	0800980d 	.word	0x0800980d

080098d8 <__sfmoreglue>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	1e4a      	subs	r2, r1, #1
 80098dc:	2568      	movs	r5, #104	; 0x68
 80098de:	4355      	muls	r5, r2
 80098e0:	460e      	mov	r6, r1
 80098e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098e6:	f000 f979 	bl	8009bdc <_malloc_r>
 80098ea:	4604      	mov	r4, r0
 80098ec:	b140      	cbz	r0, 8009900 <__sfmoreglue+0x28>
 80098ee:	2100      	movs	r1, #0
 80098f0:	e9c0 1600 	strd	r1, r6, [r0]
 80098f4:	300c      	adds	r0, #12
 80098f6:	60a0      	str	r0, [r4, #8]
 80098f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098fc:	f7ff fd5c 	bl	80093b8 <memset>
 8009900:	4620      	mov	r0, r4
 8009902:	bd70      	pop	{r4, r5, r6, pc}

08009904 <__sfp_lock_acquire>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__sfp_lock_acquire+0x8>)
 8009906:	f000 b8b3 	b.w	8009a70 <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20008e88 	.word	0x20008e88

08009910 <__sfp_lock_release>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__sfp_lock_release+0x8>)
 8009912:	f000 b8ae 	b.w	8009a72 <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20008e88 	.word	0x20008e88

0800991c <__sinit_lock_acquire>:
 800991c:	4801      	ldr	r0, [pc, #4]	; (8009924 <__sinit_lock_acquire+0x8>)
 800991e:	f000 b8a7 	b.w	8009a70 <__retarget_lock_acquire_recursive>
 8009922:	bf00      	nop
 8009924:	20008e83 	.word	0x20008e83

08009928 <__sinit_lock_release>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__sinit_lock_release+0x8>)
 800992a:	f000 b8a2 	b.w	8009a72 <__retarget_lock_release_recursive>
 800992e:	bf00      	nop
 8009930:	20008e83 	.word	0x20008e83

08009934 <__sinit>:
 8009934:	b510      	push	{r4, lr}
 8009936:	4604      	mov	r4, r0
 8009938:	f7ff fff0 	bl	800991c <__sinit_lock_acquire>
 800993c:	69a3      	ldr	r3, [r4, #24]
 800993e:	b11b      	cbz	r3, 8009948 <__sinit+0x14>
 8009940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009944:	f7ff bff0 	b.w	8009928 <__sinit_lock_release>
 8009948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800994c:	6523      	str	r3, [r4, #80]	; 0x50
 800994e:	4b13      	ldr	r3, [pc, #76]	; (800999c <__sinit+0x68>)
 8009950:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <__sinit+0x6c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	62a2      	str	r2, [r4, #40]	; 0x28
 8009956:	42a3      	cmp	r3, r4
 8009958:	bf04      	itt	eq
 800995a:	2301      	moveq	r3, #1
 800995c:	61a3      	streq	r3, [r4, #24]
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f820 	bl	80099a4 <__sfp>
 8009964:	6060      	str	r0, [r4, #4]
 8009966:	4620      	mov	r0, r4
 8009968:	f000 f81c 	bl	80099a4 <__sfp>
 800996c:	60a0      	str	r0, [r4, #8]
 800996e:	4620      	mov	r0, r4
 8009970:	f000 f818 	bl	80099a4 <__sfp>
 8009974:	2200      	movs	r2, #0
 8009976:	60e0      	str	r0, [r4, #12]
 8009978:	2104      	movs	r1, #4
 800997a:	6860      	ldr	r0, [r4, #4]
 800997c:	f7ff ff82 	bl	8009884 <std>
 8009980:	68a0      	ldr	r0, [r4, #8]
 8009982:	2201      	movs	r2, #1
 8009984:	2109      	movs	r1, #9
 8009986:	f7ff ff7d 	bl	8009884 <std>
 800998a:	68e0      	ldr	r0, [r4, #12]
 800998c:	2202      	movs	r2, #2
 800998e:	2112      	movs	r1, #18
 8009990:	f7ff ff78 	bl	8009884 <std>
 8009994:	2301      	movs	r3, #1
 8009996:	61a3      	str	r3, [r4, #24]
 8009998:	e7d2      	b.n	8009940 <__sinit+0xc>
 800999a:	bf00      	nop
 800999c:	0800ab08 	.word	0x0800ab08
 80099a0:	080098cd 	.word	0x080098cd

080099a4 <__sfp>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	4607      	mov	r7, r0
 80099a8:	f7ff ffac 	bl	8009904 <__sfp_lock_acquire>
 80099ac:	4b1e      	ldr	r3, [pc, #120]	; (8009a28 <__sfp+0x84>)
 80099ae:	681e      	ldr	r6, [r3, #0]
 80099b0:	69b3      	ldr	r3, [r6, #24]
 80099b2:	b913      	cbnz	r3, 80099ba <__sfp+0x16>
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff ffbd 	bl	8009934 <__sinit>
 80099ba:	3648      	adds	r6, #72	; 0x48
 80099bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	d503      	bpl.n	80099cc <__sfp+0x28>
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	b30b      	cbz	r3, 8009a0c <__sfp+0x68>
 80099c8:	6836      	ldr	r6, [r6, #0]
 80099ca:	e7f7      	b.n	80099bc <__sfp+0x18>
 80099cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099d0:	b9d5      	cbnz	r5, 8009a08 <__sfp+0x64>
 80099d2:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <__sfp+0x88>)
 80099d4:	60e3      	str	r3, [r4, #12]
 80099d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099da:	6665      	str	r5, [r4, #100]	; 0x64
 80099dc:	f000 f847 	bl	8009a6e <__retarget_lock_init_recursive>
 80099e0:	f7ff ff96 	bl	8009910 <__sfp_lock_release>
 80099e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099ec:	6025      	str	r5, [r4, #0]
 80099ee:	61a5      	str	r5, [r4, #24]
 80099f0:	2208      	movs	r2, #8
 80099f2:	4629      	mov	r1, r5
 80099f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099f8:	f7ff fcde 	bl	80093b8 <memset>
 80099fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a04:	4620      	mov	r0, r4
 8009a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a08:	3468      	adds	r4, #104	; 0x68
 8009a0a:	e7d9      	b.n	80099c0 <__sfp+0x1c>
 8009a0c:	2104      	movs	r1, #4
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f7ff ff62 	bl	80098d8 <__sfmoreglue>
 8009a14:	4604      	mov	r4, r0
 8009a16:	6030      	str	r0, [r6, #0]
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1d5      	bne.n	80099c8 <__sfp+0x24>
 8009a1c:	f7ff ff78 	bl	8009910 <__sfp_lock_release>
 8009a20:	230c      	movs	r3, #12
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	e7ee      	b.n	8009a04 <__sfp+0x60>
 8009a26:	bf00      	nop
 8009a28:	0800ab08 	.word	0x0800ab08
 8009a2c:	ffff0001 	.word	0xffff0001

08009a30 <_fwalk_reent>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4606      	mov	r6, r0
 8009a36:	4688      	mov	r8, r1
 8009a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a3c:	2700      	movs	r7, #0
 8009a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a42:	f1b9 0901 	subs.w	r9, r9, #1
 8009a46:	d505      	bpl.n	8009a54 <_fwalk_reent+0x24>
 8009a48:	6824      	ldr	r4, [r4, #0]
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d1f7      	bne.n	8009a3e <_fwalk_reent+0xe>
 8009a4e:	4638      	mov	r0, r7
 8009a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a54:	89ab      	ldrh	r3, [r5, #12]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d907      	bls.n	8009a6a <_fwalk_reent+0x3a>
 8009a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	d003      	beq.n	8009a6a <_fwalk_reent+0x3a>
 8009a62:	4629      	mov	r1, r5
 8009a64:	4630      	mov	r0, r6
 8009a66:	47c0      	blx	r8
 8009a68:	4307      	orrs	r7, r0
 8009a6a:	3568      	adds	r5, #104	; 0x68
 8009a6c:	e7e9      	b.n	8009a42 <_fwalk_reent+0x12>

08009a6e <__retarget_lock_init_recursive>:
 8009a6e:	4770      	bx	lr

08009a70 <__retarget_lock_acquire_recursive>:
 8009a70:	4770      	bx	lr

08009a72 <__retarget_lock_release_recursive>:
 8009a72:	4770      	bx	lr

08009a74 <__swhatbuf_r>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	460e      	mov	r6, r1
 8009a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	b096      	sub	sp, #88	; 0x58
 8009a80:	4614      	mov	r4, r2
 8009a82:	461d      	mov	r5, r3
 8009a84:	da07      	bge.n	8009a96 <__swhatbuf_r+0x22>
 8009a86:	2300      	movs	r3, #0
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	89b3      	ldrh	r3, [r6, #12]
 8009a8c:	061a      	lsls	r2, r3, #24
 8009a8e:	d410      	bmi.n	8009ab2 <__swhatbuf_r+0x3e>
 8009a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a94:	e00e      	b.n	8009ab4 <__swhatbuf_r+0x40>
 8009a96:	466a      	mov	r2, sp
 8009a98:	f000 fe02 	bl	800a6a0 <_fstat_r>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	dbf2      	blt.n	8009a86 <__swhatbuf_r+0x12>
 8009aa0:	9a01      	ldr	r2, [sp, #4]
 8009aa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009aa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009aaa:	425a      	negs	r2, r3
 8009aac:	415a      	adcs	r2, r3
 8009aae:	602a      	str	r2, [r5, #0]
 8009ab0:	e7ee      	b.n	8009a90 <__swhatbuf_r+0x1c>
 8009ab2:	2340      	movs	r3, #64	; 0x40
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	b016      	add	sp, #88	; 0x58
 8009aba:	bd70      	pop	{r4, r5, r6, pc}

08009abc <__smakebuf_r>:
 8009abc:	898b      	ldrh	r3, [r1, #12]
 8009abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ac0:	079d      	lsls	r5, r3, #30
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	d507      	bpl.n	8009ad8 <__smakebuf_r+0x1c>
 8009ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}
 8009ad8:	ab01      	add	r3, sp, #4
 8009ada:	466a      	mov	r2, sp
 8009adc:	f7ff ffca 	bl	8009a74 <__swhatbuf_r>
 8009ae0:	9900      	ldr	r1, [sp, #0]
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f000 f879 	bl	8009bdc <_malloc_r>
 8009aea:	b948      	cbnz	r0, 8009b00 <__smakebuf_r+0x44>
 8009aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af0:	059a      	lsls	r2, r3, #22
 8009af2:	d4ef      	bmi.n	8009ad4 <__smakebuf_r+0x18>
 8009af4:	f023 0303 	bic.w	r3, r3, #3
 8009af8:	f043 0302 	orr.w	r3, r3, #2
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	e7e3      	b.n	8009ac8 <__smakebuf_r+0xc>
 8009b00:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <__smakebuf_r+0x7c>)
 8009b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	9b00      	ldr	r3, [sp, #0]
 8009b10:	6163      	str	r3, [r4, #20]
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	6120      	str	r0, [r4, #16]
 8009b16:	b15b      	cbz	r3, 8009b30 <__smakebuf_r+0x74>
 8009b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f000 fdd1 	bl	800a6c4 <_isatty_r>
 8009b22:	b128      	cbz	r0, 8009b30 <__smakebuf_r+0x74>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f023 0303 	bic.w	r3, r3, #3
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	89a0      	ldrh	r0, [r4, #12]
 8009b32:	4305      	orrs	r5, r0
 8009b34:	81a5      	strh	r5, [r4, #12]
 8009b36:	e7cd      	b.n	8009ad4 <__smakebuf_r+0x18>
 8009b38:	080098cd 	.word	0x080098cd

08009b3c <_free_r>:
 8009b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d048      	beq.n	8009bd4 <_free_r+0x98>
 8009b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b46:	9001      	str	r0, [sp, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b4e:	bfb8      	it	lt
 8009b50:	18e4      	addlt	r4, r4, r3
 8009b52:	f000 fdf3 	bl	800a73c <__malloc_lock>
 8009b56:	4a20      	ldr	r2, [pc, #128]	; (8009bd8 <_free_r+0x9c>)
 8009b58:	9801      	ldr	r0, [sp, #4]
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	b933      	cbnz	r3, 8009b6e <_free_r+0x32>
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	6014      	str	r4, [r2, #0]
 8009b64:	b003      	add	sp, #12
 8009b66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b6a:	f000 bded 	b.w	800a748 <__malloc_unlock>
 8009b6e:	42a3      	cmp	r3, r4
 8009b70:	d90b      	bls.n	8009b8a <_free_r+0x4e>
 8009b72:	6821      	ldr	r1, [r4, #0]
 8009b74:	1862      	adds	r2, r4, r1
 8009b76:	4293      	cmp	r3, r2
 8009b78:	bf04      	itt	eq
 8009b7a:	681a      	ldreq	r2, [r3, #0]
 8009b7c:	685b      	ldreq	r3, [r3, #4]
 8009b7e:	6063      	str	r3, [r4, #4]
 8009b80:	bf04      	itt	eq
 8009b82:	1852      	addeq	r2, r2, r1
 8009b84:	6022      	streq	r2, [r4, #0]
 8009b86:	602c      	str	r4, [r5, #0]
 8009b88:	e7ec      	b.n	8009b64 <_free_r+0x28>
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b10b      	cbz	r3, 8009b94 <_free_r+0x58>
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d9fa      	bls.n	8009b8a <_free_r+0x4e>
 8009b94:	6811      	ldr	r1, [r2, #0]
 8009b96:	1855      	adds	r5, r2, r1
 8009b98:	42a5      	cmp	r5, r4
 8009b9a:	d10b      	bne.n	8009bb4 <_free_r+0x78>
 8009b9c:	6824      	ldr	r4, [r4, #0]
 8009b9e:	4421      	add	r1, r4
 8009ba0:	1854      	adds	r4, r2, r1
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	d1dd      	bne.n	8009b64 <_free_r+0x28>
 8009ba8:	681c      	ldr	r4, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	6053      	str	r3, [r2, #4]
 8009bae:	4421      	add	r1, r4
 8009bb0:	6011      	str	r1, [r2, #0]
 8009bb2:	e7d7      	b.n	8009b64 <_free_r+0x28>
 8009bb4:	d902      	bls.n	8009bbc <_free_r+0x80>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	e7d3      	b.n	8009b64 <_free_r+0x28>
 8009bbc:	6825      	ldr	r5, [r4, #0]
 8009bbe:	1961      	adds	r1, r4, r5
 8009bc0:	428b      	cmp	r3, r1
 8009bc2:	bf04      	itt	eq
 8009bc4:	6819      	ldreq	r1, [r3, #0]
 8009bc6:	685b      	ldreq	r3, [r3, #4]
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	bf04      	itt	eq
 8009bcc:	1949      	addeq	r1, r1, r5
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	6054      	str	r4, [r2, #4]
 8009bd2:	e7c7      	b.n	8009b64 <_free_r+0x28>
 8009bd4:	b003      	add	sp, #12
 8009bd6:	bd30      	pop	{r4, r5, pc}
 8009bd8:	20004118 	.word	0x20004118

08009bdc <_malloc_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	1ccd      	adds	r5, r1, #3
 8009be0:	f025 0503 	bic.w	r5, r5, #3
 8009be4:	3508      	adds	r5, #8
 8009be6:	2d0c      	cmp	r5, #12
 8009be8:	bf38      	it	cc
 8009bea:	250c      	movcc	r5, #12
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	4606      	mov	r6, r0
 8009bf0:	db01      	blt.n	8009bf6 <_malloc_r+0x1a>
 8009bf2:	42a9      	cmp	r1, r5
 8009bf4:	d903      	bls.n	8009bfe <_malloc_r+0x22>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	6033      	str	r3, [r6, #0]
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bfe:	f000 fd9d 	bl	800a73c <__malloc_lock>
 8009c02:	4921      	ldr	r1, [pc, #132]	; (8009c88 <_malloc_r+0xac>)
 8009c04:	680a      	ldr	r2, [r1, #0]
 8009c06:	4614      	mov	r4, r2
 8009c08:	b99c      	cbnz	r4, 8009c32 <_malloc_r+0x56>
 8009c0a:	4f20      	ldr	r7, [pc, #128]	; (8009c8c <_malloc_r+0xb0>)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	b923      	cbnz	r3, 8009c1a <_malloc_r+0x3e>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4630      	mov	r0, r6
 8009c14:	f000 fcce 	bl	800a5b4 <_sbrk_r>
 8009c18:	6038      	str	r0, [r7, #0]
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 fcc9 	bl	800a5b4 <_sbrk_r>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d123      	bne.n	8009c6e <_malloc_r+0x92>
 8009c26:	230c      	movs	r3, #12
 8009c28:	6033      	str	r3, [r6, #0]
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f000 fd8c 	bl	800a748 <__malloc_unlock>
 8009c30:	e7e3      	b.n	8009bfa <_malloc_r+0x1e>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	1b5b      	subs	r3, r3, r5
 8009c36:	d417      	bmi.n	8009c68 <_malloc_r+0x8c>
 8009c38:	2b0b      	cmp	r3, #11
 8009c3a:	d903      	bls.n	8009c44 <_malloc_r+0x68>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	441c      	add	r4, r3
 8009c40:	6025      	str	r5, [r4, #0]
 8009c42:	e004      	b.n	8009c4e <_malloc_r+0x72>
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	42a2      	cmp	r2, r4
 8009c48:	bf0c      	ite	eq
 8009c4a:	600b      	streq	r3, [r1, #0]
 8009c4c:	6053      	strne	r3, [r2, #4]
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f000 fd7a 	bl	800a748 <__malloc_unlock>
 8009c54:	f104 000b 	add.w	r0, r4, #11
 8009c58:	1d23      	adds	r3, r4, #4
 8009c5a:	f020 0007 	bic.w	r0, r0, #7
 8009c5e:	1ac2      	subs	r2, r0, r3
 8009c60:	d0cc      	beq.n	8009bfc <_malloc_r+0x20>
 8009c62:	1a1b      	subs	r3, r3, r0
 8009c64:	50a3      	str	r3, [r4, r2]
 8009c66:	e7c9      	b.n	8009bfc <_malloc_r+0x20>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	6864      	ldr	r4, [r4, #4]
 8009c6c:	e7cc      	b.n	8009c08 <_malloc_r+0x2c>
 8009c6e:	1cc4      	adds	r4, r0, #3
 8009c70:	f024 0403 	bic.w	r4, r4, #3
 8009c74:	42a0      	cmp	r0, r4
 8009c76:	d0e3      	beq.n	8009c40 <_malloc_r+0x64>
 8009c78:	1a21      	subs	r1, r4, r0
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f000 fc9a 	bl	800a5b4 <_sbrk_r>
 8009c80:	3001      	adds	r0, #1
 8009c82:	d1dd      	bne.n	8009c40 <_malloc_r+0x64>
 8009c84:	e7cf      	b.n	8009c26 <_malloc_r+0x4a>
 8009c86:	bf00      	nop
 8009c88:	20004118 	.word	0x20004118
 8009c8c:	2000411c 	.word	0x2000411c

08009c90 <__ssputs_r>:
 8009c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	688e      	ldr	r6, [r1, #8]
 8009c96:	429e      	cmp	r6, r3
 8009c98:	4682      	mov	sl, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	d838      	bhi.n	8009d14 <__ssputs_r+0x84>
 8009ca2:	898a      	ldrh	r2, [r1, #12]
 8009ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ca8:	d032      	beq.n	8009d10 <__ssputs_r+0x80>
 8009caa:	6825      	ldr	r5, [r4, #0]
 8009cac:	6909      	ldr	r1, [r1, #16]
 8009cae:	eba5 0901 	sub.w	r9, r5, r1
 8009cb2:	6965      	ldr	r5, [r4, #20]
 8009cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	444b      	add	r3, r9
 8009cc0:	106d      	asrs	r5, r5, #1
 8009cc2:	429d      	cmp	r5, r3
 8009cc4:	bf38      	it	cc
 8009cc6:	461d      	movcc	r5, r3
 8009cc8:	0553      	lsls	r3, r2, #21
 8009cca:	d531      	bpl.n	8009d30 <__ssputs_r+0xa0>
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7ff ff85 	bl	8009bdc <_malloc_r>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b950      	cbnz	r0, 8009cec <__ssputs_r+0x5c>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	f8ca 3000 	str.w	r3, [sl]
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cec:	6921      	ldr	r1, [r4, #16]
 8009cee:	464a      	mov	r2, r9
 8009cf0:	f7ff fb54 	bl	800939c <memcpy>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	6126      	str	r6, [r4, #16]
 8009d02:	6165      	str	r5, [r4, #20]
 8009d04:	444e      	add	r6, r9
 8009d06:	eba5 0509 	sub.w	r5, r5, r9
 8009d0a:	6026      	str	r6, [r4, #0]
 8009d0c:	60a5      	str	r5, [r4, #8]
 8009d0e:	463e      	mov	r6, r7
 8009d10:	42be      	cmp	r6, r7
 8009d12:	d900      	bls.n	8009d16 <__ssputs_r+0x86>
 8009d14:	463e      	mov	r6, r7
 8009d16:	4632      	mov	r2, r6
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	f000 fcf4 	bl	800a708 <memmove>
 8009d20:	68a3      	ldr	r3, [r4, #8]
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	1b9b      	subs	r3, r3, r6
 8009d26:	4432      	add	r2, r6
 8009d28:	60a3      	str	r3, [r4, #8]
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7db      	b.n	8009ce8 <__ssputs_r+0x58>
 8009d30:	462a      	mov	r2, r5
 8009d32:	f000 fd0f 	bl	800a754 <_realloc_r>
 8009d36:	4606      	mov	r6, r0
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1e1      	bne.n	8009d00 <__ssputs_r+0x70>
 8009d3c:	6921      	ldr	r1, [r4, #16]
 8009d3e:	4650      	mov	r0, sl
 8009d40:	f7ff fefc 	bl	8009b3c <_free_r>
 8009d44:	e7c7      	b.n	8009cd6 <__ssputs_r+0x46>
	...

08009d48 <_svfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4698      	mov	r8, r3
 8009d4e:	898b      	ldrh	r3, [r1, #12]
 8009d50:	061b      	lsls	r3, r3, #24
 8009d52:	b09d      	sub	sp, #116	; 0x74
 8009d54:	4607      	mov	r7, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	d50e      	bpl.n	8009d7a <_svfiprintf_r+0x32>
 8009d5c:	690b      	ldr	r3, [r1, #16]
 8009d5e:	b963      	cbnz	r3, 8009d7a <_svfiprintf_r+0x32>
 8009d60:	2140      	movs	r1, #64	; 0x40
 8009d62:	f7ff ff3b 	bl	8009bdc <_malloc_r>
 8009d66:	6028      	str	r0, [r5, #0]
 8009d68:	6128      	str	r0, [r5, #16]
 8009d6a:	b920      	cbnz	r0, 8009d76 <_svfiprintf_r+0x2e>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e0d1      	b.n	8009f1a <_svfiprintf_r+0x1d2>
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	616b      	str	r3, [r5, #20]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d88:	2330      	movs	r3, #48	; 0x30
 8009d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f34 <_svfiprintf_r+0x1ec>
 8009d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d92:	f04f 0901 	mov.w	r9, #1
 8009d96:	4623      	mov	r3, r4
 8009d98:	469a      	mov	sl, r3
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	b10a      	cbz	r2, 8009da4 <_svfiprintf_r+0x5c>
 8009da0:	2a25      	cmp	r2, #37	; 0x25
 8009da2:	d1f9      	bne.n	8009d98 <_svfiprintf_r+0x50>
 8009da4:	ebba 0b04 	subs.w	fp, sl, r4
 8009da8:	d00b      	beq.n	8009dc2 <_svfiprintf_r+0x7a>
 8009daa:	465b      	mov	r3, fp
 8009dac:	4622      	mov	r2, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff ff6d 	bl	8009c90 <__ssputs_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	f000 80aa 	beq.w	8009f10 <_svfiprintf_r+0x1c8>
 8009dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbe:	445a      	add	r2, fp
 8009dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80a2 	beq.w	8009f10 <_svfiprintf_r+0x1c8>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd6:	f10a 0a01 	add.w	sl, sl, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de2:	931a      	str	r3, [sp, #104]	; 0x68
 8009de4:	4654      	mov	r4, sl
 8009de6:	2205      	movs	r2, #5
 8009de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dec:	4851      	ldr	r0, [pc, #324]	; (8009f34 <_svfiprintf_r+0x1ec>)
 8009dee:	f7f6 f9f7 	bl	80001e0 <memchr>
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	b9d8      	cbnz	r0, 8009e2e <_svfiprintf_r+0xe6>
 8009df6:	06d0      	lsls	r0, r2, #27
 8009df8:	bf44      	itt	mi
 8009dfa:	2320      	movmi	r3, #32
 8009dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e00:	0711      	lsls	r1, r2, #28
 8009e02:	bf44      	itt	mi
 8009e04:	232b      	movmi	r3, #43	; 0x2b
 8009e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e10:	d015      	beq.n	8009e3e <_svfiprintf_r+0xf6>
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	4654      	mov	r4, sl
 8009e16:	2000      	movs	r0, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e22:	3b30      	subs	r3, #48	; 0x30
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	d94e      	bls.n	8009ec6 <_svfiprintf_r+0x17e>
 8009e28:	b1b0      	cbz	r0, 8009e58 <_svfiprintf_r+0x110>
 8009e2a:	9207      	str	r2, [sp, #28]
 8009e2c:	e014      	b.n	8009e58 <_svfiprintf_r+0x110>
 8009e2e:	eba0 0308 	sub.w	r3, r0, r8
 8009e32:	fa09 f303 	lsl.w	r3, r9, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	e7d2      	b.n	8009de4 <_svfiprintf_r+0x9c>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	1d19      	adds	r1, r3, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9103      	str	r1, [sp, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbb      	ittet	lt
 8009e4a:	425b      	neglt	r3, r3
 8009e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e50:	9307      	strge	r3, [sp, #28]
 8009e52:	9307      	strlt	r3, [sp, #28]
 8009e54:	bfb8      	it	lt
 8009e56:	9204      	strlt	r2, [sp, #16]
 8009e58:	7823      	ldrb	r3, [r4, #0]
 8009e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5c:	d10c      	bne.n	8009e78 <_svfiprintf_r+0x130>
 8009e5e:	7863      	ldrb	r3, [r4, #1]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d135      	bne.n	8009ed0 <_svfiprintf_r+0x188>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	1d1a      	adds	r2, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	9203      	str	r2, [sp, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfb8      	it	lt
 8009e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e74:	3402      	adds	r4, #2
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f44 <_svfiprintf_r+0x1fc>
 8009e7c:	7821      	ldrb	r1, [r4, #0]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	4650      	mov	r0, sl
 8009e82:	f7f6 f9ad 	bl	80001e0 <memchr>
 8009e86:	b140      	cbz	r0, 8009e9a <_svfiprintf_r+0x152>
 8009e88:	2340      	movs	r3, #64	; 0x40
 8009e8a:	eba0 000a 	sub.w	r0, r0, sl
 8009e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	4303      	orrs	r3, r0
 8009e96:	3401      	adds	r4, #1
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	4826      	ldr	r0, [pc, #152]	; (8009f38 <_svfiprintf_r+0x1f0>)
 8009ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	f7f6 f99b 	bl	80001e0 <memchr>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d038      	beq.n	8009f20 <_svfiprintf_r+0x1d8>
 8009eae:	4b23      	ldr	r3, [pc, #140]	; (8009f3c <_svfiprintf_r+0x1f4>)
 8009eb0:	bb1b      	cbnz	r3, 8009efa <_svfiprintf_r+0x1b2>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	3307      	adds	r3, #7
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	3308      	adds	r3, #8
 8009ebc:	9303      	str	r3, [sp, #12]
 8009ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec0:	4433      	add	r3, r6
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	e767      	b.n	8009d96 <_svfiprintf_r+0x4e>
 8009ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eca:	460c      	mov	r4, r1
 8009ecc:	2001      	movs	r0, #1
 8009ece:	e7a5      	b.n	8009e1c <_svfiprintf_r+0xd4>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4620      	mov	r0, r4
 8009ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee2:	3a30      	subs	r2, #48	; 0x30
 8009ee4:	2a09      	cmp	r2, #9
 8009ee6:	d903      	bls.n	8009ef0 <_svfiprintf_r+0x1a8>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0c5      	beq.n	8009e78 <_svfiprintf_r+0x130>
 8009eec:	9105      	str	r1, [sp, #20]
 8009eee:	e7c3      	b.n	8009e78 <_svfiprintf_r+0x130>
 8009ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7f0      	b.n	8009edc <_svfiprintf_r+0x194>
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	462a      	mov	r2, r5
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <_svfiprintf_r+0x1f8>)
 8009f02:	a904      	add	r1, sp, #16
 8009f04:	4638      	mov	r0, r7
 8009f06:	f3af 8000 	nop.w
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	d1d6      	bne.n	8009ebe <_svfiprintf_r+0x176>
 8009f10:	89ab      	ldrh	r3, [r5, #12]
 8009f12:	065b      	lsls	r3, r3, #25
 8009f14:	f53f af2c 	bmi.w	8009d70 <_svfiprintf_r+0x28>
 8009f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1a:	b01d      	add	sp, #116	; 0x74
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	ab03      	add	r3, sp, #12
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	462a      	mov	r2, r5
 8009f26:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <_svfiprintf_r+0x1f8>)
 8009f28:	a904      	add	r1, sp, #16
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f000 f9d4 	bl	800a2d8 <_printf_i>
 8009f30:	e7eb      	b.n	8009f0a <_svfiprintf_r+0x1c2>
 8009f32:	bf00      	nop
 8009f34:	0800ab6c 	.word	0x0800ab6c
 8009f38:	0800ab76 	.word	0x0800ab76
 8009f3c:	00000000 	.word	0x00000000
 8009f40:	08009c91 	.word	0x08009c91
 8009f44:	0800ab72 	.word	0x0800ab72

08009f48 <__sfputc_r>:
 8009f48:	6893      	ldr	r3, [r2, #8]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	b410      	push	{r4}
 8009f50:	6093      	str	r3, [r2, #8]
 8009f52:	da08      	bge.n	8009f66 <__sfputc_r+0x1e>
 8009f54:	6994      	ldr	r4, [r2, #24]
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	db01      	blt.n	8009f5e <__sfputc_r+0x16>
 8009f5a:	290a      	cmp	r1, #10
 8009f5c:	d103      	bne.n	8009f66 <__sfputc_r+0x1e>
 8009f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f62:	f7ff bb0d 	b.w	8009580 <__swbuf_r>
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	1c58      	adds	r0, r3, #1
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	7019      	strb	r1, [r3, #0]
 8009f6e:	4608      	mov	r0, r1
 8009f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <__sfputs_r>:
 8009f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f78:	4606      	mov	r6, r0
 8009f7a:	460f      	mov	r7, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	18d5      	adds	r5, r2, r3
 8009f80:	42ac      	cmp	r4, r5
 8009f82:	d101      	bne.n	8009f88 <__sfputs_r+0x12>
 8009f84:	2000      	movs	r0, #0
 8009f86:	e007      	b.n	8009f98 <__sfputs_r+0x22>
 8009f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8c:	463a      	mov	r2, r7
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ffda 	bl	8009f48 <__sfputc_r>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d1f3      	bne.n	8009f80 <__sfputs_r+0xa>
 8009f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f9c <_vfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	b09d      	sub	sp, #116	; 0x74
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	4698      	mov	r8, r3
 8009fa8:	4606      	mov	r6, r0
 8009faa:	b118      	cbz	r0, 8009fb4 <_vfiprintf_r+0x18>
 8009fac:	6983      	ldr	r3, [r0, #24]
 8009fae:	b90b      	cbnz	r3, 8009fb4 <_vfiprintf_r+0x18>
 8009fb0:	f7ff fcc0 	bl	8009934 <__sinit>
 8009fb4:	4b89      	ldr	r3, [pc, #548]	; (800a1dc <_vfiprintf_r+0x240>)
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	d11b      	bne.n	8009ff2 <_vfiprintf_r+0x56>
 8009fba:	6875      	ldr	r5, [r6, #4]
 8009fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fbe:	07d9      	lsls	r1, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_vfiprintf_r+0x32>
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	059a      	lsls	r2, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_vfiprintf_r+0x32>
 8009fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fca:	f7ff fd51 	bl	8009a70 <__retarget_lock_acquire_recursive>
 8009fce:	89ab      	ldrh	r3, [r5, #12]
 8009fd0:	071b      	lsls	r3, r3, #28
 8009fd2:	d501      	bpl.n	8009fd8 <_vfiprintf_r+0x3c>
 8009fd4:	692b      	ldr	r3, [r5, #16]
 8009fd6:	b9eb      	cbnz	r3, 800a014 <_vfiprintf_r+0x78>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7ff fb22 	bl	8009624 <__swsetup_r>
 8009fe0:	b1c0      	cbz	r0, 800a014 <_vfiprintf_r+0x78>
 8009fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe4:	07dc      	lsls	r4, r3, #31
 8009fe6:	d50e      	bpl.n	800a006 <_vfiprintf_r+0x6a>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	b01d      	add	sp, #116	; 0x74
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	4b7b      	ldr	r3, [pc, #492]	; (800a1e0 <_vfiprintf_r+0x244>)
 8009ff4:	429d      	cmp	r5, r3
 8009ff6:	d101      	bne.n	8009ffc <_vfiprintf_r+0x60>
 8009ff8:	68b5      	ldr	r5, [r6, #8]
 8009ffa:	e7df      	b.n	8009fbc <_vfiprintf_r+0x20>
 8009ffc:	4b79      	ldr	r3, [pc, #484]	; (800a1e4 <_vfiprintf_r+0x248>)
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf08      	it	eq
 800a002:	68f5      	ldreq	r5, [r6, #12]
 800a004:	e7da      	b.n	8009fbc <_vfiprintf_r+0x20>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	0598      	lsls	r0, r3, #22
 800a00a:	d4ed      	bmi.n	8009fe8 <_vfiprintf_r+0x4c>
 800a00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00e:	f7ff fd30 	bl	8009a72 <__retarget_lock_release_recursive>
 800a012:	e7e9      	b.n	8009fe8 <_vfiprintf_r+0x4c>
 800a014:	2300      	movs	r3, #0
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	2320      	movs	r3, #32
 800a01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a022:	2330      	movs	r3, #48	; 0x30
 800a024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1e8 <_vfiprintf_r+0x24c>
 800a028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a02c:	f04f 0901 	mov.w	r9, #1
 800a030:	4623      	mov	r3, r4
 800a032:	469a      	mov	sl, r3
 800a034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a038:	b10a      	cbz	r2, 800a03e <_vfiprintf_r+0xa2>
 800a03a:	2a25      	cmp	r2, #37	; 0x25
 800a03c:	d1f9      	bne.n	800a032 <_vfiprintf_r+0x96>
 800a03e:	ebba 0b04 	subs.w	fp, sl, r4
 800a042:	d00b      	beq.n	800a05c <_vfiprintf_r+0xc0>
 800a044:	465b      	mov	r3, fp
 800a046:	4622      	mov	r2, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7ff ff93 	bl	8009f76 <__sfputs_r>
 800a050:	3001      	adds	r0, #1
 800a052:	f000 80aa 	beq.w	800a1aa <_vfiprintf_r+0x20e>
 800a056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a058:	445a      	add	r2, fp
 800a05a:	9209      	str	r2, [sp, #36]	; 0x24
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80a2 	beq.w	800a1aa <_vfiprintf_r+0x20e>
 800a066:	2300      	movs	r3, #0
 800a068:	f04f 32ff 	mov.w	r2, #4294967295
 800a06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a07c:	931a      	str	r3, [sp, #104]	; 0x68
 800a07e:	4654      	mov	r4, sl
 800a080:	2205      	movs	r2, #5
 800a082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a086:	4858      	ldr	r0, [pc, #352]	; (800a1e8 <_vfiprintf_r+0x24c>)
 800a088:	f7f6 f8aa 	bl	80001e0 <memchr>
 800a08c:	9a04      	ldr	r2, [sp, #16]
 800a08e:	b9d8      	cbnz	r0, 800a0c8 <_vfiprintf_r+0x12c>
 800a090:	06d1      	lsls	r1, r2, #27
 800a092:	bf44      	itt	mi
 800a094:	2320      	movmi	r3, #32
 800a096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09a:	0713      	lsls	r3, r2, #28
 800a09c:	bf44      	itt	mi
 800a09e:	232b      	movmi	r3, #43	; 0x2b
 800a0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0aa:	d015      	beq.n	800a0d8 <_vfiprintf_r+0x13c>
 800a0ac:	9a07      	ldr	r2, [sp, #28]
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0bc:	3b30      	subs	r3, #48	; 0x30
 800a0be:	2b09      	cmp	r3, #9
 800a0c0:	d94e      	bls.n	800a160 <_vfiprintf_r+0x1c4>
 800a0c2:	b1b0      	cbz	r0, 800a0f2 <_vfiprintf_r+0x156>
 800a0c4:	9207      	str	r2, [sp, #28]
 800a0c6:	e014      	b.n	800a0f2 <_vfiprintf_r+0x156>
 800a0c8:	eba0 0308 	sub.w	r3, r0, r8
 800a0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	46a2      	mov	sl, r4
 800a0d6:	e7d2      	b.n	800a07e <_vfiprintf_r+0xe2>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	1d19      	adds	r1, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	9103      	str	r1, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfbb      	ittet	lt
 800a0e4:	425b      	neglt	r3, r3
 800a0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ea:	9307      	strge	r3, [sp, #28]
 800a0ec:	9307      	strlt	r3, [sp, #28]
 800a0ee:	bfb8      	it	lt
 800a0f0:	9204      	strlt	r2, [sp, #16]
 800a0f2:	7823      	ldrb	r3, [r4, #0]
 800a0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f6:	d10c      	bne.n	800a112 <_vfiprintf_r+0x176>
 800a0f8:	7863      	ldrb	r3, [r4, #1]
 800a0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fc:	d135      	bne.n	800a16a <_vfiprintf_r+0x1ce>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	1d1a      	adds	r2, r3, #4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	9203      	str	r2, [sp, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfb8      	it	lt
 800a10a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a10e:	3402      	adds	r4, #2
 800a110:	9305      	str	r3, [sp, #20]
 800a112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1f8 <_vfiprintf_r+0x25c>
 800a116:	7821      	ldrb	r1, [r4, #0]
 800a118:	2203      	movs	r2, #3
 800a11a:	4650      	mov	r0, sl
 800a11c:	f7f6 f860 	bl	80001e0 <memchr>
 800a120:	b140      	cbz	r0, 800a134 <_vfiprintf_r+0x198>
 800a122:	2340      	movs	r3, #64	; 0x40
 800a124:	eba0 000a 	sub.w	r0, r0, sl
 800a128:	fa03 f000 	lsl.w	r0, r3, r0
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	4303      	orrs	r3, r0
 800a130:	3401      	adds	r4, #1
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a138:	482c      	ldr	r0, [pc, #176]	; (800a1ec <_vfiprintf_r+0x250>)
 800a13a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a13e:	2206      	movs	r2, #6
 800a140:	f7f6 f84e 	bl	80001e0 <memchr>
 800a144:	2800      	cmp	r0, #0
 800a146:	d03f      	beq.n	800a1c8 <_vfiprintf_r+0x22c>
 800a148:	4b29      	ldr	r3, [pc, #164]	; (800a1f0 <_vfiprintf_r+0x254>)
 800a14a:	bb1b      	cbnz	r3, 800a194 <_vfiprintf_r+0x1f8>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3307      	adds	r3, #7
 800a150:	f023 0307 	bic.w	r3, r3, #7
 800a154:	3308      	adds	r3, #8
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	443b      	add	r3, r7
 800a15c:	9309      	str	r3, [sp, #36]	; 0x24
 800a15e:	e767      	b.n	800a030 <_vfiprintf_r+0x94>
 800a160:	fb0c 3202 	mla	r2, ip, r2, r3
 800a164:	460c      	mov	r4, r1
 800a166:	2001      	movs	r0, #1
 800a168:	e7a5      	b.n	800a0b6 <_vfiprintf_r+0x11a>
 800a16a:	2300      	movs	r3, #0
 800a16c:	3401      	adds	r4, #1
 800a16e:	9305      	str	r3, [sp, #20]
 800a170:	4619      	mov	r1, r3
 800a172:	f04f 0c0a 	mov.w	ip, #10
 800a176:	4620      	mov	r0, r4
 800a178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a17c:	3a30      	subs	r2, #48	; 0x30
 800a17e:	2a09      	cmp	r2, #9
 800a180:	d903      	bls.n	800a18a <_vfiprintf_r+0x1ee>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c5      	beq.n	800a112 <_vfiprintf_r+0x176>
 800a186:	9105      	str	r1, [sp, #20]
 800a188:	e7c3      	b.n	800a112 <_vfiprintf_r+0x176>
 800a18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a18e:	4604      	mov	r4, r0
 800a190:	2301      	movs	r3, #1
 800a192:	e7f0      	b.n	800a176 <_vfiprintf_r+0x1da>
 800a194:	ab03      	add	r3, sp, #12
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	462a      	mov	r2, r5
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <_vfiprintf_r+0x258>)
 800a19c:	a904      	add	r1, sp, #16
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f3af 8000 	nop.w
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	1c78      	adds	r0, r7, #1
 800a1a8:	d1d6      	bne.n	800a158 <_vfiprintf_r+0x1bc>
 800a1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ac:	07d9      	lsls	r1, r3, #31
 800a1ae:	d405      	bmi.n	800a1bc <_vfiprintf_r+0x220>
 800a1b0:	89ab      	ldrh	r3, [r5, #12]
 800a1b2:	059a      	lsls	r2, r3, #22
 800a1b4:	d402      	bmi.n	800a1bc <_vfiprintf_r+0x220>
 800a1b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b8:	f7ff fc5b 	bl	8009a72 <__retarget_lock_release_recursive>
 800a1bc:	89ab      	ldrh	r3, [r5, #12]
 800a1be:	065b      	lsls	r3, r3, #25
 800a1c0:	f53f af12 	bmi.w	8009fe8 <_vfiprintf_r+0x4c>
 800a1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c6:	e711      	b.n	8009fec <_vfiprintf_r+0x50>
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <_vfiprintf_r+0x258>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f000 f880 	bl	800a2d8 <_printf_i>
 800a1d8:	e7e4      	b.n	800a1a4 <_vfiprintf_r+0x208>
 800a1da:	bf00      	nop
 800a1dc:	0800ab2c 	.word	0x0800ab2c
 800a1e0:	0800ab4c 	.word	0x0800ab4c
 800a1e4:	0800ab0c 	.word	0x0800ab0c
 800a1e8:	0800ab6c 	.word	0x0800ab6c
 800a1ec:	0800ab76 	.word	0x0800ab76
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	08009f77 	.word	0x08009f77
 800a1f8:	0800ab72 	.word	0x0800ab72

0800a1fc <_printf_common>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	4616      	mov	r6, r2
 800a202:	4699      	mov	r9, r3
 800a204:	688a      	ldr	r2, [r1, #8]
 800a206:	690b      	ldr	r3, [r1, #16]
 800a208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a20c:	4293      	cmp	r3, r2
 800a20e:	bfb8      	it	lt
 800a210:	4613      	movlt	r3, r2
 800a212:	6033      	str	r3, [r6, #0]
 800a214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a218:	4607      	mov	r7, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	b10a      	cbz	r2, 800a222 <_printf_common+0x26>
 800a21e:	3301      	adds	r3, #1
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	0699      	lsls	r1, r3, #26
 800a226:	bf42      	ittt	mi
 800a228:	6833      	ldrmi	r3, [r6, #0]
 800a22a:	3302      	addmi	r3, #2
 800a22c:	6033      	strmi	r3, [r6, #0]
 800a22e:	6825      	ldr	r5, [r4, #0]
 800a230:	f015 0506 	ands.w	r5, r5, #6
 800a234:	d106      	bne.n	800a244 <_printf_common+0x48>
 800a236:	f104 0a19 	add.w	sl, r4, #25
 800a23a:	68e3      	ldr	r3, [r4, #12]
 800a23c:	6832      	ldr	r2, [r6, #0]
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc26      	bgt.n	800a292 <_printf_common+0x96>
 800a244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a248:	1e13      	subs	r3, r2, #0
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	bf18      	it	ne
 800a24e:	2301      	movne	r3, #1
 800a250:	0692      	lsls	r2, r2, #26
 800a252:	d42b      	bmi.n	800a2ac <_printf_common+0xb0>
 800a254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a258:	4649      	mov	r1, r9
 800a25a:	4638      	mov	r0, r7
 800a25c:	47c0      	blx	r8
 800a25e:	3001      	adds	r0, #1
 800a260:	d01e      	beq.n	800a2a0 <_printf_common+0xa4>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	68e5      	ldr	r5, [r4, #12]
 800a266:	6832      	ldr	r2, [r6, #0]
 800a268:	f003 0306 	and.w	r3, r3, #6
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	bf08      	it	eq
 800a270:	1aad      	subeq	r5, r5, r2
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	6922      	ldr	r2, [r4, #16]
 800a276:	bf0c      	ite	eq
 800a278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a27c:	2500      	movne	r5, #0
 800a27e:	4293      	cmp	r3, r2
 800a280:	bfc4      	itt	gt
 800a282:	1a9b      	subgt	r3, r3, r2
 800a284:	18ed      	addgt	r5, r5, r3
 800a286:	2600      	movs	r6, #0
 800a288:	341a      	adds	r4, #26
 800a28a:	42b5      	cmp	r5, r6
 800a28c:	d11a      	bne.n	800a2c4 <_printf_common+0xc8>
 800a28e:	2000      	movs	r0, #0
 800a290:	e008      	b.n	800a2a4 <_printf_common+0xa8>
 800a292:	2301      	movs	r3, #1
 800a294:	4652      	mov	r2, sl
 800a296:	4649      	mov	r1, r9
 800a298:	4638      	mov	r0, r7
 800a29a:	47c0      	blx	r8
 800a29c:	3001      	adds	r0, #1
 800a29e:	d103      	bne.n	800a2a8 <_printf_common+0xac>
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	e7c6      	b.n	800a23a <_printf_common+0x3e>
 800a2ac:	18e1      	adds	r1, r4, r3
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	2030      	movs	r0, #48	; 0x30
 800a2b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2b6:	4422      	add	r2, r4
 800a2b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	e7c7      	b.n	800a254 <_printf_common+0x58>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	47c0      	blx	r8
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0e6      	beq.n	800a2a0 <_printf_common+0xa4>
 800a2d2:	3601      	adds	r6, #1
 800a2d4:	e7d9      	b.n	800a28a <_printf_common+0x8e>
	...

0800a2d8 <_printf_i>:
 800a2d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	4691      	mov	r9, r2
 800a2e0:	7e27      	ldrb	r7, [r4, #24]
 800a2e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2e4:	2f78      	cmp	r7, #120	; 0x78
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	469a      	mov	sl, r3
 800a2ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2ee:	d807      	bhi.n	800a300 <_printf_i+0x28>
 800a2f0:	2f62      	cmp	r7, #98	; 0x62
 800a2f2:	d80a      	bhi.n	800a30a <_printf_i+0x32>
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	f000 80d8 	beq.w	800a4aa <_printf_i+0x1d2>
 800a2fa:	2f58      	cmp	r7, #88	; 0x58
 800a2fc:	f000 80a3 	beq.w	800a446 <_printf_i+0x16e>
 800a300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a308:	e03a      	b.n	800a380 <_printf_i+0xa8>
 800a30a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a30e:	2b15      	cmp	r3, #21
 800a310:	d8f6      	bhi.n	800a300 <_printf_i+0x28>
 800a312:	a001      	add	r0, pc, #4	; (adr r0, 800a318 <_printf_i+0x40>)
 800a314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a385 	.word	0x0800a385
 800a320:	0800a301 	.word	0x0800a301
 800a324:	0800a301 	.word	0x0800a301
 800a328:	0800a301 	.word	0x0800a301
 800a32c:	0800a301 	.word	0x0800a301
 800a330:	0800a385 	.word	0x0800a385
 800a334:	0800a301 	.word	0x0800a301
 800a338:	0800a301 	.word	0x0800a301
 800a33c:	0800a301 	.word	0x0800a301
 800a340:	0800a301 	.word	0x0800a301
 800a344:	0800a491 	.word	0x0800a491
 800a348:	0800a3b5 	.word	0x0800a3b5
 800a34c:	0800a473 	.word	0x0800a473
 800a350:	0800a301 	.word	0x0800a301
 800a354:	0800a301 	.word	0x0800a301
 800a358:	0800a4b3 	.word	0x0800a4b3
 800a35c:	0800a301 	.word	0x0800a301
 800a360:	0800a3b5 	.word	0x0800a3b5
 800a364:	0800a301 	.word	0x0800a301
 800a368:	0800a301 	.word	0x0800a301
 800a36c:	0800a47b 	.word	0x0800a47b
 800a370:	680b      	ldr	r3, [r1, #0]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	600a      	str	r2, [r1, #0]
 800a378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a37c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a380:	2301      	movs	r3, #1
 800a382:	e0a3      	b.n	800a4cc <_printf_i+0x1f4>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	6808      	ldr	r0, [r1, #0]
 800a388:	062e      	lsls	r6, r5, #24
 800a38a:	f100 0304 	add.w	r3, r0, #4
 800a38e:	d50a      	bpl.n	800a3a6 <_printf_i+0xce>
 800a390:	6805      	ldr	r5, [r0, #0]
 800a392:	600b      	str	r3, [r1, #0]
 800a394:	2d00      	cmp	r5, #0
 800a396:	da03      	bge.n	800a3a0 <_printf_i+0xc8>
 800a398:	232d      	movs	r3, #45	; 0x2d
 800a39a:	426d      	negs	r5, r5
 800a39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a0:	485e      	ldr	r0, [pc, #376]	; (800a51c <_printf_i+0x244>)
 800a3a2:	230a      	movs	r3, #10
 800a3a4:	e019      	b.n	800a3da <_printf_i+0x102>
 800a3a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3aa:	6805      	ldr	r5, [r0, #0]
 800a3ac:	600b      	str	r3, [r1, #0]
 800a3ae:	bf18      	it	ne
 800a3b0:	b22d      	sxthne	r5, r5
 800a3b2:	e7ef      	b.n	800a394 <_printf_i+0xbc>
 800a3b4:	680b      	ldr	r3, [r1, #0]
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	1d18      	adds	r0, r3, #4
 800a3ba:	6008      	str	r0, [r1, #0]
 800a3bc:	0628      	lsls	r0, r5, #24
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0xec>
 800a3c0:	681d      	ldr	r5, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0xf2>
 800a3c4:	0669      	lsls	r1, r5, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0xe8>
 800a3c8:	881d      	ldrh	r5, [r3, #0]
 800a3ca:	4854      	ldr	r0, [pc, #336]	; (800a51c <_printf_i+0x244>)
 800a3cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2308      	moveq	r3, #8
 800a3d2:	230a      	movne	r3, #10
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3da:	6866      	ldr	r6, [r4, #4]
 800a3dc:	60a6      	str	r6, [r4, #8]
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	bfa2      	ittt	ge
 800a3e2:	6821      	ldrge	r1, [r4, #0]
 800a3e4:	f021 0104 	bicge.w	r1, r1, #4
 800a3e8:	6021      	strge	r1, [r4, #0]
 800a3ea:	b90d      	cbnz	r5, 800a3f0 <_printf_i+0x118>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d04d      	beq.n	800a48c <_printf_i+0x1b4>
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a3fa:	5dc7      	ldrb	r7, [r0, r7]
 800a3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a400:	462f      	mov	r7, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	460d      	mov	r5, r1
 800a406:	d9f4      	bls.n	800a3f2 <_printf_i+0x11a>
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d10b      	bne.n	800a424 <_printf_i+0x14c>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	d508      	bpl.n	800a424 <_printf_i+0x14c>
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	6861      	ldr	r1, [r4, #4]
 800a416:	4299      	cmp	r1, r3
 800a418:	bfde      	ittt	le
 800a41a:	2330      	movle	r3, #48	; 0x30
 800a41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a420:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a424:	1b92      	subs	r2, r2, r6
 800a426:	6122      	str	r2, [r4, #16]
 800a428:	f8cd a000 	str.w	sl, [sp]
 800a42c:	464b      	mov	r3, r9
 800a42e:	aa03      	add	r2, sp, #12
 800a430:	4621      	mov	r1, r4
 800a432:	4640      	mov	r0, r8
 800a434:	f7ff fee2 	bl	800a1fc <_printf_common>
 800a438:	3001      	adds	r0, #1
 800a43a:	d14c      	bne.n	800a4d6 <_printf_i+0x1fe>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	b004      	add	sp, #16
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	4835      	ldr	r0, [pc, #212]	; (800a51c <_printf_i+0x244>)
 800a448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	680e      	ldr	r6, [r1, #0]
 800a450:	061f      	lsls	r7, r3, #24
 800a452:	f856 5b04 	ldr.w	r5, [r6], #4
 800a456:	600e      	str	r6, [r1, #0]
 800a458:	d514      	bpl.n	800a484 <_printf_i+0x1ac>
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	bf44      	itt	mi
 800a45e:	f043 0320 	orrmi.w	r3, r3, #32
 800a462:	6023      	strmi	r3, [r4, #0]
 800a464:	b91d      	cbnz	r5, 800a46e <_printf_i+0x196>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	f023 0320 	bic.w	r3, r3, #32
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	2310      	movs	r3, #16
 800a470:	e7b0      	b.n	800a3d4 <_printf_i+0xfc>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f043 0320 	orr.w	r3, r3, #32
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	2378      	movs	r3, #120	; 0x78
 800a47c:	4828      	ldr	r0, [pc, #160]	; (800a520 <_printf_i+0x248>)
 800a47e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a482:	e7e3      	b.n	800a44c <_printf_i+0x174>
 800a484:	065e      	lsls	r6, r3, #25
 800a486:	bf48      	it	mi
 800a488:	b2ad      	uxthmi	r5, r5
 800a48a:	e7e6      	b.n	800a45a <_printf_i+0x182>
 800a48c:	4616      	mov	r6, r2
 800a48e:	e7bb      	b.n	800a408 <_printf_i+0x130>
 800a490:	680b      	ldr	r3, [r1, #0]
 800a492:	6826      	ldr	r6, [r4, #0]
 800a494:	6960      	ldr	r0, [r4, #20]
 800a496:	1d1d      	adds	r5, r3, #4
 800a498:	600d      	str	r5, [r1, #0]
 800a49a:	0635      	lsls	r5, r6, #24
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	d501      	bpl.n	800a4a4 <_printf_i+0x1cc>
 800a4a0:	6018      	str	r0, [r3, #0]
 800a4a2:	e002      	b.n	800a4aa <_printf_i+0x1d2>
 800a4a4:	0671      	lsls	r1, r6, #25
 800a4a6:	d5fb      	bpl.n	800a4a0 <_printf_i+0x1c8>
 800a4a8:	8018      	strh	r0, [r3, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	e7ba      	b.n	800a428 <_printf_i+0x150>
 800a4b2:	680b      	ldr	r3, [r1, #0]
 800a4b4:	1d1a      	adds	r2, r3, #4
 800a4b6:	600a      	str	r2, [r1, #0]
 800a4b8:	681e      	ldr	r6, [r3, #0]
 800a4ba:	6862      	ldr	r2, [r4, #4]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7f5 fe8e 	bl	80001e0 <memchr>
 800a4c4:	b108      	cbz	r0, 800a4ca <_printf_i+0x1f2>
 800a4c6:	1b80      	subs	r0, r0, r6
 800a4c8:	6060      	str	r0, [r4, #4]
 800a4ca:	6863      	ldr	r3, [r4, #4]
 800a4cc:	6123      	str	r3, [r4, #16]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d4:	e7a8      	b.n	800a428 <_printf_i+0x150>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	4632      	mov	r2, r6
 800a4da:	4649      	mov	r1, r9
 800a4dc:	4640      	mov	r0, r8
 800a4de:	47d0      	blx	sl
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d0ab      	beq.n	800a43c <_printf_i+0x164>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	079b      	lsls	r3, r3, #30
 800a4e8:	d413      	bmi.n	800a512 <_printf_i+0x23a>
 800a4ea:	68e0      	ldr	r0, [r4, #12]
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	bfb8      	it	lt
 800a4f2:	4618      	movlt	r0, r3
 800a4f4:	e7a4      	b.n	800a440 <_printf_i+0x168>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	47d0      	blx	sl
 800a500:	3001      	adds	r0, #1
 800a502:	d09b      	beq.n	800a43c <_printf_i+0x164>
 800a504:	3501      	adds	r5, #1
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	9903      	ldr	r1, [sp, #12]
 800a50a:	1a5b      	subs	r3, r3, r1
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dcf2      	bgt.n	800a4f6 <_printf_i+0x21e>
 800a510:	e7eb      	b.n	800a4ea <_printf_i+0x212>
 800a512:	2500      	movs	r5, #0
 800a514:	f104 0619 	add.w	r6, r4, #25
 800a518:	e7f5      	b.n	800a506 <_printf_i+0x22e>
 800a51a:	bf00      	nop
 800a51c:	0800ab7d 	.word	0x0800ab7d
 800a520:	0800ab8e 	.word	0x0800ab8e

0800a524 <_putc_r>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	460d      	mov	r5, r1
 800a528:	4614      	mov	r4, r2
 800a52a:	4606      	mov	r6, r0
 800a52c:	b118      	cbz	r0, 800a536 <_putc_r+0x12>
 800a52e:	6983      	ldr	r3, [r0, #24]
 800a530:	b90b      	cbnz	r3, 800a536 <_putc_r+0x12>
 800a532:	f7ff f9ff 	bl	8009934 <__sinit>
 800a536:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <_putc_r+0x84>)
 800a538:	429c      	cmp	r4, r3
 800a53a:	d124      	bne.n	800a586 <_putc_r+0x62>
 800a53c:	6874      	ldr	r4, [r6, #4]
 800a53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a540:	07d8      	lsls	r0, r3, #31
 800a542:	d405      	bmi.n	800a550 <_putc_r+0x2c>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	0599      	lsls	r1, r3, #22
 800a548:	d402      	bmi.n	800a550 <_putc_r+0x2c>
 800a54a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a54c:	f7ff fa90 	bl	8009a70 <__retarget_lock_acquire_recursive>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	3b01      	subs	r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	da05      	bge.n	800a566 <_putc_r+0x42>
 800a55a:	69a2      	ldr	r2, [r4, #24]
 800a55c:	4293      	cmp	r3, r2
 800a55e:	db1c      	blt.n	800a59a <_putc_r+0x76>
 800a560:	b2eb      	uxtb	r3, r5
 800a562:	2b0a      	cmp	r3, #10
 800a564:	d019      	beq.n	800a59a <_putc_r+0x76>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	701d      	strb	r5, [r3, #0]
 800a56e:	b2ed      	uxtb	r5, r5
 800a570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d405      	bmi.n	800a582 <_putc_r+0x5e>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	059b      	lsls	r3, r3, #22
 800a57a:	d402      	bmi.n	800a582 <_putc_r+0x5e>
 800a57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57e:	f7ff fa78 	bl	8009a72 <__retarget_lock_release_recursive>
 800a582:	4628      	mov	r0, r5
 800a584:	bd70      	pop	{r4, r5, r6, pc}
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <_putc_r+0x88>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d101      	bne.n	800a590 <_putc_r+0x6c>
 800a58c:	68b4      	ldr	r4, [r6, #8]
 800a58e:	e7d6      	b.n	800a53e <_putc_r+0x1a>
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <_putc_r+0x8c>)
 800a592:	429c      	cmp	r4, r3
 800a594:	bf08      	it	eq
 800a596:	68f4      	ldreq	r4, [r6, #12]
 800a598:	e7d1      	b.n	800a53e <_putc_r+0x1a>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4622      	mov	r2, r4
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7fe ffee 	bl	8009580 <__swbuf_r>
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	e7e3      	b.n	800a570 <_putc_r+0x4c>
 800a5a8:	0800ab2c 	.word	0x0800ab2c
 800a5ac:	0800ab4c 	.word	0x0800ab4c
 800a5b0:	0800ab0c 	.word	0x0800ab0c

0800a5b4 <_sbrk_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d06      	ldr	r5, [pc, #24]	; (800a5d0 <_sbrk_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f6 ffe4 	bl	800158c <_sbrk>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_sbrk_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_sbrk_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20008e8c 	.word	0x20008e8c

0800a5d4 <__sread>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5dc:	f000 f8e0 	bl	800a7a0 <_read_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	bfab      	itete	ge
 800a5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5e8:	181b      	addge	r3, r3, r0
 800a5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5ee:	bfac      	ite	ge
 800a5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5f2:	81a3      	strhlt	r3, [r4, #12]
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <__swrite>:
 800a5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	898b      	ldrh	r3, [r1, #12]
 800a5fe:	05db      	lsls	r3, r3, #23
 800a600:	4605      	mov	r5, r0
 800a602:	460c      	mov	r4, r1
 800a604:	4616      	mov	r6, r2
 800a606:	d505      	bpl.n	800a614 <__swrite+0x1e>
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	2302      	movs	r3, #2
 800a60e:	2200      	movs	r2, #0
 800a610:	f000 f868 	bl	800a6e4 <_lseek_r>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	4632      	mov	r2, r6
 800a622:	463b      	mov	r3, r7
 800a624:	4628      	mov	r0, r5
 800a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62a:	f000 b817 	b.w	800a65c <_write_r>

0800a62e <__sseek>:
 800a62e:	b510      	push	{r4, lr}
 800a630:	460c      	mov	r4, r1
 800a632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a636:	f000 f855 	bl	800a6e4 <_lseek_r>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	bf15      	itete	ne
 800a640:	6560      	strne	r0, [r4, #84]	; 0x54
 800a642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a64a:	81a3      	strheq	r3, [r4, #12]
 800a64c:	bf18      	it	ne
 800a64e:	81a3      	strhne	r3, [r4, #12]
 800a650:	bd10      	pop	{r4, pc}

0800a652 <__sclose>:
 800a652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a656:	f000 b813 	b.w	800a680 <_close_r>
	...

0800a65c <_write_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	; (800a67c <_write_r+0x20>)
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f6 fac8 	bl	8000c00 <_write>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_write_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_write_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20008e8c 	.word	0x20008e8c

0800a680 <_close_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d06      	ldr	r5, [pc, #24]	; (800a69c <_close_r+0x1c>)
 800a684:	2300      	movs	r3, #0
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	f7f6 ff49 	bl	8001522 <_close>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_close_r+0x1a>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_close_r+0x1a>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20008e8c 	.word	0x20008e8c

0800a6a0 <_fstat_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d07      	ldr	r5, [pc, #28]	; (800a6c0 <_fstat_r+0x20>)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	f7f6 ff44 	bl	800153a <_fstat>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	d102      	bne.n	800a6bc <_fstat_r+0x1c>
 800a6b6:	682b      	ldr	r3, [r5, #0]
 800a6b8:	b103      	cbz	r3, 800a6bc <_fstat_r+0x1c>
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	bf00      	nop
 800a6c0:	20008e8c 	.word	0x20008e8c

0800a6c4 <_isatty_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d06      	ldr	r5, [pc, #24]	; (800a6e0 <_isatty_r+0x1c>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	f7f6 ff43 	bl	800155a <_isatty>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_isatty_r+0x1a>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_isatty_r+0x1a>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	20008e8c 	.word	0x20008e8c

0800a6e4 <_lseek_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d07      	ldr	r5, [pc, #28]	; (800a704 <_lseek_r+0x20>)
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	602a      	str	r2, [r5, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f7f6 ff3c 	bl	8001570 <_lseek>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_lseek_r+0x1e>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_lseek_r+0x1e>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20008e8c 	.word	0x20008e8c

0800a708 <memmove>:
 800a708:	4288      	cmp	r0, r1
 800a70a:	b510      	push	{r4, lr}
 800a70c:	eb01 0402 	add.w	r4, r1, r2
 800a710:	d902      	bls.n	800a718 <memmove+0x10>
 800a712:	4284      	cmp	r4, r0
 800a714:	4623      	mov	r3, r4
 800a716:	d807      	bhi.n	800a728 <memmove+0x20>
 800a718:	1e43      	subs	r3, r0, #1
 800a71a:	42a1      	cmp	r1, r4
 800a71c:	d008      	beq.n	800a730 <memmove+0x28>
 800a71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a726:	e7f8      	b.n	800a71a <memmove+0x12>
 800a728:	4402      	add	r2, r0
 800a72a:	4601      	mov	r1, r0
 800a72c:	428a      	cmp	r2, r1
 800a72e:	d100      	bne.n	800a732 <memmove+0x2a>
 800a730:	bd10      	pop	{r4, pc}
 800a732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a73a:	e7f7      	b.n	800a72c <memmove+0x24>

0800a73c <__malloc_lock>:
 800a73c:	4801      	ldr	r0, [pc, #4]	; (800a744 <__malloc_lock+0x8>)
 800a73e:	f7ff b997 	b.w	8009a70 <__retarget_lock_acquire_recursive>
 800a742:	bf00      	nop
 800a744:	20008e84 	.word	0x20008e84

0800a748 <__malloc_unlock>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__malloc_unlock+0x8>)
 800a74a:	f7ff b992 	b.w	8009a72 <__retarget_lock_release_recursive>
 800a74e:	bf00      	nop
 800a750:	20008e84 	.word	0x20008e84

0800a754 <_realloc_r>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	4607      	mov	r7, r0
 800a758:	4614      	mov	r4, r2
 800a75a:	460e      	mov	r6, r1
 800a75c:	b921      	cbnz	r1, 800a768 <_realloc_r+0x14>
 800a75e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a762:	4611      	mov	r1, r2
 800a764:	f7ff ba3a 	b.w	8009bdc <_malloc_r>
 800a768:	b922      	cbnz	r2, 800a774 <_realloc_r+0x20>
 800a76a:	f7ff f9e7 	bl	8009b3c <_free_r>
 800a76e:	4625      	mov	r5, r4
 800a770:	4628      	mov	r0, r5
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a774:	f000 f826 	bl	800a7c4 <_malloc_usable_size_r>
 800a778:	42a0      	cmp	r0, r4
 800a77a:	d20f      	bcs.n	800a79c <_realloc_r+0x48>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4638      	mov	r0, r7
 800a780:	f7ff fa2c 	bl	8009bdc <_malloc_r>
 800a784:	4605      	mov	r5, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	d0f2      	beq.n	800a770 <_realloc_r+0x1c>
 800a78a:	4631      	mov	r1, r6
 800a78c:	4622      	mov	r2, r4
 800a78e:	f7fe fe05 	bl	800939c <memcpy>
 800a792:	4631      	mov	r1, r6
 800a794:	4638      	mov	r0, r7
 800a796:	f7ff f9d1 	bl	8009b3c <_free_r>
 800a79a:	e7e9      	b.n	800a770 <_realloc_r+0x1c>
 800a79c:	4635      	mov	r5, r6
 800a79e:	e7e7      	b.n	800a770 <_realloc_r+0x1c>

0800a7a0 <_read_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_read_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f6 fe9a 	bl	80014e8 <_read>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_read_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_read_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20008e8c 	.word	0x20008e8c

0800a7c4 <_malloc_usable_size_r>:
 800a7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c8:	1f18      	subs	r0, r3, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfbc      	itt	lt
 800a7ce:	580b      	ldrlt	r3, [r1, r0]
 800a7d0:	18c0      	addlt	r0, r0, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_init>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_fini>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr
